<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb3cbdf16c699365dc1a2fa7cf6e6eb4d128a87b" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51891460" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9575f-101">
        <see langword="FileSystem" /> 模組包含用於執行檔案、目錄或資料夾及系統等作業的程序。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="9575f-102">
        <see langword="My" /> 功能提供比使用 <see langword="FileSystem" /> 模組更優越的檔案 I/O 作業產能和效能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="9575f-103">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-104">這個模組支援的 Visual Basic 語言關鍵字和存取檔案和資料夾的執行階段程式庫成員。</span><span class="sxs-lookup"><span data-stu-id="9575f-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-105">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="9575f-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md">
      <span data-ttu-id="9575f-106">目錄和檔案摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-106">Directories and Files Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md">
      <span data-ttu-id="9575f-107">輸入和輸出摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-107">Input and Output Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="9575f-108">關鍵字 (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-108">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="9575f-109">Visual Basic 執行階段程式庫成員</span>
      <span class="sxs-lookup">
        <span data-stu-id="9575f-109">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="9575f-110">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-110">Required.</span>
          </span>
          <span data-ttu-id="9575f-111">
            <see langword="String" /> 運算式，用來識別要成為新預設目錄或資料夾的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="9575f-112">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-112">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="9575f-113">如果未指定磁碟機，則 <see langword="ChDir" /> 會變更目前磁碟機上的預設目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-114">變更目前的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-114">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="9575f-115">
            <see langword="My" /> 功能提供了比 <see langword="ChDir" /> 函式更強大的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="9575f-116">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-117">`ChDir`函式會變更預設目錄，但不是在預設的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="9575f-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="9575f-118">例如，如果預設磁碟機 C，下列陳述式會變更磁碟機 D 上的預設目錄，但 C 則保持預設的磁碟機：</span><span class="sxs-lookup"><span data-stu-id="9575f-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="9575f-119">您可以進行相對目錄變更，請輸入兩個句號，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-120">`ChDir`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="9575f-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="9575f-121">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="9575f-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-122">這個範例會使用`ChDir`函式來變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="9575f-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-123">
            <paramref name="Path" /> 是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-123">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-124">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-124">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">
          <span data-ttu-id="9575f-125">如何：在 Visual Basic 中剖析檔案路徑</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-125">How to: Parse File Paths in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">
          <span data-ttu-id="9575f-126">在 Visual Basic 中建立、刪除和移動檔案和目錄</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-127">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-127">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="9575f-128">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-128">Required.</span>
          </span>
          <span data-ttu-id="9575f-129">指定現有磁碟機的字串運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-129">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="9575f-130">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-130">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="9575f-131">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-131">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-132">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-132">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-133">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="9575f-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="9575f-134">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="9575f-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-135">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="9575f-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="9575f-136">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-137">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-137">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-138">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-138">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="9575f-139">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-139">Required.</span>
          </span>
          <span data-ttu-id="9575f-140">指定現有磁碟機的字串運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-140">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="9575f-141">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-141">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="9575f-142">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-142">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-143">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-143">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-144">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="9575f-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="9575f-145">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="9575f-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-146">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="9575f-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="9575f-147">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-148">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-148">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-149">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-149">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-150">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-150">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="9575f-151">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="9575f-152">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9575f-153">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="9575f-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="9575f-155">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-156">表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9575f-157">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="9575f-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="9575f-158">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-158">Optional.</span>
          </span>
          <span data-ttu-id="9575f-159">指定現有磁碟機的 <see langword="Char" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-159">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="9575f-160">如果未指定磁碟機，或 <c>Drive</c> 是長度為零的字串 ("")，則 <see langword="CurDir" /> 會傳回目前磁碟機的路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-160">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-161">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-161">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="9575f-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="9575f-163">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-164">表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-164">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9575f-165">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="9575f-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-166">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="9575f-167">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="9575f-168">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9575f-169">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="9575f-170">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="9575f-171">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-172">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-173">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="9575f-174">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="9575f-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="9575f-175">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="9575f-176">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含參數的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-177">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9575f-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="9575f-178">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="9575f-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="9575f-179">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="9575f-180">值</span><span class="sxs-lookup"><span data-stu-id="9575f-180">Value</span></span>|<span data-ttu-id="9575f-181">常數</span><span class="sxs-lookup"><span data-stu-id="9575f-181">Constant</span></span>|<span data-ttu-id="9575f-182">描述</span><span class="sxs-lookup"><span data-stu-id="9575f-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="9575f-183">預設值：</span><span class="sxs-lookup"><span data-stu-id="9575f-183">Default.</span></span> <span data-ttu-id="9575f-184">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="9575f-185">指定唯讀檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="9575f-186">指定隱藏的檔，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="9575f-187">指定系統檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="9575f-188">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9575f-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="9575f-189">指定目錄或資料夾，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="9575f-190">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="9575f-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="9575f-191">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="9575f-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="9575f-192">這些列舉由 Visual Basic 語言，並可用於您的程式碼，而不是實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-193">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="9575f-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-194">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-194">Optional.</span>
          </span>
          <span data-ttu-id="9575f-195">
            <see langword="String" /> 運算式，可指定檔名、目錄或資料夾名稱或磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-195">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="9575f-196">如果找不到 <c>PathName</c>，則會傳回長度為零的字串 (<see langword="&quot;&quot;" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="9575f-197">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-197">Optional.</span>
          </span>
          <span data-ttu-id="9575f-198">列舉類型或數值運算式，其值可指定檔案屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-198">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="9575f-199">如果省略，則 <see langword="Dir" /> 會傳回符合 <c>PathName</c> 的檔案，但是沒有屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-199">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-200">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="9575f-201">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="9575f-202">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-203">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-204">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="9575f-205">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="9575f-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="9575f-206">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="9575f-207">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含任何參數的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-208">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9575f-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="9575f-209">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="9575f-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="9575f-210">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="9575f-211">值</span><span class="sxs-lookup"><span data-stu-id="9575f-211">Value</span></span>|<span data-ttu-id="9575f-212">常數</span><span class="sxs-lookup"><span data-stu-id="9575f-212">Constant</span></span>|<span data-ttu-id="9575f-213">描述</span><span class="sxs-lookup"><span data-stu-id="9575f-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="9575f-214">預設值：</span><span class="sxs-lookup"><span data-stu-id="9575f-214">Default.</span></span> <span data-ttu-id="9575f-215">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="9575f-216">指定唯讀檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="9575f-217">指定隱藏的檔，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="9575f-218">指定系統檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="9575f-219">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="9575f-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="9575f-220">指定目錄或資料夾，以及沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="9575f-221">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="9575f-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="9575f-222">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="9575f-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="9575f-223">這些列舉由 Visual Basic 語言，並可用於您的程式碼來取代實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-224">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="9575f-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-225">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-225">Required.</span>
          </span>
          <span data-ttu-id="9575f-226">包含任何有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-226">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-227">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-228">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-229">使用`EOF`以避免嘗試取得輸入超過檔案結尾所產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="9575f-230">`EOF`函式會傳回`False`直到達到檔案結尾為止。</span><span class="sxs-lookup"><span data-stu-id="9575f-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="9575f-231">使用開啟的檔案`Random`或`Binary`存取`EOF`會傳回`False`直到最後一個執行`FileGet`函式是無法讀取整個記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="9575f-232">使用開啟的檔案`Binary`存取，請嘗試透過檔案使用讀取`Input`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="9575f-233">使用`LOF`並`Loc`函數，而`EOF`讀取二進位檔案時`Input`，或使用`Get`使用時`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="9575f-234">使用開啟的檔案`Output`，`EOF`一律會傳回`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-235">這個範例會使用`EOF`函式來偵測檔案的結尾。</span><span class="sxs-lookup"><span data-stu-id="9575f-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="9575f-236">這個範例假設`Testfile`是文字檔案，其中包含幾行文字。</span><span class="sxs-lookup"><span data-stu-id="9575f-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-237">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-237">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-238">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-238">Required.</span>
          </span>
          <span data-ttu-id="9575f-239">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-239">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="9575f-240">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-240">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-241">傳回列舉類型，表示使用 <see langword="FileOpen" /> 函式開啟的檔案之檔案模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-242">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileAttr" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="9575f-243">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-244">下列列舉類型值表示檔案存取模式：</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-244">The following enumeration values indicate the file access mode:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="9575f-245">值</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-245">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="9575f-246">模式</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-246">Mode</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="9575f-247">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-247">1</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Input" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="9575f-248">2</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-248">2</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Output" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="9575f-249">4</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-249">4</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Random" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="9575f-250">8</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-250">8</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Append" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="9575f-251">32</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-251">32</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Binary" />
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-252">此函數會傳回代表使用開啟的檔案模式的列舉型別`FileOpen`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-253">這個範例會使用`FileAttr`函數來傳回已開啟之檔案的檔案模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-254">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-254">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="9575f-255">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-255">Optional.</span>
          </span>
          <span data-ttu-id="9575f-256">參數陣列，具有 0 個或更多要關閉的通道。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-256">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-257">將輸入/輸出 (I/O) 結果導向使用 <see langword="FileOpen" /> 函式開啟的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-258">
            <see langword="My" /> 提供更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-258">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="9575f-259">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-260">`FileClose`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-261">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-262">如需詳細資訊，請參閱 <<c0> [ 如何： StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何： 將文字寫入檔案以 streamwriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[逐步解說： 中管理檔案和目錄Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="9575f-263">如果您省略`FileNumbers`，開啟的所有作用中檔案`FileOpen`函式會關閉。</span><span class="sxs-lookup"><span data-stu-id="9575f-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="9575f-264">當您關閉已開啟的檔案時`Output`或`Append`，最後的緩衝區的輸出會寫入該檔案的作業系統緩衝區。</span><span class="sxs-lookup"><span data-stu-id="9575f-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="9575f-265">所有的緩衝區空間的封閉型相關聯檔案釋出。</span><span class="sxs-lookup"><span data-stu-id="9575f-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="9575f-266">當`FileClose`函式執行、 其檔案的檔案的關聯數字結尾。</span><span class="sxs-lookup"><span data-stu-id="9575f-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-267">這個範例會使用`FileClose`函式，以關閉 檔案開啟為`Input`。</span><span class="sxs-lookup"><span data-stu-id="9575f-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-268">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-268">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="9575f-269">End 陳述式</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-269">End Statement</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md">
          <span data-ttu-id="9575f-270">Stop 陳述式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-270">Stop Statement (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-271">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-271">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="9575f-272">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-272">Required.</span>
          </span>
          <span data-ttu-id="9575f-273">
            <see langword="String" /> 運算式，指定要複製的檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-273">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="9575f-274">
            <c>Source</c> 可包含原始程式檔的目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-274">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="9575f-275">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-275">Required.</span>
          </span>
          <span data-ttu-id="9575f-276">
            <see langword="String" /> 運算式，指定目標檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-276">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="9575f-277">
            <c>Destination</c> 可包含目的檔案的目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-277">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-278">複製檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-278">Copies a file.</span>
          </span>
          <span data-ttu-id="9575f-279">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileCopy" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="9575f-280">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-281">如果您嘗試使用`FileCopy`函式在目前開啟的檔案，則會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="9575f-282">`FileCopy` 需要完全信任才能在本機的磁碟機上運作。</span><span class="sxs-lookup"><span data-stu-id="9575f-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-283">這個範例會使用`FileCopy`函式複製到另一個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="9575f-284">基於此範例的詳細資訊，假設`SrcFile`是包含資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-285">
            <paramref name="Source" /> 或 <paramref name="Destination" /> 為無效值或尚未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-285">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-286">檔案已經開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-286">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-287">檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-287">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md">
          <span data-ttu-id="9575f-288">如何：在 Visual Basic 中於不同資料夾內建立檔案複本</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">
          <span data-ttu-id="9575f-289">如何：在 Visual Basic 中於相同目錄內建立檔案複本</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">
          <span data-ttu-id="9575f-290">如何：在 Visual Basic 中將目錄複製到另一個目錄</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-290">How to: Copy a Directory to Another Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-291">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-291">Required.</span>
          </span>
          <span data-ttu-id="9575f-292">指定檔名的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-292">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="9575f-293">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-293">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-294">傳回 <see langword="Date" /> 值，表示寫入檔案的日期和時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="9575f-295">相較於 <see langword="FileDateTime" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="9575f-296">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-297">
            <see langword="Date" /> 值，表示建立檔案或上次修改檔案的日期和時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-297">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9575f-298">這個範例會使用`FileDateTime`建立函式來判斷日期和時間的檔案或上次修改檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="9575f-299">格式的日期和時間顯示為基礎的系統地區設定。</span><span class="sxs-lookup"><span data-stu-id="9575f-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-300">
            <paramref name="PathName" /> 無效或包含萬用字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-300">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-301">目標檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-301">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-302">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-302">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-303">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-303">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-304">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-305">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-306">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-306">Required.</span>
          </span>
          <span data-ttu-id="9575f-307">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-307">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-308">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-308">Required.</span>
          </span>
          <span data-ttu-id="9575f-309">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-309">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-310">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-310">Optional.</span>
          </span>
          <span data-ttu-id="9575f-311">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-312">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-312">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-313">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-314">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-315">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-316">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-317">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-318">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-319">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-320">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-321">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-321">Random Mode</span></span>  
 <span data-ttu-id="9575f-322">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-323">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-324">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-325">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-326">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-327">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-328">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-329">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-330">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-331">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-332">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-333">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-334">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-335">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-336">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-337">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-338">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-339">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-340">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-341">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-342">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-343">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-344">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-345">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-346">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-347">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-348">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-349">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-349">Binary Mode</span></span>  
 <span data-ttu-id="9575f-350">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-351">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-352">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-353">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-354">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-355">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-356">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-357">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-358">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-359">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-359">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-360">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-360">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-361">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-361">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-362">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-362">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-363">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-363">Required.</span>
          </span>
          <span data-ttu-id="9575f-364">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-364">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-365">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-365">Required.</span>
          </span>
          <span data-ttu-id="9575f-366">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-366">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-367">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-367">Optional.</span>
          </span>
          <span data-ttu-id="9575f-368">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-369">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-369">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-370">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-371">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-372">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-373">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-374">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-375">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-376">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-377">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-378">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-378">Random Mode</span></span>  
 <span data-ttu-id="9575f-379">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-380">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-381">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-382">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-383">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-384">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-385">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-386">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-387">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-388">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-389">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-390">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-391">如果不使用描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-391">If the descriptor is not used.</span></span> <span data-ttu-id="9575f-392">則的大小和陣列的界限傳遞到`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-393">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-394">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-395">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-396">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-397">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-398">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-399">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-400">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-401">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-402">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-403">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-404">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-405">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-406">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-407">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-407">Binary Mode</span></span>  
 <span data-ttu-id="9575f-408">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-409">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-410">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-411">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-412">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-413">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-414">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-415">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-416">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-417">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-417">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-418">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-419">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-419">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-420">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-420">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-421">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-421">Required.</span>
          </span>
          <span data-ttu-id="9575f-422">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-422">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-423">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-423">Required.</span>
          </span>
          <span data-ttu-id="9575f-424">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-424">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-425">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-425">Optional.</span>
          </span>
          <span data-ttu-id="9575f-426">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-427">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-427">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-428">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-429">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-430">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-431">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-432">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-433">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-434">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-435">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-436">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-436">Random Mode</span></span>  
 <span data-ttu-id="9575f-437">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-438">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-439">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-440">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-441">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-442">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-443">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-444">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-445">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-446">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-447">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-448">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-449">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-450">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-451">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-452">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-453">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-454">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-455">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-456">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-457">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-458">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-459">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-460">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-461">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-462">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-463">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-464">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-464">Binary Mode</span></span>  
 <span data-ttu-id="9575f-465">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-466">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-467">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-468">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-469">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-470">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-471">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-472">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-473">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-474">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-474">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-475">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-475">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-476">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-476">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-477">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-477">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-478">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-478">Required.</span>
          </span>
          <span data-ttu-id="9575f-479">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-479">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-480">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-480">Required.</span>
          </span>
          <span data-ttu-id="9575f-481">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-481">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-482">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-482">Optional.</span>
          </span>
          <span data-ttu-id="9575f-483">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-484">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-484">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-485">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-486">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-487">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-488">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-489">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-490">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-491">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-492">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-493">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-493">Random Mode</span></span>  
 <span data-ttu-id="9575f-494">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-495">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-496">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-497">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-498">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-499">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-500">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-501">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-502">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-503">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-504">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-505">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-506">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-507">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-508">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-509">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-510">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-511">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-512">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-513">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-514">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-515">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-516">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-517">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-518">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-519">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-520">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-521">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-521">Binary Mode</span></span>  
 <span data-ttu-id="9575f-522">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-523">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-524">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-525">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-526">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-527">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-528">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-529">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-530">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-531">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-531">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-532">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-532">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-533">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-533">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-534">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-534">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-535">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-535">Required.</span>
          </span>
          <span data-ttu-id="9575f-536">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-536">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-537">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-537">Required.</span>
          </span>
          <span data-ttu-id="9575f-538">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-538">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-539">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-539">Optional.</span>
          </span>
          <span data-ttu-id="9575f-540">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-541">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-541">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-542">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-543">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-544">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-545">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-546">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-547">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-548">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-549">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-550">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-550">Random Mode</span></span>  
 <span data-ttu-id="9575f-551">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-552">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-553">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-554">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-555">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-556">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-557">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-558">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-559">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-560">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-561">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-562">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-563">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-564">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-565">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-566">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-567">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-568">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-569">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-570">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-571">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-572">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-573">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-574">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-575">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-576">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-577">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-578">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-578">Binary Mode</span></span>  
 <span data-ttu-id="9575f-579">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-580">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-581">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-582">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-583">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-584">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-585">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-586">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-587">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-588">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-588">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-589">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-589">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-590">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-590">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-591">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-591">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-592">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-592">Required.</span>
          </span>
          <span data-ttu-id="9575f-593">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-593">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-594">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-594">Required.</span>
          </span>
          <span data-ttu-id="9575f-595">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-595">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-596">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-596">Optional.</span>
          </span>
          <span data-ttu-id="9575f-597">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-598">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-598">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-599">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-600">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-601">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-602">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-603">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-604">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-605">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-606">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-607">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-607">Random Mode</span></span>  
 <span data-ttu-id="9575f-608">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-609">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-610">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-611">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-612">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-613">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-614">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-615">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-616">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-617">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-618">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-619">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-620">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-621">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-622">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-623">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-624">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-625">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-626">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-627">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-628">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-629">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-630">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-631">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-632">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-633">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-634">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-635">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-635">Binary Mode</span></span>  
 <span data-ttu-id="9575f-636">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-637">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-638">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-639">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-640">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-641">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-642">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-643">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-644">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-645">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-646">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-647">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-647">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-648">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-649">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-649">Required.</span>
          </span>
          <span data-ttu-id="9575f-650">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-651">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-651">Required.</span>
          </span>
          <span data-ttu-id="9575f-652">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-652">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-653">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-653">Optional.</span>
          </span>
          <span data-ttu-id="9575f-654">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-655">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-655">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-656">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-657">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-658">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-659">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-660">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-661">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-662">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-663">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-664">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-664">Random Mode</span></span>  
 <span data-ttu-id="9575f-665">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-666">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-667">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-668">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-669">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-670">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-671">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-672">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-673">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-674">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-675">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-676">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-677">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-678">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-679">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-680">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-681">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-682">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-683">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-684">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-685">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-686">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-687">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-688">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-689">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-690">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-691">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-692">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-692">Binary Mode</span></span>  
 <span data-ttu-id="9575f-693">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-694">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-695">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-696">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-697">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-698">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-699">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-700">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-701">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-702">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-702">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-703">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-703">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-704">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-704">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-705">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-705">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-706">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-706">Required.</span>
          </span>
          <span data-ttu-id="9575f-707">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-708">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-708">Required.</span>
          </span>
          <span data-ttu-id="9575f-709">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-709">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-710">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-710">Optional.</span>
          </span>
          <span data-ttu-id="9575f-711">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-712">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-712">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-713">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-714">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-715">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-716">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-717">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-718">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-719">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-720">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-721">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-721">Random Mode</span></span>  
 <span data-ttu-id="9575f-722">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-723">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-724">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-725">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-726">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-727">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-728">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-729">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-730">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-731">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-732">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-733">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-734">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-735">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-736">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-737">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-738">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-739">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-740">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-741">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-742">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-743">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-744">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-745">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-746">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-747">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-748">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-749">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-749">Binary Mode</span></span>  
 <span data-ttu-id="9575f-750">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-751">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-752">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-753">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-754">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-755">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-756">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-757">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-758">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-759">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-759">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-760">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-760">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-761">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-761">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-762">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-762">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-763">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-763">Required.</span>
          </span>
          <span data-ttu-id="9575f-764">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-764">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-765">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-765">Required.</span>
          </span>
          <span data-ttu-id="9575f-766">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-766">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-767">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-767">Optional.</span>
          </span>
          <span data-ttu-id="9575f-768">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-769">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-769">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-770">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-771">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-772">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-773">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-774">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-775">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-776">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-777">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-778">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-778">Random Mode</span></span>  
 <span data-ttu-id="9575f-779">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-780">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-781">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-782">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-783">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-784">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-785">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-786">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-787">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-788">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-789">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-790">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-791">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-792">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-793">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-794">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-795">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-796">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-797">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-798">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-799">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-800">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-801">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-802">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-803">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-804">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-805">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-806">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-806">Binary Mode</span></span>  
 <span data-ttu-id="9575f-807">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-808">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-809">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-810">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-811">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-812">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-813">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-814">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-815">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-816">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-816">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-817">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-818">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-819">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-820">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-820">Required.</span>
          </span>
          <span data-ttu-id="9575f-821">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-821">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-822">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-822">Required.</span>
          </span>
          <span data-ttu-id="9575f-823">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-823">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-824">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-824">Optional.</span>
          </span>
          <span data-ttu-id="9575f-825">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-826">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-826">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-827">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-828">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-829">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-830">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-831">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-832">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-833">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-834">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-835">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-835">Random Mode</span></span>  
 <span data-ttu-id="9575f-836">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-837">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-838">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-839">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-840">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-841">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-842">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-843">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-844">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-845">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-846">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-847">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-848">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-849">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-850">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-851">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-852">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-853">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-854">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-855">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-856">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-857">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-858">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-859">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-860">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-861">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-862">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-863">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-863">Binary Mode</span></span>  
 <span data-ttu-id="9575f-864">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-865">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-866">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-867">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-868">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-869">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-870">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-871">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-872">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-873">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-873">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-874">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-874">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-875">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-875">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-876">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-876">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-877">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-877">Required.</span>
          </span>
          <span data-ttu-id="9575f-878">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-878">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-879">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-879">Required.</span>
          </span>
          <span data-ttu-id="9575f-880">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-880">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-881">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-881">Optional.</span>
          </span>
          <span data-ttu-id="9575f-882">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-883">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-883">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-884">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-885">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-886">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-887">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-888">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-889">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-890">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-891">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-892">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-892">Random Mode</span></span>  
 <span data-ttu-id="9575f-893">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-894">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-895">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-896">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-897">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-898">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-899">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-900">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-901">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-902">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-903">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-904">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-905">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-906">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-907">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-908">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-909">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-910">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-911">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-912">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-913">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-914">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-915">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-916">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-917">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-918">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-919">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-920">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-920">Binary Mode</span></span>  
 <span data-ttu-id="9575f-921">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-922">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-923">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-924">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-925">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-926">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-927">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-928">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-929">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-930">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-930">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-931">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-931">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-932">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-932">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-933">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-933">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-934">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-934">Required.</span>
          </span>
          <span data-ttu-id="9575f-935">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-935">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-936">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-936">Required.</span>
          </span>
          <span data-ttu-id="9575f-937">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-937">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-938">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-938">Optional.</span>
          </span>
          <span data-ttu-id="9575f-939">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="9575f-940">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-940">Optional.</span>
          </span>
          <span data-ttu-id="9575f-941">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-941">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="9575f-942">指定是否要為字串寫入描述長度的雙位元組描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="9575f-943">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-943">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-944">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-944">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-945">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-946">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-947">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-948">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-949">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-950">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-951">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-952">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-953">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-953">Random Mode</span></span>  
 <span data-ttu-id="9575f-954">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-955">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-956">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-957">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-958">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-959">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-960">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-961">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-962">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-963">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-964">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-965">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-966">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-967">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-968">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-969">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-970">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-971">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-972">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-973">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-974">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-975">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-976">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-977">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-978">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-979">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-980">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-981">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-981">Binary Mode</span></span>  
 <span data-ttu-id="9575f-982">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-983">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-984">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-985">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-986">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-987">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-988">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-989">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-990">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-991">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-991">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-992">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-992">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-993">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-993">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-994">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-994">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-995">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-995">Required.</span>
          </span>
          <span data-ttu-id="9575f-996">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-996">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-997">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-997">Required.</span>
          </span>
          <span data-ttu-id="9575f-998">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-998">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-999">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-999">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1000">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="9575f-1001">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1001">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1002">只有在編寫陣列時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1002">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="9575f-1003">指定是否將陣列視為動態 (Dynamic)，以及是否有必要指定描述陣列大小和界限的陣列描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="9575f-1004">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1004">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1005">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1005">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="9575f-1006">指定是否要為字串寫入描述長度的雙位元組描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="9575f-1007">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1007">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1008">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1008">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-1009">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="9575f-1010">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1011">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1012">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="9575f-1013">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1014">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-1015">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-1016">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1017">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1017">Random Mode</span></span>  
 <span data-ttu-id="9575f-1018">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1019">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1020">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1021">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-1022">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1023">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1024">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-1025">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1026">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="9575f-1027">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1028">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="9575f-1029">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="9575f-1030">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="9575f-1031">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1032">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1033">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1034">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="9575f-1035">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="9575f-1036">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="9575f-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="9575f-1037">200 個位元組的資料: (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-1038">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="9575f-1039">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-1040">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-1041">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1042">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="9575f-1043">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-1044">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1045">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1045">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1046">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1047">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1048">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1049">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1050">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="9575f-1051">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="9575f-1052">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1053">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="9575f-1054">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1055">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1055">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1056">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1056">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-1057">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1057">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1058">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1058">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1059">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1059">Required.</span>
          </span>
          <span data-ttu-id="9575f-1060">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1060">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1061">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1061">Required.</span>
          </span>
          <span data-ttu-id="9575f-1062">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1062">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1063">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1063">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1064">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1065">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1065">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="9575f-1066">相較於 <see langword="FileGetObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="9575f-1067">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1068">`FileGetObject`而不是使用函式`FileGet`若要避免模稜兩可在編譯時期，如果型別`Object`傳回而不是另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="9575f-1069">如果您想要寫出`Variant`型別，`FileGetObject`需要。</span><span class="sxs-lookup"><span data-stu-id="9575f-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="9575f-1070">有疑問，如果您使用物件來作為第二個參數，一律建議您改用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="9575f-1071">`FileGetObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1072">讀取的資料`FileGetObject`通常會使用寫入`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="9575f-1073">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1074">如果您省略`RecordNumber`，`FileGetObject`讀取最後一個之後的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或最後一個指向`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1075">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1075">Random Mode</span></span>  
 <span data-ttu-id="9575f-1076">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1077">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGetObject`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1078">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開頭之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1079">因為填補資料的數量無法精確地判斷，所以最好有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="9575f-1080">正在讀取到變數是否為字串，預設`FileGetObject`讀取雙位元組描述元包含字串的長度，然後再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1081">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1082">Visual Basic 6.0 和更早版本支援固定長度字串和讀取檔案時，長度的描述項不會寫入。</span><span class="sxs-lookup"><span data-stu-id="9575f-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="9575f-1083">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1084">如果正在讀入的變數陣列，則所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1085">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1086">其長度等於 2，再加上 8 倍的維度數目： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="9575f-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="9575f-1087">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟：</span><span class="sxs-lookup"><span data-stu-id="9575f-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="9575f-1088">218 個位元組會分散，如下所示： 18 位元組描述元 (2 + 8 \* 2)，以及 100 個位元組 (5 \* 10 \* 4) 的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="9575f-1089">`FileGetObject` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="9575f-1090">在磁碟上，動態陣列中的使用者定義型別 (以`FilePutObject`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="9575f-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="9575f-1091">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目，包括任何陣列和其描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="9575f-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>類別，可指出的大小字串寫入時的結構中的字串欄位套用至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1093">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1093">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1094">在開啟的檔案`Binary`模式中，所有`Random`套用規則，但有下列例外：</span><span class="sxs-lookup"><span data-stu-id="9575f-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="9575f-1095">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1096">`FileGetObject` 所有連續讀取變數，從磁碟，也就是記錄之間的不帶填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1097">在結構中，陣列以外的所有陣列`FileGetObject`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="9575f-1098">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="9575f-1099">`FileGetObject` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1100">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-1101">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-1102">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1103">下列範例讀入測試檔案中的記錄，然後擷取它。</span><span class="sxs-lookup"><span data-stu-id="9575f-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-1104">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1104">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1105">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1105">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-1106">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1106">Required.</span>
          </span>
          <span data-ttu-id="9575f-1107">指定檔案的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1107">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="9575f-1108">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1108">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1109">傳回 <see langword="Long" /> 值，指定檔案的長度 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="9575f-1110">相較於 <see langword="FileLen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="9575f-1111">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-1112">
            <see langword="Long" /> 指定檔案長度的值 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1112">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1113">如果指定的檔案時，開啟`FileLen`函式呼叫，傳回的值代表檔案的大小，在它已開啟的時間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-1114">若要取得目前已開啟之檔案的長度，請使用`LOF`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1115">這個範例會使用`FileLen`函數來傳回檔案的長度，以位元組為單位。</span><span class="sxs-lookup"><span data-stu-id="9575f-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="9575f-1116">基於此範例的詳細資訊，假設`TestFile`是包含某些資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-1117">檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1117">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-1118">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1118">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1119">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1119">Required.</span>
          </span>
          <span data-ttu-id="9575f-1120">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1120">Any valid file number.</span>
          </span>
          <span data-ttu-id="9575f-1121">使用 <see langword="FreeFile" /> 函式取得下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="9575f-1122">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1122">Required.</span>
          </span>
          <span data-ttu-id="9575f-1123">
            <see langword="String" /> 運算式，可指定檔名，也可能包括目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1123">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="9575f-1124">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1124">Required.</span>
          </span>
          <span data-ttu-id="9575f-1125">指定檔案模式的列舉類型：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="9575f-1126">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="9575f-1127">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1127">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1128">指定開啟檔案上允許的作業之列舉類型：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="9575f-1129">預設值為 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1129">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="9575f-1130">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="9575f-1131">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1131">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1132">指定開啟的檔案上其他處理序不允許之作業的列舉類型：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="9575f-1133">預設值為 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1133">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="9575f-1134">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="9575f-1135">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1135">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1136">數字小於或等於 32,767 (位元組)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1136">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="9575f-1137">對於為隨機存取開啟的檔案而言，這個值是資料錄長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1137">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="9575f-1138">對於循序檔案而言，這個值是緩衝的字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1138">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1139">開啟要當做輸入或輸出的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1139">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="9575f-1140">相較於 <see langword="FileOpen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="9575f-1141">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1142">`FileOpen`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-1143">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-1144">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-1145">您必須開啟檔案，才能在其上執行任何 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="9575f-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="9575f-1146">`FileOpen` 會針對 I/O 配置緩衝區至檔案，並判斷權限與緩衝區使用的模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-1147">寫入至檔案時，應用程式可能要建立檔案，如果嘗試寫入的檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="9575f-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="9575f-1148">若要這樣做，它會需要權限的 建立檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="9575f-1149">不過，如果指定的檔案`FileName`存在，應用程式需求`Write`只對檔案本身的權限。</span><span class="sxs-lookup"><span data-stu-id="9575f-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="9575f-1150">盡量，以協助改善安全性、 部署和授與期間建立檔案的任一處`Write`該檔案的權限唯一的而不是整個目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="9575f-1151">若要改善安全性，請將資料寫入使用者目錄，而不是目錄的根目錄或 Program Files 目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="9575f-1152">若要開啟的通道可使用`FreeFile()`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-1153">`FileOpen`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="9575f-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="9575f-1154">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1155">此範例說明的各種用法`FileOpen`函式可讓輸入與輸出至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="9575f-1156">下列程式碼會開啟檔案`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9575f-1157">此範例會開啟中的檔案`Binary`模式只允許寫入作業。</span><span class="sxs-lookup"><span data-stu-id="9575f-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9575f-1158">下列範例會開啟中的檔案`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="9575f-1159">檔案包含的結構記錄`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="9575f-1160">此程式碼範例會開啟中的檔案`Output`模式; 任何程序可以讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="9575f-1161">此程式碼範例會開啟中的檔案`Binary`模式進行讀取，其他處理序無法讀取檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1162">資料錄的長度為負數 (而且不等於 -1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1162">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1163">
            <paramref name="FileName" /> 已經開啟，或 <paramref name="FileName" /> 無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1163">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-1164">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1164">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1165">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1165">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-1166">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1166">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1167">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1168">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1169">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1169">Required.</span>
          </span>
          <span data-ttu-id="9575f-1170">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1170">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1171">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1171">Required.</span>
          </span>
          <span data-ttu-id="9575f-1172">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1172">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1173">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1173">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1174">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1175">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1175">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1176">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1177">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1178">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1179">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1180">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1181">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1182">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1183">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1184">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1185">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1185">Random Mode</span></span>  
 <span data-ttu-id="9575f-1186">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1187">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1188">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1189">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1190">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1191">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1192">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1193">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1194">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1195">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1196">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1197">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1198">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1199">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1200">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1201">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1202">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1203">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1204">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1205">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1206">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1207">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1208">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1209">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1210">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1211">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1212">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1213">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1213">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1214">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1215">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1216">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1217">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1218">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1219">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1220">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1221">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1222">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1223">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1224">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1225">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1226">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1226">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1227">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1227">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1228">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1228">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1229">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1229">Required.</span>
          </span>
          <span data-ttu-id="9575f-1230">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1230">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1231">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1231">Required.</span>
          </span>
          <span data-ttu-id="9575f-1232">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1232">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1233">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1233">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1234">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1235">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1235">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1236">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1237">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1238">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1239">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1240">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1241">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1242">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1243">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1244">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1245">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1245">Random Mode</span></span>  
 <span data-ttu-id="9575f-1246">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1247">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1248">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1249">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1250">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1251">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1252">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1253">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1254">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1255">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1256">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1257">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1258">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1259">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1260">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1261">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1262">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1263">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1264">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1265">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1266">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1267">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1268">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1269">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1270">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1271">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1272">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1273">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1273">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1274">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1275">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1276">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1277">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1278">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1279">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1280">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1281">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1282">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1283">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1284">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1285">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1286">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1286">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1287">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1287">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1288">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1288">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1289">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1289">Required.</span>
          </span>
          <span data-ttu-id="9575f-1290">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1290">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1291">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1291">Required.</span>
          </span>
          <span data-ttu-id="9575f-1292">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1292">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1293">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1293">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1294">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1295">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1295">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1296">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1297">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1298">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1299">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1300">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1301">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1302">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1303">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1304">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1305">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1305">Random Mode</span></span>  
 <span data-ttu-id="9575f-1306">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1307">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1308">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1309">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1310">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1311">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1312">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1313">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1314">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1315">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1316">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1317">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1318">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1319">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1320">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1321">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1322">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1323">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1324">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1325">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1326">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1327">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1328">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1329">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1330">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1331">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1332">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1333">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1333">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1334">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1335">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1336">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1337">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1338">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1339">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1340">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1341">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1342">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1343">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1344">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1345">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1346">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1346">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1347">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1347">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1348">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1348">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1349">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1349">Required.</span>
          </span>
          <span data-ttu-id="9575f-1350">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1350">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1351">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1351">Required.</span>
          </span>
          <span data-ttu-id="9575f-1352">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1352">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1353">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1353">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1354">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1355">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1355">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1356">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1357">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1358">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1359">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1360">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1361">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1362">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1363">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1364">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1365">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1365">Random Mode</span></span>  
 <span data-ttu-id="9575f-1366">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1367">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1368">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1369">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1370">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1371">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1372">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1373">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1374">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1375">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1376">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1377">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1378">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1379">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1380">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1381">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1382">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1383">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1384">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1385">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1386">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1387">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1388">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1389">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1390">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1391">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1392">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1393">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1393">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1394">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1395">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1396">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1397">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1398">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1399">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1400">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1401">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1402">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1403">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1404">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1405">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1406">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1406">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1407">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1408">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1408">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1409">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1409">Required.</span>
          </span>
          <span data-ttu-id="9575f-1410">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1410">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1411">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1411">Required.</span>
          </span>
          <span data-ttu-id="9575f-1412">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1412">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1413">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1413">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1414">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1415">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1415">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1416">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1417">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1418">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1419">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1420">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1421">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1422">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1423">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1424">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1425">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1425">Random Mode</span></span>  
 <span data-ttu-id="9575f-1426">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1427">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1428">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1429">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1430">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1431">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1432">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1433">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1434">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1435">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1436">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1437">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1438">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1439">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1440">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1441">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1442">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1443">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1444">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1445">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1446">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1447">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1448">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1449">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1450">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1451">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1452">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1453">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1453">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1454">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1455">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1456">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1457">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1458">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1459">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1460">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1461">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1462">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1463">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1464">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1465">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1466">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1466">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1467">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1467">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1468">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1468">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1469">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1469">Required.</span>
          </span>
          <span data-ttu-id="9575f-1470">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1471">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1471">Required.</span>
          </span>
          <span data-ttu-id="9575f-1472">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1473">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1473">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1474">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1475">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1476">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1477">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1478">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1479">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1480">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1481">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1482">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1483">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1484">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1485">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1485">Random Mode</span></span>  
 <span data-ttu-id="9575f-1486">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1487">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1488">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1489">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1490">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1491">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1492">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1493">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1494">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1495">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1496">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1497">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1498">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1499">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1500">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1501">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1502">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1503">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1504">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1505">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1506">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1507">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1508">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1509">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1510">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1511">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1512">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1513">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1513">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1514">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1515">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1516">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1517">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1518">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1519">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1520">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1521">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1522">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1523">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1524">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1525">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1526">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1527">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1528">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1528">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1529">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1529">Required.</span>
          </span>
          <span data-ttu-id="9575f-1530">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1531">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1531">Required.</span>
          </span>
          <span data-ttu-id="9575f-1532">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1533">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1533">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1534">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1535">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1536">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1537">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1538">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1539">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1540">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1541">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1542">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1543">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1544">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1545">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1545">Random Mode</span></span>  
 <span data-ttu-id="9575f-1546">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1547">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1548">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1549">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1550">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1551">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1552">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1553">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1554">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1555">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1556">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1557">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1558">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1559">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1560">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1561">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1562">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1563">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1564">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1565">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1566">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1567">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1568">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1569">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1570">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1571">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1572">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1573">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1573">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1574">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1575">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1576">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1577">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1578">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1579">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1580">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1581">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1582">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1583">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1584">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1585">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1586">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1587">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1588">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1588">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1589">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1589">Required.</span>
          </span>
          <span data-ttu-id="9575f-1590">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1590">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1591">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1591">Required.</span>
          </span>
          <span data-ttu-id="9575f-1592">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1592">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1593">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1593">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1594">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1595">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1595">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1596">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1597">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1598">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1599">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1600">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1601">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1602">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1603">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1604">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1605">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1605">Random Mode</span></span>  
 <span data-ttu-id="9575f-1606">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1607">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1608">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1609">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1610">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1611">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1612">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1613">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1614">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1615">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1616">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1617">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1618">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1619">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1620">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1621">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1622">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1623">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1624">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1625">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1626">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1627">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1628">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1629">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1630">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1631">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1632">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1633">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1633">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1634">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1635">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1636">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1637">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1638">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1639">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1640">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1641">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1642">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1643">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1644">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1645">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1646">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1646">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1647">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1647">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1648">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1649">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1649">Required.</span>
          </span>
          <span data-ttu-id="9575f-1650">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1651">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1651">Required.</span>
          </span>
          <span data-ttu-id="9575f-1652">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1652">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1653">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1653">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1654">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1655">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1655">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1656">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1657">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1658">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1659">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1660">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1661">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1662">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1663">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1664">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1665">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1665">Random Mode</span></span>  
 <span data-ttu-id="9575f-1666">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1667">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1668">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1669">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1670">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1671">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1672">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1673">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1674">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1675">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1676">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1677">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1678">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1679">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1680">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1681">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1682">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1683">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1684">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1685">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1686">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1687">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1688">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1689">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1690">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1691">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1692">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1693">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1693">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1694">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1695">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1696">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1697">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1698">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1699">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1700">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1701">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1702">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1703">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1704">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1705">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1706">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1706">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1707">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1707">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1708">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1708">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1709">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1709">Required.</span>
          </span>
          <span data-ttu-id="9575f-1710">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1710">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1711">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1711">Required.</span>
          </span>
          <span data-ttu-id="9575f-1712">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1712">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1713">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1713">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1714">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1715">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1715">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1716">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1717">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1718">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1719">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1720">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1721">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1722">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1723">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1724">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1725">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1725">Random Mode</span></span>  
 <span data-ttu-id="9575f-1726">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1727">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1728">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1729">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1730">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1731">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1732">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1733">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1734">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1735">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1736">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1737">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1738">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1739">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1740">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1741">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1742">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1743">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1744">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1745">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1746">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1747">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1748">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1749">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1750">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1751">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1752">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1753">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1753">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1754">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1755">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1756">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1757">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1758">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1759">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1760">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1761">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1762">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1763">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1764">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1765">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1766">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1766">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1767">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1767">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1768">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1768">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1769">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1769">Required.</span>
          </span>
          <span data-ttu-id="9575f-1770">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1770">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1771">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1771">Required.</span>
          </span>
          <span data-ttu-id="9575f-1772">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1772">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1773">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1773">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1774">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1775">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1775">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1776">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1777">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1778">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1779">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1780">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1781">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1782">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1783">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1784">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1785">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1785">Random Mode</span></span>  
 <span data-ttu-id="9575f-1786">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1787">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1788">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1789">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1790">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1791">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1792">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1793">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1794">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1795">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1796">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1797">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1798">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1799">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1800">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1801">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1802">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1803">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1804">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1805">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1806">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1807">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1808">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1809">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1810">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1811">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1812">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1813">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1813">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1814">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1815">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1816">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1817">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1818">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1819">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1820">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1821">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1822">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1823">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1824">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1825">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1826">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1826">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1827">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1827">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1828">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1828">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1829">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1829">Required.</span>
          </span>
          <span data-ttu-id="9575f-1830">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1830">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1831">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1831">Required.</span>
          </span>
          <span data-ttu-id="9575f-1832">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1832">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1833">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1833">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1834">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1835">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1835">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1836">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1837">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1838">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1839">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1840">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1841">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1842">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1843">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1844">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1845">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1845">Random Mode</span></span>  
 <span data-ttu-id="9575f-1846">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1847">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1848">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1849">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1850">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1851">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1852">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1853">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1854">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1855">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1856">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1857">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1858">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1859">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1860">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1861">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1862">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1863">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1864">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1865">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1866">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1867">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1868">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1869">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1870">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1871">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1872">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1873">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1873">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1874">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1875">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1876">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1877">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1878">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1879">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1880">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1881">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1882">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1883">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1884">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1885">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1886">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1886">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1887">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1887">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1888">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1888">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1889">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1889">Required.</span>
          </span>
          <span data-ttu-id="9575f-1890">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1891">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1891">Required.</span>
          </span>
          <span data-ttu-id="9575f-1892">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1892">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1893">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1893">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1894">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="9575f-1895">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1895">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1896">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="9575f-1897">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="9575f-1898">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1899">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1900">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1901">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1902">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1903">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1904">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1905">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1906">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1907">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1908">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1909">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1909">Random Mode</span></span>  
 <span data-ttu-id="9575f-1910">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1911">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1912">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1913">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1914">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1915">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1916">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1917">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1918">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1919">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1920">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1921">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1922">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1923">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1924">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1925">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1926">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1927">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1928">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1929">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1930">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1931">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1932">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-1933">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-1934">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-1935">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-1936">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-1937">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1937">Binary Mode</span></span>  
 <span data-ttu-id="9575f-1938">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-1939">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-1940">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-1941">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-1942">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-1943">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-1944">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-1945">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-1946">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-1947">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-1948">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-1949">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-1950">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-1951">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-1952">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1952">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-1953">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1953">Required.</span>
          </span>
          <span data-ttu-id="9575f-1954">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-1955">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1955">Required.</span>
          </span>
          <span data-ttu-id="9575f-1956">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-1957">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1957">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1958">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="9575f-1959">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1959">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1960">只有在編寫陣列時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1960">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="9575f-1961">指定陣列是否要視為動態 (Dynamic)，以及是否要針對描述長度的字串編寫陣列描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="9575f-1962">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1962">Optional.</span>
          </span>
          <span data-ttu-id="9575f-1963">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1963">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="9575f-1964">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="9575f-1965">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1965">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-1966">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1966">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-1967">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="9575f-1968">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-1969">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-1970">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="9575f-1971">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-1972">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="9575f-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="9575f-1973">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-1974">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-1975">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-1976">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-1976">Random Mode</span></span>  
 <span data-ttu-id="9575f-1977">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-1978">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-1979">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-1980">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-1981">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="9575f-1982">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="9575f-1983">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="9575f-1984">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-1985">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-1986">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-1987">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-1988">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-1989">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-1990">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="9575f-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="9575f-1991">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="9575f-1992">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="9575f-1993">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="9575f-1994">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="9575f-1995">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-1996">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="9575f-1997">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-1998">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="9575f-1999">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="9575f-2000">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="9575f-2001">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="9575f-2002">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="9575f-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="9575f-2003">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="9575f-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-2004">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2004">Binary Mode</span></span>  
 <span data-ttu-id="9575f-2005">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="9575f-2006">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="9575f-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="9575f-2007">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-2008">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="9575f-2009">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="9575f-2010">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="9575f-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="9575f-2011">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="9575f-2012">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="9575f-2013">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="9575f-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="9575f-2014">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2015">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="9575f-2016">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2017">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2017">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2018">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2018">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2019">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2019">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2020">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2020">Required.</span>
          </span>
          <span data-ttu-id="9575f-2021">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2021">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2022">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2022">Required.</span>
          </span>
          <span data-ttu-id="9575f-2023">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2023">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="9575f-2024">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2024">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2025">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2026">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2026">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="9575f-2027">相較於 <see langword="FilePutObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="9575f-2028">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2029">`FilePutObject`而不是使用函式`FilePut`若要避免模稜兩可在編譯時期，如果型別`Object`傳遞，而另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="9575f-2030">`FilePutObject` 寫入，並讀取描述物件的描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="9575f-2031">如果您想要寫出`Variant`型別，`FilePutObject`需要。</span><span class="sxs-lookup"><span data-stu-id="9575f-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="9575f-2032">如有疑問，如果您使用物件來作為第二個參數，我們建議您一律使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="9575f-2033">`FilePutObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-2034">使用 `FilePutObject` 寫入的資料，通常會透過使用 `FileGetObject` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="9575f-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="9575f-2035">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="9575f-2036">如果您省略`RecordNumber`，`FilePutObject`寫入最後一個之後的下一步 的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或資料錄或位元組所指的最後一個`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="9575f-2037">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="9575f-2038">`FilePutObject` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="9575f-2039">如果您使用`StringIsFixedLength`  =  `True`具有`FilePutObject`，您必須執行相同的`FileGetObject`，和您也必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="9575f-2040">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2040">Random Mode</span></span>  
 <span data-ttu-id="9575f-2041">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="9575f-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="9575f-2042">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePutObject`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="9575f-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="9575f-2043">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="9575f-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="9575f-2044">填補資料的數量無法精確地判斷，因為它通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="9575f-2045">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="9575f-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="9575f-2046">如果要寫入的變數是物件，包含數值的型別，`FilePutObject`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="9575f-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="9575f-2047">比方說，撰寫物件時，包含整數`FilePutObject`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="9575f-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="9575f-2048">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="9575f-2049">如果寫入的變數是包含字串、 物件`FilePutObject`寫入雙位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="9575f-2050">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="9575f-2051">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="9575f-2052">如果寫入的變數陣列，則所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="9575f-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="9575f-2053">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="9575f-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="9575f-2054">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="9575f-2055">二進位模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2055">Binary Mode</span></span>  
 <span data-ttu-id="9575f-2056">在開啟的檔案`Binary`模式中，所有`Random`套用模式的規則，除了：</span><span class="sxs-lookup"><span data-stu-id="9575f-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="9575f-2057">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="9575f-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="9575f-2058">`FilePutObject` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="9575f-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2059">這個範例會使用`FilePutObject`函式來將字串寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2060">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2060">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2061">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2061">Required.</span>
          </span>
          <span data-ttu-id="9575f-2062">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2062">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="9575f-2063">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2063">Required.</span>
          </span>
          <span data-ttu-id="9575f-2064">0–255 範圍內的數值運算式 (包含頭尾)，表示在開始新行之前，會有多少字元出現在一行上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="9575f-2065">如果 <c>RecordWidth</c> 等於 0，則一行的長度將沒有限制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2065">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="9575f-2066">
            <c>RecordWidth</c> 的預設值為 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2066">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2067">為藉由使用 <see langword="FileOpen" /> 函式開啟的檔案指派輸出行寬度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9575f-2068">這個範例會使用`FileWidth`函式來設定輸出行寬度的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2069">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2069">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2070">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2070">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2071">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2072">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2073">使用`FreeFile`提供尚未使用的檔案數字。</span><span class="sxs-lookup"><span data-stu-id="9575f-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2074">這個範例會使用`FreeFile`函式傳回下一個可用的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="9575f-2075">輸出，在迴圈內，開啟五個檔案和一些範例資料會寫入每一個。</span><span class="sxs-lookup"><span data-stu-id="9575f-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2076">使用中的檔案超過 255 個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2076">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2077">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2077">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-2078">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2078">Required.</span>
          </span>
          <span data-ttu-id="9575f-2079">指定檔案、目錄或資料夾名稱的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2079">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="9575f-2080">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2080">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2081">傳回 <see langword="FileAttribute" /> 值，表示檔案、目錄或資料夾的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="9575f-2082">相較於 <see langword="FileAttribute" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="9575f-2083">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2084">
            <see langword="GetAttr" /> 傳回的值是以下列舉值的總和：</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="9575f-2085">值</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2085">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="9575f-2086">常數</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2086">Constant</span>
                </span>
              </description>
              <description>
                <span data-ttu-id="9575f-2087">描述</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2087">Description</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Normal" />
              </term>
              <description>
                <see langword="vbNormal" />
              </description>
              <description>
                <span data-ttu-id="9575f-2088">一般。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2088">Normal.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ReadOnly" />
              </term>
              <description>
                <see langword="vbReadOnly" />
              </description>
              <description>
                <span data-ttu-id="9575f-2089">唯讀。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2089">Read-only.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Hidden" />
              </term>
              <description>
                <see langword="vbHidden" />
              </description>
              <description>
                <span data-ttu-id="9575f-2090">隱藏。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2090">Hidden.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="System" />
              </term>
              <description>
                <see langword="vbSystem" />
              </description>
              <description>
                <span data-ttu-id="9575f-2091">系統檔案。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2091">System file.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Directory" />
              </term>
              <description>
                <see langword="vbDirectory" />
              </description>
              <description>
                <span data-ttu-id="9575f-2092">目錄或資料夾。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2092">Directory or folder.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Archive" />
              </term>
              <description>
                <see langword="vbArchive" />
              </description>
              <description>
                <span data-ttu-id="9575f-2093">前次備份之後，檔案已經有了變更。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2093">File has changed since last backup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Alias" />
              </term>
              <description>
                <see langword="vbAlias" />
              </description>
              <description>
                <span data-ttu-id="9575f-2094">檔案有不同的名稱。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="9575f-2094">File has a different name.</span>
                </span>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="9575f-2095">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span>
              <span class="sxs-lookup">
                <span data-stu-id="9575f-2095">These enumerations are specified by the Visual Basic language.</span>
              </span>
              <span data-ttu-id="9575f-2096">您可在程式碼中的任何地方使用這些名稱來取代實際值。</span>
              <span class="sxs-lookup">
                <span data-stu-id="9575f-2096">The names can be used anywhere in your code in place of the actual values.</span>
              </span>
            </para>
          </block>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2097">若要判斷設定了哪些屬性，請使用`And`運算子來執行所傳回的值的位元比較`GetAttr`函式和您想要個別的檔案屬性的值。</span><span class="sxs-lookup"><span data-stu-id="9575f-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="9575f-2098">如果結果不是零，該屬性是設定具名的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="9575f-2099">例如，下列的傳回值`And`運算式是零，如果`Archive`未設定屬性：</span><span class="sxs-lookup"><span data-stu-id="9575f-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="9575f-2100">會傳回非零值，如果`Archive`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2101">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="9575f-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2102">
            <paramref name="Pathname" /> 無效或包含萬用字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2102">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-2103">目標檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2103">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md">
          <span data-ttu-id="9575f-2104">And 運算子 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2104">And Operator (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2105">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2105">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2106">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2106">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2107">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2107">Required.</span>
          </span>
          <span data-ttu-id="9575f-2108">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2108">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2109">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2109">Required.</span>
          </span>
          <span data-ttu-id="9575f-2110">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2111">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2111">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2112">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2113">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2114">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2115">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2116">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2117">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2118">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2119">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2120">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2121">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2121">Data</span></span>|<span data-ttu-id="9575f-2122">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2123">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2124">Empty</span></span>|  
|<span data-ttu-id="9575f-2125">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2126">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2127">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2128">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2130">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2131">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2132">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2133">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2134">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2135">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2136">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2137">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2138">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2138">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2139">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2139">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2140">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2140">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2141">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2142">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2142">Required.</span>
          </span>
          <span data-ttu-id="9575f-2143">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2143">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2144">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2144">Required.</span>
          </span>
          <span data-ttu-id="9575f-2145">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2146">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2146">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2147">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2148">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2149">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2150">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2151">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2152">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2153">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2154">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2155">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2156">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2156">Data</span></span>|<span data-ttu-id="9575f-2157">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2158">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2159">Empty</span></span>|  
|<span data-ttu-id="9575f-2160">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2161">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2162">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2163">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2165">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2166">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2167">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2168">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2169">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2170">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2171">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2172">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2173">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2174">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2174">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2175">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2175">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2176">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2177">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2177">Required.</span>
          </span>
          <span data-ttu-id="9575f-2178">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2178">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2179">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2179">Required.</span>
          </span>
          <span data-ttu-id="9575f-2180">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2181">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2181">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2182">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2183">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2184">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2185">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2186">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2187">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2188">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2189">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2190">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2191">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2191">Data</span></span>|<span data-ttu-id="9575f-2192">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2193">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2194">Empty</span></span>|  
|<span data-ttu-id="9575f-2195">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2196">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2197">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2198">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2200">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2201">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2202">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2203">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2204">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2205">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2206">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2207">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2208">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2208">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2209">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2209">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2210">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2210">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2211">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2212">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2212">Required.</span>
          </span>
          <span data-ttu-id="9575f-2213">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2213">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2214">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2214">Required.</span>
          </span>
          <span data-ttu-id="9575f-2215">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2216">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2216">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2217">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2218">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2219">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2220">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2221">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2222">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2223">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2224">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2225">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2226">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2226">Data</span></span>|<span data-ttu-id="9575f-2227">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2228">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2229">Empty</span></span>|  
|<span data-ttu-id="9575f-2230">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2231">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2232">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2233">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2235">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2236">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2237">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2238">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2239">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2240">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2241">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2242">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2243">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2243">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2244">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2244">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2245">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2245">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2246">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2247">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2247">Required.</span>
          </span>
          <span data-ttu-id="9575f-2248">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2248">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2249">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2249">Required.</span>
          </span>
          <span data-ttu-id="9575f-2250">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2251">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2251">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2252">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2253">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2254">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2255">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2256">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2257">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2258">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2259">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2260">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2261">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2261">Data</span></span>|<span data-ttu-id="9575f-2262">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2263">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2264">Empty</span></span>|  
|<span data-ttu-id="9575f-2265">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2266">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2267">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2268">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2270">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2271">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2272">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2273">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2274">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2275">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2276">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2277">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2278">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2278">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2279">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2279">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2280">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2280">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2281">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2282">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2282">Required.</span>
          </span>
          <span data-ttu-id="9575f-2283">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2283">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2284">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2284">Required.</span>
          </span>
          <span data-ttu-id="9575f-2285">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2286">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2286">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2287">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2288">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2289">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2290">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2291">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2292">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2293">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2294">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2295">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2296">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2296">Data</span></span>|<span data-ttu-id="9575f-2297">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2298">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2299">Empty</span></span>|  
|<span data-ttu-id="9575f-2300">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2301">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2302">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2303">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2305">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2306">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2307">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2308">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2309">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2310">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2311">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2312">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2313">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2313">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2314">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2314">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2315">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2315">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2316">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2317">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2317">Required.</span>
          </span>
          <span data-ttu-id="9575f-2318">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2318">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2319">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2319">Required.</span>
          </span>
          <span data-ttu-id="9575f-2320">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2321">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2321">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2322">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2323">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2324">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2325">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2326">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2327">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2328">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2329">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2330">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2331">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2331">Data</span></span>|<span data-ttu-id="9575f-2332">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2333">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2334">Empty</span></span>|  
|<span data-ttu-id="9575f-2335">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2336">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2337">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2338">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2340">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2341">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2342">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2343">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2344">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2345">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2346">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2347">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2348">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2348">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2349">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2349">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2350">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2350">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2351">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2352">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2352">Required.</span>
          </span>
          <span data-ttu-id="9575f-2353">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2354">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2354">Required.</span>
          </span>
          <span data-ttu-id="9575f-2355">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2356">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2356">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2357">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2358">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2359">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2360">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2361">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2362">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2363">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2364">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2365">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2366">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2366">Data</span></span>|<span data-ttu-id="9575f-2367">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2368">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2369">Empty</span></span>|  
|<span data-ttu-id="9575f-2370">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2371">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2372">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2373">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2375">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2376">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2377">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2378">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2379">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2380">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2381">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2382">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2383">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2383">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2384">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2384">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2385">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2385">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2386">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2387">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2387">Required.</span>
          </span>
          <span data-ttu-id="9575f-2388">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2388">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2389">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2389">Required.</span>
          </span>
          <span data-ttu-id="9575f-2390">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2391">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2391">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2392">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2393">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2394">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2395">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2396">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2397">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2398">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2399">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2400">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2401">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2401">Data</span></span>|<span data-ttu-id="9575f-2402">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2403">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2404">Empty</span></span>|  
|<span data-ttu-id="9575f-2405">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2406">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2407">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2408">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2410">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2411">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2412">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2413">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2414">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2415">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2416">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2417">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2418">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2419">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2419">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2420">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2420">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2421">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2422">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2422">Required.</span>
          </span>
          <span data-ttu-id="9575f-2423">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2423">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2424">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2424">Required.</span>
          </span>
          <span data-ttu-id="9575f-2425">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2426">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2426">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2427">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2428">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2429">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2430">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2431">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2432">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2433">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2434">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2435">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2436">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2436">Data</span></span>|<span data-ttu-id="9575f-2437">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2438">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2439">Empty</span></span>|  
|<span data-ttu-id="9575f-2440">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2441">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2442">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2443">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2445">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2446">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2447">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2448">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2449">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2450">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2451">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2452">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2453">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2453">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2454">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2454">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2455">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2455">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2456">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2457">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2457">Required.</span>
          </span>
          <span data-ttu-id="9575f-2458">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2458">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2459">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2459">Required.</span>
          </span>
          <span data-ttu-id="9575f-2460">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2461">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2461">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2462">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2463">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2464">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2465">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2466">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2467">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2468">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2469">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2470">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2471">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2471">Data</span></span>|<span data-ttu-id="9575f-2472">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2473">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2474">Empty</span></span>|  
|<span data-ttu-id="9575f-2475">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2476">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2477">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2478">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2480">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2481">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2482">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2483">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2484">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2485">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2486">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2487">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2488">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2488">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2489">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2489">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2490">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2490">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2491">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2492">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2492">Required.</span>
          </span>
          <span data-ttu-id="9575f-2493">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2493">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="9575f-2494">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2494">Required.</span>
          </span>
          <span data-ttu-id="9575f-2495">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2496">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2496">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2497">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2498">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2499">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2500">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="9575f-2501">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2502">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2503">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="9575f-2504">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="9575f-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="9575f-2505">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="9575f-2506">資料</span><span class="sxs-lookup"><span data-stu-id="9575f-2506">Data</span></span>|<span data-ttu-id="9575f-2507">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="9575f-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="9575f-2508">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="9575f-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="9575f-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="9575f-2509">Empty</span></span>|  
|<span data-ttu-id="9575f-2510">#NULL #</span><span class="sxs-lookup"><span data-stu-id="9575f-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="9575f-2511">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="9575f-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="9575f-2512">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="9575f-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="9575f-2513">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="9575f-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="9575f-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="9575f-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="9575f-2515">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="9575f-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="9575f-2516">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2517">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="9575f-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="9575f-2518">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="9575f-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2519">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2520">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2521">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="9575f-2522">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2523">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2523">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2524">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2524">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2525">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2525">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2526">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2527">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2527">Required.</span>
          </span>
          <span data-ttu-id="9575f-2528">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2528">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="9575f-2529">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2529">Required.</span>
          </span>
          <span data-ttu-id="9575f-2530">任何有效的數值運算式，指定要讀取的字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2530">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2531">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="9575f-2532">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="9575f-2533">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2534">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="9575f-2535">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2536">`InputString`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2537">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2538">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2539">讀取的資料`InputString`函式通常利用寫入至檔案`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="9575f-2540">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="9575f-2541">不同於`Input`函式，`InputString`函式會傳回讀取的字元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="9575f-2542">這包括逗號、 換行字元、 換行、 引號和前置空格。</span><span class="sxs-lookup"><span data-stu-id="9575f-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="9575f-2543">使用開啟的檔案`Binary`存取，嘗試讀取檔案，使用`InputString`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="9575f-2544">使用`LOF`並`Loc`函數，而`EOF`藉由讀取二進位檔案時`InputString`，或使用`FileGet`當您使用`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2545">從檔案讀取時，請勿依據副檔名的檔案內容的相關安全性決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="9575f-2546">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2547">這個範例會使用`InputString`函式來從檔案一次讀取一個字元，並列印它`Output`視窗。</span><span class="sxs-lookup"><span data-stu-id="9575f-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="9575f-2548">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2549">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2549">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2550">
            <paramref name="CharCount" /> &lt; 0 或 &gt; 214。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2550">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2551">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2551">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2552">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2553">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2553">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-2554">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2554">Required.</span>
          </span>
          <span data-ttu-id="9575f-2555">
            <see langword="String" /> 運算式，指定要刪除的一個或多個檔案的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2555">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="9575f-2556">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2556">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2557">從磁碟中刪除檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2557">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="9575f-2558">相較於 <see langword="Kill" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="9575f-2559">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2560">`Kill` 支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="9575f-2561">**安全性注意事項**才能執行，請`Kill`函式需要`Read`並`PathDiscovery`加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="9575f-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="9575f-2562">如需詳細資訊，請參閱 < <xref:System.Security.SecurityException>[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="9575f-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2563">這個範例會使用`Kill`函式來從磁碟中刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2564">目標檔案已開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2564">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-2565">找不到目標檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2565">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="9575f-2566">權限遭拒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2566">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2567">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2567">Required.</span>
          </span>
          <span data-ttu-id="9575f-2568">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2568">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2569">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2570">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2571">`LineInput`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2572">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2573">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2574">讀取的資料`LineInput`通常會先寫入至檔案使用`Print`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2575">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="9575f-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="9575f-2576">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="9575f-2577">`LineInput`函式會從檔案的一個字元讀取一次直到遇到歸位字元 (`Chr(13)`) 或歸位字元/換 (`Chr(13) + Chr(10)`) 順序。</span><span class="sxs-lookup"><span data-stu-id="9575f-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="9575f-2578">歸位字元 return/line 摘要的序列會略過而不是附加的字元字串。</span><span class="sxs-lookup"><span data-stu-id="9575f-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2579">使用 從檔案讀取`LineInput`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2580">這個範例會使用`LineInput`從循序檔案讀取一行，並將它指派給變數的函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="9575f-2581">這個範例假設`TestFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="9575f-2582">已到達檔案結尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2582">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2583">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2583">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2584">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2584">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2585">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2586">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2586">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2587">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2587">Required.</span>
          </span>
          <span data-ttu-id="9575f-2588">任何有效的 <see langword="Integer" /> 檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2588">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2589">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2590">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2591">`Loc`為以零為起始的函式，使用它來擷取檔案中的第一個位元組，則會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="9575f-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="9575f-2592">`Loc`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2593">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2594">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2595">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="9575f-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="9575f-2596">模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2596">Mode</span></span>|<span data-ttu-id="9575f-2597">傳回值</span><span class="sxs-lookup"><span data-stu-id="9575f-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="9575f-2598">讀取或寫入檔案的最後一個記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="9575f-2599">除以 128 檔案中的目前位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="9575f-2600">不過，資訊會由`Loc`的循序檔案不會使用或所需。</span><span class="sxs-lookup"><span data-stu-id="9575f-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="9575f-2601">讀取或寫入的最後一個位元組的位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2602">這個範例會使用`Loc`函式來傳回目前的讀取/寫入位置，在開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="9575f-2603">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2604">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2604">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2605">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2606">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2607">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2608">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2608">Required.</span>
          </span>
          <span data-ttu-id="9575f-2609">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2609">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2610">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2611">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2612">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2613">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2614">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2615">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2616">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2617">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2618">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2619">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2620">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2621">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2621">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2622">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2622">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2623">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2623">Required.</span>
          </span>
          <span data-ttu-id="9575f-2624">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2624">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="9575f-2625">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2625">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2626">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2626">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2627">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2628">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2629">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2630">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2631">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2632">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2633">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2634">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2635">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2636">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2637">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2638">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2638">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2639">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2639">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2640">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2640">Required.</span>
          </span>
          <span data-ttu-id="9575f-2641">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2641">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="9575f-2642">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2642">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2643">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2643">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="9575f-2644">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2644">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2645">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2645">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2646">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2647">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2648">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2649">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2650">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2651">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2652">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2653">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2654">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2655">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2656">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2657">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2657">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2658">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2658">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2659">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2659">Required.</span>
          </span>
          <span data-ttu-id="9575f-2660">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2660">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2661">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2662">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="9575f-2663">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2664">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2665">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2666">使用`FileLen`函式來取得未開啟檔案的長度。</span><span class="sxs-lookup"><span data-stu-id="9575f-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2667">這個範例會使用`LOF`函式來判斷已開啟之檔案的大小。</span><span class="sxs-lookup"><span data-stu-id="9575f-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="9575f-2668">這個範例假設`TestFile`是文字檔案，其中包含範例資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2669">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-2670">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2670">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2671">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2671">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="9575f-2672">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2672">Required.</span>
          </span>
          <span data-ttu-id="9575f-2673">
            <see langword="String" /> 運算式，可識別要建立的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2673">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="9575f-2674">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2674">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="9575f-2675">如果未指定磁碟機，則 <see langword="MkDir" /> 會在目前磁碟機上建立新目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2676">建立新目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2676">Creates a new directory.</span>
          </span>
          <span data-ttu-id="9575f-2677">相較於 <see langword="MkDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="9575f-2678">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2679">此函式會建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2680">這個範例會使用`MkDir`函式來建立目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="9575f-2681">如果未指定磁碟機，在目前的磁碟機上建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2682">
            <paramref name="Path" /> 尚未指定或是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2682">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="9575f-2683">權限遭拒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2683">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2684">目錄已經存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2684">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md">
          <span data-ttu-id="9575f-2685">如何：在 Visual Basic 中建立目錄</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2685">How to: Create a Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2686">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2686">Required.</span>
          </span>
          <span data-ttu-id="9575f-2687">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2687">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="9575f-2688">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2688">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2689">要寫入檔案的零或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2689">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="9575f-2690">
            <c>Output</c> 引數設定為：</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2690">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="9575f-2691">
            <see langword="T:System.IO.IOException" />︰檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2691">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="9575f-2692">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2692">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2693">將顯示格式資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2693">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2694">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2695">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2696">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2697">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="9575f-2698">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="9575f-2699">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="9575f-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="9575f-2700">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="9575f-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="9575f-2701">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="9575f-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="9575f-2702">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="9575f-2703">日期資料寫入檔案中，使用您的系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="9575f-2704">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="9575f-2705">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="9575f-2706">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="9575f-2707">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="9575f-2708">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="9575f-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="9575f-2709">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="9575f-2710">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="9575f-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="9575f-2711">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2712">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2713">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2714">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2714">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2715">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2715">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2716">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2717">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2717">Required.</span>
          </span>
          <span data-ttu-id="9575f-2718">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2718">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="9575f-2719">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2719">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2720">要寫入檔案的零或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2720">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="9575f-2721">
            <c>Output</c> 引數設定為：</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2721">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="9575f-2722">
            <see langword="T:System.IO.IOException" />︰檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2722">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="9575f-2723">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2723">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2724">將顯示格式資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2724">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2725">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2726">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2727">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2728">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="9575f-2729">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="9575f-2730">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="9575f-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="9575f-2731">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="9575f-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="9575f-2732">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="9575f-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="9575f-2733">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="9575f-2734">日期資料寫入檔案中，使用系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="9575f-2735">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="9575f-2736">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="9575f-2737">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="9575f-2738">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="9575f-2739">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="9575f-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="9575f-2740">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="9575f-2741">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="9575f-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="9575f-2742">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-2743">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2744">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2745">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2745">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-2746">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2746">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-2747">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="9575f-2748">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2748">Required.</span>
          </span>
          <span data-ttu-id="9575f-2749">
            <see langword="String" /> 運算式，指定現有的檔案名稱和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2749">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="9575f-2750">
            <c>OldPath</c> 可包含檔案的目錄及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2750">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="9575f-2751">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2751">Required.</span>
          </span>
          <span data-ttu-id="9575f-2752">
            <see langword="String" /> 運算式，指定新檔案的名稱和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2752">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="9575f-2753">
            <c>NewPath</c> 可包含目的位置的目錄及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2753">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="9575f-2754">
            <c>NewPath</c> 指定的檔案名稱不能已經存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2754">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2755">重新命名磁碟的檔案或目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2755">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="9575f-2756">相較於 <see langword="Rename" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="9575f-2757">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2758">`Rename`函式重新命名檔案，並將它移到另一個目錄，如有必要。</span><span class="sxs-lookup"><span data-stu-id="9575f-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="9575f-2759">`Rename`函式可以將檔案移到磁碟機，但它只能重新命名現有的目錄時兩者`NewPath`和`OldPath`都位於相同的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="9575f-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="9575f-2760">`Rename` 無法建立新的檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="9575f-2761">使用`Rename`函式開啟的檔案會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="9575f-2762">您必須先關閉開啟的檔案，才能重新命名。</span><span class="sxs-lookup"><span data-stu-id="9575f-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="9575f-2763">`Rename` 引數不能包含多個字元 （\*） 和單一字元 （？） 的萬用字元。</span><span class="sxs-lookup"><span data-stu-id="9575f-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9575f-2764">當使用`Rename`將來自未受保護位置的檔案複製到受保護的位置中，該檔案會保留的限制較少的權限。</span><span class="sxs-lookup"><span data-stu-id="9575f-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="9575f-2765">請檢查以確定未造成可能的安全性風險。</span><span class="sxs-lookup"><span data-stu-id="9575f-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2766">這個範例會使用`Rename`函式來重新命名檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="9575f-2767">基於此範例的詳細資訊，請假設已指定的目錄已經存在。</span><span class="sxs-lookup"><span data-stu-id="9575f-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2768">路徑無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2768">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-2769">
            <paramref name="OldPath" /> 檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2769">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2770">無法重新命名為不同的裝置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2770">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">
          <span data-ttu-id="9575f-2771">如何：在 Visual Basic 中重新命名檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2771">How to: Rename a File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2772">關閉所有使用 <see langword="FileOpen" /> 函式開啟的磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2773">相較於 <see langword="Reset" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="9575f-2774">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2775">`Reset`函式會關閉開啟的所有作用中檔案`FileOpen`函式，並具有相同的功能`FileClose()`不含任何參數。</span><span class="sxs-lookup"><span data-stu-id="9575f-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2776">這個範例會使用`Reset`函式來關閉所有開啟的檔案並寫入磁碟中的所有檔案緩衝區的內容。</span><span class="sxs-lookup"><span data-stu-id="9575f-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="9575f-2777">請注意，使用`Object`變數`FileNumber`做為字串和數字。</span><span class="sxs-lookup"><span data-stu-id="9575f-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="9575f-2778">End 陳述式</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2778">End Statement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="9575f-2779">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2779">Required.</span>
          </span>
          <span data-ttu-id="9575f-2780">
            <see langword="String" /> 運算式，可識別要移除的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2780">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="9575f-2781">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2781">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="9575f-2782">如果未指定磁碟機，則 <see langword="RmDir" /> 會移除目前磁碟機上的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2783">移除現有的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2783">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="9575f-2784">相較於 <see langword="RmDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="9575f-2785">如需詳細資訊，請參閱<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2786">如果您嘗試使用，就會發生錯誤`RmDir`包含檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="9575f-2787">使用`Kill`函式來刪除所有檔案，然後再移除目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2788">這個範例會使用`RmDir`函式以移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="9575f-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2789">
            <paramref name="Path" /> 尚未指定或是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2789">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2790">目標目錄包含檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2790">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9575f-2791">目錄不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2791">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2792">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2793">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="9575f-2794">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2795">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2795">Required.</span>
          </span>
          <span data-ttu-id="9575f-2796">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2796">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2797">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2798">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="9575f-2799">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2800">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2801">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="9575f-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="9575f-2802">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="9575f-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="9575f-2803">模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2803">Mode</span></span>|<span data-ttu-id="9575f-2804">傳回值</span><span class="sxs-lookup"><span data-stu-id="9575f-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="9575f-2805">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="9575f-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="9575f-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="9575f-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="9575f-2807">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2808">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2809">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="9575f-2810">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="9575f-2811">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="9575f-2812">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2813">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="9575f-2814">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="9575f-2815">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2816">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2817">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-2818">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2819">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2820">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2820">Required.</span>
          </span>
          <span data-ttu-id="9575f-2821">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2821">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="9575f-2822">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2822">Required.</span>
          </span>
          <span data-ttu-id="9575f-2823">在 1–2,147,483,647 範圍之間的數字 (包括頭尾)，表示應該發生下一個讀取 / 寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2824">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2825">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="9575f-2826">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2827">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="9575f-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="9575f-2828">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="9575f-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="9575f-2829">模式</span><span class="sxs-lookup"><span data-stu-id="9575f-2829">Mode</span></span>|<span data-ttu-id="9575f-2830">傳回值</span><span class="sxs-lookup"><span data-stu-id="9575f-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="9575f-2831">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="9575f-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="9575f-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="9575f-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="9575f-2833">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2834">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="9575f-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2835">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="9575f-2836">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="9575f-2837">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="9575f-2838">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2839">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="9575f-2840">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="9575f-2841">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="9575f-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="9575f-2842">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2843">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2843">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="9575f-2844">在 Visual Basic 中讀取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2844">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="9575f-2845">在 Visual Basic 中寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2845">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="9575f-2846">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2846">Required.</span>
          </span>
          <span data-ttu-id="9575f-2847">指定檔名的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2847">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="9575f-2848">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2848">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="9575f-2849">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2849">Required.</span>
          </span>
          <span data-ttu-id="9575f-2850">常數或數值運算式，其總和可以表示檔案屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2850">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2851">設定檔案的屬性 (Attribute) 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2851">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="9575f-2852">相較於 <see langword="SetAttr" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="9575f-2853">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2854">如果您嘗試設定已開啟之檔案的屬性，就會發生執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="9575f-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="9575f-2855">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="9575f-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="9575f-2856">值</span><span class="sxs-lookup"><span data-stu-id="9575f-2856">Value</span></span>|<span data-ttu-id="9575f-2857">常數</span><span class="sxs-lookup"><span data-stu-id="9575f-2857">Constant</span></span>|<span data-ttu-id="9575f-2858">描述</span><span class="sxs-lookup"><span data-stu-id="9575f-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="9575f-2859">標準模式 （預設值）。</span><span class="sxs-lookup"><span data-stu-id="9575f-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="9575f-2860">唯讀。</span><span class="sxs-lookup"><span data-stu-id="9575f-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="9575f-2861">隱藏。</span><span class="sxs-lookup"><span data-stu-id="9575f-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="9575f-2862">系統檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="9575f-2863">磁碟區標籤</span><span class="sxs-lookup"><span data-stu-id="9575f-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="9575f-2864">目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="9575f-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="9575f-2865">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="9575f-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="9575f-2866">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="9575f-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2867">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="9575f-2868">名稱可在您的程式碼，而不是實際的值中的任何地方使用。</span><span class="sxs-lookup"><span data-stu-id="9575f-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2869">這個範例會使用`SetAttr`函式來設定檔案的屬性。</span><span class="sxs-lookup"><span data-stu-id="9575f-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9575f-2870">
            <paramref name="Attribute" /> 類型無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2870">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="9575f-2871">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2871">Required.</span>
          </span>
          <span data-ttu-id="9575f-2872">在顯示或列印清單中的下一個運算式之前所要插入的空格數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2873">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2874">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2875">如果`Count`少於輸出行寬度下, 一個列印位置立即遵循的列印的空格數目。</span><span class="sxs-lookup"><span data-stu-id="9575f-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="9575f-2876">如果`Count`大於輸出行寬度，`SPC`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="9575f-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="9575f-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="9575f-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="9575f-2878">比方說，如果目前的列印位置為 24，輸出行寬度是 80，且您指定`SPC(90)`下, 一個列印時會啟動位置為 34 （目前的列印位置 + 90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="9575f-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="9575f-2879">如果目前的列印位置與輸出行寬度之間的差異是小於`Count`(或`Count` `Mod` *寬度*)，則`SPC`函式就會跳到下一行的開頭，並產生空間等於`Count`– (*寬度*– *currentprintposition*)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2880">請確定您的表格式資料行的寬度不足以容納寬字母。</span><span class="sxs-lookup"><span data-stu-id="9575f-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2881">這個範例會使用`SPC`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="9575f-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="9575f-2882">Mod 運算子 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2882">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2883">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2884">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2885">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2886">如果目前的行上目前的列印位置大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="9575f-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="9575f-2887">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="9575f-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="9575f-2888">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="9575f-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="9575f-2889">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="9575f-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="9575f-2890">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="9575f-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="9575f-2891">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="9575f-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="9575f-2892">如果導出的列印位置大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="9575f-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="9575f-2893">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="9575f-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="9575f-2894">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="9575f-2895">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="9575f-2896">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2897">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="9575f-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2898">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="9575f-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="9575f-2899">Mod 運算子 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2899">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="9575f-2900">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2900">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2901">在顯示或列印清單中的下一個運算式之前所要移至的欄位編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2901">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="9575f-2902">如果省略，則 <see langword="TAB" /> 會將插入點移到下一個列印區 (Print Zone) 的開頭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2903">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9575f-2904">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2905">目前的行上目前的列印位置是否大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="9575f-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="9575f-2906">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="9575f-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="9575f-2907">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="9575f-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="9575f-2908">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="9575f-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="9575f-2909">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="9575f-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="9575f-2910">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="9575f-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="9575f-2911">導出的列印位置是否大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="9575f-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="9575f-2912">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="9575f-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="9575f-2913">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="9575f-2914">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="9575f-2915">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9575f-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9575f-2916">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="9575f-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2917">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="9575f-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="9575f-2918">Mod 運算子 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2918">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9575f-2919">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2920">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2921">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2922">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2922">Required.</span>
          </span>
          <span data-ttu-id="9575f-2923">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2923">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2924">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2925">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2926">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2927">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2928">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2929">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2930">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2931">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2932">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2933">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2934">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2935">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2935">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2936">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2936">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2937">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2937">Required.</span>
          </span>
          <span data-ttu-id="9575f-2938">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2938">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="9575f-2939">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2939">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2940">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2940">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2941">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2942">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2943">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2944">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2945">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2946">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2947">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2948">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2949">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2950">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2951">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2952">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2953">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2953">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2954">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2954">Required.</span>
          </span>
          <span data-ttu-id="9575f-2955">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2955">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="9575f-2956">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2956">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2957">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2957">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="9575f-2958">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2958">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2959">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2959">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2960">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="9575f-2961">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="9575f-2962">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2963">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="9575f-2964">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="9575f-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="9575f-2965">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="9575f-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="9575f-2966">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="9575f-2967">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="9575f-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="9575f-2968">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-2969">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="9575f-2970">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-2971">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2971">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-2972">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2972">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-2973">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2973">Required.</span>
          </span>
          <span data-ttu-id="9575f-2974">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2974">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="9575f-2975">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2975">Optional.</span>
          </span>
          <span data-ttu-id="9575f-2976">要寫入檔案的一或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2976">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-2977">將資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2977">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="9575f-2978">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-2979">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-2980">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-2981">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-2982">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="9575f-2983">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="9575f-2984">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="9575f-2985">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="9575f-2986">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="9575f-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="9575f-2987">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="9575f-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="9575f-2988">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="9575f-2989">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="9575f-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="9575f-2990">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="9575f-2991">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="9575f-2992">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="9575f-2993">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="9575f-2994">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="9575f-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="9575f-2995">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="9575f-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="9575f-2996">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="9575f-2997">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="9575f-2998">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="9575f-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="9575f-2999">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="9575f-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="9575f-3000">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="9575f-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="9575f-3001">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-3002">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-3003">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="9575f-3004">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3004">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-3005">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3005">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-3006">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3006">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-3007">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="9575f-3008">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3008">Required.</span>
          </span>
          <span data-ttu-id="9575f-3009">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3009">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="9575f-3010">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3010">Optional.</span>
          </span>
          <span data-ttu-id="9575f-3011">要寫入檔案的一或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3011">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9575f-3012">將資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3012">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="9575f-3013">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9575f-3014">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="9575f-3015">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="9575f-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="9575f-3016">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="9575f-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="9575f-3017">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="9575f-3018">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="9575f-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="9575f-3019">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="9575f-3020">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="9575f-3021">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="9575f-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="9575f-3022">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="9575f-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="9575f-3023">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="9575f-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="9575f-3024">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="9575f-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="9575f-3025">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="9575f-3026">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="9575f-3027">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="9575f-3028">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="9575f-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="9575f-3029">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="9575f-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="9575f-3030">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="9575f-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="9575f-3031">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="9575f-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="9575f-3032">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="9575f-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="9575f-3033">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="9575f-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="9575f-3034">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="9575f-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="9575f-3035">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="9575f-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="9575f-3036">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="9575f-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="9575f-3037">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="9575f-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9575f-3038">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="9575f-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="9575f-3039">使用 Visual Basic 存取檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3039">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="9575f-3040">如何：在 Visual Basic 中將文字寫入檔案</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3040">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="9575f-3041">如何： 將文字寫入至檔案以 streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="9575f-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>