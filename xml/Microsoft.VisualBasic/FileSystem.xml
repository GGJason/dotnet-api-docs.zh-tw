<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86f064f440ae5767e7b891c416e8e3b3adac224b" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57937404" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="57f0e-101"><see langword="FileSystem" /> 模組包含用於執行檔案、目錄或資料夾及系統等作業的程序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="57f0e-102"><see langword="My" /> 功能提供比使用 <see langword="FileSystem" /> 模組更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="57f0e-103">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-104">這個模組支援的 Visual Basic 語言關鍵字和存取檔案和資料夾的執行階段程式庫成員。</span><span class="sxs-lookup"><span data-stu-id="57f0e-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-105">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="57f0e-106">目錄和檔案摘要</span><span class="sxs-lookup"><span data-stu-id="57f0e-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="57f0e-107">輸入和輸出摘要</span><span class="sxs-lookup"><span data-stu-id="57f0e-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="57f0e-108">關鍵字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="57f0e-109">Visual Basic 執行階段程式庫成員</span><span class="sxs-lookup"><span data-stu-id="57f0e-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="57f0e-110">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-110">Required.</span></span> <span data-ttu-id="57f0e-111">字串運算式，用來識別要成為新預設目錄或資料夾的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="57f0e-112"><paramref name="Path" /> 可包括磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="57f0e-113">如果未指定磁碟機，則 <see langword="ChDir" /> 會變更目前磁碟機上的預設目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-114">變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-114">Changes the current directory or folder.</span></span> <span data-ttu-id="57f0e-115"><see langword="My" /> 功能提供了比 <see langword="ChDir" /> 函式更強大的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="57f0e-116">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-117">`ChDir`函式會變更預設目錄，但不是在預設的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="57f0e-118">例如，如果預設磁碟機 C，下列陳述式會變更磁碟機 D 上的預設目錄，但 C 則保持預設的磁碟機：</span><span class="sxs-lookup"><span data-stu-id="57f0e-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="57f0e-119">您可以進行相對目錄變更，請輸入兩個句號，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-120">`ChDir`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="57f0e-121">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-122">這個範例會使用`ChDir`函式來變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-123"><paramref name="Path" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="57f0e-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-124">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="57f0e-125">如何：在 Visual Basic 中剖析檔案路徑</span><span class="sxs-lookup"><span data-stu-id="57f0e-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="57f0e-126">在 Visual Basic 中建立、刪除和移動檔案和目錄</span><span class="sxs-lookup"><span data-stu-id="57f0e-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-127">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="57f0e-128">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-128">Required.</span></span> <span data-ttu-id="57f0e-129">指定現有磁碟機的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="57f0e-130">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="57f0e-131">如果 <paramref name="Drive" /> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span><span class="sxs-lookup"><span data-stu-id="57f0e-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="57f0e-132">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-133">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="57f0e-134">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-135">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="57f0e-136">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-137">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-138">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="57f0e-139">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-139">Required.</span></span> <span data-ttu-id="57f0e-140">指定現有磁碟機的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="57f0e-141">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="57f0e-142">如果 <paramref name="Drive" /> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span><span class="sxs-lookup"><span data-stu-id="57f0e-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="57f0e-143">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-144">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="57f0e-145">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-146">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="57f0e-147">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-148">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-149">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-150">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-150">Returns a string representing the current path.</span></span> <span data-ttu-id="57f0e-151"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="57f0e-152">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57f0e-153">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-153">Returns a string representing the current path.</span></span> <span data-ttu-id="57f0e-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="57f0e-155">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-156">表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57f0e-157">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="57f0e-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="57f0e-158">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-158">Optional.</span></span> <span data-ttu-id="57f0e-159">指定現有磁碟機的 <see langword="Char" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="57f0e-160">如果未指定磁碟機，或 <paramref name="Drive" /> 是長度為零的字串 ("")，則 <see langword="CurDir" /> 會傳回目前磁碟機的路徑。</span><span class="sxs-lookup"><span data-stu-id="57f0e-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-161">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-161">Returns a string representing the current path.</span></span> <span data-ttu-id="57f0e-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="57f0e-163">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-164">表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57f0e-165">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="57f0e-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-166">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="57f0e-167"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="57f0e-168">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57f0e-169">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="57f0e-170"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="57f0e-171">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="57f0e-172">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-173">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="57f0e-174">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="57f0e-175">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="57f0e-176">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含參數的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-177">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="57f0e-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="57f0e-178">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="57f0e-179">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="57f0e-180">值</span><span class="sxs-lookup"><span data-stu-id="57f0e-180">Value</span></span>|<span data-ttu-id="57f0e-181">常數</span><span class="sxs-lookup"><span data-stu-id="57f0e-181">Constant</span></span>|<span data-ttu-id="57f0e-182">描述</span><span class="sxs-lookup"><span data-stu-id="57f0e-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="57f0e-183">預設值：</span><span class="sxs-lookup"><span data-stu-id="57f0e-183">Default.</span></span> <span data-ttu-id="57f0e-184">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="57f0e-185">指定唯讀檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="57f0e-186">指定隱藏的檔，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="57f0e-187">指定系統檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="57f0e-188">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="57f0e-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="57f0e-189">指定目錄或資料夾，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="57f0e-190">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="57f0e-191">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-192">這些列舉由 Visual Basic 語言，並可用於您的程式碼，而不是實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-193">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-194">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-194">Optional.</span></span> <span data-ttu-id="57f0e-195">字串運算式，可指定檔名、目錄或資料夾名稱或磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="57f0e-196">如果找不到 <paramref name="PathName" />，則會傳回長度為零的字串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="57f0e-197">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-197">Optional.</span></span> <span data-ttu-id="57f0e-198">字串運算式，可指定檔名、目錄或資料夾名稱或磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="57f0e-199">如果找不到 <paramref name="Pathname" />，則會傳回長度為零的字串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="57f0e-200">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-200">Optional.</span></span> <span data-ttu-id="57f0e-201">列舉類型或數值運算式，其值可指定檔案屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="57f0e-202">如果省略，則 <see langword="Dir" /> 會傳回符合 <paramref name="Pathname" /> 的檔案，但是沒有屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="57f0e-203">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="57f0e-204"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="57f0e-205">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="57f0e-206">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-207">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="57f0e-208">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="57f0e-209">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="57f0e-210">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含任何參數的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-211">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="57f0e-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="57f0e-212">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="57f0e-213">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="57f0e-214">值</span><span class="sxs-lookup"><span data-stu-id="57f0e-214">Value</span></span>|<span data-ttu-id="57f0e-215">常數</span><span class="sxs-lookup"><span data-stu-id="57f0e-215">Constant</span></span>|<span data-ttu-id="57f0e-216">描述</span><span class="sxs-lookup"><span data-stu-id="57f0e-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="57f0e-217">預設值：</span><span class="sxs-lookup"><span data-stu-id="57f0e-217">Default.</span></span> <span data-ttu-id="57f0e-218">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="57f0e-219">指定唯讀檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="57f0e-220">指定隱藏的檔，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="57f0e-221">指定系統檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="57f0e-222">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="57f0e-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="57f0e-223">指定目錄或資料夾，以及沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="57f0e-224">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="57f0e-225">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-226">這些列舉由 Visual Basic 語言，並可用於您的程式碼來取代實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-227">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-228">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-228">Required.</span></span> <span data-ttu-id="57f0e-229">包含任何有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-230">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="57f0e-231">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，為布林值 <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-232">使用`EOF`以避免嘗試取得輸入超過檔案結尾所產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="57f0e-233">`EOF`函式會傳回`False`直到達到檔案結尾為止。</span><span class="sxs-lookup"><span data-stu-id="57f0e-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="57f0e-234">使用開啟的檔案`Random`或`Binary`存取`EOF`會傳回`False`直到最後一個執行`FileGet`函式是無法讀取整個記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="57f0e-235">使用開啟的檔案`Binary`存取，請嘗試透過檔案使用讀取`Input`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="57f0e-236">使用`LOF`並`Loc`函數，而`EOF`讀取二進位檔案時`Input`，或使用`Get`使用時`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="57f0e-237">使用開啟的檔案`Output`，`EOF`一律會傳回`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-238">這個範例會使用`EOF`函式來偵測檔案的結尾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="57f0e-239">這個範例假設`Testfile`是文字檔案，其中包含幾行文字。</span><span class="sxs-lookup"><span data-stu-id="57f0e-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-240">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-241">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-241">Required.</span></span> <span data-ttu-id="57f0e-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="57f0e-242"><see langword="Integer" />.</span></span> <span data-ttu-id="57f0e-243">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-244">傳回列舉類型，表示使用 <see langword="FileOpen" /> 函式開啟的檔案之檔案模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-245"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileAttr" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="57f0e-246">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="57f0e-247">下列列舉類型值表示檔案存取模式：</span><span class="sxs-lookup"><span data-stu-id="57f0e-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="57f0e-248">值</span><span class="sxs-lookup"><span data-stu-id="57f0e-248">Value</span></span> 
 </term><description> <span data-ttu-id="57f0e-249">模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="57f0e-250">1</span><span class="sxs-lookup"><span data-stu-id="57f0e-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="57f0e-251">2</span><span class="sxs-lookup"><span data-stu-id="57f0e-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="57f0e-252">4</span><span class="sxs-lookup"><span data-stu-id="57f0e-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="57f0e-253">8</span><span class="sxs-lookup"><span data-stu-id="57f0e-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="57f0e-254">32</span><span class="sxs-lookup"><span data-stu-id="57f0e-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-255">此函數會傳回代表使用開啟的檔案模式的列舉型別`FileOpen`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-256">這個範例會使用`FileAttr`函數來傳回已開啟之檔案的檔案模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-257">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="57f0e-258">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-258">Optional.</span></span> <span data-ttu-id="57f0e-259">參數陣列，具有 0 個或更多要關閉的通道。</span><span class="sxs-lookup"><span data-stu-id="57f0e-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="57f0e-260">將輸入/輸出 (I/O) 結果導向使用 <see langword="FileOpen" /> 函式開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-261"><see langword="My" /> 提供更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="57f0e-262">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-263">`FileClose`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-264">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-265">如需詳細資訊，請參閱[如何：StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)， [How to:將文字寫入至檔案以 streamwriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[逐步解說：管理檔案和目錄，在 Visual Basic 中的](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="57f0e-266">如果您省略`FileNumbers`，開啟的所有作用中檔案`FileOpen`函式會關閉。</span><span class="sxs-lookup"><span data-stu-id="57f0e-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="57f0e-267">當您關閉已開啟的檔案時`Output`或`Append`，最後的緩衝區的輸出會寫入該檔案的作業系統緩衝區。</span><span class="sxs-lookup"><span data-stu-id="57f0e-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="57f0e-268">所有的緩衝區空間的封閉型相關聯檔案釋出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="57f0e-269">當`FileClose`函式執行、 其檔案的檔案的關聯數字結尾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-270">這個範例會使用`FileClose`函式，以關閉 檔案開啟為`Input`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-271"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="57f0e-272">End 陳述式</span><span class="sxs-lookup"><span data-stu-id="57f0e-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="57f0e-273">Stop 陳述式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-274">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="57f0e-275">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-275">Required.</span></span> <span data-ttu-id="57f0e-276">字串運算式，指定要複製的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="57f0e-277"><paramref name="Source" /> 可包括原始程式檔的目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="57f0e-278">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-278">Required.</span></span> <span data-ttu-id="57f0e-279">字串運算式，指定目標檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="57f0e-280"><paramref name="Destination" /> 可包括目的檔案的目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="57f0e-281">複製檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-281">Copies a file.</span></span> <span data-ttu-id="57f0e-282"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileCopy" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="57f0e-283">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-284">如果您嘗試使用`FileCopy`函式在目前開啟的檔案，則會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="57f0e-285">`FileCopy` 需要完全信任才能在本機的磁碟機上運作。</span><span class="sxs-lookup"><span data-stu-id="57f0e-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-286">這個範例會使用`FileCopy`函式複製到另一個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="57f0e-287">基於此範例的詳細資訊，假設`SrcFile`是包含資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-288"><paramref name="Source" /> 或 <paramref name="Destination" /> 為無效值或尚未指定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-289">檔案已經開啟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-290">檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="57f0e-291">如何：在 Visual Basic 中於不同資料夾內建立檔案複本</span><span class="sxs-lookup"><span data-stu-id="57f0e-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="57f0e-292">如何：在 Visual Basic 中於相同目錄內建立檔案複本</span><span class="sxs-lookup"><span data-stu-id="57f0e-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="57f0e-293">如何：在 Visual Basic 中將目錄複製到另一個目錄</span><span class="sxs-lookup"><span data-stu-id="57f0e-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-294">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-294">Required.</span></span> <span data-ttu-id="57f0e-295">指定檔名的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="57f0e-296"><paramref name="PathName" /> 可能包括目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-297">傳回 <see langword="Date" /> 值，表示寫入檔案的日期和時間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="57f0e-298">相較於 <see langword="FileDateTime" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="57f0e-299">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="57f0e-300"><see langword="Date" /> 值，表示建立檔案或上次修改檔案的日期和時間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57f0e-301">這個範例會使用`FileDateTime`建立函式來判斷日期和時間的檔案或上次修改檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="57f0e-302">格式的日期和時間顯示為基礎的系統地區設定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-303"><paramref name="PathName" /> 無效或包含萬用字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-304">目標檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-305">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-306">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-307">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-308">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-309">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-309">Required.</span></span> <span data-ttu-id="57f0e-310">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-311">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-311">Required.</span></span> <span data-ttu-id="57f0e-312">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-313">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-313">Optional.</span></span> <span data-ttu-id="57f0e-314">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-315">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-316">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-317">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-318">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-319">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-320">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-321">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-322">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-323">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-324">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-324">Random Mode</span></span>  
 <span data-ttu-id="57f0e-325">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-326">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-327">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-328">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-329">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-330">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-331">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-332">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-333">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-334">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-335">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-336">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-337">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-338">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-339">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-340">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-341">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-342">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-343">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-344">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-345">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-346">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-347">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-348">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-349">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-350">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-351">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-352">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-352">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-353">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-354">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-355">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-356">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-357">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-358">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-359">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-360">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-361">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-362"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-363">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-364">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-365">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-366">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-366">Required.</span></span> <span data-ttu-id="57f0e-367">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-368">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-368">Required.</span></span> <span data-ttu-id="57f0e-369">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-370">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-370">Optional.</span></span> <span data-ttu-id="57f0e-371">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-372">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-373">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-374">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-375">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-376">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-377">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-378">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-379">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-380">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-381">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-381">Random Mode</span></span>  
 <span data-ttu-id="57f0e-382">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-383">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-384">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-385">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-386">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-387">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-388">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-389">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-390">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-391">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-392">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-393">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-394">如果不使用描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-394">If the descriptor is not used.</span></span> <span data-ttu-id="57f0e-395">則的大小和陣列的界限傳遞到`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-396">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-397">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-398">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-399">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-400">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-401">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-402">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-403">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-404">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-405">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-406">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-407">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-408">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-409">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-410">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-410">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-411">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-412">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-413">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-414">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-415">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-416">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-417">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-418">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-419">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-420"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-421">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-422">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-423">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-424">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-424">Required.</span></span> <span data-ttu-id="57f0e-425">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-426">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-426">Required.</span></span> <span data-ttu-id="57f0e-427">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-428">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-428">Optional.</span></span> <span data-ttu-id="57f0e-429">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-430">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-431">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-432">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-433">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-434">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-435">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-436">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-437">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-438">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-439">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-439">Random Mode</span></span>  
 <span data-ttu-id="57f0e-440">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-441">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-442">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-443">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-444">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-445">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-446">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-447">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-448">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-449">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-450">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-451">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-452">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-453">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-454">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-455">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-456">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-457">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-458">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-459">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-460">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-461">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-462">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-463">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-464">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-465">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-466">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-467">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-467">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-468">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-469">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-470">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-471">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-472">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-473">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-474">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-475">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-476">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-477"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-478">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-479">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-480">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-481">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-481">Required.</span></span> <span data-ttu-id="57f0e-482">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-483">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-483">Required.</span></span> <span data-ttu-id="57f0e-484">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-485">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-485">Optional.</span></span> <span data-ttu-id="57f0e-486">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-487">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-488">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-489">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-490">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-491">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-492">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-493">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-494">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-495">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-496">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-496">Random Mode</span></span>  
 <span data-ttu-id="57f0e-497">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-498">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-499">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-500">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-501">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-502">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-503">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-504">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-505">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-506">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-507">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-508">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-509">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-510">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-511">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-512">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-513">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-514">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-515">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-516">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-517">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-518">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-519">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-520">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-521">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-522">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-523">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-524">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-524">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-525">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-526">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-527">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-528">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-529">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-530">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-531">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-532">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-533">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-534"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-535">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-536">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-537">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-538">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-538">Required.</span></span> <span data-ttu-id="57f0e-539">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-540">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-540">Required.</span></span> <span data-ttu-id="57f0e-541">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-542">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-542">Optional.</span></span> <span data-ttu-id="57f0e-543">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-544">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-545">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-546">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-547">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-548">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-549">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-550">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-551">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-552">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-553">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-553">Random Mode</span></span>  
 <span data-ttu-id="57f0e-554">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-555">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-556">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-557">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-558">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-559">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-560">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-561">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-562">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-563">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-564">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-565">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-566">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-567">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-568">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-569">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-570">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-571">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-572">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-573">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-574">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-575">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-576">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-577">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-578">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-579">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-580">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-581">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-581">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-582">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-583">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-584">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-585">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-586">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-587">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-588">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-589">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-590">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-591"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-592">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-593">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-594">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-595">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-595">Required.</span></span> <span data-ttu-id="57f0e-596">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-597">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-597">Required.</span></span> <span data-ttu-id="57f0e-598">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-599">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-599">Optional.</span></span> <span data-ttu-id="57f0e-600">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-601">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-602">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-603">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-604">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-605">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-606">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-607">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-608">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-609">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-610">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-610">Random Mode</span></span>  
 <span data-ttu-id="57f0e-611">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-612">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-613">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-614">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-615">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-616">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-617">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-618">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-619">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-620">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-621">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-622">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-623">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-624">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-625">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-626">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-627">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-628">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-629">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-630">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-631">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-632">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-633">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-634">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-635">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-636">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-637">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-638">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-638">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-639">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-640">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-641">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-642">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-643">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-644">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-645">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-646">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-647">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-648"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-649">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-650">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-651">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-652">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-652">Required.</span></span> <span data-ttu-id="57f0e-653">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-654">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-654">Required.</span></span> <span data-ttu-id="57f0e-655">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-656">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-656">Optional.</span></span> <span data-ttu-id="57f0e-657">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-658">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-659">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-660">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-661">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-662">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-663">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-664">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-665">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-666">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-667">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-667">Random Mode</span></span>  
 <span data-ttu-id="57f0e-668">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-669">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-670">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-671">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-672">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-673">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-674">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-675">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-676">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-677">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-678">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-679">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-680">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-681">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-682">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-683">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-684">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-685">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-686">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-687">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-688">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-689">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-690">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-691">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-692">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-693">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-694">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-695">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-695">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-696">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-697">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-698">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-699">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-700">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-701">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-702">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-703">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-704">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-705"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-706">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-707">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-708">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-709">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-709">Required.</span></span> <span data-ttu-id="57f0e-710">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-711">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-711">Required.</span></span> <span data-ttu-id="57f0e-712">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-713">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-713">Optional.</span></span> <span data-ttu-id="57f0e-714">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-715">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-716">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-717">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-718">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-719">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-720">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-721">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-722">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-723">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-724">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-724">Random Mode</span></span>  
 <span data-ttu-id="57f0e-725">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-726">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-727">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-728">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-729">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-730">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-731">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-732">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-733">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-734">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-735">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-736">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-737">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-738">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-739">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-740">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-741">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-742">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-743">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-744">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-745">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-746">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-747">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-748">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-749">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-750">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-751">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-752">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-752">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-753">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-754">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-755">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-756">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-757">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-758">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-759">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-760">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-761">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-762"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-763">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-764">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-765">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-766">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-766">Required.</span></span> <span data-ttu-id="57f0e-767">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-768">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-768">Required.</span></span> <span data-ttu-id="57f0e-769">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-770">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-770">Optional.</span></span> <span data-ttu-id="57f0e-771">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-772">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-773">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-774">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-775">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-776">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-777">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-778">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-779">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-780">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-781">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-781">Random Mode</span></span>  
 <span data-ttu-id="57f0e-782">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-783">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-784">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-785">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-786">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-787">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-788">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-789">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-790">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-791">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-792">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-793">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-794">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-795">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-796">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-797">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-798">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-799">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-800">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-801">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-802">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-803">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-804">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-805">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-806">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-807">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-808">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-809">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-809">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-810">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-811">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-812">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-813">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-814">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-815">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-816">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-817">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-818">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-819"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-820">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-821">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-822">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-823">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-823">Required.</span></span> <span data-ttu-id="57f0e-824">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-825">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-825">Required.</span></span> <span data-ttu-id="57f0e-826">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-827">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-827">Optional.</span></span> <span data-ttu-id="57f0e-828">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-829">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-830">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-831">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-832">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-833">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-834">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-835">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-836">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-837">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-838">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-838">Random Mode</span></span>  
 <span data-ttu-id="57f0e-839">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-840">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-841">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-842">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-843">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-844">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-845">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-846">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-847">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-848">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-849">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-850">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-851">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-852">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-853">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-854">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-855">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-856">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-857">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-858">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-859">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-860">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-861">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-862">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-863">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-864">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-865">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-866">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-866">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-867">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-868">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-869">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-870">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-871">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-872">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-873">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-874">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-875">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-876"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-877">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-878">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-879">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-880">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-880">Required.</span></span> <span data-ttu-id="57f0e-881">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-882">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-882">Required.</span></span> <span data-ttu-id="57f0e-883">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-884">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-884">Optional.</span></span> <span data-ttu-id="57f0e-885">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-886">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-887">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-888">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-889">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-890">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-891">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-892">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-893">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-894">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-895">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-895">Random Mode</span></span>  
 <span data-ttu-id="57f0e-896">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-897">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-898">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-899">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-900">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-901">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-902">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-903">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-904">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-905">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-906">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-907">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-908">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-909">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-910">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-911">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-912">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-913">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-914">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-915">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-916">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-917">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-918">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-919">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-920">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-921">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-922">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-923">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-923">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-924">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-925">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-926">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-927">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-928">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-929">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-930">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-931">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-932">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-933"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-934">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-935">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-936">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-937">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-937">Required.</span></span> <span data-ttu-id="57f0e-938">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-939">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-939">Required.</span></span> <span data-ttu-id="57f0e-940">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-941">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-941">Optional.</span></span> <span data-ttu-id="57f0e-942">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="57f0e-943">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-943">Optional.</span></span> <span data-ttu-id="57f0e-944">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-944">Applies only when writing a string.</span></span> <span data-ttu-id="57f0e-945">指定是否要為字串寫入描述長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="57f0e-946">預設為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="57f0e-947">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-948">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-949">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-950">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-951">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-952">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-953">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-954">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-955">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-956">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-956">Random Mode</span></span>  
 <span data-ttu-id="57f0e-957">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-958">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-959">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-960">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-961">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-962">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-963">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-964">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-965">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-966">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-967">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-968">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-969">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-970">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-971">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-972">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-973">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-974">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-975">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-976">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-977">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-978">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-979">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-980">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-981">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-982">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-983">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-984">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-984">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-985">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-986">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-987">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-988">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-989">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-990">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-991">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-992">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-993">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-994"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-995">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-996">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-997">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-998">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-998">Required.</span></span> <span data-ttu-id="57f0e-999">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1000">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1000">Required.</span></span> <span data-ttu-id="57f0e-1001">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1002">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1002">Optional.</span></span> <span data-ttu-id="57f0e-1003">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="57f0e-1004">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1004">Optional.</span></span> <span data-ttu-id="57f0e-1005">只有在編寫陣列時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1005">Applies only when writing an array.</span></span> <span data-ttu-id="57f0e-1006">指定是否將陣列視為動態 (Dynamic)，以及是否有必要指定描述陣列大小和界限的陣列描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="57f0e-1007">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1007">Optional.</span></span> <span data-ttu-id="57f0e-1008">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1008">Applies only when writing a string.</span></span> <span data-ttu-id="57f0e-1009">指定是否要為字串寫入描述長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="57f0e-1010">預設為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="57f0e-1011">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="57f0e-1012">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="57f0e-1013">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1014">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1015">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="57f0e-1016">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1017">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-1018">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-1019">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1020">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1020">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1021">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1022">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1023">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1024">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-1025">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1026">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1027">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-1028">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1029">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="57f0e-1030">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1031">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="57f0e-1032">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="57f0e-1033">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="57f0e-1034">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1035">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1036">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1037">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="57f0e-1038">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="57f0e-1039">描述元的 18 個位元組：(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="57f0e-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="57f0e-1040">200 個位元組的資料：(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="57f0e-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-1041">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="57f0e-1042">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-1043">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1044">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1045">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="57f0e-1046">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-1047">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1048">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1048">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1049">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1050">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1051">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1052">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1053">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="57f0e-1054">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="57f0e-1055">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1056">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="57f0e-1057">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1058"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1059">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-1060">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1061">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1062">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1062">Required.</span></span> <span data-ttu-id="57f0e-1063">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1064">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1064">Required.</span></span> <span data-ttu-id="57f0e-1065">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1066">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1066">Optional.</span></span> <span data-ttu-id="57f0e-1067">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1068">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="57f0e-1069">相較於 <see langword="FileGetObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="57f0e-1070">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1071">`FileGetObject`而不是使用函式`FileGet`若要避免模稜兩可在編譯時期，如果型別`Object`傳回而不是另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="57f0e-1072">如果您想要寫出`Variant`型別，`FileGetObject`需要。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="57f0e-1073">有疑問，如果您使用物件來作為第二個參數，一律建議您改用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="57f0e-1074">`FileGetObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1075">讀取的資料`FileGetObject`通常會使用寫入`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="57f0e-1076">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1077">如果您省略`RecordNumber`，`FileGetObject`讀取最後一個之後的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或最後一個指向`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1078">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1078">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1079">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1080">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGetObject`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1081">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開頭之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1082">因為填補資料的數量無法精確地判斷，所以最好有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="57f0e-1083">正在讀取到變數是否為字串，預設`FileGetObject`讀取雙位元組描述元包含字串的長度，然後再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1084">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1085">Visual Basic 6.0 和更早版本支援固定長度字串和讀取檔案時，長度的描述項不會寫入。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="57f0e-1086">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1087">如果正在讀入的變數陣列，則所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1088">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1089">其長度會等於 2 加上 8 時間維度的數目：2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="57f0e-1090">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="57f0e-1091">218 個位元組的分散，如下所示：描述元 (2 + 8 \* 2)、 18 個位元組，100 個位元組 (5 \* 10 \* 4) 的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="57f0e-1092">`FileGetObject` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1093">在磁碟上，動態陣列中的使用者定義型別 (以`FilePutObject`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元：2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="57f0e-1094">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目，包括任何陣列和其描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="57f0e-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>類別，可指出的大小字串寫入時的結構中的字串欄位套用至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1096">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1096">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1097">在開啟的檔案`Binary`模式中，所有`Random`套用規則，但有下列例外：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="57f0e-1098">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1099">`FileGetObject` 所有連續讀取變數，從磁碟，也就是記錄之間的不帶填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1100">在結構中，陣列以外的所有陣列`FileGetObject`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="57f0e-1101">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="57f0e-1102">`FileGetObject` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1103">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-1104">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-1105">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1106">下列範例讀入測試檔案中的記錄，然後擷取它。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-1107">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1108">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-1109">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1109">Required.</span></span> <span data-ttu-id="57f0e-1110">指定檔案的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="57f0e-1111"><paramref name="PathName" /> 可能包括目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-1112">傳回值，指定檔案的長度 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="57f0e-1113">相較於 <see langword="FileLen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="57f0e-1114">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-1115">檔案的長度 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1116">如果指定的檔案時，開啟`FileLen`函式呼叫，傳回的值代表檔案的大小，在它已開啟的時間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-1117">若要取得目前已開啟之檔案的長度，請使用`LOF`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1118">這個範例會使用`FileLen`函數來傳回檔案的長度，以位元組為單位。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="57f0e-1119">基於此範例的詳細資訊，假設`TestFile`是包含某些資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-1120">檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-1121">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1122">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1122">Required.</span></span> <span data-ttu-id="57f0e-1123">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1123">Any valid file number.</span></span> <span data-ttu-id="57f0e-1124">使用 <see langword="FreeFile" /> 函式取得下一個可用的檔案編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="57f0e-1125">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1125">Required.</span></span> <span data-ttu-id="57f0e-1126">字串運算式，可指定檔名，也可能包括目錄或資料夾與磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="57f0e-1127">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1127">Required.</span></span> <span data-ttu-id="57f0e-1128">指定檔案模式的列舉類型：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" /> </span><span class="sxs-lookup"><span data-stu-id="57f0e-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="57f0e-1129">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="57f0e-1130">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1130">Optional.</span></span> <span data-ttu-id="57f0e-1131">指定開啟檔案上允許的作業之列舉類型：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="57f0e-1132">預設值為 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="57f0e-1133">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="57f0e-1134">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1134">Optional.</span></span> <span data-ttu-id="57f0e-1135">指定開啟的檔案上其他處理序不允許之作業的列舉類型：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="57f0e-1136">預設值為 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="57f0e-1137">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="57f0e-1138">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1138">Optional.</span></span> <span data-ttu-id="57f0e-1139">數字小於或等於 32,767 (位元組)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="57f0e-1140">對於為隨機存取開啟的檔案而言，這個值是資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="57f0e-1141">對於循序檔案而言，這個值是緩衝的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="57f0e-1142">開啟要當做輸入或輸出的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1142">Opens a file for input or output.</span></span> <span data-ttu-id="57f0e-1143">相較於 <see langword="FileOpen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="57f0e-1144">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1145">`FileOpen`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-1146">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-1147">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-1148">您必須開啟檔案，才能在其上執行任何 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="57f0e-1149">`FileOpen` 會針對 I/O 配置緩衝區至檔案，並判斷權限與緩衝區使用的模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-1150">寫入至檔案時，應用程式可能要建立檔案，如果嘗試寫入的檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="57f0e-1151">若要這樣做，它會需要權限的 建立檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="57f0e-1152">不過，如果指定的檔案`FileName`存在，應用程式需求`Write`只對檔案本身的權限。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="57f0e-1153">盡量，以協助改善安全性、 部署和授與期間建立檔案的任一處`Write`該檔案的權限唯一的而不是整個目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="57f0e-1154">若要改善安全性，請將資料寫入使用者目錄，而不是目錄的根目錄或 Program Files 目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="57f0e-1155">若要開啟的通道可使用`FreeFile()`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-1156">`FileOpen`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="57f0e-1157">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1158">此範例說明的各種用法`FileOpen`函式可讓輸入與輸出至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="57f0e-1159">下列程式碼會開啟檔案`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="57f0e-1160">此範例會開啟中的檔案`Binary`模式只允許寫入作業。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="57f0e-1161">下列範例會開啟中的檔案`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="57f0e-1162">檔案包含的結構記錄`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="57f0e-1163">此程式碼範例會開啟中的檔案`Output`模式; 任何程序可以讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="57f0e-1164">此程式碼範例會開啟中的檔案`Binary`模式進行讀取，其他處理序無法讀取檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1165">資料錄的長度為負數 (而且不等於 -1)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1166"><paramref name="FileName" /> 已經開啟，或 <paramref name="FileName" /> 無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-1167">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1168">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-1169">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1170">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1171">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1172">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1172">Required.</span></span> <span data-ttu-id="57f0e-1173">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1174">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1174">Required.</span></span> <span data-ttu-id="57f0e-1175">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1176">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1176">Optional.</span></span> <span data-ttu-id="57f0e-1177">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1178">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1179">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1180">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1181">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1182">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1183">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1184">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1185">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1186">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1187">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1188">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1188">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1189">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1190">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1191">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1192">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1193">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1194">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1195">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1196">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1197">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1198">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1199">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1200">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1201">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1202">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1203">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1204">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1205">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1206">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1207">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1208">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1209">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1210">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1211">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1212">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1213">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1214">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1215">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1216">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1216">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1217">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1218">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1219">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1220">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1221">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1222">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1223">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1224">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1225">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1226">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1227">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1228">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1229"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1230">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1231">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1232">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1232">Required.</span></span> <span data-ttu-id="57f0e-1233">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1234">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1234">Required.</span></span> <span data-ttu-id="57f0e-1235">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1236">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1236">Optional.</span></span> <span data-ttu-id="57f0e-1237">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1238">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1239">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1240">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1241">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1242">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1243">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1244">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1245">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1246">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1247">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1248">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1248">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1249">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1250">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1251">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1252">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1253">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1254">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1255">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1256">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1257">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1258">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1259">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1260">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1261">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1262">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1263">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1264">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1265">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1266">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1267">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1268">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1269">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1270">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1271">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1272">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1273">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1274">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1275">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1276">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1276">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1277">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1278">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1279">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1280">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1281">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1282">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1283">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1284">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1285">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1286">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1287">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1288">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1289"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1290">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1291">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1292">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1292">Required.</span></span> <span data-ttu-id="57f0e-1293">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1294">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1294">Required.</span></span> <span data-ttu-id="57f0e-1295">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1296">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1296">Optional.</span></span> <span data-ttu-id="57f0e-1297">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1298">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1299">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1300">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1301">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1302">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1303">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1304">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1305">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1306">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1307">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1308">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1308">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1309">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1310">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1311">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1312">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1313">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1314">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1315">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1316">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1317">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1318">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1319">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1320">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1321">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1322">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1323">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1324">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1325">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1326">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1327">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1328">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1329">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1330">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1331">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1332">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1333">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1334">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1335">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1336">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1336">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1337">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1338">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1339">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1340">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1341">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1342">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1343">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1344">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1345">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1346">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1347">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1348">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1349"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1350">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1351">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1352">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1352">Required.</span></span> <span data-ttu-id="57f0e-1353">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1354">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1354">Required.</span></span> <span data-ttu-id="57f0e-1355">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1356">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1356">Optional.</span></span> <span data-ttu-id="57f0e-1357">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1358">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1359">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1360">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1361">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1362">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1363">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1364">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1365">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1366">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1367">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1368">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1368">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1369">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1370">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1371">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1372">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1373">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1374">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1375">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1376">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1377">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1378">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1379">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1380">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1381">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1382">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1383">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1384">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1385">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1386">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1387">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1388">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1389">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1390">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1391">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1392">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1393">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1394">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1395">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1396">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1396">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1397">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1398">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1399">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1400">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1401">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1402">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1403">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1404">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1405">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1406">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1407">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1408">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1409"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1410">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1411">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1412">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1412">Required.</span></span> <span data-ttu-id="57f0e-1413">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1414">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1414">Required.</span></span> <span data-ttu-id="57f0e-1415">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1416">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1416">Optional.</span></span> <span data-ttu-id="57f0e-1417">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1418">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1419">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1420">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1421">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1422">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1423">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1424">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1425">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1426">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1427">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1428">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1428">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1429">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1430">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1431">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1432">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1433">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1434">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1435">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1436">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1437">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1438">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1439">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1440">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1441">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1442">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1443">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1444">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1445">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1446">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1447">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1448">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1449">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1450">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1451">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1452">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1453">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1454">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1455">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1456">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1456">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1457">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1458">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1459">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1460">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1461">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1462">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1463">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1464">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1465">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1466">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1467">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1468">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1469"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1470">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1471">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1472">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1472">Required.</span></span> <span data-ttu-id="57f0e-1473">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1474">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1474">Required.</span></span> <span data-ttu-id="57f0e-1475">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1476">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1476">Optional.</span></span> <span data-ttu-id="57f0e-1477">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1478">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1479">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1480">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1481">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1482">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1483">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1484">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1485">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1486">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1487">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1488">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1488">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1489">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1490">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1491">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1492">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1493">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1494">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1495">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1496">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1497">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1498">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1499">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1500">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1501">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1502">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1503">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1504">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1505">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1506">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1507">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1508">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1509">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1510">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1511">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1512">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1513">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1514">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1515">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1516">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1516">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1517">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1518">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1519">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1520">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1521">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1522">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1523">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1524">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1525">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1526">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1527">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1528">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1529"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1530">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1531">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1532">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1532">Required.</span></span> <span data-ttu-id="57f0e-1533">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1534">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1534">Required.</span></span> <span data-ttu-id="57f0e-1535">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1536">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1536">Optional.</span></span> <span data-ttu-id="57f0e-1537">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1538">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1539">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1540">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1541">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1542">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1543">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1544">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1545">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1546">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1547">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1548">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1548">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1549">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1550">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1551">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1552">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1553">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1554">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1555">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1556">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1557">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1558">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1559">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1560">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1561">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1562">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1563">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1564">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1565">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1566">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1567">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1568">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1569">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1570">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1571">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1572">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1573">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1574">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1575">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1576">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1576">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1577">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1578">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1579">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1580">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1581">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1582">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1583">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1584">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1585">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1586">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1587">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1588">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1589"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1590">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1591">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1592">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1592">Required.</span></span> <span data-ttu-id="57f0e-1593">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1594">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1594">Required.</span></span> <span data-ttu-id="57f0e-1595">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1596">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1596">Optional.</span></span> <span data-ttu-id="57f0e-1597">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1598">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1599">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1600">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1601">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1602">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1603">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1604">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1605">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1606">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1607">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1608">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1608">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1609">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1610">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1611">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1612">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1613">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1614">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1615">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1616">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1617">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1618">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1619">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1620">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1621">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1622">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1623">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1624">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1625">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1626">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1627">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1628">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1629">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1630">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1631">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1632">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1633">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1634">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1635">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1636">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1636">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1637">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1638">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1639">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1640">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1641">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1642">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1643">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1644">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1645">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1646">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1647">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1648">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1649"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1650">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1651">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1652">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1652">Required.</span></span> <span data-ttu-id="57f0e-1653">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1654">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1654">Required.</span></span> <span data-ttu-id="57f0e-1655">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1656">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1656">Optional.</span></span> <span data-ttu-id="57f0e-1657">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1658">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1659">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1660">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1661">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1662">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1663">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1664">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1665">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1666">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1667">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1668">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1668">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1669">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1670">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1671">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1672">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1673">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1674">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1675">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1676">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1677">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1678">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1679">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1680">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1681">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1682">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1683">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1684">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1685">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1686">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1687">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1688">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1689">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1690">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1691">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1692">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1693">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1694">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1695">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1696">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1696">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1697">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1698">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1699">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1700">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1701">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1702">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1703">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1704">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1705">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1706">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1707">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1708">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1709"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1710">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1711">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1712">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1712">Required.</span></span> <span data-ttu-id="57f0e-1713">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1714">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1714">Required.</span></span> <span data-ttu-id="57f0e-1715">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1716">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1716">Optional.</span></span> <span data-ttu-id="57f0e-1717">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1718">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1719">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1720">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1721">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1722">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1723">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1724">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1725">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1726">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1727">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1728">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1728">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1729">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1730">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1731">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1732">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1733">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1734">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1735">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1736">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1737">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1738">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1739">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1740">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1741">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1742">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1743">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1744">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1745">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1746">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1747">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1748">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1749">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1750">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1751">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1752">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1753">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1754">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1755">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1756">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1756">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1757">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1758">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1759">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1760">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1761">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1762">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1763">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1764">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1765">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1766">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1767">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1768">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1769"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1770">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1771">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1772">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1772">Required.</span></span> <span data-ttu-id="57f0e-1773">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1774">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1774">Required.</span></span> <span data-ttu-id="57f0e-1775">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1776">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1776">Optional.</span></span> <span data-ttu-id="57f0e-1777">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1778">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1779">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1780">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1781">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1782">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1783">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1784">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1785">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1786">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1787">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1788">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1788">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1789">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1790">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1791">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1792">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1793">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1794">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1795">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1796">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1797">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1798">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1799">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1800">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1801">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1802">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1803">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1804">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1805">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1806">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1807">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1808">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1809">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1810">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1811">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1812">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1813">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1814">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1815">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1816">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1816">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1817">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1818">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1819">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1820">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1821">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1822">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1823">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1824">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1825">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1826">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1827">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1828">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1829"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1830">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1831">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1832">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1832">Required.</span></span> <span data-ttu-id="57f0e-1833">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1834">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1834">Required.</span></span> <span data-ttu-id="57f0e-1835">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1836">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1836">Optional.</span></span> <span data-ttu-id="57f0e-1837">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-1838">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1839">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1840">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1841">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1842">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1843">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1844">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1845">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1846">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1847">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1848">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1848">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1849">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1850">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1851">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1852">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1853">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1854">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1855">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1856">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1857">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1858">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1859">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1860">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1861">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1862">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1863">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1864">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1865">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1866">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1867">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1868">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1869">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1870">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1871">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1872">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1873">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1874">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1875">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1876">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1876">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1877">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1878">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1879">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1880">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1881">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1882">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1883">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1884">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1885">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1886">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1887">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1888">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1889"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1890">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1891">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1892">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1892">Required.</span></span> <span data-ttu-id="57f0e-1893">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1894">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1894">Required.</span></span> <span data-ttu-id="57f0e-1895">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1896">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1896">Optional.</span></span> <span data-ttu-id="57f0e-1897">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="57f0e-1898">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1898">Optional.</span></span> <span data-ttu-id="57f0e-1899">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1899">Applies only when writing a string.</span></span> <span data-ttu-id="57f0e-1900">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="57f0e-1901">預設為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="57f0e-1902">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1903">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1904">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1905">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1906">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1907">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1908">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1909">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1910">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1911">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1912">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1912">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1913">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1914">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1915">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1916">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1917">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1918">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1919">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1920">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1921">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1922">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1923">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1924">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1925">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1926">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1927">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1928">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1929">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1930">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1931">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1932">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-1933">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-1934">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-1935">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-1936">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-1937">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-1938">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-1939">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-1940">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1940">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-1941">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-1942">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-1943">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-1944">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-1945">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-1946">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-1947">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-1948">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-1949">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-1950">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-1951">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-1952">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-1953"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-1954">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-1955">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-1956">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1956">Required.</span></span> <span data-ttu-id="57f0e-1957">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-1958">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1958">Required.</span></span> <span data-ttu-id="57f0e-1959">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-1960">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1960">Optional.</span></span> <span data-ttu-id="57f0e-1961">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="57f0e-1962">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1962">Optional.</span></span> <span data-ttu-id="57f0e-1963">只有在編寫陣列時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1963">Applies only when writing an array.</span></span> <span data-ttu-id="57f0e-1964">指定陣列是否要視為動態 (Dynamic)，以及是否要針對描述長度的字串編寫陣列描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="57f0e-1965">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1965">Optional.</span></span> <span data-ttu-id="57f0e-1966">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1966">Applies only when writing a string.</span></span> <span data-ttu-id="57f0e-1967">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="57f0e-1968">預設為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="57f0e-1969">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="57f0e-1970">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="57f0e-1971">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-1972">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-1973">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="57f0e-1974">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-1975">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="57f0e-1976">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-1977">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-1978">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-1979">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-1979">Random Mode</span></span>  
 <span data-ttu-id="57f0e-1980">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-1981">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-1982">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-1983">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-1984">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-1985">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="57f0e-1986">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="57f0e-1987">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-1988">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-1989">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-1990">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-1991">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-1992">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-1993">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="57f0e-1994">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="57f0e-1995">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="57f0e-1996">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="57f0e-1997">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="57f0e-1998">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-1999">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="57f0e-2000">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-2001">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="57f0e-2002">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="57f0e-2003">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="57f0e-2004">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="57f0e-2005">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="57f0e-2006">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="57f0e-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-2007">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2007">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-2008">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="57f0e-2009">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="57f0e-2010">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-2011">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="57f0e-2012">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="57f0e-2013">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="57f0e-2014">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="57f0e-2015">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="57f0e-2016">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="57f0e-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="57f0e-2017">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2018">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="57f0e-2019">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2020"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2021">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2022">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2023">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2023">Required.</span></span> <span data-ttu-id="57f0e-2024">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2025">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2025">Required.</span></span> <span data-ttu-id="57f0e-2026">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="57f0e-2027">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2027">Optional.</span></span> <span data-ttu-id="57f0e-2028">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="57f0e-2029">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="57f0e-2030">相較於 <see langword="FilePutObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="57f0e-2031">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2032">`FilePutObject`而不是使用函式`FilePut`若要避免模稜兩可在編譯時期，如果型別`Object`傳遞，而另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="57f0e-2033">`FilePutObject` 寫入，並讀取描述物件的描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="57f0e-2034">如果您想要寫出`Variant`型別，`FilePutObject`需要。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="57f0e-2035">如有疑問，如果您使用物件來作為第二個參數，我們建議您一律使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="57f0e-2036">`FilePutObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-2037">使用 `FilePutObject` 寫入的資料，通常會透過使用 `FileGetObject` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="57f0e-2038">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="57f0e-2039">如果您省略`RecordNumber`，`FilePutObject`寫入最後一個之後的下一步 的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或資料錄或位元組所指的最後一個`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="57f0e-2040">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="57f0e-2041">`FilePutObject` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="57f0e-2042">如果您使用`StringIsFixedLength`  =  `True`具有`FilePutObject`，您必須執行相同的`FileGetObject`，和您也必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="57f0e-2043">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2043">Random Mode</span></span>  
 <span data-ttu-id="57f0e-2044">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="57f0e-2045">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePutObject`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="57f0e-2046">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="57f0e-2047">填補資料的數量無法精確地判斷，因為它通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="57f0e-2048">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="57f0e-2049">如果要寫入的變數是物件，包含數值的型別，`FilePutObject`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="57f0e-2050">比方說，撰寫物件時，包含整數`FilePutObject`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="57f0e-2051">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="57f0e-2052">如果寫入的變數是包含字串、 物件`FilePutObject`寫入雙位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="57f0e-2053">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="57f0e-2054">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="57f0e-2055">如果寫入的變數陣列，則所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="57f0e-2056">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="57f0e-2057">其長度會等於 2 加上 8 時間維度的數目：(2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="57f0e-2058">二進位模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2058">Binary Mode</span></span>  
 <span data-ttu-id="57f0e-2059">在開啟的檔案`Binary`模式中，所有`Random`套用模式的規則，除了：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="57f0e-2060">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="57f0e-2061">`FilePutObject` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2062">這個範例會使用`FilePutObject`函式來將字串寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2063">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2064">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2064">Required.</span></span> <span data-ttu-id="57f0e-2065">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="57f0e-2066">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2066">Required.</span></span> <span data-ttu-id="57f0e-2067">0-255 範圍內的數值運算式 (包含頭尾)，表示在開始新行之前，會有多少字元出現在一行上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="57f0e-2068">如果 <paramref name="RecordWidth" /> 等於 0，則一行的長度將沒有限制。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="57f0e-2069"><paramref name="RecordWidth" /> 的預設值為 0。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="57f0e-2070">為藉由使用 <see langword="FileOpen" /> 函式開啟的檔案指派輸出行寬度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="57f0e-2071">這個範例會使用`FileWidth`函式來設定輸出行寬度的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2072">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2073">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57f0e-2074">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2075">整數值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用檔案編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2076">使用`FreeFile`提供尚未使用的檔案數字。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2077">這個範例會使用`FreeFile`函式傳回下一個可用的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="57f0e-2078">輸出，在迴圈內，開啟五個檔案和一些範例資料會寫入每一個。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2079">使用中的檔案超過 255 個。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2080">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-2081">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2081">Required.</span></span> <span data-ttu-id="57f0e-2082">指定檔案、目錄或資料夾名稱的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="57f0e-2083"><paramref name="PathName" /> 可包含目錄或資料夾，以及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-2084">傳回 <see langword="FileAttribute" /> 值，表示檔案、目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="57f0e-2085">相較於 <see langword="FileAttribute" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="57f0e-2086">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2087"><see langword="GetAttr" /> 傳回的值是以下列舉值的總和：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2087">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="57f0e-2088">值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2088">Value</span></span> 
 </term><description> <span data-ttu-id="57f0e-2089">常數</span><span class="sxs-lookup"><span data-stu-id="57f0e-2089">Constant</span></span> 
 </description><description> <span data-ttu-id="57f0e-2090">描述</span><span class="sxs-lookup"><span data-stu-id="57f0e-2090">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="57f0e-2091">一般。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2091">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="57f0e-2092">唯讀。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2092">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="57f0e-2093">隱藏。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2093">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="57f0e-2094">系統檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2094">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="57f0e-2095">目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2095">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="57f0e-2096">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2096">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="57f0e-2097">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2097">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="57f0e-2098">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2098">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="57f0e-2099">您可在程式碼中的任何地方使用這些名稱來取代實際值。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2099">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2100">若要判斷設定了哪些屬性，請使用`And`運算子來執行所傳回的值的位元比較`GetAttr`函式和您想要個別的檔案屬性的值。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2100">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="57f0e-2101">如果結果不是零，該屬性是設定具名的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2101">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="57f0e-2102">例如，下列的傳回值`And`運算式是零，如果`Archive`未設定屬性：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2102">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="57f0e-2103">會傳回非零值，如果`Archive`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2103">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2104">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2104">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2105"><paramref name="Pathname" /> 無效或包含萬用字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2105"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-2106">目標檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2106">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="57f0e-2107">And 運算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2107">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2108">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2108">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-2109">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2110">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2110">Required.</span></span> <span data-ttu-id="57f0e-2111">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2111">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2112">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2112">Required.</span></span> <span data-ttu-id="57f0e-2113">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2113">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2114">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2114">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2115">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2115">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2116">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2116">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2117">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2117">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2118">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2118">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2119">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2119">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2120">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2120">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2121">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2121">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2122">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2122">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2123">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2123">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2124">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2124">Data</span></span>|<span data-ttu-id="57f0e-2125">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2125">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2126">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2126">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2127">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2127">Empty</span></span>|  
|<span data-ttu-id="57f0e-2128">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2128">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2129">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2129">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2130">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2130">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2131">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2131">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2132">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2132">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2133">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2133">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2134">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2134">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2135">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2135">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2136">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2136">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2137">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2137">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2138">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2138">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2139">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2139">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2140">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2140">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2141">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2141">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2142">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2142">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2143">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2143">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2144">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2144">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2145">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2145">Required.</span></span> <span data-ttu-id="57f0e-2146">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2146">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2147">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2147">Required.</span></span> <span data-ttu-id="57f0e-2148">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2148">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2149">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2149">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2150">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2150">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2151">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2151">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2152">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2152">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2153">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2153">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2154">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2154">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2155">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2155">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2156">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2156">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2157">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2157">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2158">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2158">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2159">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2159">Data</span></span>|<span data-ttu-id="57f0e-2160">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2160">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2161">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2161">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2162">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2162">Empty</span></span>|  
|<span data-ttu-id="57f0e-2163">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2163">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2164">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2164">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2165">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2165">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2166">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2166">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2167">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2167">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2168">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2168">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2169">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2169">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2170">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2170">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2171">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2171">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2172">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2172">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2173">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2173">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2174">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2174">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2175">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2175">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2176">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2176">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2177">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2177">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2178">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2178">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2179">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2179">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2180">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2180">Required.</span></span> <span data-ttu-id="57f0e-2181">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2181">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2182">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2182">Required.</span></span> <span data-ttu-id="57f0e-2183">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2183">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2184">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2184">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2185">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2185">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2186">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2186">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2187">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2187">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2188">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2188">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2189">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2189">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2190">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2190">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2191">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2191">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2192">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2192">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2193">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2193">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2194">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2194">Data</span></span>|<span data-ttu-id="57f0e-2195">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2195">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2196">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2196">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2197">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2197">Empty</span></span>|  
|<span data-ttu-id="57f0e-2198">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2198">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2199">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2199">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2200">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2200">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2201">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2201">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2202">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2202">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2203">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2203">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2204">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2204">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2205">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2205">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2206">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2206">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2207">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2207">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2208">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2208">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2209">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2209">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2210">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2210">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2211">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2211">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2212">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2212">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2213">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2213">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2214">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2214">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2215">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2215">Required.</span></span> <span data-ttu-id="57f0e-2216">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2216">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2217">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2217">Required.</span></span> <span data-ttu-id="57f0e-2218">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2218">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2219">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2219">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2220">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2220">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2221">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2221">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2222">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2222">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2223">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2223">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2224">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2224">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2225">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2225">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2226">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2226">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2227">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2227">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2228">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2228">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2229">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2229">Data</span></span>|<span data-ttu-id="57f0e-2230">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2230">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2231">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2231">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2232">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2232">Empty</span></span>|  
|<span data-ttu-id="57f0e-2233">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2233">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2234">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2234">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2235">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2235">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2236">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2236">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2237">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2237">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2238">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2238">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2239">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2239">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2240">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2240">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2241">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2241">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2242">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2242">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2243">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2243">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2244">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2244">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2245">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2245">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2246">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2246">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2247">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2247">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2248">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2248">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2249">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2249">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2250">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2250">Required.</span></span> <span data-ttu-id="57f0e-2251">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2251">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2252">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2252">Required.</span></span> <span data-ttu-id="57f0e-2253">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2253">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2254">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2254">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2255">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2255">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2256">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2256">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2257">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2257">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2258">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2258">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2259">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2259">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2260">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2260">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2261">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2261">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2262">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2262">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2263">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2263">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2264">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2264">Data</span></span>|<span data-ttu-id="57f0e-2265">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2265">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2266">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2266">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2267">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2267">Empty</span></span>|  
|<span data-ttu-id="57f0e-2268">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2268">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2269">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2269">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2270">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2270">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2271">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2271">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2272">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2272">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2273">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2273">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2274">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2274">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2275">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2275">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2276">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2276">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2277">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2277">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2278">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2278">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2279">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2279">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2280">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2280">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2281">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2281">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2282">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2282">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2283">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2283">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2284">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2284">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2285">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2285">Required.</span></span> <span data-ttu-id="57f0e-2286">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2286">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2287">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2287">Required.</span></span> <span data-ttu-id="57f0e-2288">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2288">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2289">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2289">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2290">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2290">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2291">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2291">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2292">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2292">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2293">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2293">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2294">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2294">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2295">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2295">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2296">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2296">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2297">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2297">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2298">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2298">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2299">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2299">Data</span></span>|<span data-ttu-id="57f0e-2300">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2300">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2301">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2301">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2302">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2302">Empty</span></span>|  
|<span data-ttu-id="57f0e-2303">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2303">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2304">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2304">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2305">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2305">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2306">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2306">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2307">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2307">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2308">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2308">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2309">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2309">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2310">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2310">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2311">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2311">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2312">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2312">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2313">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2313">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2314">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2314">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2315">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2315">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2316">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2316">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2317">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2317">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2318">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2318">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2319">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2319">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2320">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2320">Required.</span></span> <span data-ttu-id="57f0e-2321">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2321">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2322">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2322">Required.</span></span> <span data-ttu-id="57f0e-2323">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2323">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2324">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2324">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2325">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2325">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2326">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2326">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2327">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2327">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2328">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2328">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2329">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2329">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2330">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2330">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2331">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2331">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2332">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2332">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2333">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2333">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2334">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2334">Data</span></span>|<span data-ttu-id="57f0e-2335">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2335">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2336">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2336">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2337">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2337">Empty</span></span>|  
|<span data-ttu-id="57f0e-2338">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2338">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2339">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2339">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2340">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2340">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2341">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2341">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2342">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2342">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2343">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2343">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2344">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2344">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2345">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2345">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2346">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2346">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2347">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2347">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2348">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2348">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2349">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2349">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2350">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2350">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2351">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2351">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2352">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2352">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2353">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2353">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2354">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2354">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2355">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2355">Required.</span></span> <span data-ttu-id="57f0e-2356">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2356">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2357">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2357">Required.</span></span> <span data-ttu-id="57f0e-2358">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2358">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2359">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2359">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2360">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2360">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2361">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2361">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2362">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2362">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2363">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2363">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2364">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2364">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2365">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2365">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2366">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2366">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2367">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2367">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2368">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2368">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2369">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2369">Data</span></span>|<span data-ttu-id="57f0e-2370">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2370">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2371">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2371">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2372">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2372">Empty</span></span>|  
|<span data-ttu-id="57f0e-2373">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2373">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2374">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2374">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2375">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2375">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2376">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2376">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2377">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2377">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2378">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2378">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2379">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2379">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2380">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2380">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2381">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2381">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2382">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2382">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2383">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2383">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2384">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2384">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2385">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2385">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2386">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2386">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2387">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2387">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2388">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2388">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2389">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2389">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2390">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2390">Required.</span></span> <span data-ttu-id="57f0e-2391">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2391">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2392">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2392">Required.</span></span> <span data-ttu-id="57f0e-2393">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2393">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2394">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2394">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2395">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2395">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2396">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2396">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2397">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2397">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2398">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2398">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2399">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2399">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2400">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2400">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2401">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2401">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2402">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2402">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2403">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2403">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2404">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2404">Data</span></span>|<span data-ttu-id="57f0e-2405">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2405">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2406">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2406">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2407">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2407">Empty</span></span>|  
|<span data-ttu-id="57f0e-2408">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2408">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2409">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2409">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2410">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2410">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2411">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2411">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2412">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2412">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2413">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2413">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2414">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2414">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2415">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2415">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2416">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2416">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2417">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2417">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2418">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2418">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2419">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2419">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2420">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2420">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2421">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2422">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2422">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2423">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2423">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2424">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2424">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2425">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2425">Required.</span></span> <span data-ttu-id="57f0e-2426">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2426">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2427">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2427">Required.</span></span> <span data-ttu-id="57f0e-2428">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2428">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2429">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2429">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2430">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2430">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2431">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2431">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2432">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2432">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2433">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2433">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2434">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2434">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2435">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2435">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2436">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2436">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2437">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2437">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2438">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2438">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2439">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2439">Data</span></span>|<span data-ttu-id="57f0e-2440">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2440">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2441">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2441">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2442">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2442">Empty</span></span>|  
|<span data-ttu-id="57f0e-2443">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2443">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2444">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2444">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2445">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2445">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2446">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2446">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2447">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2447">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2448">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2448">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2449">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2449">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2450">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2450">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2451">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2451">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2452">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2452">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2453">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2453">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2454">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2454">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2455">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2455">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2456">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2456">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2457">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2457">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2458">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2458">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2459">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2459">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2460">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2460">Required.</span></span> <span data-ttu-id="57f0e-2461">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2461">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2462">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2462">Required.</span></span> <span data-ttu-id="57f0e-2463">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2463">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2464">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2464">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2465">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2465">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2466">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2467">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2468">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2468">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2469">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2469">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2470">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2470">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2471">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2471">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2472">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2472">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2473">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2473">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2474">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2474">Data</span></span>|<span data-ttu-id="57f0e-2475">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2475">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2476">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2476">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2477">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2477">Empty</span></span>|  
|<span data-ttu-id="57f0e-2478">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2478">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2479">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2479">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2480">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2480">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2481">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2481">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2482">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2482">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2483">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2483">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2484">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2484">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2485">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2485">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2486">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2486">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2487">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2487">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2488">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2488">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2489">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2489">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2490">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2490">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2491">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2491">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2492">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2492">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2493">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2493">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2494">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2494">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2495">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2495">Required.</span></span> <span data-ttu-id="57f0e-2496">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2496">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="57f0e-2497">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2497">Required.</span></span> <span data-ttu-id="57f0e-2498">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2498">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="57f0e-2499">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2499">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2500">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2500">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2501">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2501">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2502">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2502">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2503">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2503">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="57f0e-2504">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2504">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2505">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2505">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2506">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2506">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="57f0e-2507">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2507">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="57f0e-2508">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2508">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="57f0e-2509">資料</span><span class="sxs-lookup"><span data-stu-id="57f0e-2509">Data</span></span>|<span data-ttu-id="57f0e-2510">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2510">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="57f0e-2511">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="57f0e-2511">Delimiting comma or blank line</span></span>|<span data-ttu-id="57f0e-2512">Empty</span><span class="sxs-lookup"><span data-stu-id="57f0e-2512">Empty</span></span>|  
|<span data-ttu-id="57f0e-2513">#NULL#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2513">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="57f0e-2514">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="57f0e-2514">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="57f0e-2515">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2515">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="57f0e-2516">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="57f0e-2516">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="57f0e-2517">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="57f0e-2517">#ERROR `errornumber`#</span></span>|<span data-ttu-id="57f0e-2518">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="57f0e-2518">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="57f0e-2519">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2519">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2520">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2520">The `Input` function is not localized.</span></span> <span data-ttu-id="57f0e-2521">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2521">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2522">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2522">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2523">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2523">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2524">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2524">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="57f0e-2525">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2525">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2526">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2526">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2527">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2527">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2528">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2528">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2529">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2529">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2530">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2530">Required.</span></span> <span data-ttu-id="57f0e-2531">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2531">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="57f0e-2532">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2532">Required.</span></span> <span data-ttu-id="57f0e-2533">任何有效的數值運算式，指定要讀取的字元數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2533">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="57f0e-2534">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="57f0e-2535">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="57f0e-2536">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2537">字串，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2537">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="57f0e-2538">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2538">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2539">`InputString`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2539">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2540">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2540">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2541">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2541">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2542">讀取的資料`InputString`函式通常利用寫入至檔案`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2542">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="57f0e-2543">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2543">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="57f0e-2544">不同於`Input`函式，`InputString`函式會傳回讀取的字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2544">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="57f0e-2545">這包括逗號、 換行字元、 換行、 引號和前置空格。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2545">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="57f0e-2546">使用開啟的檔案`Binary`存取，嘗試讀取檔案，使用`InputString`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2546">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="57f0e-2547">使用`LOF`並`Loc`函數，而`EOF`藉由讀取二進位檔案時`InputString`，或使用`FileGet`當您使用`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2547">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2548">從檔案讀取時，請勿依據副檔名的檔案內容的相關安全性決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2548">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2549">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2549">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2550">這個範例會使用`InputString`函式來從檔案一次讀取一個字元，並列印它`Output`視窗。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2550">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="57f0e-2551">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2551">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2552"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2552"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2553"><paramref name="CharCount" /> &lt; 0 或 &gt; 214。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2553"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2554">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2554">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2555">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2555">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2556">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2556">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-2557">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2557">Required.</span></span> <span data-ttu-id="57f0e-2558">字串運算式，指定要刪除之一或多個檔案的名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2558">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="57f0e-2559"><paramref name="PathName" /> 可包含目錄或資料夾，以及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2559"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-2560">從磁碟中刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2560">Deletes files from a disk.</span></span> <span data-ttu-id="57f0e-2561">相較於 <see langword="Kill" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2561">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="57f0e-2562">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2562">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2563">`Kill` 支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2563">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="57f0e-2564">**安全性注意事項**才能執行，請`Kill`函式需要`Read`並`PathDiscovery`加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2564">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="57f0e-2565">如需詳細資訊，請參閱 < <xref:System.Security.SecurityException>[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2565">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2566">這個範例會使用`Kill`函式來從磁碟中刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2566">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2567">目標檔案已開啟。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2567">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-2568">找不到目標檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2568">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="57f0e-2569">權限遭拒。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2569">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2570">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2570">Required.</span></span> <span data-ttu-id="57f0e-2571">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2571">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2572">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2572">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2573">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2573">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2574">`LineInput`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2574">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2575">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2575">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2576">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2576">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2577">讀取的資料`LineInput`通常會先寫入至檔案使用`Print`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2577">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2578">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2578">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="57f0e-2579">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2579">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="57f0e-2580">`LineInput`函式會從檔案的一個字元讀取一次直到遇到歸位字元 (`Chr(13)`) 或歸位字元/換 (`Chr(13) + Chr(10)`) 順序。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2580">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="57f0e-2581">歸位字元 return/line 摘要的序列會略過而不是附加的字元字串。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2581">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2582">使用 從檔案讀取`LineInput`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2582">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2583">這個範例會使用`LineInput`從循序檔案讀取一行，並將它指派給變數的函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2583">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="57f0e-2584">這個範例假設`TestFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2584">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="57f0e-2585">已到達檔案結尾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2585">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2586"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2586"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2587">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2587">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2588">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2588">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2589">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2589">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2590">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2590">Required.</span></span> <span data-ttu-id="57f0e-2591">任何有效的 <see langword="Integer" /> 檔案編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2591">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2592">傳回值，指定開啟檔案中目前的讀取/寫入位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2592">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2593">已開啟之檔案中的目前讀取/寫入位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2593">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2594">`Loc`為以零為起始的函式，使用它來擷取檔案中的第一個位元組，則會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2594">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="57f0e-2595">`Loc`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2595">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2596">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2596">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2597">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2597">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2598">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2598">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="57f0e-2599">模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2599">Mode</span></span>|<span data-ttu-id="57f0e-2600">傳回值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2600">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="57f0e-2601">讀取或寫入檔案的最後一個記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2601">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="57f0e-2602">除以 128 檔案中的目前位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2602">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="57f0e-2603">不過，資訊會由`Loc`的循序檔案不會使用或所需。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2603">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="57f0e-2604">讀取或寫入的最後一個位元組的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2604">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2605">這個範例會使用`Loc`函式來傳回目前的讀取/寫入位置，在開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2605">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="57f0e-2606">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2606">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2607">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2607">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-2608">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2608">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2609"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2609">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2610">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2610">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2611">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2611">Required.</span></span> <span data-ttu-id="57f0e-2612">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2612">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2613">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2613">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2614"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2614">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2615">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2615">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2616">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2616">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2617">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2617">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2618">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2618">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2619">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2619">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2620">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2620">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2621">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2621">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2622">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2622">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2623">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2623">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2624">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2624">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2625">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2625">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2626">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2626">Required.</span></span> <span data-ttu-id="57f0e-2627">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2627">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="57f0e-2628">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2628">Optional.</span></span> <span data-ttu-id="57f0e-2629">要鎖定或解除鎖定之唯一資料錄或位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2629">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="57f0e-2630">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2630">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2631"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2632">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2633">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2633">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2634">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2634">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2635">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2635">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2636">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2636">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2637">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2637">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2638">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2638">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2639">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2639">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2640">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2640">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2641">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2641">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2642">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2642">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2643">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2643">Required.</span></span> <span data-ttu-id="57f0e-2644">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2644">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="57f0e-2645">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2645">Optional.</span></span> <span data-ttu-id="57f0e-2646">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2646">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="57f0e-2647">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2647">Optional.</span></span> <span data-ttu-id="57f0e-2648">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2648">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="57f0e-2649">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2649">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2650"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2651">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2652">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2652">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2653">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2653">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2654">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2654">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2655">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2655">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2656">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2656">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2657">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2657">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2658">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2658">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2659">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2659">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2660">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2661">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2661">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2662">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2662">Required.</span></span> <span data-ttu-id="57f0e-2663">包含有效檔案編號的整數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2663">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2664">傳回大小，表示使用 <see langword="FileOpen" /> 函式開啟之檔案的大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2664">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2665">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="57f0e-2666">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2666">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2667">大小，表示使用 <see langword="FileOpen" /> 函式開啟之檔案的大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2667">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2668">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2669">使用`FileLen`函式來取得未開啟檔案的長度。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2669">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2670">這個範例會使用`LOF`函式來判斷已開啟之檔案的大小。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2670">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="57f0e-2671">這個範例假設`TestFile`是文字檔案，其中包含範例資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2671">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2672">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2672">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-2673">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2673">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2674">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2674">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="57f0e-2675">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2675">Required.</span></span> <span data-ttu-id="57f0e-2676">字串運算式，可識別要建立的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2676">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="57f0e-2677"><paramref name="Path" /> 可包含磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2677">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="57f0e-2678">如果未指定磁碟機，則 <see langword="MkDir" /> 會在目前磁碟機上建立新目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2678">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-2679">建立新目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2679">Creates a new directory.</span></span> <span data-ttu-id="57f0e-2680">相較於 <see langword="MkDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="57f0e-2681">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2681">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2682">此函式會建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2682">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2683">這個範例會使用`MkDir`函式來建立目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2683">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="57f0e-2684">如果未指定磁碟機，在目前的磁碟機上建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2684">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2685"><paramref name="Path" /> 尚未指定或是空的。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2685"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="57f0e-2686">權限遭拒。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2686">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2687">目錄已經存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2687">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="57f0e-2688">如何：在 Visual Basic 中建立目錄</span><span class="sxs-lookup"><span data-stu-id="57f0e-2688">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2689">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2689">Required.</span></span> <span data-ttu-id="57f0e-2690">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2690">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="57f0e-2691">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2691">Optional.</span></span> <span data-ttu-id="57f0e-2692">要寫入檔案的零或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2692">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="57f0e-2693"><paramref name="Output" /> 引數設定為︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-2693">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="57f0e-2694"><see langword="T:System.IO.IOException" />：檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2694"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="57f0e-2695"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="57f0e-2696">將顯示格式資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2696">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2697">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2697">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2698">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2698">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2699">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2699">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2700">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2700">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="57f0e-2701">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2701">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="57f0e-2702">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2702">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="57f0e-2703">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2703">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="57f0e-2704">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2704">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="57f0e-2705">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2705">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="57f0e-2706">日期資料寫入檔案中，使用您的系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2706">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="57f0e-2707">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2707">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="57f0e-2708">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2708">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="57f0e-2709">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2709">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="57f0e-2710">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2710">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="57f0e-2711">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2711">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="57f0e-2712">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2712">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="57f0e-2713">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2713">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="57f0e-2714">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2714">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2715">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2715">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2716">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2716">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2717">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2717">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2718">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2718">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2719">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2719">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2720">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2720">Required.</span></span> <span data-ttu-id="57f0e-2721">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2721">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="57f0e-2722">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2722">Optional.</span></span> <span data-ttu-id="57f0e-2723">要寫入檔案的零或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2723">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="57f0e-2724"><paramref name="Output" /> 引數設定為︰</span><span class="sxs-lookup"><span data-stu-id="57f0e-2724">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="57f0e-2725"><see langword="T:System.IO.IOException" />：檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2725"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="57f0e-2726"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="57f0e-2727">將顯示格式資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2727">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2728">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2728">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2729">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2729">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2730">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2730">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2731">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2731">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="57f0e-2732">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2732">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="57f0e-2733">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2733">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="57f0e-2734">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2734">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="57f0e-2735">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2735">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="57f0e-2736">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2736">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="57f0e-2737">日期資料寫入檔案中，使用系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2737">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="57f0e-2738">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2738">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="57f0e-2739">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2739">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="57f0e-2740">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2740">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="57f0e-2741">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2741">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="57f0e-2742">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2742">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="57f0e-2743">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2743">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="57f0e-2744">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2744">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="57f0e-2745">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2745">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-2746">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2746">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2747">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2747">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2748">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2748">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-2749">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2749">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-2750">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2750">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="57f0e-2751">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2751">Required.</span></span> <span data-ttu-id="57f0e-2752">字串運算式，指定現有的檔案名稱和位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2752">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="57f0e-2753"><paramref name="OldPath" /> 可包括檔案的目錄及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2753"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="57f0e-2754">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2754">Required.</span></span> <span data-ttu-id="57f0e-2755">字串運算式，指定新檔案名稱與位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2755">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="57f0e-2756"><paramref name="NewPath" /> 可包括目的位置的目錄及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2756"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="57f0e-2757"><paramref name="NewPath" /> 指定的檔案名稱不能已經存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2757">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="57f0e-2758">重新命名磁碟的檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2758">Renames a disk file or directory.</span></span> <span data-ttu-id="57f0e-2759">相較於 <see langword="Rename" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2759">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="57f0e-2760">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2760">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2761">`Rename`函式重新命名檔案，並將它移到另一個目錄，如有必要。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2761">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="57f0e-2762">`Rename`函式可以將檔案移到磁碟機，但它只能重新命名現有的目錄時兩者`NewPath`和`OldPath`都位於相同的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2762">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="57f0e-2763">`Rename` 無法建立新的檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2763">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="57f0e-2764">使用`Rename`函式開啟的檔案會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2764">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="57f0e-2765">您必須先關閉開啟的檔案，才能重新命名。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2765">You must close an open file before renaming it.</span></span> <span data-ttu-id="57f0e-2766">`Rename` 引數不能包含多個字元 （\*） 和單一字元 （？） 的萬用字元。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2766">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="57f0e-2767">當使用`Rename`將來自未受保護位置的檔案複製到受保護的位置中，該檔案會保留的限制較少的權限。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2767">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="57f0e-2768">請檢查以確定未造成可能的安全性風險。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2768">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2769">這個範例會使用`Rename`函式來重新命名檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2769">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="57f0e-2770">基於此範例的詳細資訊，請假設已指定的目錄已經存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2770">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2771">路徑無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2771">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-2772"><paramref name="OldPath" /> 檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2772"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2773">無法重新命名為不同的裝置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2773">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="57f0e-2774">如何：在 Visual Basic 中重新命名檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2774">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57f0e-2775">關閉所有使用 <see langword="FileOpen" /> 函式開啟的磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2775">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2776">相較於 <see langword="Reset" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="57f0e-2777">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2778">`Reset`函式會關閉開啟的所有作用中檔案`FileOpen`函式，並具有相同的功能`FileClose()`不含任何參數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2778">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2779">這個範例會使用`Reset`函式來關閉所有開啟的檔案並寫入磁碟中的所有檔案緩衝區的內容。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2779">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="57f0e-2780">請注意，使用`Object`變數`FileNumber`做為字串和數字。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2780">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="57f0e-2781">End 陳述式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2781">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="57f0e-2782">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2782">Required.</span></span> <span data-ttu-id="57f0e-2783">字串運算式，可識別要移除的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2783">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="57f0e-2784"><paramref name="Path" /> 可包括磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2784"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="57f0e-2785">如果未指定磁碟機，則 <see langword="RmDir" /> 會移除目前磁碟機上的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2785">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="57f0e-2786">移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2786">Removes an existing directory.</span></span> <span data-ttu-id="57f0e-2787">相較於 <see langword="RmDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="57f0e-2788">如需詳細資訊，請參閱<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2788">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2789">如果您嘗試使用，就會發生錯誤`RmDir`包含檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2789">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="57f0e-2790">使用`Kill`函式來刪除所有檔案，然後再移除目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2790">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2791">這個範例會使用`RmDir`函式以移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2791">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2792"><paramref name="Path" /> 尚未指定或是空的。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2792"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2793">目標目錄包含檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2793">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="57f0e-2794">目錄不存在。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2794">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-2795">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2795">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2796">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="57f0e-2797">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2798">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2798">Required.</span></span> <span data-ttu-id="57f0e-2799">包含有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2799">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2800">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2801">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2801">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="57f0e-2802">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2802">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2803">指定使用 <see langword="FileOpen" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="Long" />，或設定使用 <see langword="FileOpen" /> 函式開啟之檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2803">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2804">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2804">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="57f0e-2805">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2805">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="57f0e-2806">模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2806">Mode</span></span>|<span data-ttu-id="57f0e-2807">傳回值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2807">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="57f0e-2808">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="57f0e-2808">Number of the next record read or written</span></span>|  
|<span data-ttu-id="57f0e-2809">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2809">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="57f0e-2810">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2810">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2811">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2811">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2812">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2812">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="57f0e-2813">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2813">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="57f0e-2814">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2814">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="57f0e-2815">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2815">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2816">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="57f0e-2817">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2817">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="57f0e-2818">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2818">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2819">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2819">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2820">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2820">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-2821">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2822">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2823">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2823">Required.</span></span> <span data-ttu-id="57f0e-2824">包含有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2824">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="57f0e-2825">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2825">Required.</span></span> <span data-ttu-id="57f0e-2826">在 1-2,147,483,647 範圍之間的數字 (包括頭尾)，表示應該發生下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2826">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="57f0e-2827">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2827">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="57f0e-2828">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2828">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="57f0e-2829">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2829">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2830">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2830">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="57f0e-2831">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2831">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="57f0e-2832">模式</span><span class="sxs-lookup"><span data-stu-id="57f0e-2832">Mode</span></span>|<span data-ttu-id="57f0e-2833">傳回值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2833">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="57f0e-2834">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="57f0e-2834">Number of the next record read or written</span></span>|  
|<span data-ttu-id="57f0e-2835">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="57f0e-2835">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="57f0e-2836">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2836">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2837">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2837">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2838">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2838">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="57f0e-2839">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2839">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="57f0e-2840">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2840">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="57f0e-2841">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2841">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2842">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="57f0e-2843">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2843">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="57f0e-2844">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2844">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="57f0e-2845">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2845">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2846">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2846">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="57f0e-2847">在 Visual Basic 中讀取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2847">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="57f0e-2848">在 Visual Basic 中寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2848">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="57f0e-2849">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2849">Required.</span></span> <span data-ttu-id="57f0e-2850">指定檔名的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2850">A string expression that specifies a file name.</span></span> <span data-ttu-id="57f0e-2851"><paramref name="PathName" /> 可包括目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2851"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="57f0e-2852">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2852">Required.</span></span> <span data-ttu-id="57f0e-2853">常數或數值運算式，其總和可以表示檔案屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2853">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="57f0e-2854">設定檔案的屬性 (Attribute) 資訊。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2854">Sets attribute information for a file.</span></span> <span data-ttu-id="57f0e-2855">相較於 <see langword="SetAttr" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2855">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="57f0e-2856">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2856">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2857">如果您嘗試設定已開啟之檔案的屬性，就會發生執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2857">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="57f0e-2858">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2858">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="57f0e-2859">值</span><span class="sxs-lookup"><span data-stu-id="57f0e-2859">Value</span></span>|<span data-ttu-id="57f0e-2860">常數</span><span class="sxs-lookup"><span data-stu-id="57f0e-2860">Constant</span></span>|<span data-ttu-id="57f0e-2861">描述</span><span class="sxs-lookup"><span data-stu-id="57f0e-2861">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="57f0e-2862">標準模式 （預設值）。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2862">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="57f0e-2863">唯讀。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2863">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="57f0e-2864">隱藏。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2864">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="57f0e-2865">系統檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2865">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="57f0e-2866">磁碟區標籤</span><span class="sxs-lookup"><span data-stu-id="57f0e-2866">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="57f0e-2867">目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2867">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="57f0e-2868">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2868">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="57f0e-2869">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2869">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2870">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2870">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="57f0e-2871">名稱可在您的程式碼，而不是實際的值中的任何地方使用。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2871">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2872">這個範例會使用`SetAttr`函式來設定檔案的屬性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2872">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="57f0e-2873"><paramref name="Attribute" /> 類型無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2873"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="57f0e-2874">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2874">Required.</span></span> <span data-ttu-id="57f0e-2875">在顯示或列印清單中的下一個運算式之前所要插入的空格數。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2875">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="57f0e-2876">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2877">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2877">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2878">如果`Count`少於輸出行寬度下, 一個列印位置立即遵循的列印的空格數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2878">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="57f0e-2879">如果`Count`大於輸出行寬度，`SPC`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2879">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="57f0e-2880">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="57f0e-2880">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="57f0e-2881">比方說，如果目前的列印位置為 24，輸出行寬度是 80，且您指定`SPC(90)`下, 一個列印時會啟動位置為 34 （目前的列印位置 + 90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2881">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="57f0e-2882">如果目前的列印位置與輸出行寬度之間的差異是小於`Count`(或`Count` `Mod` *寬度*)，則`SPC`函式就會跳到下一行的開頭，並產生空間等於`Count`-(*寬度* - *currentprintposition*)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2882">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2883">請確定您的表格式資料行的寬度不足以容納寬字母。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2883">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2884">這個範例會使用`SPC`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2884">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="57f0e-2885">Mod 運算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2885">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-2886">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2886">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="57f0e-2887">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2887">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2888">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2888">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2889">如果目前的行上目前的列印位置大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2889">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="57f0e-2890">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2890">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="57f0e-2891">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2891">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="57f0e-2892">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="57f0e-2892">Column Mod width</span></span>  
  
 <span data-ttu-id="57f0e-2893">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2893">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="57f0e-2894">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2894">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="57f0e-2895">如果導出的列印位置大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2895">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="57f0e-2896">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2896">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="57f0e-2897">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2897">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="57f0e-2898">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2898">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="57f0e-2899">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2899">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2900">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2900">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2901">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2901">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="57f0e-2902">Mod 運算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2902">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="57f0e-2903">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2903">Optional.</span></span> <span data-ttu-id="57f0e-2904">在顯示或列印清單中的下一個運算式之前所要移至的欄位編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2904">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="57f0e-2905">如果省略，則 <see langword="TAB" /> 會將插入點移到下一個列印區 (Print Zone) 的開頭。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2905">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="57f0e-2906">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2906">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="57f0e-2907">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2907">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2908">目前的行上目前的列印位置是否大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2908">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="57f0e-2909">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2909">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="57f0e-2910">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2910">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="57f0e-2911">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="57f0e-2911">Column Mod width</span></span>  
  
 <span data-ttu-id="57f0e-2912">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2912">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="57f0e-2913">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2913">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="57f0e-2914">導出的列印位置是否大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2914">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="57f0e-2915">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2915">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="57f0e-2916">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2916">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="57f0e-2917">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2917">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="57f0e-2918">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2918">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="57f0e-2919">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2919">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2920">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2920">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="57f0e-2921">Mod 運算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-2921">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="57f0e-2922">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2922">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2923"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2923">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2924">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2924">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2925">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2925">Required.</span></span> <span data-ttu-id="57f0e-2926">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2926">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="57f0e-2927">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2927">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2928"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2928">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2929">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2929">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2930">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2930">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2931">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2931">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2932">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2932">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2933">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2933">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2934">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2934">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2935">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2935">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2936">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2936">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2937">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2937">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2938">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2938">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2939">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2939">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2940">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2940">Required.</span></span> <span data-ttu-id="57f0e-2941">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2941">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="57f0e-2942">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2942">Optional.</span></span> <span data-ttu-id="57f0e-2943">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2943">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="57f0e-2944">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2944">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2945"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2946">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2947">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2947">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2948">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2948">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2949">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2949">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2950">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2950">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2951">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2951">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2952">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2952">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2953">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2953">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2954">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2954">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2955">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2955">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2956">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2956">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2957">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2957">Required.</span></span> <span data-ttu-id="57f0e-2958">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2958">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="57f0e-2959">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2959">Optional.</span></span> <span data-ttu-id="57f0e-2960">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2960">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="57f0e-2961">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2961">Optional.</span></span> <span data-ttu-id="57f0e-2962">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2962">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="57f0e-2963">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2963">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="57f0e-2964"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2964">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="57f0e-2965">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2965">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2966">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2966">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="57f0e-2967">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2967">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="57f0e-2968">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2968">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="57f0e-2969">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2969">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="57f0e-2970">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2970">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="57f0e-2971">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2971">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-2972">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2972">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="57f0e-2973">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2973">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-2974">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2974">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-2975">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-2975">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-2976">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2976">Required.</span></span> <span data-ttu-id="57f0e-2977">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2977">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="57f0e-2978">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2978">Optional.</span></span> <span data-ttu-id="57f0e-2979">要寫入檔案的一或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2979">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="57f0e-2980">將資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2980">Writes data to a sequential file.</span></span> <span data-ttu-id="57f0e-2981">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2981">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-2982">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2982">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-2983">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2983">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-2984">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2984">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-2985">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2985">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="57f0e-2986">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2986">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="57f0e-2987">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2987">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="57f0e-2988">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2988">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="57f0e-2989">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2989">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="57f0e-2990">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="57f0e-2990">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="57f0e-2991">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2991">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="57f0e-2992">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2992">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="57f0e-2993">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2993">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="57f0e-2994">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2994">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="57f0e-2995">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2995">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="57f0e-2996">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2996">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="57f0e-2997">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2997">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="57f0e-2998">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2998">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="57f0e-2999">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-2999">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="57f0e-3000">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3000">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="57f0e-3001">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3001">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="57f0e-3002">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="57f0e-3002">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="57f0e-3003">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3003">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="57f0e-3004">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3004">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-3005">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3005">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-3006">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3006">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="57f0e-3007">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-3008">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-3008">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-3009">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-3009">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-3010">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-3010">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="57f0e-3011">必要項。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3011">Required.</span></span> <span data-ttu-id="57f0e-3012">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3012">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="57f0e-3013">選擇性。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3013">Optional.</span></span> <span data-ttu-id="57f0e-3014">要寫入檔案的一或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3014">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="57f0e-3015">將資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3015">Writes data to a sequential file.</span></span> <span data-ttu-id="57f0e-3016">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3016">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57f0e-3017">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3017">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="57f0e-3018">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3018">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="57f0e-3019">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3019">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="57f0e-3020">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3020">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="57f0e-3021">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3021">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="57f0e-3022">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3022">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="57f0e-3023">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3023">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="57f0e-3024">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3024">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="57f0e-3025">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="57f0e-3025">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="57f0e-3026">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3026">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="57f0e-3027">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3027">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="57f0e-3028">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3028">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="57f0e-3029">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3029">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="57f0e-3030">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3030">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="57f0e-3031">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3031">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="57f0e-3032">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3032">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="57f0e-3033">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3033">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="57f0e-3034">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3034">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="57f0e-3035">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3035">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="57f0e-3036">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3036">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="57f0e-3037">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="57f0e-3037">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="57f0e-3038">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3038">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="57f0e-3039">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3039">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="57f0e-3040">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3040">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57f0e-3041">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="57f0e-3041">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="57f0e-3042">使用 Visual Basic 存取檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-3042">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="57f0e-3043">如何：在 Visual Basic 中將文字寫入檔案</span><span class="sxs-lookup"><span data-stu-id="57f0e-3043">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="57f0e-3044">HOW TO：將文字寫入至檔案以 streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="57f0e-3044">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>