<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76423e19c418e3145c1946201eeb07bad53c0200" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908790" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6d2a2-101">
        <see langword="FileSystem" /> 模組包含用於執行檔案、目錄或資料夾及系統等作業的程序。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6d2a2-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="6d2a2-102">
        <see langword="My" /> 功能提供比使用 <see langword="FileSystem" /> 模組更優越的檔案 I/O 作業產能和效能。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6d2a2-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="6d2a2-103">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6d2a2-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-104">這個模組支援的 Visual Basic 語言關鍵字和存取檔案和資料夾的執行階段程式庫成員。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-105">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="6d2a2-106">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-106">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-107">
            <see langword="String" /> 運算式，用來識別要成為新預設目錄或資料夾的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="6d2a2-108">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="6d2a2-109">如果未指定磁碟機，則 <see langword="ChDir" /> 會變更目前磁碟機上的預設目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-110">變更目前的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="6d2a2-111">
            <see langword="My" /> 功能提供了比 <see langword="ChDir" /> 函式更強大的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-112">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-113">`ChDir`函式會變更預設目錄，但不是在預設的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="6d2a2-114">例如，如果預設磁碟機 C，下列陳述式會變更磁碟機 D 上的預設目錄，但 C 則保持預設的磁碟機：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="6d2a2-115">您可以進行相對目錄變更，請輸入兩個句號，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-116">`ChDir`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6d2a2-117">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-118">這個範例會使用`ChDir`函式來變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-119">
            <paramref name="Path" /> 是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-120">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-121">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="6d2a2-122">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-122">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-123">指定現有磁碟機的字串運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="6d2a2-124">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="6d2a2-125">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-126">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-127">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6d2a2-128">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-129">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="6d2a2-130">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-131">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="6d2a2-132">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-132">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-133">指定現有磁碟機的字串運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="6d2a2-134">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="6d2a2-135">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-136">變更目前的磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-137">`ChDrive`函式需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="6d2a2-138">如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-139">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="6d2a2-140">如果磁碟機不存在，則此函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-141">指定的磁碟無效，或磁碟無法使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-142">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="6d2a2-143">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="6d2a2-144">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-145">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="6d2a2-146">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="6d2a2-147">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-148">表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6d2a2-149">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="6d2a2-150">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-150">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-151">指定現有磁碟機的 <see langword="Char" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="6d2a2-152">如果未指定磁碟機，或 <c>Drive</c> 是長度為零的字串 ("")，則 <see langword="CurDir" /> 會傳回目前磁碟機的路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-153">傳回表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="6d2a2-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="6d2a2-155">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-156">表示目前路徑的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6d2a2-157">這個範例會使用`CurDir`函式來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-158">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="6d2a2-159">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-160">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-161">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="6d2a2-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-163">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-164">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-165">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="6d2a2-166">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="6d2a2-167">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="6d2a2-168">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含參數的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-169">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6d2a2-170">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="6d2a2-171">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="6d2a2-172">值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-172">Value</span></span>|<span data-ttu-id="6d2a2-173">常數</span><span class="sxs-lookup"><span data-stu-id="6d2a2-173">Constant</span></span>|<span data-ttu-id="6d2a2-174">描述</span><span class="sxs-lookup"><span data-stu-id="6d2a2-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="6d2a2-175">預設值：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-175">Default.</span></span> <span data-ttu-id="6d2a2-176">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6d2a2-177">指定唯讀檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6d2a2-178">指定隱藏的檔，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6d2a2-179">指定系統檔案，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6d2a2-180">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6d2a2-181">指定目錄或資料夾，以及不需屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6d2a2-182">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6d2a2-183">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-184">這些列舉由 Visual Basic 語言，並可用於您的程式碼，而不是實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-185">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-186">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-186">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-187">
            <see langword="String" /> 運算式，可指定檔名、目錄或資料夾名稱或磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="6d2a2-188">如果找不到 <c>PathName</c>，則會傳回長度為零的字串 (<see langword="&quot;&quot;" />)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="6d2a2-189">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-189">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-190">列舉類型或數值運算式，其值可指定檔案屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="6d2a2-191">如果省略，則 <see langword="Dir" /> 會傳回符合 <c>PathName</c> 的檔案，但是沒有屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-192">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="6d2a2-193">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-194">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-195">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-196">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="6d2a2-197">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="6d2a2-198">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="6d2a2-199">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含任何參數的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-200">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>並<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6d2a2-201">如需詳細資訊，請參閱 < <xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，並[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="6d2a2-202">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="6d2a2-203">值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-203">Value</span></span>|<span data-ttu-id="6d2a2-204">常數</span><span class="sxs-lookup"><span data-stu-id="6d2a2-204">Constant</span></span>|<span data-ttu-id="6d2a2-205">描述</span><span class="sxs-lookup"><span data-stu-id="6d2a2-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="6d2a2-206">預設值：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-206">Default.</span></span> <span data-ttu-id="6d2a2-207">指定沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6d2a2-208">指定唯讀檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6d2a2-209">指定隱藏的檔，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6d2a2-210">指定系統檔案，除了沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6d2a2-211">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6d2a2-212">指定目錄或資料夾，以及沒有屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6d2a2-213">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6d2a2-214">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-215">這些列舉由 Visual Basic 語言，並可用於您的程式碼來取代實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-216">這個範例會使用`Dir`函式來檢查特定的檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-217">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-217">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-218">包含任何有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-219">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-220">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-221">使用`EOF`以避免嘗試取得輸入超過檔案結尾所產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="6d2a2-222">`EOF`函式會傳回`False`直到達到檔案結尾為止。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="6d2a2-223">使用開啟的檔案`Random`或`Binary`存取`EOF`會傳回`False`直到最後一個執行`FileGet`函式是無法讀取整個記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="6d2a2-224">使用開啟的檔案`Binary`存取，請嘗試透過檔案使用讀取`Input`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="6d2a2-225">使用`LOF`並`Loc`函數，而`EOF`讀取二進位檔案時`Input`，或使用`Get`使用時`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="6d2a2-226">使用開啟的檔案`Output`，`EOF`一律會傳回`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-227">這個範例會使用`EOF`函式來偵測檔案的結尾。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="6d2a2-228">這個範例假設`Testfile`是文字檔案，其中包含幾行文字。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-229">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-230">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-230">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-231">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="6d2a2-232">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-233">傳回列舉類型，表示使用 <see langword="FileOpen" /> 函式開啟的檔案之檔案模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-234">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileAttr" /> 函式更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-235">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-236">下列列舉類型值表示檔案存取模式：</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-236">The following enumeration values indicate the file access mode:</span>
          </span>
          <span data-ttu-id="6d2a2-237">
            <list type="table">
              <item>
                <term> 值  </term>
                <description> 模式  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <see langword="OpenMode.Input" />
                </description>
              </item>
              <item>
                <term> 2  </term>
                <description>
                  <see langword="OpenMode.Output" />
                </description>
              </item>
              <item>
                <term> 4  </term>
                <description>
                  <see langword="OpenMode.Random" />
                </description>
              </item>
              <item>
                <term> 8  </term>
                <description>
                  <see langword="OpenMode.Append" />
                </description>
              </item>
              <item>
                <term> 32  </term>
                <description>
                  <see langword="OpenMode.Binary" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-237">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Mode  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <see langword="OpenMode.Input" />
                  </description>
                </item>
                <item>
                  <term> 2  </term>
                  <description>
                    <see langword="OpenMode.Output" />
                  </description>
                </item>
                <item>
                  <term> 4  </term>
                  <description>
                    <see langword="OpenMode.Random" />
                  </description>
                </item>
                <item>
                  <term> 8  </term>
                  <description>
                    <see langword="OpenMode.Append" />
                  </description>
                </item>
                <item>
                  <term> 32  </term>
                  <description>
                    <see langword="OpenMode.Binary" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-238">此函數會傳回代表使用開啟的檔案模式的列舉型別`FileOpen`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-238">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-239">這個範例會使用`FileAttr`函數來傳回已開啟之檔案的檔案模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-239">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="6d2a2-240">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-240">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-241">參數陣列，具有 0 個或更多要關閉的通道。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-241">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-242">將輸入/輸出 (I/O) 結果導向使用 <see langword="FileOpen" /> 函式開啟的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-242">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-243">
            <see langword="My" /> 提供更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-243">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="6d2a2-244">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-244">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-245">`FileClose`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-245">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-246">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-246">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-247">如需詳細資訊，請參閱 <<c0> [ 如何： StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[如何： 將文字寫入檔案以 streamwriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[逐步解說： 中管理檔案和目錄Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-247">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="6d2a2-248">如果您省略`FileNumbers`，開啟的所有作用中檔案`FileOpen`函式會關閉。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-248">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="6d2a2-249">當您關閉已開啟的檔案時`Output`或`Append`，最後的緩衝區的輸出會寫入該檔案的作業系統緩衝區。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-249">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="6d2a2-250">所有的緩衝區空間的封閉型相關聯檔案釋出。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-250">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="6d2a2-251">當`FileClose`函式執行、 其檔案的檔案的關聯數字結尾。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-251">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-252">這個範例會使用`FileClose`函式，以關閉 檔案開啟為`Input`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-252">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-253">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-253">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="6d2a2-254">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-254">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-255">
            <see langword="String" /> 運算式，指定要複製的檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-255">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="6d2a2-256">
            <c>Source</c> 可包含原始程式檔的目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-256">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="6d2a2-257">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-257">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-258">
            <see langword="String" /> 運算式，指定目標檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-258">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="6d2a2-259">
            <c>Destination</c> 可包含目的檔案的目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-259">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-260">複製檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-260">Copies a file.</span>
          </span>
          <span data-ttu-id="6d2a2-261">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileCopy" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-261">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="6d2a2-262">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-262">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-263">如果您嘗試使用`FileCopy`函式在目前開啟的檔案，則會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-263">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="6d2a2-264">`FileCopy` 需要完全信任才能在本機的磁碟機上運作。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-264">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-265">這個範例會使用`FileCopy`函式複製到另一個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-265">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="6d2a2-266">基於此範例的詳細資訊，假設`SrcFile`是包含資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-266">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-267">
            <paramref name="Source" /> 或 <paramref name="Destination" /> 為無效值或尚未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-267">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-268">檔案已經開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-268">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-269">檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-269">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-270">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-270">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-271">指定檔名的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-271">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="6d2a2-272">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-272">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-273">傳回 <see langword="Date" /> 值，表示寫入檔案的日期和時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-273">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="6d2a2-274">相較於 <see langword="FileDateTime" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-274">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="6d2a2-275">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-275">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-276">
            <see langword="Date" /> 值，表示建立檔案或上次修改檔案的日期和時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-276">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6d2a2-277">這個範例會使用`FileDateTime`建立函式來判斷日期和時間的檔案或上次修改檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-277">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="6d2a2-278">格式的日期和時間顯示為基礎的系統地區設定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-278">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-279">
            <paramref name="PathName" /> 無效或包含萬用字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-279">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-280">目標檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-280">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-281">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-281">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-282">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-282">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-283">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-283">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-284">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-284">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-285">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-285">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-286">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-286">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-287">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-287">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-288">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-288">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-289">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-289">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-290">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-290">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-291">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-291">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-292">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-292">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-293">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-293">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-294">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-294">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-295">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-295">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-296">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-296">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-297">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-297">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-298">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-298">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-299">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-299">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-300">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-300">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-301">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-301">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-302">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-302">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-303">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-303">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-304">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-304">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-305">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-305">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-306">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-306">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-307">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-307">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-308">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-308">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-309">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-309">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-310">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-310">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-311">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-311">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-312">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-312">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-313">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-313">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-314">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-314">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-315">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-316">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-316">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-317">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-317">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-318">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-318">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-319">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-319">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-320">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-320">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-321">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-321">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-322">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-322">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-323">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-323">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-324">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-324">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-325">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-325">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-326">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-326">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-327">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-327">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-328">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-328">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-329">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-329">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-330">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-330">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-331">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-331">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-332">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-332">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-333">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-333">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-334">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-334">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-335">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-335">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-336">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-336">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-337">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-337">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-338">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-338">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-339">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-339">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-340">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-340">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-341">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-341">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-342">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-342">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-343">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-343">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-344">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-344">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-345">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-345">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-346">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-346">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-347">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-347">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-348">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-348">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-349">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-349">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-350">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-350">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-351">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-351">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-352">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-352">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-353">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-353">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-354">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-354">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-355">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-355">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-356">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-356">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-357">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-357">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-358">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-358">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-359">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-359">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-360">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-360">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-361">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-361">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-362">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-362">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-363">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-363">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-364">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-364">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-365">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-365">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-366">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-366">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-367">如果不使用描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-367">If the descriptor is not used.</span></span> <span data-ttu-id="6d2a2-368">則的大小和陣列的界限傳遞到`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-368">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-369">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-369">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-370">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-370">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-371">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-371">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-372">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-372">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-373">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-373">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-374">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-374">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-375">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-375">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-376">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-376">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-377">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-377">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-378">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-378">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-379">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-379">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-380">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-380">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-381">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-381">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-382">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-382">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-383">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-383">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-384">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-384">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-385">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-385">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-386">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-386">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-387">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-387">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-388">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-388">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-389">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-389">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-390">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-390">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-391">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-391">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-392">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-392">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-393">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-393">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-394">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-394">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-395">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-395">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-396">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-396">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-397">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-397">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-398">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-398">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-399">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-399">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-400">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-400">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-401">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-401">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-402">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-402">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-403">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-403">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-404">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-404">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-405">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-405">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-406">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-406">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-407">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-407">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-408">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-408">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-409">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-409">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-410">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-410">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-411">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-411">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-412">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-412">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-413">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-413">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-414">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-414">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-415">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-415">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-416">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-416">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-417">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-417">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-418">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-418">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-419">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-419">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-420">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-420">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-421">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-421">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-422">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-422">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-423">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-423">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-424">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-424">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-425">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-425">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-426">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-426">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-427">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-427">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-428">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-428">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-429">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-429">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-430">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-430">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-431">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-431">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-432">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-432">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-433">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-433">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-434">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-434">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-435">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-435">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-436">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-436">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-437">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-437">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-438">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-438">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-439">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-439">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-440">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-440">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-441">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-441">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-442">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-442">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-443">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-443">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-444">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-444">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-445">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-445">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-446">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-446">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-447">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-447">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-448">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-448">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-449">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-449">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-450">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-450">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-451">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-451">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-452">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-452">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-453">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-453">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-454">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-454">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-455">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-455">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-456">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-456">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-457">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-457">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-458">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-458">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-459">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-459">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-460">讀取的資料`FileGet`通常會寫入的檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-460">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-461">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-461">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-462">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-462">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-463">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-463">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-464">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-464">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-465">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-465">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-466">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-466">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-467">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-467">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-468">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-468">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-469">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-469">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-470">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-470">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-471">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-471">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-472">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-472">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-473">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-473">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-474">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-474">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-475">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-475">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-476">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-476">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-477">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-477">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-478">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-478">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-479">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-479">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-480">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-480">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-481">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-481">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-482">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-482">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-483">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-483">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-484">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-484">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-485">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-485">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-486">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-486">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-487">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-487">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-488">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-488">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-489">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-489">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-490">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-490">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-491">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-491">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-492">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-492">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-493">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-493">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-494">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-494">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-495">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-495">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-496">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-496">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-497">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-497">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-498">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-498">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-499">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-499">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-500">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-500">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-501">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-501">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-502">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-502">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-503">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-503">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-504">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-504">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-505">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-505">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-506">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-506">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-507">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-507">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-508">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-508">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-509">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-509">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-510">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-510">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-511">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-511">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-512">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-512">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-513">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-513">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-514">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-514">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-515">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-515">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-516">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-516">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-517">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-517">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-518">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-518">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-519">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-519">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-520">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-520">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-521">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-521">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-522">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-522">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-523">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-523">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-524">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-524">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-525">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-525">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-526">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-526">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-527">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-527">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-528">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-528">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-529">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-529">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-530">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-530">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-531">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-531">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-532">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-532">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-533">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-533">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-534">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-534">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-535">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-535">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-536">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-536">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-537">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-537">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-538">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-538">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-539">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-539">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-540">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-540">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-541">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-541">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-542">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-542">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-543">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-543">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-544">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-544">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-545">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-545">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-546">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-546">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-547">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-547">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-548">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-548">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-549">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-549">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-550">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-550">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-551">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-551">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-552">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-552">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-553">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-553">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-554">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-554">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-555">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-555">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-556">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-556">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-557">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-557">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-558">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-558">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-559">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-559">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-560">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-560">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-561">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-561">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-562">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-562">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-563">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-563">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-564">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-564">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-565">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-565">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-566">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-566">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-567">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-567">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-568">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-568">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-569">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-569">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-570">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-570">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-571">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-571">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-572">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-572">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-573">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-573">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-574">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-574">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-575">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-575">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-576">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-576">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-577">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-577">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-578">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-578">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-579">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-579">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-580">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-580">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-581">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-581">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-582">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-582">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-583">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-583">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-584">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-584">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-585">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-585">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-586">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-586">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-587">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-587">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-588">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-588">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-589">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-589">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-590">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-590">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-591">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-591">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-592">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-592">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-593">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-593">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-594">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-594">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-595">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-595">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-596">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-596">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-597">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-597">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-598">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-598">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-599">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-599">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-600">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-600">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-601">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-601">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-602">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-602">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-603">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-603">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-604">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-604">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-605">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-605">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-606">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-606">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-607">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-607">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-608">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-608">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-609">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-609">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-610">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-610">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-611">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-611">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-612">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-612">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-613">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-613">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-614">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-614">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-615">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-615">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-616">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-616">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-617">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-617">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-618">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-618">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-619">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-619">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-620">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-620">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-621">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-621">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-622">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-622">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-623">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-623">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-624">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-624">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-625">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-625">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-626">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-626">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-627">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-627">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-628">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-628">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-629">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-629">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-630">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-630">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-631">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-631">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-632">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-632">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-633">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-633">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-634">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-634">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-635">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-635">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-636">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-636">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-637">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-637">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-638">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-638">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-639">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-639">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-640">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-640">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-641">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-641">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-642">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-642">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-643">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-643">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-644">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-644">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-645">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-645">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-646">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-646">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-647">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-647">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-648">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-648">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-649">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-649">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-650">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-650">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-651">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-651">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-652">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-652">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-653">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-653">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-654">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-654">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-655">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-655">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-656">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-656">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-657">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-657">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-658">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-658">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-659">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-659">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-660">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-660">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-661">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-661">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-662">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-662">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-663">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-663">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-664">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-664">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-665">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-665">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-666">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-666">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-667">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-667">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-668">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-668">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-669">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-670">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-670">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-671">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-671">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-672">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-672">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-673">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-673">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-674">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-674">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-675">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-675">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-676">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-676">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-677">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-678">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-678">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-679">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-679">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-680">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-680">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-681">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-681">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-682">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-682">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-683">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-683">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-684">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-684">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-685">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-685">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-686">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-686">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-687">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-687">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-688">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-688">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-689">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-689">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-690">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-690">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-691">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-691">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-692">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-692">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-693">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-693">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-694">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-694">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-695">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-695">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-696">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-696">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-697">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-697">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-698">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-698">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-699">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-699">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-700">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-700">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-701">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-701">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-702">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-702">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-703">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-703">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-704">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-704">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-705">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-705">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-706">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-706">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-707">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-707">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-708">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-708">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-709">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-709">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-710">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-710">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-711">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-711">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-712">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-712">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-713">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-713">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-714">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-714">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-715">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-715">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-716">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-716">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-717">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-717">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-718">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-718">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-719">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-719">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-720">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-720">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-721">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-721">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-722">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-722">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-723">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-723">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-724">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-724">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-725">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-725">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-726">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-726">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-727">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-727">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-728">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-728">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-729">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-729">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-730">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-730">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-731">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-731">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-732">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-732">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-733">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-733">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-734">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-734">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-735">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-735">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-736">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-736">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-737">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-737">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-738">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-738">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-739">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-739">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-740">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-740">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-741">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-741">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-742">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-742">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-743">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-743">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-744">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-744">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-745">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-745">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-746">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-746">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-747">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-747">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-748">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-748">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-749">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-749">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-750">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-750">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-751">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-751">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-752">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-752">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-753">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-753">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-754">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-754">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-755">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-755">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-756">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-756">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-757">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-757">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-758">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-758">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-759">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-759">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-760">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-760">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-761">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-761">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-762">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-762">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-763">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-763">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-764">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-764">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-765">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-765">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-766">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-766">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-767">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-767">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-768">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-768">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-769">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-769">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-770">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-770">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-771">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-771">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-772">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-772">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-773">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-773">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-774">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-774">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-775">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-775">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-776">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-776">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-777">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-777">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-778">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-778">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-779">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-779">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-780">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-780">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-781">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-781">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-782">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-782">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-783">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-783">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-784">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-784">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-785">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-785">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-786">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-786">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-787">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-788">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-788">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-789">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-789">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-790">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-790">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-791">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-791">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-792">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-792">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-793">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-793">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-794">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-794">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-795">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-795">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-796">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-796">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-797">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-797">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-798">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-798">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-799">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-799">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-800">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-800">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-801">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-801">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-802">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-802">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-803">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-803">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-804">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-804">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-805">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-806">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-806">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-807">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-807">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-808">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-808">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-809">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-809">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-810">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-810">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-811">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-811">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-812">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-812">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-813">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-813">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-814">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-814">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-815">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-815">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-816">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-816">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-817">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-817">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-818">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-818">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-819">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-819">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-820">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-820">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-821">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-821">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-822">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-822">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-823">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-823">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-824">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-824">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-825">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-825">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-826">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-826">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-827">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-827">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-828">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-828">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-829">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-829">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-830">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-830">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-831">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-831">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-832">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-832">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-833">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-833">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-834">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-834">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-835">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-835">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-836">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-836">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-837">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-837">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-838">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-838">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-839">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-839">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-840">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-840">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-841">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-841">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-842">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-842">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-843">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-843">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-844">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-844">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-845">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-845">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-846">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-846">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-847">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-847">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-848">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-848">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-849">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-849">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-850">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-850">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-851">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-852">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-852">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-853">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-854">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-855">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-855">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-856">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-856">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-857">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-857">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-858">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-858">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-859">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-859">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-860">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-861">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-861">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-862">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-862">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-863">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-863">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-864">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-865">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-866">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-866">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-867">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-868">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-868">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-869">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-869">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-870">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-870">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-871">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-871">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-872">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-873">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-873">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-874">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-874">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-875">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-875">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-876">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-876">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-877">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-877">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-878">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-878">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-879">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-880">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-881">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-882">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-882">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-883">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-883">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-884">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-884">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-885">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-885">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-886">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-886">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-887">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-887">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-888">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-888">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-889">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-889">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-890">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-890">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-891">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-891">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-892">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-892">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-893">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-893">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-894">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-894">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-895">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-895">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="6d2a2-896">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-896">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-897">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="6d2a2-898">指定是否要為字串寫入描述長度的雙位元組描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-898">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="6d2a2-899">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-900">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-900">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-901">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-902">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-903">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-903">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-904">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-904">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-905">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-906">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-906">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-907">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-907">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-908">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-908">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-909">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-909">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-910">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-911">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-911">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-912">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-913">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-914">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-914">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-915">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-915">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-916">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-916">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-917">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-917">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-918">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-918">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-919">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-919">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-920">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-920">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-921">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-921">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-922">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-922">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-923">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-923">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-924">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-924">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-925">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-925">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-926">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-926">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-927">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-927">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-928">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-928">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-929">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-929">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-930">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-930">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-931">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-932">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-932">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-933">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-933">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-934">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-935">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-935">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-936">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-937">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-937">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-938">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-939">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-940">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-941">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-941">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-942">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-942">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-943">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-943">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-944">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-944">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-945">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-945">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-946">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-946">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-947">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-947">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-948">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-948">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-949">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-949">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-950">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-950">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-951">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-951">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-952">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-952">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-953">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-953">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-954">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-954">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="6d2a2-955">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-955">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-956">只有在編寫陣列時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-956">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="6d2a2-957">指定是否將陣列視為動態 (Dynamic)，以及是否有必要指定描述陣列大小和界限的陣列描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-957">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="6d2a2-958">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-958">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-959">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-959">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="6d2a2-960">指定是否要為字串寫入描述長度的雙位元組描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-960">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="6d2a2-961">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-961">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-962">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-962">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-963">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-963">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="6d2a2-964">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-964">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-965">`FileGet` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-965">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-966">讀取的資料`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-966">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="6d2a2-967">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-968">如果您省略`RecordNumber`下, 一步 的資料錄或最後一個位元組`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-968">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-969">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-969">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-970">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-970">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-971">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-971">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-972">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-972">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-973">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGet`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-973">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-974">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-974">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-975">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-975">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-976">根據預設，在讀入的變數是一個字串，如果`FileGet`讀取雙位元組描述元，其中包含字串的長度，並接著會讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-976">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-977">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-977">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-978">Visual Basic 6.0 和更早版本支援固定長度的字串;置入檔案時，不寫入的長度描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-978">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-979">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-979">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-980">如果正在讀入的變數陣列，您可以選擇是否要讀取的大小和陣列的維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-980">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="6d2a2-981">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-981">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-982">當讀取陣列，您一定要相符寫入陣列的方式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-982">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="6d2a2-983">如果它具有描述元所撰寫，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-983">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="6d2a2-984">如果未使用的描述元，大小和陣列界限的傳入`FileGet`判斷要讀取的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-984">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="6d2a2-985">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-986">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-987">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-988">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-988">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="6d2a2-989">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-989">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="6d2a2-990">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-990">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="6d2a2-991">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-991">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-992">如果被讀入到變數是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-992">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="6d2a2-993">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-993">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-994">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-994">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-995">在磁碟上，動態陣列中的使用者定義型別 (以`FilePut`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-995">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-996">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-996">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="6d2a2-997">這包括任何陣列和其描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-997">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-998">`VBFixedString`屬性可以套用至字串欄位中指出的大小字串寫入時的結構至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-998">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-999">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-999">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1000">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1000">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1001">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1001">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1002">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1002">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1003">`FileGet` 從磁碟讀取所有的變數時，也將連續;也就不含之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1003">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1004">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1004">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="6d2a2-1005">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1005">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="6d2a2-1006">`FileGet` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1006">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1007">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1007">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="6d2a2-1008">使用 從檔案讀取`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1008">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1009">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1009">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1010">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1010">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1011">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1011">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1012">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1012">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1013">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1013">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1014">有效的變數名稱，資料將讀取至其中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1014">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1015">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1015">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1016">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1016">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1017">將開放磁碟檔案的資料讀取到變數中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1017">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="6d2a2-1018">相較於 <see langword="FileGetObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1019">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1020">`FileGetObject`而不是使用函式`FileGet`若要避免模稜兩可在編譯時期，如果型別`Object`傳回而不是另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1020">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="6d2a2-1021">如果您想要寫出`Variant`型別，`FileGetObject`需要。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1021">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="6d2a2-1022">有疑問，如果您使用物件來作為第二個參數，一律建議您改用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1022">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6d2a2-1023">`FileGetObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1023">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1024">讀取的資料`FileGetObject`通常會使用寫入`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1024">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="6d2a2-1025">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1025">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1026">如果您省略`RecordNumber`，`FileGetObject`讀取最後一個之後的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或最後一個指向`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1026">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1027">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1027">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1028">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1028">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1029">正在讀取資料的長度是否在指定的長度小於`RecordLength`子句`FileOpen`函式，`FileGetObject`讀取後續的記錄資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1029">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1030">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開頭之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1030">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1031">因為填補資料的數量無法精確地判斷，所以最好有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1031">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="6d2a2-1032">正在讀取到變數是否為字串，預設`FileGetObject`讀取雙位元組描述元包含字串的長度，然後再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1032">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1033">因此，所指定的記錄長度`RecordLength`子句`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1033">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1034">Visual Basic 6.0 和更早版本支援固定長度字串和讀取檔案時，長度的描述項不會寫入。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1034">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="6d2a2-1035">如果您想要讀取描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1035">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1036">如果正在讀入的變數陣列，則所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1036">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1037">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1037">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1038">其長度等於 2，再加上 8 倍的維度數目： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1038">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="6d2a2-1039">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1039">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="6d2a2-1040">218 個位元組會分散，如下所示： 18 位元組描述元 (2 + 8 \* 2)，以及 100 個位元組 (5 \* 10 \* 4) 的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1040">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="6d2a2-1041">`FileGetObject` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1041">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1042">在磁碟上，動態陣列中的使用者定義型別 (以`FilePutObject`) 加上其長度會等於 2 加上 8 倍的維度數目的描述元： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1042">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="6d2a2-1043">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於讀取個別的項目，包括任何陣列和其描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1043">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="6d2a2-1044"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>類別，可指出的大小字串寫入時的結構中的字串欄位套用至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1044">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1045">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1045">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1046">在開啟的檔案`Binary`模式中，所有`Random`套用規則，但有下列例外：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1046">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="6d2a2-1047">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1047">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1048">`FileGetObject` 所有連續讀取變數，從磁碟，也就是記錄之間的不帶填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1048">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1049">在結構中，陣列以外的所有陣列`FileGetObject`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1049">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="6d2a2-1050">不讀取任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1050">No descriptor is read.</span></span>  
  
 <span data-ttu-id="6d2a2-1051">`FileGetObject` 讀取可變長度的字串不是結構，而不需要雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1051">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1052">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1052">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-1053">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1053">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-1054">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1054">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1055">下列範例讀入測試檔案中的記錄，然後擷取它。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1055">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-1056">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1056">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1057">指定檔案的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1057">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="6d2a2-1058">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1058">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1059">傳回 <see langword="Long" /> 值，指定檔案的長度 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1059">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="6d2a2-1060">相較於 <see langword="FileLen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1060">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1061">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1061">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-1062">
            <see langword="Long" /> 指定檔案長度的值 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1062">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1063">如果指定的檔案時，開啟`FileLen`函式呼叫，傳回的值代表檔案的大小，在它已開啟的時間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1063">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-1064">若要取得目前已開啟之檔案的長度，請使用`LOF`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1064">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1065">這個範例會使用`FileLen`函數來傳回檔案的長度，以位元組為單位。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1065">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="6d2a2-1066">基於此範例的詳細資訊，假設`TestFile`是包含某些資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1066">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-1067">檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1067">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1068">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1068">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1069">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1069">Any valid file number.</span>
          </span>
          <span data-ttu-id="6d2a2-1070">使用 <see langword="FreeFile" /> 函式取得下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1070">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="6d2a2-1071">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1071">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1072">
            <see langword="String" /> 運算式，可指定檔名，也可能包括目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1072">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="6d2a2-1073">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1073">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1074">指定檔案模式的列舉類型：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1074">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1075">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1075">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="6d2a2-1076">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1076">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1077">指定開啟檔案上允許的作業之列舉類型：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1077">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1078">預設值為 <see langword="ReadWrite" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1078">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1079">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1079">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="6d2a2-1080">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1080">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1081">指定開啟的檔案上其他處理序不允許之作業的列舉類型：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1081">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1082">預設值為 <see langword="Lock Read Write" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1082">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1083">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1083">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="6d2a2-1084">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1084">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1085">數字小於或等於 32,767 (位元組)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1085">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="6d2a2-1086">對於為隨機存取開啟的檔案而言，這個值是資料錄長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1086">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="6d2a2-1087">對於循序檔案而言，這個值是緩衝的字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1087">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1088">開啟要當做輸入或輸出的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1088">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="6d2a2-1089">相較於 <see langword="FileOpen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1089">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1090">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1090">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1091">`FileOpen`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1091">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-1092">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-1093">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-1094">您必須開啟檔案，才能在其上執行任何 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1094">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="6d2a2-1095">`FileOpen` 會針對 I/O 配置緩衝區至檔案，並判斷權限與緩衝區使用的模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1095">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-1096">寫入至檔案時，應用程式可能要建立檔案，如果嘗試寫入的檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1096">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="6d2a2-1097">若要這樣做，它會需要權限的 建立檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1097">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="6d2a2-1098">不過，如果指定的檔案`FileName`存在，應用程式需求`Write`只對檔案本身的權限。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1098">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="6d2a2-1099">盡量，以協助改善安全性、 部署和授與期間建立檔案的任一處`Write`該檔案的權限唯一的而不是整個目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1099">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="6d2a2-1100">若要改善安全性，請將資料寫入使用者目錄，而不是目錄的根目錄或 Program Files 目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1100">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="6d2a2-1101">若要開啟的通道可使用`FreeFile()`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1101">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-1102">`FileOpen`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1102">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="6d2a2-1103">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1103">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1104">此範例說明的各種用法`FileOpen`函式可讓輸入與輸出至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1104">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="6d2a2-1105">下列程式碼會開啟檔案`TestFile`在`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1105">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="6d2a2-1106">此範例會開啟中的檔案`Binary`模式只允許寫入作業。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1106">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="6d2a2-1107">下列範例會開啟中的檔案`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1107">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="6d2a2-1108">檔案包含的結構記錄`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1108">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="6d2a2-1109">此程式碼範例會開啟中的檔案`Output`模式; 任何程序可以讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1109">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="6d2a2-1110">此程式碼範例會開啟中的檔案`Binary`模式進行讀取，其他處理序無法讀取檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1110">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1111">資料錄的長度為負數 (而且不等於 -1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1111">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1112">
            <paramref name="FileName" /> 已經開啟，或 <paramref name="FileName" /> 無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1112">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-1113">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1113">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1114">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1114">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1115">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1115">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1116">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1116">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1117">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1117">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1118">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1118">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1119">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1119">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1120">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1120">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1121">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1121">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1122">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1122">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1123">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1123">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1124">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1124">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1125">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1125">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1126">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1126">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1127">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1127">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1128">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1128">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1129">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1129">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1130">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1130">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1131">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1131">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1132">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1132">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1133">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1133">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1134">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1134">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1135">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1135">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1136">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1136">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1137">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1137">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1138">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1138">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1139">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1139">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1140">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1140">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1141">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1141">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1142">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1142">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1143">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1143">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1144">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1144">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1145">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1145">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1146">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1146">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1147">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1147">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1148">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1148">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1149">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1149">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1150">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1150">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1151">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1151">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1152">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1152">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1153">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1153">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1154">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1154">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1155">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1155">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1156">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1156">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1157">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1157">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1158">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1158">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1159">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1159">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1160">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1160">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1161">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1161">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1162">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1162">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1163">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1163">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1164">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1164">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1165">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1165">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1166">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1166">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1167">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1167">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1168">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1168">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1169">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1169">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1170">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1170">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1171">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1171">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1172">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1172">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1173">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1173">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1174">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1174">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1175">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1175">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1176">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1176">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1177">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1177">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1178">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1178">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1179">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1179">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1180">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1180">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1181">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1181">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1182">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1182">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1183">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1183">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1184">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1184">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1185">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1185">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1186">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1186">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1187">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1187">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1188">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1188">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1189">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1189">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1190">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1190">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1191">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1191">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1192">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1192">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1193">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1193">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1194">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1194">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1195">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1195">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1196">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1196">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1197">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1197">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1198">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1198">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1199">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1199">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1200">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1200">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1201">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1201">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1202">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1202">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1203">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1203">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1204">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1204">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1205">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1205">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1206">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1206">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1207">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1207">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1208">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1208">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1209">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1209">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1210">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1210">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1211">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1211">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1212">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1213">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1213">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1214">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1214">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1215">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1215">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1216">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1216">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1217">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1217">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1218">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1218">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1219">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1219">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1220">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1220">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1221">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1221">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1222">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1222">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1223">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1223">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1224">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1224">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1225">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1225">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1226">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1226">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1227">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1227">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1228">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1228">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1229">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1229">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1230">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1230">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1231">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1231">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1232">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1232">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1233">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1233">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1234">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1234">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1235">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1235">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1236">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1236">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1237">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1237">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1238">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1238">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1239">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1239">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1240">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1240">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1241">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1241">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1242">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1242">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1243">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1243">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1244">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1244">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1245">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1245">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1246">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1246">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1247">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1247">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1248">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1248">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1249">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1249">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1250">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1250">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1251">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1251">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1252">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1252">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1253">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1253">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1254">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1254">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1255">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1255">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1256">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1256">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1257">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1257">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1258">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1258">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1259">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1259">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1260">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1261">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1261">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1262">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1262">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1263">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1263">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1264">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1264">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1265">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1265">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1266">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1266">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1267">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1267">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1268">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1268">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1269">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1269">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1270">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1270">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1271">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1271">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1272">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1272">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1273">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1273">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1274">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1274">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1275">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1275">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1276">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1276">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1277">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1277">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1278">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1278">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1279">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1279">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1280">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1280">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1281">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1281">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1282">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1282">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1283">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1283">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1284">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1284">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1285">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1285">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1286">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1286">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1287">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1287">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1288">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1288">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1289">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1289">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1290">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1290">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1291">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1291">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1292">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1292">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1293">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1293">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1294">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1294">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1295">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1295">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1296">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1296">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1297">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1297">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1298">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1298">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1299">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1299">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1300">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1300">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1301">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1301">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1302">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1302">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1303">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1303">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1304">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1304">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1305">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1305">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1306">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1306">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1307">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1307">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1308">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1308">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1309">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1309">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1310">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1310">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1311">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1311">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1312">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1312">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1313">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1313">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1314">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1314">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1315">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1315">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1316">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1316">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1317">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1317">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1318">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1318">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1319">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1319">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1320">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1320">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1321">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1322">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1322">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1323">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1323">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1324">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1324">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1325">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1325">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1326">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1326">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1327">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1327">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1328">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1328">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1329">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1329">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1330">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1331">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1331">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1332">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1332">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1333">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1333">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1334">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1334">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1335">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1335">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1336">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1336">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1337">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1337">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1338">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1338">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1339">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1339">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1340">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1340">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1341">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1341">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1342">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1342">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1343">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1343">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1344">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1344">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1345">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1345">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1346">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1346">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1347">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1347">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1348">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1348">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1349">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1349">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1350">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1350">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1351">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1351">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1352">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1352">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1353">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1354">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1354">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1355">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1355">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1356">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1356">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1357">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1358">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1358">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1359">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1360">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1361">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1362">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1363">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1364">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1365">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1366">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1367">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1368">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1368">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1369">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1370">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1371">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1372">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1373">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1374">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1375">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1376">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1377">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1378">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1379">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1380">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1381">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1382">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1383">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1384">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1385">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1386">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1387">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1388">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1389">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1390">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1391">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1392">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1393">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1394">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1395">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1396">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1396">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1397">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1398">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1399">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1400">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1401">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1402">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1403">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1404">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1405">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1406">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1407">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1408">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1409">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1409">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1410">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1410">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1411">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1411">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1412">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1412">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1413">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1413">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1414">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1414">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1415">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1415">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1416">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1416">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1417">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1417">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1418">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1418">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1419">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1419">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1420">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1420">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1421">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1421">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1422">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1422">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1423">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1423">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1424">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1424">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1425">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1425">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1426">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1426">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1427">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1427">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1428">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1428">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1429">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1429">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1430">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1430">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1431">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1431">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1432">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1432">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1433">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1433">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1434">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1434">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1435">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1435">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1436">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1436">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1437">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1438">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1438">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1439">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1439">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1440">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1440">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1441">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1441">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1442">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1442">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1443">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1443">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1444">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1444">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1445">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1445">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1446">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1446">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1447">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1447">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1448">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1448">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1449">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1449">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1450">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1450">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1451">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1451">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1452">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1452">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1453">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1453">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1454">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1454">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1455">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1455">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1456">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1456">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1457">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1457">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1458">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1458">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1459">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1459">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1460">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1460">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1461">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1461">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1462">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1462">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1463">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1463">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1464">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1464">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1465">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1465">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1466">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1466">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1467">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1467">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1468">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1468">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1469">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1469">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1470">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1470">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1471">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1471">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1472">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1472">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1473">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1473">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1474">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1474">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1475">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1475">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1476">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1476">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1477">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1477">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1478">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1478">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1479">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1479">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1480">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1480">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1481">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1481">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1482">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1482">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1483">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1483">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1484">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1484">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1485">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1485">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1486">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1486">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1487">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1487">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1488">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1488">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1489">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1489">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1490">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1490">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1491">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1491">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1492">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1492">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1493">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1493">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1494">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1494">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1495">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1495">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1496">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1496">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1497">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1497">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1498">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1499">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1499">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1500">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1500">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1501">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1501">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1502">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1502">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1503">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1504">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1504">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1505">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1505">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1506">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1506">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1507">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1507">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1508">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1508">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1509">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1509">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1510">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1510">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1511">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1511">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1512">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1512">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1513">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1513">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1514">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1514">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1515">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1515">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1516">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1516">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1517">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1517">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1518">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1518">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1519">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1519">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1520">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1520">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1521">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1521">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1522">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1522">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1523">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1523">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1524">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1524">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1525">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1525">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1526">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1526">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1527">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1527">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1528">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1529">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1529">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1530">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1531">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1531">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1532">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1533">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1533">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1534">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1535">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1536">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1537">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1538">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1539">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1540">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1541">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1542">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1543">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1544">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1545">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1545">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1546">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1547">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1548">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1549">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1550">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1551">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1552">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1553">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1554">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1555">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1556">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1557">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1558">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1559">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1560">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1561">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1562">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1563">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1564">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1565">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1566">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1567">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1568">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1569">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1570">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1571">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1572">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1573">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1573">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1574">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1575">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1576">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1577">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1578">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1579">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1580">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1581">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1582">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1583">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1584">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1585">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1586">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1587">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1588">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1588">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1589">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1589">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1590">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1590">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1591">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1591">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1592">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1592">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1593">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1593">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1594">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1594">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1595">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1595">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1596">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1596">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1597">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1597">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1598">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1598">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1599">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1599">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1600">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1600">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1601">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1601">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1602">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1602">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1603">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1603">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1604">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1604">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1605">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1605">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1606">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1606">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1607">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1607">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1608">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1608">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1609">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1609">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1610">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1610">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1611">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1611">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1612">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1612">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1613">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1613">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1614">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1614">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1615">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1615">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1616">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1616">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1617">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1617">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1618">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1618">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1619">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1619">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1620">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1620">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1621">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1621">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1622">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1622">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1623">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1623">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1624">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1624">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1625">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1625">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1626">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1626">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1627">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1627">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1628">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1628">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1629">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1629">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1630">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1630">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1631">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1631">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1632">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1632">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1633">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1633">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1634">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1634">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1635">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1635">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1636">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1636">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1637">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1637">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1638">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1638">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1639">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1639">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1640">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1640">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1641">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1641">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1642">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1642">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1643">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1643">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1644">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1644">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1645">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1646">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1647">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1647">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1648">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1648">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1649">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1649">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1650">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1650">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1651">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1651">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1652">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1652">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1653">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1653">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1654">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1655">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1656">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1656">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1657">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1657">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1658">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1658">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1659">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1659">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1660">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1660">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1661">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1661">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1662">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1662">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1663">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1663">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1664">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1664">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1665">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1665">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1666">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1666">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1667">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1667">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1668">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1668">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1669">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1669">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1670">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1670">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1671">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1671">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1672">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1672">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1673">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1673">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1674">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1674">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1675">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1676">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1676">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1677">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1677">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1678">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1678">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1679">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1679">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1680">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1680">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1681">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1681">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1682">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1682">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1683">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1683">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1684">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1684">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1685">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1685">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1686">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1686">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1687">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1687">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1688">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1688">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1689">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1689">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1690">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1690">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1691">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1691">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1692">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1692">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1693">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1693">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1694">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1694">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1695">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1695">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1696">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1696">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1697">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1697">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1698">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1698">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1699">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1699">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1700">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1700">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1701">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1701">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1702">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1702">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1703">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1703">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1704">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1704">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1705">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1705">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1706">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1706">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1707">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1708">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1708">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1709">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1709">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1710">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1710">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1711">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1712">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1712">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1713">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1714">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1715">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1715">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1716">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1716">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1717">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1718">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1718">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1719">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1719">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1720">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1720">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1721">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1721">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1722">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1722">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1723">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1723">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1724">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1724">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1725">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1725">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1726">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1726">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1727">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1727">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1728">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1728">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1729">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1729">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1730">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1730">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1731">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1731">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1732">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1732">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1733">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1733">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1734">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1734">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1735">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1735">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1736">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1736">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1737">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1737">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1738">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1738">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1739">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1739">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1740">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1740">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1741">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1741">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1742">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1742">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1743">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1744">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1744">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1745">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1745">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1746">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1747">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1747">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1748">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1749">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1749">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1750">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1750">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1751">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1751">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1752">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1752">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1753">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1753">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1754">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1754">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1755">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1755">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1756">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1756">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1757">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1757">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1758">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1758">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1759">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1759">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1760">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1760">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1761">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1761">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1762">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1762">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1763">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1763">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1764">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1764">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1765">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1765">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1766">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1766">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1767">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1767">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1768">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1768">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1769">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1769">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1770">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1770">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1771">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1771">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1772">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1772">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1773">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1773">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1774">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1774">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1775">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1775">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1776">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1776">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1777">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1777">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1778">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1778">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1779">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1779">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1780">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1780">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1781">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1781">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1782">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1783">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1783">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1784">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1785">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1786">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1786">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1787">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1787">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1788">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1788">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1789">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1789">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1790">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1790">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1791">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1791">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1792">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1792">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1793">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1793">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1794">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1794">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1795">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1795">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1796">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1796">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1797">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1797">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1798">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1798">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1799">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1799">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1800">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1800">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1801">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1801">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1802">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1802">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1803">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1803">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1804">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1804">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1805">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1805">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1806">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1806">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1807">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1807">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1808">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1808">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1809">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1809">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1810">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1811">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1812">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1813">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1813">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1814">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1814">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1815">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1815">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1816">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1816">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1817">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1817">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1818">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1818">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1819">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1819">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1820">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1820">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1821">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1821">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1822">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1822">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1823">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1824">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1824">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1825">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1825">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1826">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1826">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1827">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1827">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1828">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1828">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1829">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1829">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="6d2a2-1830">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1830">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1831">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1831">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="6d2a2-1832">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1832">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="6d2a2-1833">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1833">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1834">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1834">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1835">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1835">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1836">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1836">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1837">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1837">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1838">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1838">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1839">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1839">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1840">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1840">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1841">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1841">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1842">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1842">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1843">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1843">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1844">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1844">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1845">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1845">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1846">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1846">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1847">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1847">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1848">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1848">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1849">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1849">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1850">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1850">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1851">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1851">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1852">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1852">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1853">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1853">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1854">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1855">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1855">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1856">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1856">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1857">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1857">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1858">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1858">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1859">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1859">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1860">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1860">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1861">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1861">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1862">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1862">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1863">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1864">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1865">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1865">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1866">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1867">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1867">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1868">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1868">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1869">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1869">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1870">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1870">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1871">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1871">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1872">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1872">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1873">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1873">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1874">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1874">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1875">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1875">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1876">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1876">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1877">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1877">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1878">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1878">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1879">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1879">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1880">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1880">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1881">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1881">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1882">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1882">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1883">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1883">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1884">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1884">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1885">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1885">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1886">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1886">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1887">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1887">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1888">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1888">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1889">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1889">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1890">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1890">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1891">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1891">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1892">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1892">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="6d2a2-1893">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1893">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1894">只有在編寫陣列時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1894">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="6d2a2-1895">指定陣列是否要視為動態 (Dynamic)，以及是否要針對描述長度的字串編寫陣列描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1895">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="6d2a2-1896">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1896">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1897">只有在編寫字串時才適用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="6d2a2-1898">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1898">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="6d2a2-1899">預設值為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1900">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1900">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1901">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1902">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1903">`FilePut` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1903">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1904">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1904">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="6d2a2-1905">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1906">如果您省略`RecordNumber`下, 一個資料錄或最後一個之後的位元組`FileGet`或是`FilePut`函式，或指向最後一個`Seek`撰寫函式時。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1906">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="6d2a2-1907">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1907">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1908">`FilePut` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1908">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1909">如果您使用`StringIsFixedLength`  =  `True`具有`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1909">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1910">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1910">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1911">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1911">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1912">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1912">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1913">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1913">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1914">因為無法任何確定地決定填補資料的數量，通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1914">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1915">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1915">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1916">如果寫入的變數是字串，`FilePut`寫入雙位元組描述元包含字串的長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1916">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="6d2a2-1917">因此，所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1917">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="6d2a2-1918">如果要寫入的變數是物件，包含數值的型別，`FilePut`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1918">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1919">比方說，撰寫物件時，包含整數`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1919">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1920">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1920">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1921">如果寫入的變數是包含字串、 物件`FilePut`寫入兩個位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1921">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1922">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1923">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1923">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1924">如果寫入的變數陣列，您會有關於要寫入的大小和陣列維度的描述元的選擇。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1924">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="6d2a2-1925">Visual Basic 6.0 和更早版本撰寫的動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1925">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="6d2a2-1926">Visual Basic 2005 預設為不寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1926">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="6d2a2-1927">若要寫入的描述元，將`ArrayIsDynamic`參數來`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1927">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="6d2a2-1928">在撰寫時的陣列，您必須比對會讀取陣列; 的方式它會讀取具有描述元，如果您有寫入描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1928">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="6d2a2-1929">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1930">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="6d2a2-1931">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1932">比方說，下列陣列宣告需要 218 的位元組陣列寫入至磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="6d2a2-1933">如果要寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1933">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="6d2a2-1934">所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於所寫入的資料長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1935">`FilePut` 如同寫入每個個別但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1935">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="6d2a2-1936">`VBFixedString`屬性可以套用至字串欄位中的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6d2a2-1937">字串已超過所指定位元組數目的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1937">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1938">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1938">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1939">在開啟的檔案`Binary`模式中，大部分的`Random`模式規則的套用，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1939">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="6d2a2-1940">在中開啟檔案的下列規則`Binary`模式與不同的規則`Random`模式︰</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1940">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="6d2a2-1941">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1941">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1942">`FilePut` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1942">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="6d2a2-1943">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1943">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="6d2a2-1944">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1944">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-1945">`FilePut` 寫入不是雙位元組長度描述項的結構元素的可變長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1945">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="6d2a2-1946">寫入的位元組數目等於字串中的字元數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1946">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="6d2a2-1947">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1947">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="6d2a2-1948">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1948">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1949">這個範例會使用`FilePut`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1949">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="6d2a2-1950">結構的五筆記錄`Person`會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1950">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-1951">
            <paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1951">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-1952">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1953">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1953">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1954">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-1955">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1955">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1956">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="6d2a2-1957">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1957">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-1958">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1959">將變數資料寫入磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1959">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="6d2a2-1960">相較於 <see langword="FilePutObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1960">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="6d2a2-1961">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1961">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-1962">`FilePutObject`而不是使用函式`FilePut`若要避免模稜兩可在編譯時期，如果型別`Object`傳遞，而另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1962">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="6d2a2-1963">`FilePutObject` 寫入，並讀取描述物件的描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1963">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="6d2a2-1964">如果您想要寫出`Variant`型別，`FilePutObject`需要。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1964">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="6d2a2-1965">如有疑問，如果您使用物件來作為第二個參數，我們建議您一律使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1965">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6d2a2-1966">`FilePutObject` 只有在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1966">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-1967">使用 `FilePutObject` 寫入的資料，通常會透過使用 `FileGetObject` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1967">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="6d2a2-1968">第一個記錄或檔案中的位元組在位置 1，第二個資料錄或位元組位於位置 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1968">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="6d2a2-1969">如果您省略`RecordNumber`，`FilePutObject`寫入最後一個之後的下一步 的資料錄或位元組`FileGetObject`或是`FilePutObject`函式 (或資料錄或位元組所指的最後一個`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1969">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="6d2a2-1970">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1970">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="6d2a2-1971">`FilePutObject` 引數時，會將寫入的長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1971">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="6d2a2-1972">如果您使用`StringIsFixedLength`  =  `True`具有`FilePutObject`，您必須執行相同的`FileGetObject`，和您也必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1972">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="6d2a2-1973">隨機的模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1973">Random Mode</span></span>  
 <span data-ttu-id="6d2a2-1974">在開啟的檔案的`Random`模式中，適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1974">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="6d2a2-1975">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePutObject`將後續的記錄寫入記錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1975">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="6d2a2-1976">檔案緩衝區的現有內容填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1976">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="6d2a2-1977">填補資料的數量無法精確地判斷，因為它通常是個不錯的主意，具有符合要寫入的資料長度的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1977">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="6d2a2-1978">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1978">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="6d2a2-1979">如果要寫入的變數是物件，包含數值的型別，`FilePutObject`寫入兩個位元組，識別`VarType`物件的然後將寫入的變數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1979">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="6d2a2-1980">比方說，撰寫物件時，包含整數`FilePutObject`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 和包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1980">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="6d2a2-1981">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1981">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="6d2a2-1982">如果寫入的變數是包含字串、 物件`FilePutObject`寫入雙位元組描述元，識別`VarType(8)`的物件，表示的字串，然後再寫入字串資料長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1982">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="6d2a2-1983">所指定的記錄長度`RecordLength`中的參數`FileOpen`函式必須是至少在四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1983">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="6d2a2-1984">如果您想要將描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，而您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1984">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="6d2a2-1985">如果寫入的變數陣列，則所指定的記錄長度`RecordLength`子句中的`FileOpen`函式必須是大於或等於要寫入的陣列資料和陣列描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1985">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="6d2a2-1986">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1986">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="6d2a2-1987">其長度等於 2，再加上 8 倍的維度數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1987">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="6d2a2-1988">二進位模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1988">Binary Mode</span></span>  
 <span data-ttu-id="6d2a2-1989">在開啟的檔案`Binary`模式中，所有`Random`套用模式的規則，除了：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1989">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="6d2a2-1990">`RecordLength`子句中的`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1990">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="6d2a2-1991">`FilePutObject` 將所有的變數，連續地寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1991">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-1992">這個範例會使用`FilePutObject`函式來將字串寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-1992">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-1993">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1993">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1994">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1994">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="6d2a2-1995">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1995">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-1996">0–255 範圍內的數值運算式 (包含頭尾)，表示在開始新行之前，會有多少字元出現在一行上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1996">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="6d2a2-1997">如果 <c>RecordWidth</c> 等於 0，則一行的長度將沒有限制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1997">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="6d2a2-1998">
            <c>RecordWidth</c> 的預設值為 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1998">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-1999">為藉由使用 <see langword="FileOpen" /> 函式開啟的檔案指派輸出行寬度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-1999">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6d2a2-2000">這個範例會使用`FileWidth`函式來設定輸出行寬度的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2000">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2001">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2001">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2002">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2003">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2003">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2004">使用`FreeFile`提供尚未使用的檔案數字。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2004">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2005">這個範例會使用`FreeFile`函式傳回下一個可用的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2005">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="6d2a2-2006">輸出，在迴圈內，開啟五個檔案和一些範例資料會寫入每一個。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2006">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2007">使用中的檔案超過 255 個。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2007">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-2008">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2008">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2009">指定檔案、目錄或資料夾名稱的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2009">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="6d2a2-2010">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2010">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2011">傳回 <see langword="FileAttribute" /> 值，表示檔案、目錄或資料夾的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2011">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="6d2a2-2012">相較於 <see langword="FileAttribute" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2013">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2014">
            <see langword="GetAttr" /> 傳回的值是以下列舉值的總和：</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2014">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <span data-ttu-id="6d2a2-2015">
            <list type="table">
              <item>
                <term> 值  </term>
                <description> 常數  </description>
                <description> 描述  </description>
              </item>
              <item>
                <term>
                  <see langword="Normal" />
                </term>
                <description>
                  <see langword="vbNormal" />
                </description>
                <description> 一般。</description>
              </item>
              <item>
                <term>
                  <see langword="ReadOnly" />
                </term>
                <description>
                  <see langword="vbReadOnly" />
                </description>
                <description> 唯讀。</description>
              </item>
              <item>
                <term>
                  <see langword="Hidden" />
                </term>
                <description>
                  <see langword="vbHidden" />
                </description>
                <description> 隱藏。</description>
              </item>
              <item>
                <term>
                  <see langword="System" />
                </term>
                <description>
                  <see langword="vbSystem" />
                </description>
                <description> 系統檔案。</description>
              </item>
              <item>
                <term>
                  <see langword="Directory" />
                </term>
                <description>
                  <see langword="vbDirectory" />
                </description>
                <description> 目錄或資料夾。</description>
              </item>
              <item>
                <term>
                  <see langword="Archive" />
                </term>
                <description>
                  <see langword="vbArchive" />
                </description>
                <description> 前次備份之後，檔案已經有了變更。</description>
              </item>
              <item>
                <term>
                  <see langword="Alias" />
                </term>
                <description>
                  <see langword="vbAlias" />
                </description>
                <description> 檔案有不同的名稱。</description>
              </item>
            </list>
            <block subset="none" type="note">
              <para> 這些列舉是由 Visual Basic 語言所指定。您可以在程式碼中的任何地方使用這些名稱來取代實際值。</para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2015">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Constant  </description>
                  <description> Description  </description>
                </item>
                <item>
                  <term>
                    <see langword="Normal" />
                  </term>
                  <description>
                    <see langword="vbNormal" />
                  </description>
                  <description> Normal.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ReadOnly" />
                  </term>
                  <description>
                    <see langword="vbReadOnly" />
                  </description>
                  <description> Read-only.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Hidden" />
                  </term>
                  <description>
                    <see langword="vbHidden" />
                  </description>
                  <description> Hidden.  </description>
                </item>
                <item>
                  <term>
                    <see langword="System" />
                  </term>
                  <description>
                    <see langword="vbSystem" />
                  </description>
                  <description> System file.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Directory" />
                  </term>
                  <description>
                    <see langword="vbDirectory" />
                  </description>
                  <description> Directory or folder.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Archive" />
                  </term>
                  <description>
                    <see langword="vbArchive" />
                  </description>
                  <description> File has changed since last backup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Alias" />
                  </term>
                  <description>
                    <see langword="vbAlias" />
                  </description>
                  <description> File has a different name.  </description>
                </item>
              </list>
              <block subset="none" type="note">
                <para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2016">若要判斷設定了哪些屬性，請使用`And`運算子來執行所傳回的值的位元比較`GetAttr`函式和您想要個別的檔案屬性的值。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2016">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="6d2a2-2017">如果結果不是零，該屬性是設定具名的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2017">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="6d2a2-2018">例如，下列的傳回值`And`運算式是零，如果`Archive`未設定屬性：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2018">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="6d2a2-2019">會傳回非零值，如果`Archive`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2019">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2020">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2020">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2021">
            <paramref name="Pathname" /> 無效或包含萬用字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2021">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-2022">目標檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2022">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2023">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2023">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2024">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2024">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2025">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2025">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2026">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2026">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2027">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2027">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2028">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2028">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2029">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2029">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2030">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2030">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2031">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2031">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2032">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2032">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2033">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2033">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2034">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2034">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2035">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2035">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2036">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2036">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2037">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2037">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2038">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2038">Data</span></span>|<span data-ttu-id="6d2a2-2039">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2039">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2040">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2040">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2041">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2041">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2042">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2042">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2043">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2043">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2044">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2044">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2045">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2045">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2046">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2046">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2047">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2047">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2048">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2048">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2049">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2049">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2050">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2050">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2051">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2051">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2052">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2052">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2053">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2053">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2054">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2054">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2055">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2055">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2056">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2056">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2057">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2057">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2058">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2058">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2059">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2059">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2060">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2060">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2061">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2061">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2062">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2062">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2063">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2063">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2064">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2064">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2065">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2065">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2066">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2066">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2067">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2067">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2068">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2068">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2069">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2069">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2070">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2070">Data</span></span>|<span data-ttu-id="6d2a2-2071">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2071">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2072">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2072">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2073">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2073">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2074">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2074">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2075">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2075">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2076">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2076">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2077">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2077">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2078">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2078">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2079">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2079">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2080">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2080">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2081">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2081">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2082">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2082">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2083">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2083">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2084">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2084">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2085">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2085">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2086">這個範例假設`TestFile`是一個檔案，有一些使用寫入的資料行`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2086">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2087">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2087">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2088">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2088">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2089">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2089">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2090">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2090">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2091">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2091">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2092">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2092">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2093">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2093">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2094">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2094">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2095">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2095">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2096">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2096">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2097">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2097">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2098">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2098">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2099">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2099">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2100">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2100">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2101">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2101">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2102">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2102">Data</span></span>|<span data-ttu-id="6d2a2-2103">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2103">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2104">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2104">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2105">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2105">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2106">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2106">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2107">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2107">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2108">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2108">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2109">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2109">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2110">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2110">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2111">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2111">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2112">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2112">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2113">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2113">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2114">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2114">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2115">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2115">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2116">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2116">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2117">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2117">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2118">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2118">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2119">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2119">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2120">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2120">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2121">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2121">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2122">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2122">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2123">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2123">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2124">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2124">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2125">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2125">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2126">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2126">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2127">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2127">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2128">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2128">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2129">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2129">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2130">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2130">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2131">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2131">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2132">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2132">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2133">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2133">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2134">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2134">Data</span></span>|<span data-ttu-id="6d2a2-2135">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2135">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2136">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2136">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2137">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2137">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2138">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2138">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2139">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2139">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2140">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2140">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2141">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2141">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2142">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2142">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2143">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2143">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2144">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2144">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2145">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2145">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2146">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2146">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2147">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2147">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2148">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2148">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2149">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2149">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2150">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2150">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2151">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2151">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2152">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2152">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2153">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2153">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2154">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2154">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2155">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2155">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2156">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2156">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2157">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2157">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2158">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2158">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2159">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2159">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2160">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2160">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2161">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2161">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2162">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2162">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2163">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2163">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2164">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2164">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2165">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2165">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2166">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2166">Data</span></span>|<span data-ttu-id="6d2a2-2167">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2167">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2168">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2168">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2169">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2169">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2170">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2170">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2171">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2171">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2172">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2172">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2173">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2173">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2174">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2174">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2175">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2175">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2176">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2176">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2177">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2177">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2178">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2178">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2179">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2179">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2180">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2180">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2181">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2181">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2182">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2182">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2183">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2183">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2184">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2184">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2185">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2185">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2186">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2186">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2187">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2187">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2188">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2188">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2189">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2189">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2190">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2190">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2191">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2191">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2192">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2192">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2193">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2193">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2194">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2194">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2195">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2195">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2196">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2196">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2197">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2197">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2198">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2198">Data</span></span>|<span data-ttu-id="6d2a2-2199">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2199">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2200">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2200">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2201">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2201">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2202">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2202">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2203">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2203">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2204">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2204">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2205">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2205">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2206">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2206">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2207">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2207">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2208">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2208">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2209">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2209">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2210">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2210">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2211">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2211">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2212">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2212">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2213">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2213">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2214">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2214">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2215">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2215">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2216">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2216">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2217">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2217">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2218">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2218">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2219">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2219">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2220">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2220">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2221">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2221">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2222">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2222">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2223">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2223">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2224">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2224">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2225">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2225">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2226">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2226">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2227">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2227">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2228">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2228">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2229">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2229">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2230">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2230">Data</span></span>|<span data-ttu-id="6d2a2-2231">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2231">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2232">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2232">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2233">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2233">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2234">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2234">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2235">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2235">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2236">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2236">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2237">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2237">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2238">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2238">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2239">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2239">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2240">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2240">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2241">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2241">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2242">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2242">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2243">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2243">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2244">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2244">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2245">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2245">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2246">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2246">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2247">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2247">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2248">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2248">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2249">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2249">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2250">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2250">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2251">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2251">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2252">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2252">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2253">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2253">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2254">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2254">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2255">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2255">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2256">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2256">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2257">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2257">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2258">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2258">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2259">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2259">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2260">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2260">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2261">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2261">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2262">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2262">Data</span></span>|<span data-ttu-id="6d2a2-2263">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2263">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2264">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2264">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2265">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2265">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2266">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2266">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2267">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2267">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2268">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2268">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2269">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2269">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2270">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2270">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2271">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2271">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2272">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2272">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2273">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2273">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2274">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2274">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2275">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2275">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2276">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2276">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2277">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2277">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2278">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2278">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2279">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2279">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2280">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2280">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2281">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2281">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2282">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2282">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2283">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2283">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2284">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2284">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2285">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2285">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2286">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2286">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2287">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2287">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2288">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2288">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2289">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2289">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2290">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2290">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2291">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2291">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2292">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2292">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2293">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2293">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2294">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2294">Data</span></span>|<span data-ttu-id="6d2a2-2295">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2295">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2296">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2296">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2297">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2297">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2298">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2298">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2299">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2299">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2300">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2300">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2301">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2301">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2302">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2302">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2303">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2303">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2304">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2304">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2305">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2305">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2306">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2306">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2307">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2307">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2308">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2308">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2309">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2309">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2310">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2310">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2311">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2311">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2312">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2312">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2313">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2313">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2314">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2314">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2315">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2315">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2316">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2316">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2317">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2317">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2318">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2318">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2319">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2319">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2320">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2320">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2321">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2321">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2322">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2322">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2323">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2323">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2324">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2324">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2325">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2325">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2326">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2326">Data</span></span>|<span data-ttu-id="6d2a2-2327">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2327">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2328">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2328">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2329">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2329">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2330">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2330">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2331">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2331">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2332">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2332">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2333">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2333">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2334">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2334">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2335">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2335">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2336">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2336">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2337">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2337">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2338">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2338">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2339">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2339">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2340">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2340">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2341">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2341">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2342">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2342">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2343">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2343">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2344">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2344">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2345">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2345">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2346">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2346">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2347">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2347">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2348">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2348">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2349">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2349">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2350">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2350">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2351">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2351">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2352">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2352">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2353">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2353">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2354">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2354">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2355">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2355">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2356">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2356">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2357">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2357">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2358">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2358">Data</span></span>|<span data-ttu-id="6d2a2-2359">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2359">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2360">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2360">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2361">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2361">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2362">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2362">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2363">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2363">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2364">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2364">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2365">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2365">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2366">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2366">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2367">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2367">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2368">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2368">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2369">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2369">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2370">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2370">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2371">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2371">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2372">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2372">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2373">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2373">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2374">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2374">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2375">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2375">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2376">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2376">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2377">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2377">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="6d2a2-2378">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2378">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2379">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2379">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2380">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2380">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2381">`Input`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2381">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2382">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2382">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2383">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2383">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2384">讀取的資料`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2384">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="6d2a2-2385">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2385">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2386">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2386">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2387">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2387">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2388">讀取時，標準的字串或數值資料會指派給變數，而不需修改。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2388">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="6d2a2-2389">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2389">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="6d2a2-2390">資料</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2390">Data</span></span>|<span data-ttu-id="6d2a2-2391">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2391">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="6d2a2-2392">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2392">Delimiting comma or blank line</span></span>|<span data-ttu-id="6d2a2-2393">Empty</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2393">Empty</span></span>|  
|<span data-ttu-id="6d2a2-2394">#NULL #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2394">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="6d2a2-2395">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2395">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="6d2a2-2396">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2396">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="6d2a2-2397">日期和/或運算式所代表的時間</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2397">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="6d2a2-2398">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2398">#ERROR `errornumber`#</span></span>|<span data-ttu-id="6d2a2-2399">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2399">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="6d2a2-2400">如果在輸入資料的項目時，您會到達檔案結尾，停止輸入，而發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2400">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2401">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2401">The `Input` function is not localized.</span></span> <span data-ttu-id="6d2a2-2402">比方說，在德文版中，如果您輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2402">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2403">使用 從檔案讀取`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2403">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2404">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2404">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2405">這個範例會使用`Input`置於兩個變數，從檔案讀取資料的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2405">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="6d2a2-2406">這個範例假設`TestFile`是一個檔案，有數行的資料寫入至其中使用`Write`函式，每一行包含引號，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2406">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2407">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2408">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2408">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2409">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2409">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="6d2a2-2410">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2410">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2411">任何有效的數值運算式，指定要讀取的字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2411">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2412">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2412">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="6d2a2-2413">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2413">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2414">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2414">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2415">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2415">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="6d2a2-2416">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2417">`InputString`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2417">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2418">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2418">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2419">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2419">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2420">讀取的資料`InputString`函式通常利用寫入至檔案`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2420">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="6d2a2-2421">此函式只適用於在開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2421">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="6d2a2-2422">不同於`Input`函式，`InputString`函式會傳回讀取的字元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2422">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="6d2a2-2423">這包括逗號、 換行字元、 換行、 引號和前置空格。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2423">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="6d2a2-2424">使用開啟的檔案`Binary`存取，嘗試讀取檔案，使用`InputString`運作直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2424">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="6d2a2-2425">使用`LOF`並`Loc`函數，而`EOF`藉由讀取二進位檔案時`InputString`，或使用`FileGet`當您使用`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2425">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2426">從檔案讀取時，請勿依據副檔名的檔案內容的相關安全性決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2426">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2427">例如，名為 Form1.vb 檔案可能不是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2427">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2428">這個範例會使用`InputString`函式來從檔案一次讀取一個字元，並列印它`Output`視窗。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2428">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="6d2a2-2429">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2429">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2430">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2430">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-2431">
            <paramref name="CharCount" /> &lt; 0 或 &gt; 214。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2431">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-2432">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2432">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2433">
            <see langword="String" /> 運算式，指定要刪除的一個或多個檔案的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2433">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="6d2a2-2434">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2434">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2435">從磁碟中刪除檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2435">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="6d2a2-2436">相較於 <see langword="Kill" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2436">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2437">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2437">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2438">`Kill` 支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2438">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="6d2a2-2439">**安全性注意事項**才能執行，請`Kill`函式需要`Read`並`PathDiscovery`加上旗標的<xref:System.Security.Permissions.FileIOPermission>要授與執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2439">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="6d2a2-2440">如需詳細資訊，請參閱 < <xref:System.Security.SecurityException>[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2440">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2441">這個範例會使用`Kill`函式來從磁碟中刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2441">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2442">目標檔案已開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2442">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-2443">找不到目標檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2443">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6d2a2-2444">權限遭拒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2444">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2445">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2445">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2446">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2446">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2447">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2447">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2448">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2448">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2449">`LineInput`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2449">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2450">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2450">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2451">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2451">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2452">讀取的資料`LineInput`通常會先寫入至檔案使用`Print`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2452">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2453">從檔案讀取時，請勿根據檔案名稱副檔名的檔案內容的相關決策。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2453">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="6d2a2-2454">例如，名為 Form1.vb 檔案可能不會是 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2454">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="6d2a2-2455">`LineInput`函式會從檔案的一個字元讀取一次直到遇到歸位字元 (`Chr(13)`) 或歸位字元/換 (`Chr(13) + Chr(10)`) 順序。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2455">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="6d2a2-2456">歸位字元 return/line 摘要的序列會略過而不是附加的字元字串。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2456">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2457">使用 從檔案讀取`LineInput`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2457">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2458">這個範例會使用`LineInput`從循序檔案讀取一行，並將它指派給變數的函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2458">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="6d2a2-2459">這個範例假設`TestFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2459">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="6d2a2-2460">已到達檔案結尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2460">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2461">
            <paramref name="FileNumber" /> 不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2461">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2462">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2462">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2463">任何有效的 <see langword="Integer" /> 檔案編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2463">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2464">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2464">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2465">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2465">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2466">`Loc`為以零為起始的函式，使用它來擷取檔案中的第一個位元組，則會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2466">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="6d2a2-2467">`Loc`函式會提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2467">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2468">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2468">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2469">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2469">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2470">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2470">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="6d2a2-2471">模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2471">Mode</span></span>|<span data-ttu-id="6d2a2-2472">傳回值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2472">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6d2a2-2473">讀取或寫入檔案的最後一個記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2473">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="6d2a2-2474">除以 128 檔案中的目前位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2474">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="6d2a2-2475">不過，資訊會由`Loc`的循序檔案不會使用或所需。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2475">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="6d2a2-2476">讀取或寫入的最後一個位元組的位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2476">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2477">這個範例會使用`Loc`函式來傳回目前的讀取/寫入位置，在開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2477">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="6d2a2-2478">這個範例假設`MyFile`是具有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2478">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2479">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2479">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2480">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2480">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2481">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2481">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2482">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2482">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2483">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2483">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2484">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2484">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2485">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2485">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2486">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2486">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2487">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2487">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2488">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2488">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2489">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2489">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2490">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2490">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2491">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2491">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2492">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2492">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2493">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2493">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2494">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2494">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2495">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2495">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2496">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2496">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2497">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2497">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2498">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2498">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="6d2a2-2499">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2499">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2500">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2500">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2501">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2501">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2502">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2502">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2503">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2503">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2504">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2504">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2505">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2505">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2506">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2506">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2507">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2507">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2508">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2508">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2509">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2509">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2510">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2510">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2511">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2511">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2512">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2512">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2513">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2513">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2514">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2514">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="6d2a2-2515">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2515">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2516">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2516">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="6d2a2-2517">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2517">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2518">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2518">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2519">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2519">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2520">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2520">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2521">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2521">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2522">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2522">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2523">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2523">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2524">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2524">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2525">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2525">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2526">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2526">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2527">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2527">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2528">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2528">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2529">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2529">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2530">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2530">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2531">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2531">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2532">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2532">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2533">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2533">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2534">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2534">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2535">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2535">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2536">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2536">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2537">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2538">使用`FileLen`函式來取得未開啟檔案的長度。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2538">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2539">這個範例會使用`LOF`函式來判斷已開啟之檔案的大小。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2539">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="6d2a2-2540">這個範例假設`TestFile`是文字檔案，其中包含範例資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2540">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2541">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2541">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="6d2a2-2542">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2542">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2543">
            <see langword="String" /> 運算式，可識別要建立的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2543">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="6d2a2-2544">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2544">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="6d2a2-2545">如果未指定磁碟機，則 <see langword="MkDir" /> 會在目前磁碟機上建立新目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2545">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2546">建立新目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2546">Creates a new directory.</span>
          </span>
          <span data-ttu-id="6d2a2-2547">相較於 <see langword="MkDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2547">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2548">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2548">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2549">此函式會建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2549">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2550">這個範例會使用`MkDir`函式來建立目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2550">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="6d2a2-2551">如果未指定磁碟機，在目前的磁碟機上建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2551">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-2552">
            <paramref name="Path" /> 尚未指定或是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2552">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="6d2a2-2553">權限遭拒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2553">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2554">目錄已經存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2554">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2555">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2555">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2556">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2556">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="6d2a2-2557">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2557">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2558">要寫入檔案的零或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2558">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="6d2a2-2559">
            <c>Output</c> 引數設定為：</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2559">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="6d2a2-2560">
            <see langword="T:System.IO.IOException" />︰檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2560">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="6d2a2-2561">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2561">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2562">將顯示格式資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2562">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2563">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2563">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2564">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2564">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2565">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2565">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2566">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2566">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="6d2a2-2567">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2567">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="6d2a2-2568">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2568">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="6d2a2-2569">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2569">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="6d2a2-2570">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2570">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="6d2a2-2571">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2571">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2572">日期資料寫入檔案中，使用您的系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2572">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="6d2a2-2573">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2573">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2574">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2574">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6d2a2-2575">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2575">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2576">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2576">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="6d2a2-2577">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2577">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2578">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2578">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="6d2a2-2579">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2579">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="6d2a2-2580">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2580">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2581">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2581">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2582">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2582">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2583">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2583">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2584">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2584">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="6d2a2-2585">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2585">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2586">要寫入檔案的零或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2586">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="6d2a2-2587">
            <c>Output</c> 引數設定為：</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2587">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="6d2a2-2588">
            <see langword="T:System.IO.IOException" />︰檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2588">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="6d2a2-2589">
            <see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2589">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2590">將顯示格式資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2590">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2591">`Print`和`PrintLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2591">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2592">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2592">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2593">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2593">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2594">`Print` 不包含換行字元結尾的行不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2594">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="6d2a2-2595">資料寫入`Print`通常從檔案讀取利用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2595">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="6d2a2-2596">如果您省略`Output`for `PrintLine`，列印一行空白行檔案; 如`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2596">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="6d2a2-2597">多個以逗號分隔的運算式將會對齊索引標籤的界限，但混用逗號和`TAB`可能會導致不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2597">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="6d2a2-2598">針對`Boolean`資料，可以是`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2598">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="6d2a2-2599">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2599">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2600">日期資料寫入檔案中，使用系統可辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2600">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="6d2a2-2601">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2601">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2602">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2602">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6d2a2-2603">不過，如果`Output`清單中的資料`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2603">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2604">針對`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2604">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="6d2a2-2605">`Error`不論地區設定不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2605">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2606">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2606">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="6d2a2-2607">如果使用者想要輸出多個地區設定中，供資料`Write`應該使用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2607">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="6d2a2-2608">寫入檔案，使用`Print`或是`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2608">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2609">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2609">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2610">這個範例會使用`Print`和`PrintLine`函式，將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2610">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="6d2a2-2611">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2611">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2612">
            <see langword="String" /> 運算式，指定現有的檔案名稱和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2612">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="6d2a2-2613">
            <c>OldPath</c> 可包含檔案的目錄及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2613">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="6d2a2-2614">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2614">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2615">
            <see langword="String" /> 運算式，指定新檔案的名稱和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2615">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="6d2a2-2616">
            <c>NewPath</c> 可包含目的位置的目錄及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2616">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="6d2a2-2617">
            <c>NewPath</c> 指定的檔案名稱不能已經存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2617">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2618">重新命名磁碟的檔案或目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2618">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="6d2a2-2619">相較於 <see langword="Rename" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2620">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2621">`Rename`函式重新命名檔案，並將它移到另一個目錄，如有必要。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2621">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="6d2a2-2622">`Rename`函式可以將檔案移到磁碟機，但它只能重新命名現有的目錄時兩者`NewPath`和`OldPath`都位於相同的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2622">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="6d2a2-2623">`Rename` 無法建立新的檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2623">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="6d2a2-2624">使用`Rename`函式開啟的檔案會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2624">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="6d2a2-2625">您必須先關閉開啟的檔案，才能重新命名。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2625">You must close an open file before renaming it.</span></span> <span data-ttu-id="6d2a2-2626">`Rename` 引數不能包含多個字元 （\*） 和單一字元 （？） 的萬用字元。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2626">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6d2a2-2627">當使用`Rename`將來自未受保護位置的檔案複製到受保護的位置中，該檔案會保留的限制較少的權限。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2627">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="6d2a2-2628">請檢查以確定未造成可能的安全性風險。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2628">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2629">這個範例會使用`Rename`函式來重新命名檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2629">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="6d2a2-2630">基於此範例的詳細資訊，請假設已指定的目錄已經存在。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2630">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-2631">路徑無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2631">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-2632">
            <paramref name="OldPath" /> 檔案不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2632">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2633">無法重新命名為不同的裝置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2633">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2634">關閉所有使用 <see langword="FileOpen" /> 函式開啟的磁碟檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2634">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2635">相較於 <see langword="Reset" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2635">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2636">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2636">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2637">`Reset`函式會關閉開啟的所有作用中檔案`FileOpen`函式，並具有相同的功能`FileClose()`不含任何參數。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2637">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2638">這個範例會使用`Reset`函式來關閉所有開啟的檔案並寫入磁碟中的所有檔案緩衝區的內容。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2638">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="6d2a2-2639">請注意，使用`Object`變數`FileNumber`做為字串和數字。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2639">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="6d2a2-2640">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2640">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2641">
            <see langword="String" /> 運算式，可識別要移除的目錄或資料夾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2641">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="6d2a2-2642">
            <c>Path</c> 可包含磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2642">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="6d2a2-2643">如果未指定磁碟機，則 <see langword="RmDir" /> 會移除目前磁碟機上的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2643">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2644">移除現有的目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2644">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="6d2a2-2645">相較於 <see langword="RmDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2645">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2646">如需詳細資訊，請參閱<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2646">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2647">如果您嘗試使用，就會發生錯誤`RmDir`包含檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2647">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="6d2a2-2648">使用`Kill`函式來刪除所有檔案，然後再移除目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2648">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2649">這個範例會使用`RmDir`函式以移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2649">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-2650">
            <paramref name="Path" /> 尚未指定或是空的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2650">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2651">目標目錄包含檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2651">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6d2a2-2652">目錄不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2652">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2653">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2653">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2654">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2655">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2656">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2656">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2657">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2657">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2658">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2658">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2659">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2660">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2661">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2661">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2662">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2662">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="6d2a2-2663">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2663">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="6d2a2-2664">模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2664">Mode</span></span>|<span data-ttu-id="6d2a2-2665">傳回值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2665">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6d2a2-2666">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2666">Number of the next record read or written</span></span>|  
|<span data-ttu-id="6d2a2-2667">`Binary`、`Input`、`Output``Append`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2667">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="6d2a2-2668">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2668">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2669">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2669">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2670">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2670">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="6d2a2-2671">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2671">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="6d2a2-2672">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2672">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="6d2a2-2673">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2673">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2674">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2674">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="6d2a2-2675">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2675">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="6d2a2-2676">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2676">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2677">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2677">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2678">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2678">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2679">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2679">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2680">包含有效檔案編號的 <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2680">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="6d2a2-2681">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2681">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2682">在 1–2,147,483,647 範圍之間的數字 (包括頭尾)，表示應該發生下一個讀取 / 寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2682">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2683">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2683">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2684">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2684">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2685">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2685">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2686">`Seek` 傳回介於 1 到 2,147,483,647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2686">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="6d2a2-2687">以下說明每個檔案存取模式的傳回值：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2687">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="6d2a2-2688">模式</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2688">Mode</span></span>|<span data-ttu-id="6d2a2-2689">傳回值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2689">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="6d2a2-2690">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2690">Number of the next record read or written</span></span>|  
|<span data-ttu-id="6d2a2-2691">`Binary`、`Input`、`Output``Append`</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2691">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="6d2a2-2692">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2692">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2693">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2693">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2694">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2694">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="6d2a2-2695">此範例假設`TestFile`是包含的結構記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2695">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="6d2a2-2696">在開啟的檔案`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2696">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="6d2a2-2697">以外的其他模式中開啟之檔案`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2697">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2698">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2698">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="6d2a2-2699">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2699">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="6d2a2-2700">以外的其他模式中開啟之檔案`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2700">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="6d2a2-2701">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2701">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2702">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2702">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="6d2a2-2703">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2703">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2704">指定檔名的 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2704">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="6d2a2-2705">
            <c>PathName</c> 可包含目錄或資料夾及磁碟機。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2705">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="6d2a2-2706">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2706">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2707">常數或數值運算式，其總和可以表示檔案屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2707">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2708">設定檔案的屬性 (Attribute) 資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2708">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="6d2a2-2709">相較於 <see langword="SetAttr" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2709">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2710">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2710">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2711">如果您嘗試設定已開啟之檔案的屬性，就會發生執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2711">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="6d2a2-2712">`Attributes`引數的列舉值如下所示：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2712">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="6d2a2-2713">值</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2713">Value</span></span>|<span data-ttu-id="6d2a2-2714">常數</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2714">Constant</span></span>|<span data-ttu-id="6d2a2-2715">描述</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2715">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="6d2a2-2716">標準模式 （預設值）。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2716">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="6d2a2-2717">唯讀。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2717">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="6d2a2-2718">隱藏。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2718">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="6d2a2-2719">系統檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2719">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="6d2a2-2720">磁碟區標籤</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2720">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="6d2a2-2721">目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2721">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="6d2a2-2722">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2722">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="6d2a2-2723">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2723">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2724">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2724">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="6d2a2-2725">名稱可在您的程式碼，而不是實際的值中的任何地方使用。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2725">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2726">這個範例會使用`SetAttr`函式來設定檔案的屬性。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2726">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6d2a2-2727">
            <paramref name="Attribute" /> 類型無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2727">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="6d2a2-2728">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2728">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2729">在顯示或列印清單中的下一個運算式之前所要插入的空格數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2729">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2730">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2730">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2731">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2731">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2732">如果`Count`少於輸出行寬度下, 一個列印位置立即遵循的列印的空格數目。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2732">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="6d2a2-2733">如果`Count`大於輸出行寬度，`SPC`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2733">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6d2a2-2734">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2734">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="6d2a2-2735">比方說，如果目前的列印位置為 24，輸出行寬度是 80，且您指定`SPC(90)`下, 一個列印時會啟動位置為 34 （目前的列印位置 + 90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2735">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="6d2a2-2736">如果目前的列印位置與輸出行寬度之間的差異是小於`Count`(或`Count` `Mod` *寬度*)，則`SPC`函式就會跳到下一行的開頭，並產生空間等於`Count`– (*寬度*– *currentprintposition*)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2736">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2737">請確定您的表格式資料行的寬度不足以容納寬字母。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2737">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2738">這個範例會使用`SPC`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2738">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2739">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2739">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2740">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2740">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2741">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2741">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2742">如果目前的行上目前的列印位置大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2742">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="6d2a2-2743">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2743">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="6d2a2-2744">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2744">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6d2a2-2745">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2745">Column Mod width</span></span>  
  
 <span data-ttu-id="6d2a2-2746">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2746">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="6d2a2-2747">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2747">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="6d2a2-2748">如果導出的列印位置大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2748">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="6d2a2-2749">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2749">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="6d2a2-2750">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2750">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="6d2a2-2751">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2751">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="6d2a2-2752">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2752">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2753">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2753">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2754">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2754">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="6d2a2-2755">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2755">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2756">在顯示或列印清單中的下一個運算式之前所要移至的欄位編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2756">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="6d2a2-2757">如果省略，則 <see langword="TAB" /> 會將插入點移到下一個列印區 (Print Zone) 的開頭。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2757">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2758">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6d2a2-2759">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2759">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2760">目前的行上目前的列印位置是否大於`Column`，`TAB`就會跳到資料行值等於`Column`在下一步 的輸出行。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2760">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="6d2a2-2761">如果`Column`小於 1，`TAB`的列印位置移至 資料行 1。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2761">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="6d2a2-2762">如果`Column`大於輸出行寬度，`TAB`計算中使用的公式的下一步 列印位置：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2762">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="6d2a2-2763">資料行的 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2763">Column Mod width</span></span>  
  
 <span data-ttu-id="6d2a2-2764">例如，如果*寬度*是 80，且您指定`TAB(90)`下, 一個列印會開始於行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2764">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="6d2a2-2765">如果`Column`小於目前的列印位置，在下一行中的導出的列印位置在列印開始。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2765">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="6d2a2-2766">導出的列印位置是否大於目前的列印位置，列印會在計算列印位置位於同一行上。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2766">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="6d2a2-2767">在輸出行上最左邊的列印位置一律為 1。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2767">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="6d2a2-2768">當您使用`Print`或是`PrintLine`函數來列印至檔案，最右邊的列印位置是輸出檔，您可以使用設定的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2768">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="6d2a2-2769">`TAB`函式也會搭配`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2769">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="6d2a2-2770">它不能搭配<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2770">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6d2a2-2771">請確定您的表格式資料行的寬度不足以包含廣泛的字母。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2771">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2772">這個範例會使用`TAB`函式用於定位輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2772">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6d2a2-2773">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2773">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2774">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2774">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2775">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2775">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2776">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2776">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2777">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2777">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2778">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2778">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2779">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2780">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2781">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2781">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2782">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2782">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2783">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2783">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2784">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2784">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2785">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2785">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2786">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2786">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2787">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2787">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2788">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2788">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2789">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2789">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2790">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2790">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2791">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2791">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="6d2a2-2792">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2792">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2793">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2793">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2794">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2794">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2795">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2795">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2796">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2796">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2797">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2797">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2798">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2798">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2799">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2799">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2800">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2800">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2801">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2801">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2802">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2802">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2803">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2803">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2804">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2804">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2805">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2805">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2806">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2806">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2807">任何有效的檔案數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2807">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="6d2a2-2808">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2808">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2809">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2809">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="6d2a2-2810">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2810">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2811">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2811">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2812">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2812">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="6d2a2-2813">
            <see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2813">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="6d2a2-2814">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2814">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2815">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2815">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="6d2a2-2816">`Lock` 和`Unlock`函式一律會在配對。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2816">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="6d2a2-2817">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2817">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="6d2a2-2818">如果`Record`，或`FromRecord`和`ToRecord`都未提供，鎖定將會針對整個檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2818">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="6d2a2-2819">如果`Record`單獨指定單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2819">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="6d2a2-2820">如果已為循序的輸入或輸出中，開啟檔案`Lock`並`Unlock`影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2820">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2821">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2821">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="6d2a2-2822">這個範例假設`People.txt`是包含的結構記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2822">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2823">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2824">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2824">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2825">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2825">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="6d2a2-2826">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2826">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2827">要寫入檔案的一或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2827">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2828">將資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2828">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="6d2a2-2829">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2829">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2830">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2830">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2831">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2831">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2832">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2832">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2833">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2833">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="6d2a2-2834">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2834">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="6d2a2-2835">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2835">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="6d2a2-2836">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2836">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="6d2a2-2837">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2837">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="6d2a2-2838">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2838">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="6d2a2-2839">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2839">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="6d2a2-2840">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2840">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="6d2a2-2841">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2841">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="6d2a2-2842">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2842">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="6d2a2-2843">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2843">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="6d2a2-2844">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2844">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6d2a2-2845">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2845">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-2846">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2846">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="6d2a2-2847">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2847">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2848">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2848">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2849">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2849">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="6d2a2-2850">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2850">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="6d2a2-2851">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2851">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="6d2a2-2852">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2852">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2853">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2853">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2854">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2854">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="6d2a2-2855">檔案模式無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2855">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="6d2a2-2856">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2856">Required.</span>
          </span>
          <span data-ttu-id="6d2a2-2857">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2857">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="6d2a2-2858">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2858">Optional.</span>
          </span>
          <span data-ttu-id="6d2a2-2859">要寫入檔案的一或多個逗點分隔運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2859">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6d2a2-2860">將資料寫入循序檔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2860">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="6d2a2-2861">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6d2a2-2861">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6d2a2-2862">`Write`和`WriteLine`函式針對回溯相容性提供，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2862">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="6d2a2-2863">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2863">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="6d2a2-2864">如需詳細資訊，請參閱 <<c0> [ 使用 Visual Basic 存取檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2864">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="6d2a2-2865">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2865">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="6d2a2-2866">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2866">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="6d2a2-2867">不同於`Print`函式，`Write`函式會插入項目和字串的引號之間插入逗號會寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2867">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="6d2a2-2868">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2868">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="6d2a2-2869">當`Write`用來將資料寫入至檔案，只是數字`Boolean`，日期、 null、 和`Error`支援的資料格式。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2869">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="6d2a2-2870">因此資料一律可以讀取並正確地解譯使用遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2870">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="6d2a2-2871">寫入的數值資料使用句點作為小數分隔符號。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2871">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="6d2a2-2872">針對`Boolean`資料，可以是`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2872">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="6d2a2-2873">`True`和`False`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2873">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="6d2a2-2874">日期資料會寫入至使用通用的日期格式的檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2874">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="6d2a2-2875">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2875">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="6d2a2-2876">如果，則不寫入至檔案`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2876">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="6d2a2-2877">不過，對於 null 資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2877">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="6d2a2-2878">針對`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2878">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="6d2a2-2879">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2879">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="6d2a2-2880">`WriteLine` 插入新行字元 (也就是歸位字元/換，或是`Chr(13) + Chr(10)`)，撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2880">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="6d2a2-2881">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2881">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="6d2a2-2882">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2882">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="6d2a2-2883">傳回字串，其值為`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2883">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="6d2a2-2884">寫入檔案，使用`Write`或是`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2884">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="6d2a2-2885">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2885">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6d2a2-2886">這個範例會使用`Write`函式，將原始資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="6d2a2-2886">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>