<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="474c0-101"><see langword="FileSystem" /> 模組包含用於執行檔案、目錄或資料夾及系統等作業的程序。</span><span class="sxs-lookup"><span data-stu-id="474c0-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="474c0-102"><see langword="My" /> 功能提供比使用 <see langword="FileSystem" /> 模組更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="474c0-103">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-104">這個模組支援的 Visual Basic 語言關鍵字和存取檔案和資料夾的執行階段程式庫成員。</span><span class="sxs-lookup"><span data-stu-id="474c0-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-105">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="474c0-106">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-106">Required.</span></span> <span data-ttu-id="474c0-107"><see langword="String" /> 運算式，用來識別要成為新預設目錄或資料夾的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="474c0-108"><c>Path</c> 可包含磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-108"><c>Path</c> may include the drive.</span></span> <span data-ttu-id="474c0-109">如果未指定磁碟機，則 <see langword="ChDir" /> 會變更目前磁碟機上的預設目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="474c0-110">變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-110">Changes the current directory or folder.</span></span> <span data-ttu-id="474c0-111"><see langword="My" /> 功能提供了比 <see langword="ChDir" /> 函式更強大的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="474c0-112">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-113">`ChDir`函式會變更預設目錄，但未預設磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="474c0-114">例如，如果預設磁碟機 C，下列陳述式會變更磁碟機 D 上的預設目錄，但 C 則保持預設磁碟機：</span><span class="sxs-lookup"><span data-stu-id="474c0-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="474c0-115">您可以進行相對目錄變更為輸入兩個句號，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-116">`ChDir`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="474c0-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="474c0-117">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和。</span><span class="sxs-lookup"><span data-stu-id="474c0-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-118">這個範例會使用`ChDir`函式來變更目前的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-119"><paramref name="Path" /> 是空的。</span><span class="sxs-lookup"><span data-stu-id="474c0-119"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-120">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="474c0-120">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-121">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-121">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="474c0-122">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-122">Required.</span></span> <span data-ttu-id="474c0-123">指定現有磁碟機的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-123">String expression that specifies an existing drive.</span></span> <span data-ttu-id="474c0-124">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-124">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="474c0-125">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span><span class="sxs-lookup"><span data-stu-id="474c0-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="474c0-126">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-126">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-127">`ChDrive`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="474c0-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="474c0-128">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="474c0-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-129">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="474c0-130">如果磁碟機不存在，則函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-131">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="474c0-131">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="474c0-132">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-132">Required.</span></span> <span data-ttu-id="474c0-133">指定現有磁碟機的字串運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-133">String expression that specifies an existing drive.</span></span> <span data-ttu-id="474c0-134">如果您提供長度為零的字串 ("")，則目前的磁碟機將不會變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-134">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="474c0-135">如果 <c>Drive</c> 引數是多個字元的字串，則 <see langword="ChDrive" /> 僅會使用第一個字母。</span><span class="sxs-lookup"><span data-stu-id="474c0-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="474c0-136">變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-136">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-137">`ChDrive`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="474c0-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="474c0-138">如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="474c0-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-139">這個範例會使用`ChDrive`函式來變更目前的磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="474c0-140">如果磁碟機不存在，則函式會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-141">指定的磁碟無效，或磁碟無法使用。</span><span class="sxs-lookup"><span data-stu-id="474c0-141">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-142">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-142">Returns a string representing the current path.</span></span> <span data-ttu-id="474c0-143"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="474c0-144">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474c0-145">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-145">Returns a string representing the current path.</span></span> <span data-ttu-id="474c0-146"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="474c0-147">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-148">表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-148">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="474c0-149">這個範例會使用`CurDir`函數來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="474c0-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="474c0-150">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-150">Optional.</span></span> <span data-ttu-id="474c0-151">指定現有磁碟機的 <see langword="Char" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-151"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="474c0-152">如果未指定磁碟機，或 <c>Drive</c> 是長度為零的字串 ("")，則 <see langword="CurDir" /> 會傳回目前磁碟機的路徑。</span><span class="sxs-lookup"><span data-stu-id="474c0-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="474c0-153">傳回表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-153">Returns a string representing the current path.</span></span> <span data-ttu-id="474c0-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="CurDir" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="474c0-155">如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-156">表示目前路徑的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="474c0-157">這個範例會使用`CurDir`函數來傳回目前的路徑。</span><span class="sxs-lookup"><span data-stu-id="474c0-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-158">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="474c0-159"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="474c0-160">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474c0-161">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="474c0-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="474c0-163">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="474c0-164">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span><span class="sxs-lookup"><span data-stu-id="474c0-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-165">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="474c0-166">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="474c0-167">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="474c0-168">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含參數的函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-169">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>和<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>旗標<xref:System.Security.Permissions.FileIOPermission>要執行的程式碼授與。</span><span class="sxs-lookup"><span data-stu-id="474c0-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="474c0-170">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="474c0-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="474c0-171">`Attributes`引數的列舉值如下：</span><span class="sxs-lookup"><span data-stu-id="474c0-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="474c0-172">值</span><span class="sxs-lookup"><span data-stu-id="474c0-172">Value</span></span>|<span data-ttu-id="474c0-173">常數</span><span class="sxs-lookup"><span data-stu-id="474c0-173">Constant</span></span>|<span data-ttu-id="474c0-174">描述</span><span class="sxs-lookup"><span data-stu-id="474c0-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="474c0-175">預設值：</span><span class="sxs-lookup"><span data-stu-id="474c0-175">Default.</span></span> <span data-ttu-id="474c0-176">指定不含屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="474c0-177">唯讀檔案，檔案也指定沒有屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="474c0-178">隱藏的檔案，檔案也指定沒有屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="474c0-179">系統檔案，檔案也指定沒有屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="474c0-180">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="474c0-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="474c0-181">指定目錄或資料夾，以及不含屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="474c0-182">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="474c0-183">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="474c0-184">這些列舉所指定的 Visual Basic 語言，並可用於您的程式碼，而非實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-185">這個範例會使用`Dir`函式來檢查特定檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-186">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-186">Optional.</span></span> <span data-ttu-id="474c0-187"><see langword="String" /> 運算式，可指定檔名、目錄或資料夾名稱或磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-187"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="474c0-188">如果找不到 <c>PathName</c>，則會傳回長度為零的字串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="474c0-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="474c0-189">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-189">Optional.</span></span> <span data-ttu-id="474c0-190">列舉類型或數值運算式，其值可指定檔案屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-190">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="474c0-191">如果省略，則 <see langword="Dir" /> 會傳回符合 <c>PathName</c> 的檔案，但是沒有屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="474c0-192">傳回的字串表示符合指定模式或檔案屬性的檔案、目錄或資料夾的名稱，也可以是磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="474c0-193"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="Dir" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="474c0-194">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="474c0-195">表示檔案、目錄或資料夾名稱的字串，該字串符合指定的模式或檔案屬性 (Attribute)，也可以是磁碟機的磁碟區標籤 (Label)。</span><span class="sxs-lookup"><span data-stu-id="474c0-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-196">`Dir`函式支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="474c0-197">`VbVolume` 傳回而不是特定的檔案名稱的磁碟機的磁碟區標籤。</span><span class="sxs-lookup"><span data-stu-id="474c0-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="474c0-198">您必須提供`PathName`第一次，讓您呼叫`Dir`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="474c0-199">若要擷取下一個項目，您可以進行後續呼叫`Dir`不含任何參數的函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-200">若要正常運作，`Dir`函式需要<xref:System.Security.Permissions.FileIOPermissionAccess.Read>和<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>旗標<xref:System.Security.Permissions.FileIOPermission>要執行的程式碼授與。</span><span class="sxs-lookup"><span data-stu-id="474c0-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="474c0-201">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermission>， <xref:System.Security.SecurityException>，和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="474c0-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="474c0-202">`Attributes`引數的列舉值如下：</span><span class="sxs-lookup"><span data-stu-id="474c0-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="474c0-203">值</span><span class="sxs-lookup"><span data-stu-id="474c0-203">Value</span></span>|<span data-ttu-id="474c0-204">常數</span><span class="sxs-lookup"><span data-stu-id="474c0-204">Constant</span></span>|<span data-ttu-id="474c0-205">描述</span><span class="sxs-lookup"><span data-stu-id="474c0-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="474c0-206">預設值：</span><span class="sxs-lookup"><span data-stu-id="474c0-206">Default.</span></span> <span data-ttu-id="474c0-207">指定不含任何屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="474c0-208">指定唯讀檔案，除了沒有任何屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="474c0-209">指定隱藏的檔案，除了沒有任何屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="474c0-210">指定系統檔案，除了沒有任何屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="474c0-211">指定磁碟區標籤。如果未指定任何其他屬性，則`vbVolume`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="474c0-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="474c0-212">指定目錄或資料夾，以及不含任何屬性的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="474c0-213">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="474c0-214">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="474c0-215">這些列舉所指定的 Visual Basic 語言，並可用於您的程式碼，用來取代實際值的任何位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-216">這個範例會使用`Dir`函式來檢查特定檔案和目錄是否存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-217">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-217">Required.</span></span> <span data-ttu-id="474c0-218">包含任何有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-218">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-219">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="474c0-220">當已經到達為 <see langword="True" /> 或循序 <see langword="Random" /> 開啟的檔案之結尾時，傳回布林值 (Boolean) <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-221">使用`EOF`以避免嘗試取得輸入超過檔案結尾所產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="474c0-222">`EOF`函式會傳回`False`直到已到達檔案結尾。</span><span class="sxs-lookup"><span data-stu-id="474c0-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="474c0-223">開啟的檔案與`Random`或`Binary`存取`EOF`傳回`False`直到最後一個執行`FileGet`函式不能讀取整個記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="474c0-224">開啟的檔案與`Binary`存取，嘗試讀取檔案使用透過`Input`函式，直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="474c0-225">使用`LOF`和`Loc`函式，而不是`EOF`讀取二進位檔案時`Input`，或使用`Get`時使用`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="474c0-226">開啟的檔案與`Output`，`EOF`一律會傳回`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-227">這個範例會使用`EOF`函式來偵測檔案的結尾。</span><span class="sxs-lookup"><span data-stu-id="474c0-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="474c0-228">這個範例假設`Testfile`是文字檔案，其中包含幾行文字。</span><span class="sxs-lookup"><span data-stu-id="474c0-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-229">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-229">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-230">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-230">Required.</span></span> <span data-ttu-id="474c0-231"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-231"><see langword="Integer" />.</span></span> <span data-ttu-id="474c0-232">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-232">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-233">傳回列舉類型，表示使用 <see langword="FileOpen" /> 函式開啟的檔案之檔案模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-234"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileAttr" /> 函式更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="474c0-235">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="474c0-236">下列列舉類型值表示檔案存取模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-236">The following enumeration values indicate the file access mode:</span></span>  
  
 <span data-ttu-id="474c0-237"><list type="table"><item><term> 值</span><span class="sxs-lookup"><span data-stu-id="474c0-237"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="474c0-238"></term><description> 模式</span><span class="sxs-lookup"><span data-stu-id="474c0-238"></term><description> Mode</span></span>  
  
 <span data-ttu-id="474c0-239"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="474c0-239"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="474c0-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span><span class="sxs-lookup"><span data-stu-id="474c0-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span></span>  
  
 <span data-ttu-id="474c0-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span><span class="sxs-lookup"><span data-stu-id="474c0-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span></span>  
  
 <span data-ttu-id="474c0-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span><span class="sxs-lookup"><span data-stu-id="474c0-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span></span>  
  
 <span data-ttu-id="474c0-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span><span class="sxs-lookup"><span data-stu-id="474c0-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span></span>  
  
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-244">此函數會傳回代表使用開啟的檔案模式列舉`FileOpen`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-244">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-245">這個範例會使用`FileAttr`函數來傳回已開啟的檔案的檔案模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-245">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="474c0-246">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-246">Optional.</span></span> <span data-ttu-id="474c0-247">參數陣列，具有 0 個或更多要關閉的通道。</span><span class="sxs-lookup"><span data-stu-id="474c0-247">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="474c0-248">將輸入/輸出 (I/O) 結果導向使用 <see langword="FileOpen" /> 函式開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-248">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-249"><see langword="My" /> 提供更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-249"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="474c0-250">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-250">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-251">`FileClose`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-251">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-252">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-253">如需詳細資訊，請參閱[How to： 以 StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)，[How to： 將文字寫入檔案以 StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)，和[逐步解說： 中管理檔案和目錄Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-253">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="474c0-254">如果您省略`FileNumbers`，所有使用中的檔案開啟`FileOpen`函式會關閉。</span><span class="sxs-lookup"><span data-stu-id="474c0-254">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="474c0-255">當您關閉已開啟的檔案`Output`或`Append`，該檔案的作業系統緩衝區寫入輸出的最後的緩衝區。</span><span class="sxs-lookup"><span data-stu-id="474c0-255">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="474c0-256">所有的緩衝區空間的封閉型相關聯檔案發行。</span><span class="sxs-lookup"><span data-stu-id="474c0-256">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="474c0-257">當`FileClose`函式執行，其檔案的檔案關聯數字結尾。</span><span class="sxs-lookup"><span data-stu-id="474c0-257">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-258">這個範例會使用`FileClose`函式，以關閉 檔案開啟為`Input`。</span><span class="sxs-lookup"><span data-stu-id="474c0-258">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="474c0-259"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-259"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="474c0-260">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-260">Required.</span></span> <span data-ttu-id="474c0-261"><see langword="String" /> 運算式，指定要複製的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-261"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="474c0-262"><c>Source</c> 可包含原始程式檔的目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-262"><c>Source</c> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="474c0-263">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-263">Required.</span></span> <span data-ttu-id="474c0-264"><see langword="String" /> 運算式，指定目標檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-264"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="474c0-265"><c>Destination</c> 可包含目的檔案的目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-265"><c>Destination</c> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="474c0-266">複製檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-266">Copies a file.</span></span> <span data-ttu-id="474c0-267"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 提供比 <see langword="FileCopy" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-267">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="474c0-268">如需詳細資訊，請參閱 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-268">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-269">如果您嘗試使用`FileCopy`函式在目前開啟的檔案，就會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-269">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="474c0-270">`FileCopy` 需要完全信任，才能在本機磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-270">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-271">這個範例會使用`FileCopy`函式複製到另一個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-271">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="474c0-272">此範例的目的，假設`SrcFile`是包含資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-272">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-273"><paramref name="Source" /> 或 <paramref name="Destination" /> 為無效值或尚未指定。</span><span class="sxs-lookup"><span data-stu-id="474c0-273"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-274">檔案已經開啟。</span><span class="sxs-lookup"><span data-stu-id="474c0-274">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-275">檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-275">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-276">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-276">Required.</span></span> <span data-ttu-id="474c0-277">指定檔名的 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-277"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="474c0-278"><c>PathName</c> 可包含目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-278"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="474c0-279">傳回 <see langword="Date" /> 值，表示寫入檔案的日期和時間。</span><span class="sxs-lookup"><span data-stu-id="474c0-279">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="474c0-280">相較於 <see langword="FileDateTime" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-280">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="474c0-281">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-281">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns>
          <span data-ttu-id="474c0-282"><see langword="Date" /> 值，表示建立檔案或上次修改檔案的日期和時間。</span><span class="sxs-lookup"><span data-stu-id="474c0-282"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="474c0-283">這個範例會使用`FileDateTime`建立或上次修改函數來判斷日期和時間的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-283">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="474c0-284">日期和時間顯示的格式為基礎的系統地區設定。</span><span class="sxs-lookup"><span data-stu-id="474c0-284">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-285"><paramref name="PathName" /> 無效或包含萬用字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-285"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-286">目標檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-286">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-287">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-287">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-288">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-288">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-289">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-289">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-290">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-290">Required.</span></span> <span data-ttu-id="474c0-291">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-291">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-292">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-292">Required.</span></span> <span data-ttu-id="474c0-293">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-293">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-294">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-294">Optional.</span></span> <span data-ttu-id="474c0-295">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-295">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-296">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-296">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-297">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-297">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-298">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-298">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-299">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-299">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-300">資料讀取`FileGet`通常會寫入至與檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-300">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-301">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-301">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-302">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-302">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-303">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-303">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-304">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-304">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-305">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-305">Random Mode</span></span>  
 <span data-ttu-id="474c0-306">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-307">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-307">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-308">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-309">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-310">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-310">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-311">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-311">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-312">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-312">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-313">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-313">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-314">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-314">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-315">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-315">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-316">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-316">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-317">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-317">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-318">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-318">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-319">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-319">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-320">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-320">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-321">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-322">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-322">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-323">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-323">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-324">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-324">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-325">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-325">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-326">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-326">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-327">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-327">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-328">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-328">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-329">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-329">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-330">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-331">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-331">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-332">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-332">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-333">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-333">Binary Mode</span></span>  
 <span data-ttu-id="474c0-334">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-335">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-336">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-337">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-337">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-338">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-338">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-339">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-339">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-340">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-340">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-341">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-341">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-342">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-342">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-343"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-343"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-344">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-344">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-345">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-345">Required.</span></span> <span data-ttu-id="474c0-346">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-346">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-347">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-347">Required.</span></span> <span data-ttu-id="474c0-348">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-348">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-349">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-349">Optional.</span></span> <span data-ttu-id="474c0-350">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-350">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-351">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-351">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-352">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-352">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-353">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-353">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-354">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-354">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-355">資料讀取`FileGet`通常會寫入至與檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-355">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-356">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-356">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-357">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-357">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-358">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-358">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-359">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-359">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-360">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-360">Random Mode</span></span>  
 <span data-ttu-id="474c0-361">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-361">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-362">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-362">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-363">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-363">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-364">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-364">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-365">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-365">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-366">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-366">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-367">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-367">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-368">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-368">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-369">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-369">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-370">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-370">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-371">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-371">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-372">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-372">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-373">如果不使用描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-373">If the descriptor is not used.</span></span> <span data-ttu-id="474c0-374">然後的大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-374">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-375">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-375">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-376">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-376">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-377">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-378">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-378">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-379">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-379">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-380">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-380">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-381">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-381">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-382">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-382">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-383">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-383">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-384">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-384">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-385">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-385">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-386">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-387">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-387">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-388">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-388">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-389">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-389">Binary Mode</span></span>  
 <span data-ttu-id="474c0-390">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-390">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-391">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-391">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-392">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-392">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-393">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-393">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-394">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-394">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-395">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-395">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-396">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-396">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-397">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-397">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-398">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-398">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-399"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-399"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-400">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-400">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-401">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-401">Required.</span></span> <span data-ttu-id="474c0-402">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-402">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-403">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-403">Required.</span></span> <span data-ttu-id="474c0-404">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-404">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-405">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-405">Optional.</span></span> <span data-ttu-id="474c0-406">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-406">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-407">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-407">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-408">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-408">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-409">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-409">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-410">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-410">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-411">資料讀取`FileGet`通常會寫入至與檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-411">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-412">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-412">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-413">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-413">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-414">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-414">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-415">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-415">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-416">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-416">Random Mode</span></span>  
 <span data-ttu-id="474c0-417">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-417">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-418">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-418">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-419">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-419">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-420">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-420">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-421">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-421">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-422">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-422">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-423">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-423">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-424">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-424">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-425">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-425">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-426">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-426">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-427">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-427">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-428">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-428">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-429">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-429">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-430">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-430">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-431">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-431">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-432">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-432">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-433">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-433">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-434">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-434">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-435">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-435">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-436">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-436">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-437">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-437">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-438">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-438">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-439">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-439">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-440">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-440">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-441">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-441">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-442">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-442">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-443">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-443">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-444">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-444">Binary Mode</span></span>  
 <span data-ttu-id="474c0-445">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-445">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-446">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-446">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-447">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-447">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-448">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-448">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-449">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-449">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-450">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-450">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-451">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-451">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-452">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-452">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-453">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-453">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-454"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-454"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-455">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-455">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-456">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-456">Required.</span></span> <span data-ttu-id="474c0-457">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-457">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-458">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-458">Required.</span></span> <span data-ttu-id="474c0-459">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-459">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-460">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-460">Optional.</span></span> <span data-ttu-id="474c0-461">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-461">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-462">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-462">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-463">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-463">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-464">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-464">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-465">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-465">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-466">資料讀取`FileGet`通常會寫入至與檔案`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-466">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-467">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-467">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-468">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-468">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-469">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-469">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-470">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-470">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-471">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-471">Random Mode</span></span>  
 <span data-ttu-id="474c0-472">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-472">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-473">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-473">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-474">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-474">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-475">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-475">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-476">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-476">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-477">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-477">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-478">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-478">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-479">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-479">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-480">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-480">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-481">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-481">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-482">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-482">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-483">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-483">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-484">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-484">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-485">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-485">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-486">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-486">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-487">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-487">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-488">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-488">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-489">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-489">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-490">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-490">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-491">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-491">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-492">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-492">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-493">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-493">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-494">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-494">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-495">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-495">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-496">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-496">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-497">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-497">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-498">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-498">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-499">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-499">Binary Mode</span></span>  
 <span data-ttu-id="474c0-500">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-500">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-501">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-501">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-502">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-502">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-503">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-503">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-504">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-504">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-505">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-505">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-506">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-506">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-507">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-507">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-508">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-508">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-509"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-509"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-510">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-510">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-511">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-511">Required.</span></span> <span data-ttu-id="474c0-512">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-512">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-513">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-513">Required.</span></span> <span data-ttu-id="474c0-514">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-514">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-515">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-515">Optional.</span></span> <span data-ttu-id="474c0-516">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-516">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-517">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-517">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-518">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-519">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-520">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-520">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-521">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-521">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-522">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-522">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-523">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-523">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-524">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-524">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-525">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-525">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-526">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-526">Random Mode</span></span>  
 <span data-ttu-id="474c0-527">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-527">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-528">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-528">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-529">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-529">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-530">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-530">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-531">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-531">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-532">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-532">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-533">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-533">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-534">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-534">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-535">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-535">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-536">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-536">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-537">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-537">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-538">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-538">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-539">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-539">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-540">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-540">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-541">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-541">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-542">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-542">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-543">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-543">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-544">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-544">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-545">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-545">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-546">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-546">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-547">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-547">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-548">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-548">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-549">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-549">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-550">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-550">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-551">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-551">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-552">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-552">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-553">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-553">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-554">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-554">Binary Mode</span></span>  
 <span data-ttu-id="474c0-555">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-555">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-556">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-556">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-557">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-557">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-558">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-558">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-559">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-559">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-560">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-560">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-561">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-561">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-562">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-562">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-563">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-563">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-564"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-564"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-565">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-565">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-566">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-566">Required.</span></span> <span data-ttu-id="474c0-567">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-567">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-568">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-568">Required.</span></span> <span data-ttu-id="474c0-569">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-569">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-570">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-570">Optional.</span></span> <span data-ttu-id="474c0-571">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-571">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-572">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-572">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-573">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-573">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-574">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-574">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-575">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-575">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-576">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-576">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-577">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-577">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-578">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-578">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-579">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-579">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-580">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-580">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-581">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-581">Random Mode</span></span>  
 <span data-ttu-id="474c0-582">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-582">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-583">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-583">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-584">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-584">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-585">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-585">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-586">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-586">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-587">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-587">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-588">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-588">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-589">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-589">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-590">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-590">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-591">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-591">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-592">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-592">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-593">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-593">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-594">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-594">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-595">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-595">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-596">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-596">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-597">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-597">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-598">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-598">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-599">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-599">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-600">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-600">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-601">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-601">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-602">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-602">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-603">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-603">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-604">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-604">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-605">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-605">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-606">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-606">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-607">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-607">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-608">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-608">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-609">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-609">Binary Mode</span></span>  
 <span data-ttu-id="474c0-610">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-610">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-611">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-611">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-612">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-612">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-613">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-613">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-614">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-614">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-615">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-615">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-616">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-616">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-617">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-617">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-618">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-618">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-619"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-619"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-620">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-620">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-621">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-621">Required.</span></span> <span data-ttu-id="474c0-622">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-622">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-623">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-623">Required.</span></span> <span data-ttu-id="474c0-624">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-624">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-625">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-625">Optional.</span></span> <span data-ttu-id="474c0-626">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-626">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-627">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-627">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-628">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-629">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-630">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-630">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-631">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-631">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-632">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-632">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-633">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-633">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-634">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-634">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-635">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-635">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-636">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-636">Random Mode</span></span>  
 <span data-ttu-id="474c0-637">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-637">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-638">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-638">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-639">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-639">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-640">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-640">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-641">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-641">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-642">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-642">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-643">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-643">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-644">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-644">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-645">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-645">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-646">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-646">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-647">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-647">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-648">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-648">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-649">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-649">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-650">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-650">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-651">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-651">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-652">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-652">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-653">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-653">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-654">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-654">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-655">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-655">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-656">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-656">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-657">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-657">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-658">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-658">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-659">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-659">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-660">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-660">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-661">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-661">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-662">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-662">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-663">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-663">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-664">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-664">Binary Mode</span></span>  
 <span data-ttu-id="474c0-665">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-665">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-666">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-666">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-667">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-667">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-668">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-668">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-669">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-669">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-670">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-670">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-671">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-671">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-672">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-672">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-673">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-673">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-674"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-674"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-675">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-675">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-676">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-676">Required.</span></span> <span data-ttu-id="474c0-677">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-677">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-678">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-678">Required.</span></span> <span data-ttu-id="474c0-679">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-679">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-680">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-680">Optional.</span></span> <span data-ttu-id="474c0-681">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-681">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-682">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-682">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-683">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-683">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-684">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-684">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-685">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-685">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-686">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-686">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-687">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-687">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-688">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-688">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-689">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-689">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-690">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-690">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-691">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-691">Random Mode</span></span>  
 <span data-ttu-id="474c0-692">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-692">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-693">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-693">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-694">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-694">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-695">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-695">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-696">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-696">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-697">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-697">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-698">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-698">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-699">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-699">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-700">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-700">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-701">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-701">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-702">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-702">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-703">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-703">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-704">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-704">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-705">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-705">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-706">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-706">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-707">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-707">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-708">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-708">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-709">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-709">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-710">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-710">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-711">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-711">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-712">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-712">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-713">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-713">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-714">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-714">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-715">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-715">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-716">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-716">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-717">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-717">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-718">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-718">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-719">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-719">Binary Mode</span></span>  
 <span data-ttu-id="474c0-720">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-720">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-721">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-721">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-722">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-722">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-723">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-723">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-724">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-724">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-725">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-725">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-726">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-726">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-727">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-727">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-728">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-728">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-729"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-729"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-730">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-730">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-731">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-731">Required.</span></span> <span data-ttu-id="474c0-732">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-732">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-733">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-733">Required.</span></span> <span data-ttu-id="474c0-734">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-734">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-735">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-735">Optional.</span></span> <span data-ttu-id="474c0-736">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-736">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-737">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-737">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-738">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-738">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-739">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-739">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-740">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-740">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-741">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-741">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-742">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-742">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-743">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-743">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-744">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-744">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-745">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-745">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-746">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-746">Random Mode</span></span>  
 <span data-ttu-id="474c0-747">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-747">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-748">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-748">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-749">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-749">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-750">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-750">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-751">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-751">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-752">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-752">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-753">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-753">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-754">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-754">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-755">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-755">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-756">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-756">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-757">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-757">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-758">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-758">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-759">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-759">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-760">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-760">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-761">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-761">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-762">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-762">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-763">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-763">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-764">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-764">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-765">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-765">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-766">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-766">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-767">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-767">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-768">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-768">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-769">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-769">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-770">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-770">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-771">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-771">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-772">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-772">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-773">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-773">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-774">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-774">Binary Mode</span></span>  
 <span data-ttu-id="474c0-775">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-775">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-776">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-776">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-777">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-777">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-778">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-778">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-779">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-779">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-780">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-780">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-781">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-781">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-782">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-782">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-783">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-783">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-784"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-784"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-785">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-785">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-786">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-786">Required.</span></span> <span data-ttu-id="474c0-787">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-787">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-788">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-788">Required.</span></span> <span data-ttu-id="474c0-789">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-789">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-790">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-790">Optional.</span></span> <span data-ttu-id="474c0-791">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-791">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-792">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-792">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-793">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-794">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-795">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-795">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-796">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-796">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-797">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-797">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-798">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-798">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-799">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-799">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-800">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-800">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-801">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-801">Random Mode</span></span>  
 <span data-ttu-id="474c0-802">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-802">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-803">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-803">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-804">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-804">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-805">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-805">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-806">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-806">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-807">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-807">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-808">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-808">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-809">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-809">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-810">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-810">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-811">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-811">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-812">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-812">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-813">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-813">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-814">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-814">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-815">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-815">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-816">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-816">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-817">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-817">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-818">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-818">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-819">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-819">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-820">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-820">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-821">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-821">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-822">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-822">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-823">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-823">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-824">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-824">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-825">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-825">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-826">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-826">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-827">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-827">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-828">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-828">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-829">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-829">Binary Mode</span></span>  
 <span data-ttu-id="474c0-830">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-830">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-831">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-831">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-832">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-832">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-833">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-833">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-834">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-834">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-835">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-835">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-836">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-836">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-837">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-837">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-838">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-838">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-839"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-839"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-840">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-841">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-841">Required.</span></span> <span data-ttu-id="474c0-842">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-842">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-843">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-843">Required.</span></span> <span data-ttu-id="474c0-844">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-844">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-845">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-845">Optional.</span></span> <span data-ttu-id="474c0-846">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-846">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-847">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-847">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-848">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-848">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-849">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-849">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-850">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-850">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-851">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-851">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-852">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-852">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-853">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-853">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-854">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-854">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-855">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-855">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-856">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-856">Random Mode</span></span>  
 <span data-ttu-id="474c0-857">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-857">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-858">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-858">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-859">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-859">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-860">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-860">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-861">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-861">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-862">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-862">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-863">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-863">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-864">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-864">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-865">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-865">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-866">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-866">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-867">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-867">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-868">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-868">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-869">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-869">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-870">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-870">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-871">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-871">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-872">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-872">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-873">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-873">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-874">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-874">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-875">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-875">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-876">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-876">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-877">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-877">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-878">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-878">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-879">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-879">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-880">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-880">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-881">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-881">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-882">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-882">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-883">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-883">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-884">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-884">Binary Mode</span></span>  
 <span data-ttu-id="474c0-885">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-885">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-886">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-886">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-887">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-887">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-888">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-888">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-889">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-889">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-890">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-890">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-891">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-891">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-892">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-892">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-893">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-893">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-894"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-894"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-895">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-895">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-896">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-896">Required.</span></span> <span data-ttu-id="474c0-897">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-897">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-898">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-898">Required.</span></span> <span data-ttu-id="474c0-899">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-899">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-900">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-900">Optional.</span></span> <span data-ttu-id="474c0-901">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-901">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="474c0-902">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-902">Optional.</span></span> <span data-ttu-id="474c0-903">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-903">Applies only when writing a string.</span></span> <span data-ttu-id="474c0-904">指定是否要為字串寫入描述長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-904">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="474c0-905">預設值為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="474c0-906">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-906">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-907">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-908">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-909">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-909">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-910">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-910">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-911">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-912">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-912">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-913">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-913">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-914">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-914">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-915">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-915">Random Mode</span></span>  
 <span data-ttu-id="474c0-916">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-916">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-917">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-917">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-918">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-918">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-919">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-919">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-920">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-920">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-921">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-921">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-922">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-922">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-923">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-923">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-924">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-924">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-925">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-925">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-926">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-926">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-927">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-927">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-928">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-928">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-929">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-930">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-931">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-931">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-932">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-933">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-933">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-934">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-934">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-935">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-935">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-936">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-936">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-937">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-938">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-938">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-939">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-939">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-940">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-941">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-941">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-942">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-943">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-943">Binary Mode</span></span>  
 <span data-ttu-id="474c0-944">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-944">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-945">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-945">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-946">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-946">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-947">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-947">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-948">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-948">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-949">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-949">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-950">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-950">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-951">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-951">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-952">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-952">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-953"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-954">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-954">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-955">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-955">Required.</span></span> <span data-ttu-id="474c0-956">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-956">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-957">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-957">Required.</span></span> <span data-ttu-id="474c0-958">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-958">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-959">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-959">Optional.</span></span> <span data-ttu-id="474c0-960">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-960">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="474c0-961">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-961">Optional.</span></span> <span data-ttu-id="474c0-962">只有在編寫陣列時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-962">Applies only when writing an array.</span></span> <span data-ttu-id="474c0-963">指定是否將陣列視為動態 (Dynamic)，以及是否有必要指定描述陣列大小和界限的陣列描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-963">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="474c0-964">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-964">Optional.</span></span> <span data-ttu-id="474c0-965">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-965">Applies only when writing a string.</span></span> <span data-ttu-id="474c0-966">指定是否要為字串寫入描述長度的雙位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-966">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="474c0-967">預設值為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-967">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="474c0-968">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-968">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="474c0-969">相較於 <see langword="FileGet" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-969">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="474c0-970">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-970">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-971">`FileGet` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-971">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-972">資料讀取`FileGet`通常會先寫入至檔案使用`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-972">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="474c0-973">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-973">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-974">如果您省略`RecordNumber`下, 一個記錄或位元組繼上次`FileGet`或`FilePut`函式 (或最後一個指向`Seek`函式) 會讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-974">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-975">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-975">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-976">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-976">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-977">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-977">Random Mode</span></span>  
 <span data-ttu-id="474c0-978">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-978">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-979">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGet`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-979">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-980">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-980">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-981">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是，有符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-981">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-982">根據預設，如果變數是一個字串，`FileGet`讀取兩個位元組描述元，其中包含字串的長度，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-982">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-983">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-983">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-984">Visual Basic 6.0 及舊版支援固定長度字串。置入檔案時，不寫入長度描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-984">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-985">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-985">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-986">如果變數是陣列，您可以選擇是否要讀取的大小和陣列的維度屬性的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-986">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="474c0-987">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-987">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-988">當讀取陣列，您必須符合陣列寫入的方式。</span><span class="sxs-lookup"><span data-stu-id="474c0-988">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="474c0-989">如果它具有描述元寫入，您必須讀取的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-989">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="474c0-990">如果未使用的描述元，大小和陣列界限的傳入`FileGet`決定要讀取的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-990">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="474c0-991">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-991">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-992">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-992">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-993">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-993">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-994">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-994">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="474c0-995">218 個位元組的分散，如下所示：</span><span class="sxs-lookup"><span data-stu-id="474c0-995">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="474c0-996">描述元的 18 個位元組: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="474c0-996">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="474c0-997">200 個位元組的資料: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="474c0-997">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="474c0-998">如果變數讀入是任何其他類型的變數 （不可變長度字串或物件）`FileGet`讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-998">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="474c0-999">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於所讀取的資料長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-999">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-1000">`FileGet` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1000">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-1001">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePut`) 加上其長度等於 2 加上 8 倍的維度數目的描述元: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1001">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1002">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別項目所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1002">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="474c0-1003">這包括任何的陣列，其描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1003">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-1004">`VBFixedString`屬性可以套用至字串欄位的結構，表示當寫入字串的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1004">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1005">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1005">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1006">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1006">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1007">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1007">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1008">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1008">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1009">`FileGet` 連續; 從磁碟讀取所有變數也就是說，無需之間的填補的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-1009">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1010">在結構中，陣列以外的所有陣列`FileGet`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1010">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="474c0-1011">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-1011">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="474c0-1012">`FileGet` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1012">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1013">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1013">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="474c0-1014">從檔案讀取使用`FileGet`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1014">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1015"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1015"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1016">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1016">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1017">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1017">Required.</span></span> <span data-ttu-id="474c0-1018">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1018">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1019">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1019">Required.</span></span> <span data-ttu-id="474c0-1020">有效的變數名稱，資料將讀取至其中。</span><span class="sxs-lookup"><span data-stu-id="474c0-1020">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1021">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1021">Optional.</span></span> <span data-ttu-id="474c0-1022">要開始讀取的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1022">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1023">將開放磁碟檔案的資料讀取到變數中。</span><span class="sxs-lookup"><span data-stu-id="474c0-1023">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="474c0-1024">相較於 <see langword="FileGetObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1024">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="474c0-1025">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1025">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1026">`FileGetObject`而不是使用函式`FileGet`若要避免模稜兩可在編譯時期，如果型別`Object`傳回而不是另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1026">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="474c0-1027">如果您想要寫出`Variant`型別，`FileGetObject`需要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1027">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="474c0-1028">有疑問，如果您使用物件的第二個參數，都建議您使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1028">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="474c0-1029">`FileGetObject` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1029">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1030">資料讀取`FileGetObject`通常寫入`FilePutObject`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1030">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="474c0-1031">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1031">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1032">如果您省略`RecordNumber`，`FileGetObject`最後一個之後讀取的記錄或位元組`FileGetObject`或`FilePutObject`函式 (或最後一個指向`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1032">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1033">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1033">Random Mode</span></span>  
 <span data-ttu-id="474c0-1034">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1034">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1035">如果正在讀取資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FileGetObject`讀取的資料錄長度界限中後續的記錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-1035">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1036">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾及開頭的下一筆記錄之間的間距。</span><span class="sxs-lookup"><span data-stu-id="474c0-1036">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1037">因為填補資料的數量無法精確判斷，所以最好能夠符合所讀取的資料長度的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1037">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="474c0-1038">讀取變數是否為字串，預設`FileGetObject`讀取包含字串長度的兩個位元組描述元，並再讀取變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1038">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1039">因此，所指定的資料錄長度`RecordLength`子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1039">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1040">Visual Basic 6.0 及舊版支援固定長度字串和讀取檔案時，長度的描述項不會寫入。</span><span class="sxs-lookup"><span data-stu-id="474c0-1040">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="474c0-1041">如果您想要讀取的描述項的字串，您應該傳遞`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1041">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1042">如果被讀入變數是陣列，則記錄所指定的長度`RecordLength`中的參數`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1042">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1043">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1043">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1044">其長度等於 2 加上 8 時間維度的數目： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="474c0-1044">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="474c0-1045">例如，下列陣列宣告需要 218 位元組陣列寫入時磁碟：</span><span class="sxs-lookup"><span data-stu-id="474c0-1045">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="474c0-1046">218 位元組會分散，如下所示： 18 個位元組 (2 + 8 \* 2)，描述元 100 個位元組 (5 \* 10 \* 4) 的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1046">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="474c0-1047">`FileGetObject` 如同讀取每個個別，只不過是沒有任何項目之間的填補，讀取結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1047">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="474c0-1048">在磁碟上，動態陣列中的使用者定義型別 (使用撰寫`FilePutObject`) 加上其長度等於 2 加上 8 倍的維度數目的描述元： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="474c0-1048">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="474c0-1049">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於讀取個別的項目，包括任何的陣列，其描述元所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1049">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="474c0-1050"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>類別可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1050">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1051">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1051">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1052">在 開啟檔案的`Binary`模式中，所有的`Random`套用規則，但有下列例外：</span><span class="sxs-lookup"><span data-stu-id="474c0-1052">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="474c0-1053">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1053">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1054">`FileGetObject` 所有連續讀取變數，從磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1054">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1055">在結構中，陣列以外的所有陣列`FileGetObject`讀取的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1055">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="474c0-1056">沒有描述元是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="474c0-1056">No descriptor is read.</span></span>  
  
 <span data-ttu-id="474c0-1057">`FileGetObject` 讀取可變長度的字串不是結構不會預期雙位元組長度的描述項的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1057">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1058">讀取的位元組數目等於已經在字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1058">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-1059">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-1059">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-1060">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1060">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1061">下列範例會讀取記錄，到測試檔案，並接著會擷取它。</span><span class="sxs-lookup"><span data-stu-id="474c0-1061">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-1062">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1062">Required.</span></span> <span data-ttu-id="474c0-1063">指定檔案的 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1063"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="474c0-1064"><c>PathName</c> 可包含目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-1064"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="474c0-1065">傳回 <see langword="Long" /> 值，指定檔案的長度 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1065">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="474c0-1066">相較於 <see langword="FileLen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="474c0-1067">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1067">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="474c0-1068"><see langword="Long" /> 指定檔案長度的值 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1068"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1069">如果指定的檔案時，開啟`FileLen`函式呼叫，傳回的值代表在它已開啟檔案的大小。</span><span class="sxs-lookup"><span data-stu-id="474c0-1069">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-1070">取得目前已開啟的檔案的長度，請使用`LOF`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1070">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1071">這個範例會使用`FileLen`函數來傳回檔案的長度，以位元組為單位。</span><span class="sxs-lookup"><span data-stu-id="474c0-1071">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="474c0-1072">此範例的目的，假設`TestFile`是包含某些資料的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1072">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-1073">檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-1073">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1074">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1074">Required.</span></span> <span data-ttu-id="474c0-1075">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1075">Any valid file number.</span></span> <span data-ttu-id="474c0-1076">使用 <see langword="FreeFile" /> 函式取得下一個可用的檔案編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-1076">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="474c0-1077">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1077">Required.</span></span> <span data-ttu-id="474c0-1078"><see langword="String" /> 運算式，可指定檔名，也可能包括目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-1078"><see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="474c0-1079">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1079">Required.</span></span> <span data-ttu-id="474c0-1080">指定檔案模式的列舉類型：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" /> </span><span class="sxs-lookup"><span data-stu-id="474c0-1080">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="474c0-1081">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenMode" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1081">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="474c0-1082">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1082">Optional.</span></span> <span data-ttu-id="474c0-1083">指定開啟檔案上允許的作業之列舉類型：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1083">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="474c0-1084">預設值為 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1084">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="474c0-1085">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1085">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="474c0-1086">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1086">Optional.</span></span> <span data-ttu-id="474c0-1087">指定開啟的檔案上其他處理序不允許之作業的列舉類型：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1087">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="474c0-1088">預設值為 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1088">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="474c0-1089">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.OpenShare" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1089">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="474c0-1090">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1090">Optional.</span></span> <span data-ttu-id="474c0-1091">數字小於或等於 32,767 (位元組)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1091">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="474c0-1092">對於為隨機存取開啟的檔案而言，這個值是資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1092">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="474c0-1093">對於循序檔案而言，這個值是緩衝的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1093">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="474c0-1094">開啟要當做輸入或輸出的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1094">Opens a file for input or output.</span></span> <span data-ttu-id="474c0-1095">相較於 <see langword="FileOpen" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1095">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="474c0-1096">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1096">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1097">`FileOpen`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1097">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-1098">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1098">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-1099">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1099">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-1100">您必須先開啟檔案，才能在其上執行任何的 I/O 作業。</span><span class="sxs-lookup"><span data-stu-id="474c0-1100">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="474c0-1101">`FileOpen` 會針對 I/O 配置緩衝區至檔案，並判斷要使用之緩衝區的存取模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1101">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-1102">當寫入檔案時，應用程式可能要建立檔案，如果嘗試寫入的檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-1102">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="474c0-1103">若要這樣做，需要的權限的 建立檔案的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-1103">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="474c0-1104">不過，如果所指定的檔案`FileName`確實存在，應用程式需求`Write`權限只檔案本身。</span><span class="sxs-lookup"><span data-stu-id="474c0-1104">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="474c0-1105">盡量，以協助改善安全性，在部署和授與建立檔案的任一處`Write`該檔案的權限唯一的而不是整個目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-1105">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="474c0-1106">若要改善安全性，請將資料寫入使用者目錄而不是根目錄或 Program Files 目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-1106">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="474c0-1107">若要開啟頻道可以找到使用`FreeFile()`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1107">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-1108">`FileOpen`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別，這可能會影響在部分信任情況下執行。</span><span class="sxs-lookup"><span data-stu-id="474c0-1108">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="474c0-1109">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1109">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1110">此範例說明的各種用法`FileOpen`函式會啟用輸入和輸出至檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1110">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="474c0-1111">下列程式碼會開啟檔案`TestFile`中`Input`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1111">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="474c0-1112">這個範例會開啟中的檔案`Binary`模式只允許寫入作業。</span><span class="sxs-lookup"><span data-stu-id="474c0-1112">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="474c0-1113">下列範例會開啟中的檔案`Random`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1113">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="474c0-1114">檔案包含結構的記錄`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1114">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="474c0-1115">這個程式碼範例會開啟中的檔案`Output`模式; 任何處理程序可以讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1115">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="474c0-1116">這個程式碼範例會開啟中的檔案`Binary`模式進行讀取; 其他處理序無法讀取檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1116">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="474c0-1117">資料錄的長度為負數 (而且不等於 -1)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1117">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="474c0-1118"><paramref name="FileName" /> 已經開啟，或 <paramref name="FileName" /> 無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1118"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-1119">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1119">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1120">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1120">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1121">如需詳細資訊，請參閱 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1121">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1122">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1122">Required.</span></span> <span data-ttu-id="474c0-1123">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1123">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1124">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1124">Required.</span></span> <span data-ttu-id="474c0-1125">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1125">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1126">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1126">Optional.</span></span> <span data-ttu-id="474c0-1127">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1127">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1128">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1128">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1129">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1129">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1130">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1130">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1131">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1131">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1132">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1132">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1133">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1133">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1134">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1134">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1135">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1135">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1136">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1136">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1137">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1137">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1138">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1138">Random Mode</span></span>  
 <span data-ttu-id="474c0-1139">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1139">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1140">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1140">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1141">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1141">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1142">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1142">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1143">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1143">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1144">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1144">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1145">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1145">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1146">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1146">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1147">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1147">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1148">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1148">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1149">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1149">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1150">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1150">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1151">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1151">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1152">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1152">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1153">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1153">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1154">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1154">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1155">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1155">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1156">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1156">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1157">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1157">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1158">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1158">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1159">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1159">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1160">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1160">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1161">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1161">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1162">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1162">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1163">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1163">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1164">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1164">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1165">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1165">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1166">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1166">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1167">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1167">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1168">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1168">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1169">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1169">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1170">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1170">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1171">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1171">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1172">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1172">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1173">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1173">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1174">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1174">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1175">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1175">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1176">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1176">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1177">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1177">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1178">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1178">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1179"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1179"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1180">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1180">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1181">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1181">Required.</span></span> <span data-ttu-id="474c0-1182">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1182">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1183">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1183">Required.</span></span> <span data-ttu-id="474c0-1184">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1184">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1185">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1185">Optional.</span></span> <span data-ttu-id="474c0-1186">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1186">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1187">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1187">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1188">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1188">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1189">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1189">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1190">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1190">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1191">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1191">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1192">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1192">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1193">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1193">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1194">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1194">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1195">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1195">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1196">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1196">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1197">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1197">Random Mode</span></span>  
 <span data-ttu-id="474c0-1198">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1198">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1199">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1199">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1200">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1200">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1201">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1201">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1202">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1202">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1203">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1203">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1204">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1204">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1205">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1205">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1206">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1206">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1207">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1207">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1208">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1208">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1209">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1209">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1210">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1210">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1211">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1211">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1212">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1212">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1213">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1213">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1214">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1214">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1215">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1215">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1216">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1216">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1217">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1217">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1218">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1218">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1219">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1219">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1220">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1220">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1221">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1221">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1222">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1222">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1223">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1223">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1224">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1224">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1225">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1225">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1226">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1226">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1227">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1227">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1228">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1228">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1229">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1229">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1230">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1230">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1231">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1231">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1232">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1232">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1233">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1233">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1234">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1234">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1235">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1235">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1236">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1236">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1237">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1237">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1238"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1238"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1239">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1239">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1240">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1240">Required.</span></span> <span data-ttu-id="474c0-1241">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1241">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1242">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1242">Required.</span></span> <span data-ttu-id="474c0-1243">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1243">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1244">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1244">Optional.</span></span> <span data-ttu-id="474c0-1245">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1245">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1246">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1246">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1247">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1247">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1248">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1248">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1249">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1249">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1250">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1250">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1251">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1251">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1252">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1252">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1253">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1253">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1254">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1254">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1255">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1255">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1256">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1256">Random Mode</span></span>  
 <span data-ttu-id="474c0-1257">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1257">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1258">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1258">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1259">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1259">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1260">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1260">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1261">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1261">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1262">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1262">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1263">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1263">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1264">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1264">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1265">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1265">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1266">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1266">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1267">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1267">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1268">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1268">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1269">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1269">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1270">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1270">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1271">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1271">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1272">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1272">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1273">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1273">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1274">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1274">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1275">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1275">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1276">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1276">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1277">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1277">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1278">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1278">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1279">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1279">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1280">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1280">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1281">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1281">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1282">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1282">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1283">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1283">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1284">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1284">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1285">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1285">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1286">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1286">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1287">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1287">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1288">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1288">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1289">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1289">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1290">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1290">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1291">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1291">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1292">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1292">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1293">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1293">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1294">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1294">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1295">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1295">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1296">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1296">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1297"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1297"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1298">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1298">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1299">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1299">Required.</span></span> <span data-ttu-id="474c0-1300">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1300">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1301">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1301">Required.</span></span> <span data-ttu-id="474c0-1302">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1302">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1303">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1303">Optional.</span></span> <span data-ttu-id="474c0-1304">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1304">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1305">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1305">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1306">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1306">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1307">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1307">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1308">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1308">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1309">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1309">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1310">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1310">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1311">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1311">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1312">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1312">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1313">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1313">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1314">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1314">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1315">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1315">Random Mode</span></span>  
 <span data-ttu-id="474c0-1316">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1316">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1317">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1317">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1318">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1318">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1319">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1319">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1320">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1320">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1321">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1321">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1322">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1322">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1323">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1323">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1324">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1324">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1325">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1325">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1326">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1326">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1327">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1327">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1328">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1328">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1329">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1329">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1330">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1330">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1331">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1331">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1332">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1332">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1333">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1333">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1334">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1334">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1335">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1335">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1336">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1336">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1337">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1337">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1338">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1338">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1339">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1339">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1340">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1340">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1341">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1341">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1342">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1342">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1343">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1343">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1344">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1344">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1345">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1345">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1346">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1346">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1347">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1347">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1348">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1348">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1349">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1349">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1350">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1350">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1351">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1351">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1352">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1352">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1353">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1353">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1354">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1354">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1355">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1355">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1356"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1356"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1357">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1357">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1358">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1358">Required.</span></span> <span data-ttu-id="474c0-1359">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1359">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1360">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1360">Required.</span></span> <span data-ttu-id="474c0-1361">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1361">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1362">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1362">Optional.</span></span> <span data-ttu-id="474c0-1363">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1363">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1364">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1364">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1365">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1365">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1366">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1366">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1367">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1367">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1368">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1368">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1369">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1369">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1370">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1370">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1371">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1371">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1372">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1372">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1373">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1373">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1374">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1374">Random Mode</span></span>  
 <span data-ttu-id="474c0-1375">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1375">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1376">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1376">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1377">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1377">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1378">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1378">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1379">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1379">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1380">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1380">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1381">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1381">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1382">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1382">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1383">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1383">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1384">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1384">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1385">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1385">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1386">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1386">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1387">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1387">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1388">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1388">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1389">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1389">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1390">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1390">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1391">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1392">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1392">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1393">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1394">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1395">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1395">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1396">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1397">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1397">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1398">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1398">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1399">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1399">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1400">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1400">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1401">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1401">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1402">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1402">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1403">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1403">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1404">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1404">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1405">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1405">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1406">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1406">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1407">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1407">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1408">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1408">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1409">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1409">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1410">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1410">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1411">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1411">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1412">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1412">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1413">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1413">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1414">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1414">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1415"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1415"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1416">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1416">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1417">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1417">Required.</span></span> <span data-ttu-id="474c0-1418">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1418">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1419">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1419">Required.</span></span> <span data-ttu-id="474c0-1420">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1420">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1421">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1421">Optional.</span></span> <span data-ttu-id="474c0-1422">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1422">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1423">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1423">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1424">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1424">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1425">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1425">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1426">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1426">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1427">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1427">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1428">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1428">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1429">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1429">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1430">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1430">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1431">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1431">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1432">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1432">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1433">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1433">Random Mode</span></span>  
 <span data-ttu-id="474c0-1434">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1434">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1435">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1435">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1436">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1436">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1437">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1437">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1438">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1438">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1439">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1439">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1440">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1440">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1441">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1441">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1442">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1442">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1443">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1443">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1444">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1444">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1445">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1445">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1446">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1446">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1447">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1447">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1448">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1448">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1449">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1449">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1450">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1450">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1451">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1451">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1452">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1452">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1453">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1453">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1454">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1454">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1455">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1455">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1456">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1456">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1457">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1457">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1458">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1458">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1459">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1459">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1460">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1460">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1461">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1461">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1462">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1462">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1463">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1463">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1464">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1464">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1465">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1465">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1466">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1466">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1467">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1467">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1468">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1468">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1469">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1469">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1470">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1470">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1471">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1471">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1472">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1472">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1473">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1473">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1474"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1475">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1475">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1476">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1476">Required.</span></span> <span data-ttu-id="474c0-1477">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1477">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1478">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1478">Required.</span></span> <span data-ttu-id="474c0-1479">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1479">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1480">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1480">Optional.</span></span> <span data-ttu-id="474c0-1481">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1481">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1482">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1482">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1483">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1483">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1484">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1484">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1485">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1485">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1486">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1486">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1487">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1487">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1488">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1488">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1489">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1489">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1490">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1490">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1491">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1491">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1492">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1492">Random Mode</span></span>  
 <span data-ttu-id="474c0-1493">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1493">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1494">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1494">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1495">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1495">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1496">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1496">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1497">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1497">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1498">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1498">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1499">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1499">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1500">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1500">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1501">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1501">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1502">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1502">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1503">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1503">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1504">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1504">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1505">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1505">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1506">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1506">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1507">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1507">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1508">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1508">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1509">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1509">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1510">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1510">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1511">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1511">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1512">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1512">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1513">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1513">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1514">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1514">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1515">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1515">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1516">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1516">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1517">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1517">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1518">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1518">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1519">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1519">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1520">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1520">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1521">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1521">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1522">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1522">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1523">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1523">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1524">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1524">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1525">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1525">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1526">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1526">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1527">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1527">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1528">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1528">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1529">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1529">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1530">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1530">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1531">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1531">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1532">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1532">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1533"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1533"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1534">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1534">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1535">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1535">Required.</span></span> <span data-ttu-id="474c0-1536">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1537">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1537">Required.</span></span> <span data-ttu-id="474c0-1538">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1538">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1539">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1539">Optional.</span></span> <span data-ttu-id="474c0-1540">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1541">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1541">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1542">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1543">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1544">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1544">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1545">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1545">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1546">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1547">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1547">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1548">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1548">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1549">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1549">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1550">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1550">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1551">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1551">Random Mode</span></span>  
 <span data-ttu-id="474c0-1552">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1552">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1553">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1553">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1554">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1554">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1555">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1555">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1556">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1556">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1557">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1557">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1558">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1558">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1559">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1559">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1560">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1560">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1561">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1561">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1562">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1562">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1563">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1563">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1564">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1564">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1565">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1565">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1566">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1566">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1567">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1567">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1568">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1568">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1569">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1569">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1570">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1570">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1571">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1571">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1572">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1573">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1573">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1574">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1574">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1575">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1576">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1576">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1577">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1578">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1578">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1579">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1579">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1580">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1580">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1581">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1581">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1582">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1582">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1583">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1583">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1584">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1584">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1585">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1585">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1586">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1586">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1587">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1587">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1588">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1588">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1589">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1589">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1590">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1590">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1591">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1591">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1592"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1592"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1593">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1593">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1594">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1594">Required.</span></span> <span data-ttu-id="474c0-1595">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1595">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1596">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1596">Required.</span></span> <span data-ttu-id="474c0-1597">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1597">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1598">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1598">Optional.</span></span> <span data-ttu-id="474c0-1599">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1599">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1600">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1600">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1601">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1601">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1602">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1602">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1603">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1603">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1604">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1604">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1605">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1605">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1606">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1606">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1607">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1607">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1608">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1608">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1609">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1609">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1610">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1610">Random Mode</span></span>  
 <span data-ttu-id="474c0-1611">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1612">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1612">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1613">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1614">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1615">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1615">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1616">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1616">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1617">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1617">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1618">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1618">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1619">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1619">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1620">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1621">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1621">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1622">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1622">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1623">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1623">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1624">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1624">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1625">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1625">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1626">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1626">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1627">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1627">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1628">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1628">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1629">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1629">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1630">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1630">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1631">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1631">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1632">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1632">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1633">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1633">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1634">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1634">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1635">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1635">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1636">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1636">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1637">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1637">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1638">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1638">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1639">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1640">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1641">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1642">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1642">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1643">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1643">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1644">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1644">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1645">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1645">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1646">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1646">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1647">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1647">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1648">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1648">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1649">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1649">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1650">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1650">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1651"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1651"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1652">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1652">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1653">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1653">Required.</span></span> <span data-ttu-id="474c0-1654">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1654">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1655">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1655">Required.</span></span> <span data-ttu-id="474c0-1656">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1656">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1657">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1657">Optional.</span></span> <span data-ttu-id="474c0-1658">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1658">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1659">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1659">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1660">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1660">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1661">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1661">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1662">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1662">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1663">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1663">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1664">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1664">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1665">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1665">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1666">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1666">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1667">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1667">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1668">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1668">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1669">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1669">Random Mode</span></span>  
 <span data-ttu-id="474c0-1670">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1670">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1671">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1671">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1672">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1672">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1673">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1673">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1674">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1674">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1675">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1675">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1676">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1676">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1677">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1677">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1678">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1678">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1679">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1679">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1680">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1680">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1681">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1681">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1682">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1682">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1683">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1683">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1684">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1684">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1685">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1685">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1686">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1686">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1687">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1687">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1688">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1688">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1689">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1689">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1690">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1690">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1691">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1691">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1692">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1692">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1693">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1693">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1694">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1694">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1695">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1695">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1696">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1696">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1697">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1697">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1698">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1698">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1699">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1699">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1700">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1700">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1701">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1701">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1702">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1702">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1703">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1703">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1704">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1704">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1705">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1705">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1706">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1706">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1707">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1707">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1708">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1708">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1709">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1709">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1710"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1710"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1711">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1711">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1712">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1712">Required.</span></span> <span data-ttu-id="474c0-1713">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1714">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1714">Required.</span></span> <span data-ttu-id="474c0-1715">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1716">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1716">Optional.</span></span> <span data-ttu-id="474c0-1717">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1718">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1719">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1720">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1721">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1722">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1723">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1724">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1725">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1726">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1727">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1728">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1728">Random Mode</span></span>  
 <span data-ttu-id="474c0-1729">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1730">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1730">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1731">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1732">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1733">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1734">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1735">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1736">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1737">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1738">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1739">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1740">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1741">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1742">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1743">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1744">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1745">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1746">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1747">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1748">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1749">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1750">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1751">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1752">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1753">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1754">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1755">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1756">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1756">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1757">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1758">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1759">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1760">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1761">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1762">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1763">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1764">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1765">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1766">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1767">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1768">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1769"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1770">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1771">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1771">Required.</span></span> <span data-ttu-id="474c0-1772">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1772">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1773">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1773">Required.</span></span> <span data-ttu-id="474c0-1774">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1774">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1775">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1775">Optional.</span></span> <span data-ttu-id="474c0-1776">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1776">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1777">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1777">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1778">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1778">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1779">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1779">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1780">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1780">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1781">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1781">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1782">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1782">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1783">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1783">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1784">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1784">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1785">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1785">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1786">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1786">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1787">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1787">Random Mode</span></span>  
 <span data-ttu-id="474c0-1788">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1788">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1789">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1789">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1790">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1790">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1791">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1791">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1792">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1792">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1793">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1793">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1794">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1794">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1795">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1795">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1796">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1796">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1797">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1798">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1798">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1799">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1799">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1800">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1800">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1801">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1801">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1802">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1802">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1803">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1803">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1804">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1805">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1805">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1806">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1806">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1807">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1807">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1808">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1808">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1809">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1809">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1810">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1810">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1811">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1811">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1812">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1812">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1813">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1813">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1814">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1814">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1815">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1815">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1816">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1816">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1817">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1817">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1818">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1818">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1819">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1819">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1820">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1820">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1821">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1821">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1822">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1822">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1823">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1823">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1824">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1824">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1825">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1825">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1826">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1826">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1827">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1827">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1828"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1828"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1829">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1829">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1830">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1830">Required.</span></span> <span data-ttu-id="474c0-1831">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1831">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1832">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1832">Required.</span></span> <span data-ttu-id="474c0-1833">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1833">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1834">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1834">Optional.</span></span> <span data-ttu-id="474c0-1835">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1835">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="474c0-1836">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1836">Optional.</span></span> <span data-ttu-id="474c0-1837">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1837">Applies only when writing a string.</span></span> <span data-ttu-id="474c0-1838">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1838">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="474c0-1839">預設值為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1839">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="474c0-1840">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1840">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1841">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1842">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1843">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1843">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1844">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1844">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1845">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1846">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1846">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1847">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1847">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1848">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1848">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1849">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1849">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1850">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1850">Random Mode</span></span>  
 <span data-ttu-id="474c0-1851">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1852">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1852">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1853">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1854">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1855">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1855">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1856">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1856">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1857">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1857">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1858">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1858">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1859">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1859">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1860">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1861">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1861">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1862">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1862">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1863">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1863">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1864">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1864">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1865">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1865">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1866">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1866">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1867">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1867">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1868">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1868">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1869">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1869">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1870">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1870">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1871">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1872">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1872">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1873">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1873">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1874">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1875">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1875">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1876">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1877">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1877">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1878">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1878">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1879">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1880">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1881">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1882">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1882">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1883">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1883">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1884">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1884">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1885">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1885">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1886">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1886">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1887">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1887">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1888">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1888">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1889">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1889">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1890">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1890">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1891"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1891"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1892">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1892">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1893">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1893">Required.</span></span> <span data-ttu-id="474c0-1894">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1894">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1895">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1895">Required.</span></span> <span data-ttu-id="474c0-1896">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1896">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1897">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1897">Optional.</span></span> <span data-ttu-id="474c0-1898">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1898">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="474c0-1899">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1899">Optional.</span></span> <span data-ttu-id="474c0-1900">只有在編寫陣列時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1900">Applies only when writing an array.</span></span> <span data-ttu-id="474c0-1901">指定陣列是否要視為動態 (Dynamic)，以及是否要針對描述長度的字串編寫陣列描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1901">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="474c0-1902">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1902">Optional.</span></span> <span data-ttu-id="474c0-1903">只有在編寫字串時才適用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1903">Applies only when writing a string.</span></span> <span data-ttu-id="474c0-1904">指定是否要針對檔案的字串編寫二位元組字串長度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1904">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="474c0-1905">預設值為 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="474c0-1906">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1906">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="474c0-1907">相較於 <see langword="FilePut" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="474c0-1908">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1909">`FilePut` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1909">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1910">使用 `FilePut` 寫入的資料，通常會透過使用 `FileGet` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1910">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="474c0-1911">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1912">如果您省略`RecordNumber`下, 一個記錄或最後一個之後位元組`FileGet`或`FilePut`函式，或指向最後一個`Seek`撰寫函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1912">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="474c0-1913">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1913">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1914">`FilePut` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1914">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1915">如果您使用`StringIsFixedLength`  =  `True`與`FilePut`，您必須執行相同的`FileGet`，而且您必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1915">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1916">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1916">Random Mode</span></span>  
 <span data-ttu-id="474c0-1917">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1917">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1918">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePut`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1918">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1919">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1919">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1920">因為無法判斷填補資料的數量，與任何確定性，通常是最好的是有相符的資料寫入的記錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1920">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1921">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式，將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1921">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1922">如果寫入的變數是字串，`FilePut`寫入兩個位元組描述項，其中包含字串長度，並再寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1922">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="474c0-1923">因此，所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須至少在兩個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1923">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="474c0-1924">如果寫入的變數是物件所包含的數字類型，`FilePut`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1924">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1925">例如，寫入物件時，包含整數，`FilePut`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1925">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1926">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1926">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1927">如果正在寫入的變數是物件，包含字串，`FilePut`寫入兩個位元組的描述元識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1927">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1928">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1928">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1929">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1929">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1930">如果寫入的變數是陣列，您必須選擇要寫入的大小和陣列維度的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1930">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="474c0-1931">Visual Basic 6.0 及舊版撰寫為動態陣列，但不是會為固定大小陣列的檔案描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1931">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="474c0-1932">Visual Basic 2005 預設為不寫入描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1932">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="474c0-1933">若要撰寫的描述元，設定`ArrayIsDynamic`參數`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1933">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="474c0-1934">當寫入陣列，您必須符合的方式，將會讀取陣列;如果將讀取與描述元，您必須撰寫的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1934">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="474c0-1935">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1935">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1936">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1936">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="474c0-1937">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1938">例如，下列陣列宣告需要 218 位元組陣列寫入時寫入磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1938">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="474c0-1939">如果正在寫入的變數是任何其他類型的變數 （不可變長度字串或物件）`FilePut`寫入變數的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1939">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="474c0-1940">所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於寫入資料的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="474c0-1941">`FilePut` 如同寫入每個個別，但沒有任何項目之間的填補，將結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1941">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="474c0-1942">`VBFixedString`屬性可以套用至字串欄位的結構，表示字串寫入時的大小到磁碟。</span><span class="sxs-lookup"><span data-stu-id="474c0-1942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="474c0-1943">字串有更多的位元組，超過所指定的欄位`VBFixedString`屬性會被截斷時寫入至磁碟，</span><span class="sxs-lookup"><span data-stu-id="474c0-1943">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1944">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1944">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1945">在 開啟檔案的`Binary`模式中，大部分的`Random`模式會套用規則，但有些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1945">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="474c0-1946">在中開啟檔案的下列規則`Binary`模式不同的規則`Random`模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-1946">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="474c0-1947">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1947">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1948">`FilePut` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1948">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="474c0-1949">在結構中，陣列以外的所有陣列`FilePut`寫入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1949">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="474c0-1950">會不寫入任何描述項。</span><span class="sxs-lookup"><span data-stu-id="474c0-1950">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="474c0-1951">`FilePut` 寫入可變長度的字串不是雙位元組長度描述項的結構的項目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1951">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="474c0-1952">寫入的位元組數目等於字串中的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1952">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="474c0-1953">例如，下列陳述式會將 11 個位元組寫入檔案編號 1:</span><span class="sxs-lookup"><span data-stu-id="474c0-1953">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="474c0-1954">寫入檔案，使用`FilePut`函式需要`Write`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-1954">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1955">這個範例會使用`FilePut`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1955">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="474c0-1956">結構的五筆記錄`Person`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1956">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-1957"><paramref name="RecordNumber" /> &lt; 1 且不等於 -1。</span><span class="sxs-lookup"><span data-stu-id="474c0-1957"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-1958">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-1958">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1959">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1959">Required.</span></span> <span data-ttu-id="474c0-1960">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1960">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-1961">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1961">Required.</span></span> <span data-ttu-id="474c0-1962">有效的變數名稱，該名稱包含已寫入磁碟的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-1962">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="474c0-1963">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-1963">Optional.</span></span> <span data-ttu-id="474c0-1964">寫入開始的資料錄數目 (<see langword="Random" /> 模式檔案) 或位元組數目 (<see langword="Binary" /> 模式檔案)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1964">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="474c0-1965">將變數資料寫入磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1965">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="474c0-1966">相較於 <see langword="FilePutObject" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-1966">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="474c0-1967">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-1967">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-1968">`FilePutObject`而不是使用函式`FilePut`若要避免模稜兩可在編譯時期，如果型別`Object`傳遞，而另一個類型，例如`Integer`， `Long`， `Short`，依此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1968">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="474c0-1969">`FilePutObject` 寫入，並讀取描述物件的描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1969">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="474c0-1970">如果您想要寫出`Variant`型別，`FilePutObject`需要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1970">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="474c0-1971">有疑問，如果您使用物件的第二個參數，我們建議一律使用`FilePutObject`和`FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1971">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="474c0-1972">`FilePutObject` 只能在有效`Random`和`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-1972">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-1973">使用 `FilePutObject` 寫入的資料，通常會透過使用 `FileGetObject` 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-1973">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="474c0-1974">第一個記錄或檔案中的位元組是在位置 1，第二個記錄或位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="474c0-1975">如果您省略`RecordNumber`，`FilePutObject`寫入最後一個之後的下一個記錄或位元組`FileGetObject`或`FilePutObject`函式 (或資料錄或位元組指向最後一個`Seek`函式)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1975">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="474c0-1976">`StringIsFixedLength`引數可讓您控制是否函式會將字串解譯為變數或固定長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="474c0-1977">`FilePutObject` 引數時，不會寫入長度描述元`True`。</span><span class="sxs-lookup"><span data-stu-id="474c0-1977">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="474c0-1978">如果您使用`StringIsFixedLength`  =  `True`與`FilePutObject`，您必須執行相同的`FileGetObject`，和您也必須確定該字串會初始化為預期的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1978">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="474c0-1979">隨機模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1979">Random Mode</span></span>  
 <span data-ttu-id="474c0-1980">在 開啟檔案的`Random`模式中，則適用下列規則：</span><span class="sxs-lookup"><span data-stu-id="474c0-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="474c0-1981">如果正在寫入資料的長度小於指定的長度`RecordLength`子句`FileOpen`函式，`FilePutObject`將後續的記錄寫入的資料錄長度界限上。</span><span class="sxs-lookup"><span data-stu-id="474c0-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="474c0-1982">以現有的內容，將檔案緩衝區的填補一筆記錄的結尾與下一筆記錄的開始之間的空間。</span><span class="sxs-lookup"><span data-stu-id="474c0-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="474c0-1983">因為填補資料的數量無法精確判斷，所以通常最好是有相符的資料寫入的資料錄長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1983">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="474c0-1984">如果正在寫入資料的長度大於指定的長度`RecordLength`子句`FileOpen`函式擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="474c0-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="474c0-1985">如果寫入的變數是物件所包含的數字類型，`FilePutObject`寫入兩個位元組，識別`VarType`的物件，然後將變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-1985">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="474c0-1986">例如，寫入物件時，包含整數，`FilePutObject`寫入 6 個位元組： 識別做為物件的兩個位元組`VarType(3)`(`Integer`) 以及包含資料的四個位元組。</span><span class="sxs-lookup"><span data-stu-id="474c0-1986">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="474c0-1987">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須至少在兩個位元組大於實際儲存變數所需的位元組數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-1987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="474c0-1988">如果正在寫入的變數是物件，包含字串，`FilePutObject`寫入兩個位元組的描述項，識別`VarType(8)`的物件，表示字串，然後再寫入字串資料的長度的兩個位元組描述元。</span><span class="sxs-lookup"><span data-stu-id="474c0-1988">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="474c0-1989">所指定的資料錄長度`RecordLength`中的參數`FileOpen`函式必須為至少四個位元組大於字串的實際長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="474c0-1990">如果您想要將描述項的字串，您應該將`True`至`StringIsFixedLength`參數，且您讀入應該是正確的長度的字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-1990">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="474c0-1991">如果寫入的變數是陣列，則所指定的資料錄長度`RecordLength`中的子句`FileOpen`函式必須是大於或等於撰寫陣列資料和陣列描述項所需的所有位元組的總和。</span><span class="sxs-lookup"><span data-stu-id="474c0-1991">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="474c0-1992">描述元指定陣列大小及每個陣序規範下限的陣序。</span><span class="sxs-lookup"><span data-stu-id="474c0-1992">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="474c0-1993">其長度等於 2 加上 8 時間維度的數目: (2 + 8 \* NumberOfDimensions)。</span><span class="sxs-lookup"><span data-stu-id="474c0-1993">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="474c0-1994">二進位模式</span><span class="sxs-lookup"><span data-stu-id="474c0-1994">Binary Mode</span></span>  
 <span data-ttu-id="474c0-1995">在開啟檔案的`Binary`模式中，所有`Random`模式規則將套用，除了：</span><span class="sxs-lookup"><span data-stu-id="474c0-1995">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="474c0-1996">`RecordLength`中的子句`FileOpen`函式沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="474c0-1996">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="474c0-1997">`FilePutObject` 將所有的變數，連續寫入磁碟，也就是沒有記錄之間的填補。</span><span class="sxs-lookup"><span data-stu-id="474c0-1997">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-1998">這個範例會使用`FilePutObject`函式，將字串寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-1998">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-1999">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-1999">Required.</span></span> <span data-ttu-id="474c0-2000">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2000">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="474c0-2001">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2001">Required.</span></span> <span data-ttu-id="474c0-2002">0–255 範圍內的數值運算式 (包含頭尾)，表示在開始新行之前，會有多少字元出現在一行上。</span><span class="sxs-lookup"><span data-stu-id="474c0-2002">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="474c0-2003">如果 <c>RecordWidth</c> 等於 0，則一行的長度將沒有限制。</span><span class="sxs-lookup"><span data-stu-id="474c0-2003">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="474c0-2004"><c>RecordWidth</c> 的預設值為 0。</span><span class="sxs-lookup"><span data-stu-id="474c0-2004">The default value for <c>RecordWidth</c> is 0.</span></span></param>
        <summary><span data-ttu-id="474c0-2005">為藉由使用 <see langword="FileOpen" /> 函式開啟的檔案指派輸出行寬度。</span><span class="sxs-lookup"><span data-stu-id="474c0-2005">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="474c0-2006">這個範例會使用`FileWidth`函式可設定檔案的輸出線條寬度。</span><span class="sxs-lookup"><span data-stu-id="474c0-2006">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2007">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474c0-2008">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2008">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="474c0-2009">傳回 <see langword="Integer" /> 值，表示可供 <see langword="FileOpen" /> 函式使用的下一個可用的檔案編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2009">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2010">使用`FreeFile`提供尚未使用的檔案數字。</span><span class="sxs-lookup"><span data-stu-id="474c0-2010">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2011">這個範例會使用`FreeFile`函式傳回下一個可用的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2011">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="474c0-2012">五個檔案都開啟迴圈內的輸出和特定範例資料會寫入每一個。</span><span class="sxs-lookup"><span data-stu-id="474c0-2012">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2013">使用中的檔案超過 255 個。</span><span class="sxs-lookup"><span data-stu-id="474c0-2013">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-2014">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2014">Required.</span></span> <span data-ttu-id="474c0-2015">指定檔案、目錄或資料夾名稱的 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2015"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="474c0-2016"><c>PathName</c> 可包含目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2016"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="474c0-2017">傳回 <see langword="FileAttribute" /> 值，表示檔案、目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2017">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="474c0-2018">相較於 <see langword="FileAttribute" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="474c0-2019">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-2020"><see langword="GetAttr" /> 傳回的值是以下列舉值的總和：</span><span class="sxs-lookup"><span data-stu-id="474c0-2020">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span>  
  
 <span data-ttu-id="474c0-2021"><list type="table"><item><term> 值</span><span class="sxs-lookup"><span data-stu-id="474c0-2021"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="474c0-2022"></term><description> 常數</span><span class="sxs-lookup"><span data-stu-id="474c0-2022"></term><description> Constant</span></span>  
  
 <span data-ttu-id="474c0-2023"></description><description> 描述</span><span class="sxs-lookup"><span data-stu-id="474c0-2023"></description><description> Description</span></span>  
  
 <span data-ttu-id="474c0-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> 一般。</span><span class="sxs-lookup"><span data-stu-id="474c0-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.</span></span>  
  
 <span data-ttu-id="474c0-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> 唯讀。</span><span class="sxs-lookup"><span data-stu-id="474c0-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.</span></span>  
  
 <span data-ttu-id="474c0-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> 隱藏。</span><span class="sxs-lookup"><span data-stu-id="474c0-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.</span></span>  
  
 <span data-ttu-id="474c0-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> 系統檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.</span></span>  
  
 <span data-ttu-id="474c0-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> 目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.</span></span>  
  
 <span data-ttu-id="474c0-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> 前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.</span></span>  
  
 <span data-ttu-id="474c0-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> 檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="474c0-2031">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2031">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="474c0-2032">您可在程式碼中的任何地方使用這些名稱來取代實際值。</span><span class="sxs-lookup"><span data-stu-id="474c0-2032">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2033">若要判斷設定了哪些屬性，請使用`And`運算子來執行所傳回的值的位元比較`GetAttr`函式和您想要個別的檔案屬性的值。</span><span class="sxs-lookup"><span data-stu-id="474c0-2033">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="474c0-2034">如果結果不是零，該屬性會設定命名的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2034">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="474c0-2035">例如，下列的傳回值`And`運算式是如果`Archive`未設定屬性：</span><span class="sxs-lookup"><span data-stu-id="474c0-2035">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="474c0-2036">如果傳回非零值`Archive`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2036">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2037">這個範例會使用`GetAttr`函式來判斷檔案和目錄或資料夾的屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2037">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="474c0-2038"><paramref name="Pathname" /> 無效或包含萬用字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2038"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-2039">目標檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2039">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-2040">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2040">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2041">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2041">Required.</span></span> <span data-ttu-id="474c0-2042">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2042">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2043">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2043">Required.</span></span> <span data-ttu-id="474c0-2044">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2044">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2045">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2045">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2046">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2046">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2047">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2047">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2048">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2048">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2049">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2049">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2050">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2050">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2051">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2051">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2052">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2052">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2053">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2053">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2054">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2054">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2055">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2055">Data</span></span>|<span data-ttu-id="474c0-2056">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2056">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2057">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2057">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2058">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2058">Empty</span></span>|  
|<span data-ttu-id="474c0-2059">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2059">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2060">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2060">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2061">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2061">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2062">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2062">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2063">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2063">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2064">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2064">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2065">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2065">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2066">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2066">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2067">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2067">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2068">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2068">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2069">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2069">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2070">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2070">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2071">這個範例假設`TestFile`是檔案，已寫入它使用資料的數行程式`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2071">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2072">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2073">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2073">Required.</span></span> <span data-ttu-id="474c0-2074">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2074">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2075">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2075">Required.</span></span> <span data-ttu-id="474c0-2076">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2076">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2077">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2077">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2078">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2078">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2079">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2079">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2080">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2080">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2081">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2081">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2082">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2082">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2083">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2083">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2084">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2084">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2085">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2085">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2086">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2086">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2087">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2087">Data</span></span>|<span data-ttu-id="474c0-2088">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2088">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2089">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2089">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2090">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2090">Empty</span></span>|  
|<span data-ttu-id="474c0-2091">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2091">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2092">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2092">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2093">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2093">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2094">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2094">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2095">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2095">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2096">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2096">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2097">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2097">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2098">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2098">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2099">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2099">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2100">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2100">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2101">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2101">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2102">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2102">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2103">這個範例假設`TestFile`是檔案，已寫入它使用資料的數行程式`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2103">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2104">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2104">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2105">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2105">Required.</span></span> <span data-ttu-id="474c0-2106">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2106">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2107">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2107">Required.</span></span> <span data-ttu-id="474c0-2108">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2108">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2109">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2110">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2110">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2111">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2111">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2112">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2112">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2113">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2113">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2114">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2114">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2115">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2115">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2116">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2116">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2117">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2117">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2118">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2118">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2119">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2119">Data</span></span>|<span data-ttu-id="474c0-2120">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2120">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2121">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2121">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2122">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2122">Empty</span></span>|  
|<span data-ttu-id="474c0-2123">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2123">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2124">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2124">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2125">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2125">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2126">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2126">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2127">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2127">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2128">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2128">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2129">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2129">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2130">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2130">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2131">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2131">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2132">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2132">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2133">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2133">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2134">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2134">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2135">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2135">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2136">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2136">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2137">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2137">Required.</span></span> <span data-ttu-id="474c0-2138">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2138">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2139">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2139">Required.</span></span> <span data-ttu-id="474c0-2140">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2140">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2141">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2141">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2142">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2142">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2143">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2144">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2145">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2145">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2146">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2146">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2147">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2147">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2148">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2148">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2149">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2149">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2150">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2150">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2151">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2151">Data</span></span>|<span data-ttu-id="474c0-2152">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2152">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2153">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2153">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2154">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2154">Empty</span></span>|  
|<span data-ttu-id="474c0-2155">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2155">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2156">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2156">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2157">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2157">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2158">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2158">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2159">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2159">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2160">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2160">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2161">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2161">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2162">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2162">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2163">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2163">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2164">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2164">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2165">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2165">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2166">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2166">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2167">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2167">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2168">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2168">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2169">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2169">Required.</span></span> <span data-ttu-id="474c0-2170">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2171">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2171">Required.</span></span> <span data-ttu-id="474c0-2172">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2172">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2173">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2173">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2174">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2174">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2175">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2175">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2176">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2176">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2177">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2177">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2178">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2178">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2179">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2179">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2180">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2180">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2181">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2181">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2182">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2182">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2183">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2183">Data</span></span>|<span data-ttu-id="474c0-2184">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2184">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2185">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2185">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2186">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2186">Empty</span></span>|  
|<span data-ttu-id="474c0-2187">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2187">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2188">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2188">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2189">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2189">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2190">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2190">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2191">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2191">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2192">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2192">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2193">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2193">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2194">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2194">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2195">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2195">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2196">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2196">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2197">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2197">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2198">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2198">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2199">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2199">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2200">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2200">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2201">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2201">Required.</span></span> <span data-ttu-id="474c0-2202">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2202">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2203">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2203">Required.</span></span> <span data-ttu-id="474c0-2204">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2204">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2205">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2205">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2206">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2206">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2207">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2207">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2208">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2208">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2209">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2209">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2210">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2210">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2211">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2211">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2212">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2212">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2213">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2213">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2214">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2214">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2215">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2215">Data</span></span>|<span data-ttu-id="474c0-2216">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2216">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2217">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2217">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2218">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2218">Empty</span></span>|  
|<span data-ttu-id="474c0-2219">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2219">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2220">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2220">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2221">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2221">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2222">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2222">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2223">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2223">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2224">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2224">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2225">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2225">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2226">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2226">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2227">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2227">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2228">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2228">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2229">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2229">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2230">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2230">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2231">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2231">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2232">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2232">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2233">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2233">Required.</span></span> <span data-ttu-id="474c0-2234">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2234">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2235">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2235">Required.</span></span> <span data-ttu-id="474c0-2236">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2236">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2237">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2237">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2238">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2238">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2239">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2239">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2240">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2240">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2241">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2241">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2242">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2242">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2243">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2243">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2244">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2244">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2245">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2245">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2246">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2246">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2247">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2247">Data</span></span>|<span data-ttu-id="474c0-2248">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2248">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2249">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2249">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2250">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2250">Empty</span></span>|  
|<span data-ttu-id="474c0-2251">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2251">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2252">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2252">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2253">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2253">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2254">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2254">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2255">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2255">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2256">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2256">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2257">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2257">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2258">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2258">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2259">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2259">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2260">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2260">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2261">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2261">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2262">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2262">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2263">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2263">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2264">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2264">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2265">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2265">Required.</span></span> <span data-ttu-id="474c0-2266">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2266">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2267">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2267">Required.</span></span> <span data-ttu-id="474c0-2268">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2268">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2269">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2269">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2270">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2270">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2271">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2271">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2272">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2272">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2273">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2273">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2274">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2274">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2275">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2275">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2276">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2276">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2277">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2277">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2278">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2278">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2279">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2279">Data</span></span>|<span data-ttu-id="474c0-2280">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2280">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2281">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2281">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2282">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2282">Empty</span></span>|  
|<span data-ttu-id="474c0-2283">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2283">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2284">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2284">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2285">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2285">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2286">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2286">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2287">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2287">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2288">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2288">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2289">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2289">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2290">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2290">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2291">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2291">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2292">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2292">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2293">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2293">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2294">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2294">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2295">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2295">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2296">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2296">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2297">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2297">Required.</span></span> <span data-ttu-id="474c0-2298">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2298">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2299">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2299">Required.</span></span> <span data-ttu-id="474c0-2300">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2300">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2301">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2301">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2302">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2302">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2303">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2303">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2304">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2304">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2305">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2305">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2306">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2306">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2307">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2307">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2308">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2308">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2309">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2309">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2310">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2310">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2311">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2311">Data</span></span>|<span data-ttu-id="474c0-2312">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2312">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2313">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2313">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2314">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2314">Empty</span></span>|  
|<span data-ttu-id="474c0-2315">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2315">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2316">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2316">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2317">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2317">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2318">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2318">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2319">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2319">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2320">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2320">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2321">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2321">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2322">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2322">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2323">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2323">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2324">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2324">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2325">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2325">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2326">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2326">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2327">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2327">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2328">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2328">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2329">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2329">Required.</span></span> <span data-ttu-id="474c0-2330">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2330">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2331">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2331">Required.</span></span> <span data-ttu-id="474c0-2332">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2332">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2333">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2333">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2334">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2334">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2335">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2335">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2336">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2336">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2337">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2337">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2338">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2338">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2339">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2339">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2340">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2340">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2341">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2341">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2342">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2342">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2343">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2343">Data</span></span>|<span data-ttu-id="474c0-2344">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2344">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2345">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2345">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2346">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2346">Empty</span></span>|  
|<span data-ttu-id="474c0-2347">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2347">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2348">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2348">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2349">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2349">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2350">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2350">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2351">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2351">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2352">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2352">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2353">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2353">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2354">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2354">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2355">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2355">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2356">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2356">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2357">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2357">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2358">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2358">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2359">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2359">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2360">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2361">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2361">Required.</span></span> <span data-ttu-id="474c0-2362">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2362">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2363">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2363">Required.</span></span> <span data-ttu-id="474c0-2364">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2364">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2365">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2365">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2366">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2366">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2367">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2367">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2368">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2368">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2369">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2369">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2370">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2370">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2371">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2371">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2372">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2372">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2373">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2373">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2374">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2374">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2375">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2375">Data</span></span>|<span data-ttu-id="474c0-2376">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2376">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2377">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2377">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2378">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2378">Empty</span></span>|  
|<span data-ttu-id="474c0-2379">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2379">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2380">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2380">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2381">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2381">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2382">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2382">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2383">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2383">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2384">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2384">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2385">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2385">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2386">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2386">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2387">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2387">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2388">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2388">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2389">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2389">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2390">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2390">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2391">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2391">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2392">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2392">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2393">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2393">Required.</span></span> <span data-ttu-id="474c0-2394">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2394">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="474c0-2395">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2395">Required.</span></span> <span data-ttu-id="474c0-2396">當變數所指派的值是讀自於檔案時，這些變數不可以是陣列或物件變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2396">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="474c0-2397">自開啟的循序檔中讀取資料，並將該資料指派至變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2397">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2398">`Input`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2398">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2399">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2399">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2400">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2400">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2401">資料讀取`Input`通常會先寫入至檔案使用`Write`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2401">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="474c0-2402">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2402">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2403">當從檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2403">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2404">例如，名為 Form1.vb 檔案可能無法在 Visual Basic 2005 原始程式檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2404">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="474c0-2405">讀取時，標準字串或數值資料會指派給變數，而不修改。</span><span class="sxs-lookup"><span data-stu-id="474c0-2405">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="474c0-2406">下表將說明如何處理其他輸入的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2406">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="474c0-2407">資料</span><span class="sxs-lookup"><span data-stu-id="474c0-2407">Data</span></span>|<span data-ttu-id="474c0-2408">指派給變數的值</span><span class="sxs-lookup"><span data-stu-id="474c0-2408">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="474c0-2409">用來分隔逗號或空白行</span><span class="sxs-lookup"><span data-stu-id="474c0-2409">Delimiting comma or blank line</span></span>|<span data-ttu-id="474c0-2410">Empty</span><span class="sxs-lookup"><span data-stu-id="474c0-2410">Empty</span></span>|  
|<span data-ttu-id="474c0-2411">#NULL#</span><span class="sxs-lookup"><span data-stu-id="474c0-2411">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="474c0-2412">#TRUE # 或 #FALSE #</span><span class="sxs-lookup"><span data-stu-id="474c0-2412">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="474c0-2413">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="474c0-2413">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="474c0-2414">日期和/或運算式所表示的時間</span><span class="sxs-lookup"><span data-stu-id="474c0-2414">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="474c0-2415">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="474c0-2415">#ERROR `errornumber`#</span></span>|<span data-ttu-id="474c0-2416">`errornumber` （變數會是標記為錯誤的物件）</span><span class="sxs-lookup"><span data-stu-id="474c0-2416">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="474c0-2417">如果在輸入資料的項目時，您會到達檔案結尾，輸入將停止，並發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2417">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2418">`Input`函式不會進行當地語系化。</span><span class="sxs-lookup"><span data-stu-id="474c0-2418">The `Input` function is not localized.</span></span> <span data-ttu-id="474c0-2419">例如，在德文版中，如果輸入 3,14159，它只會傳回 3，因為逗號會被視為變數做為小數點分隔符號而不是。</span><span class="sxs-lookup"><span data-stu-id="474c0-2419">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2420">從檔案讀取使用`Input`函式需要`Read`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2420">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2421">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2421">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2422">這個範例會使用`Input`函式可從檔案讀取資料到兩個變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2422">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="474c0-2423">這個範例假設`TestFile`是檔案，有數行的資料寫入使用`Write`函式中，每行包含在引號內，並以逗號分隔，例如數字的字串: ("Hello"，234)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2423">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2424">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2424">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2425">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2425">Required.</span></span> <span data-ttu-id="474c0-2426">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2426">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="474c0-2427">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2427">Required.</span></span> <span data-ttu-id="474c0-2428">任何有效的數值運算式，指定要讀取的字元數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2428">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="474c0-2429">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2429">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="474c0-2430">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2430">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="474c0-2431">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2431">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-2432">傳回 <see langword="String" /> 值，其中包含於 <see langword="Input" /> 或 <see langword="Binary" /> 模式下開啟之檔案中的字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2432">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="474c0-2433">相較於 <see langword="InputString" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2433">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2434">`InputString`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2434">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2435">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2435">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2436">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2436">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2437">資料讀取`InputString`函式通常會寫入至檔案使用`Print`或`FilePut`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2437">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="474c0-2438">此函式只適用於開啟的檔案`Input`或`Binary`模式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2438">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="474c0-2439">不同於`Input`函式，`InputString`函式會傳回讀取的字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2439">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="474c0-2440">這包括逗號、 換行字元、 換、 引號和前置空格。</span><span class="sxs-lookup"><span data-stu-id="474c0-2440">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="474c0-2441">開啟的檔案與`Binary`存取，嘗試讀取整個檔案使用`InputString`函式，直到`EOF`傳回`True`會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2441">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="474c0-2442">使用`LOF`和`Loc`函式，而不是`EOF`使用讀取二進位檔案時`InputString`，或使用`FileGet`當您使用`EOF`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2442">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2443">當從檔案讀取，請勿根據檔案名稱副檔名的檔案內容的安全性決策。</span><span class="sxs-lookup"><span data-stu-id="474c0-2443">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="474c0-2444">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2444">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2445">這個範例會使用`InputString`函式來一次從檔案讀取一個字元，並列印它`Output`視窗。</span><span class="sxs-lookup"><span data-stu-id="474c0-2445">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="474c0-2446">這個範例假設`MyFile`是有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2446">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="474c0-2447"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2447"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-2448"><paramref name="CharCount" /> &lt; 0 或 &gt; 214。</span><span class="sxs-lookup"><span data-stu-id="474c0-2448"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-2449">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2449">Required.</span></span> <span data-ttu-id="474c0-2450"><see langword="String" /> 運算式，指定要刪除的一個或多個檔案的名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-2450"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="474c0-2451"><c>PathName</c> 可包含目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2451"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="474c0-2452">從磁碟中刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2452">Deletes files from a disk.</span></span> <span data-ttu-id="474c0-2453">相較於 <see langword="Kill" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2453">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="474c0-2454">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2454">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2455">`Kill` 支援使用多個字元 (`*`) 和單一字元 (`?`) 萬用字元來指定多個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2455">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="474c0-2456">**安全性注意事項**才能執行，`Kill`函式需要`Read`和`PathDiscovery`旗標<xref:System.Security.Permissions.FileIOPermission>授與給執行的程式碼。</span><span class="sxs-lookup"><span data-stu-id="474c0-2456">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="474c0-2457">如需詳細資訊，請參閱<xref:System.Security.SecurityException>[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="474c0-2457">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2458">這個範例會使用`Kill`函式，從磁碟刪除檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2458">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2459">目標檔案已開啟。</span><span class="sxs-lookup"><span data-stu-id="474c0-2459">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-2460">找不到目標檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2460">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="474c0-2461">權限遭拒。</span><span class="sxs-lookup"><span data-stu-id="474c0-2461">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2462">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2462">Required.</span></span> <span data-ttu-id="474c0-2463">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2463">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2464">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2464">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="474c0-2465">從開啟的循序檔案中讀取單一行，並將它指派給 <see langword="String" /> 變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2465">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2466">`LineInput`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2466">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2467">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2467">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2468">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2468">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2469">資料讀取`LineInput`通常會先寫入至檔案使用`Print`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2469">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2470">時自檔案讀取，請勿根據檔案名稱副檔名的檔案來判斷內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2470">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="474c0-2471">例如，名為 Form1.vb 檔案可能無法 Visual Basic 來源檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2471">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="474c0-2472">`LineInput`函式會從檔案的一個字元讀取一次直到它遇到歸位字元 (`Chr(13)`) 或歸位字元/換 (`Chr(13) + Chr(10)`) 序列。</span><span class="sxs-lookup"><span data-stu-id="474c0-2472">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="474c0-2473">歸位字元 / 換行字元循序會略過而不是附加的字元字串。</span><span class="sxs-lookup"><span data-stu-id="474c0-2473">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2474">從檔案讀取使用`LineInput`函式需要`Read`從存取<xref:System.Security.Permissions.FileIOPermissionAccess>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2474">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2475">這個範例會使用`LineInput`函式來讀取一行從連續的檔案，並將它指派給變數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2475">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="474c0-2476">這個範例假設`TestFile`是有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2476">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="474c0-2477">已到達檔案結尾。</span><span class="sxs-lookup"><span data-stu-id="474c0-2477">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="474c0-2478"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2478"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2479">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2479">Required.</span></span> <span data-ttu-id="474c0-2480">任何有效的 <see langword="Integer" /> 檔案編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2480">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2481">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2481">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="474c0-2482">傳回 <see langword="Long" /> 值，指定開啟檔案中目前的讀取/寫入位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2482">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2483">`Loc`函式是以零為起始，則使用它來擷取檔案中的第一個位元組，則會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="474c0-2483">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="474c0-2484">`Loc`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2484">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2485">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2485">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2486">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2486">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2487">以下描述的傳回值為每個檔案存取模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2487">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="474c0-2488">模式</span><span class="sxs-lookup"><span data-stu-id="474c0-2488">Mode</span></span>|<span data-ttu-id="474c0-2489">傳回值</span><span class="sxs-lookup"><span data-stu-id="474c0-2489">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="474c0-2490">最後一筆記錄中讀取或寫入至檔案的數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2490">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="474c0-2491">除以 128 檔案中的目前位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2491">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="474c0-2492">不過，所傳回資訊`Loc`循序檔案尚未使用或必要的。</span><span class="sxs-lookup"><span data-stu-id="474c0-2492">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="474c0-2493">讀取或寫入的最後一個位元組的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2493">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2494">這個範例會使用`Loc`函數來傳回目前的讀取/寫入位置中開啟的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2494">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="474c0-2495">這個範例假設`MyFile`是有數行的範例資料的文字檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2495">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2496">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2496">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-2497">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2497">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2498"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2498">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2499">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2499">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2500">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2500">Required.</span></span> <span data-ttu-id="474c0-2501">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2501">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2502">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2502">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2503"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2503">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2504">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2504">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2505">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2505">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2506">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2506">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2507">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2507">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2508">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2508">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2509">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2509">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2510">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2510">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2511">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2511">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2512">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2512">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2513">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2513">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2514">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2514">Required.</span></span> <span data-ttu-id="474c0-2515">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2515">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="474c0-2516">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2516">Optional.</span></span> <span data-ttu-id="474c0-2517">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2517">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="474c0-2518">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2518">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2519"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2519">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2520">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2520">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2521">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2521">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2522">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2522">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2523">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2523">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2524">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2524">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2525">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2525">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2526">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2526">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2527">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2527">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2528">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2528">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2529">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2529">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2530">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2530">Required.</span></span> <span data-ttu-id="474c0-2531">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2531">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="474c0-2532">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2532">Optional.</span></span> <span data-ttu-id="474c0-2533">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2533">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="474c0-2534">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2534">Optional.</span></span> <span data-ttu-id="474c0-2535">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2535">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="474c0-2536">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2536">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2537"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2538">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2538">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2539">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2539">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2540">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2540">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2541">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2541">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2542">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2542">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2543">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2543">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2544">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2544">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2545">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2545">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2546">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2546">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2547">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2547">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2548">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2548">Required.</span></span> <span data-ttu-id="474c0-2549">包含有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2549">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2550">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2550">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2551">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2551">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="474c0-2552">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2552">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-2553">傳回 <see langword="Long" />，表示使用 <see langword="FileOpen" /> 函式開啟之檔案之大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2553">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2554">相較於 <see langword="LOF" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2554">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2555">使用`FileLen`函式可取得不是開啟的檔案的長度。</span><span class="sxs-lookup"><span data-stu-id="474c0-2555">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2556">這個範例會使用`LOF`函式來判斷開啟檔案的大小。</span><span class="sxs-lookup"><span data-stu-id="474c0-2556">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="474c0-2557">這個範例假設`TestFile`是文字檔案，其中包含範例資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2557">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2558">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2558">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="474c0-2559">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2559">Required.</span></span> <span data-ttu-id="474c0-2560"><see langword="String" /> 運算式，可識別要建立的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2560"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="474c0-2561"><c>Path</c> 可包含磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2561">The <c>Path</c> may include the drive.</span></span> <span data-ttu-id="474c0-2562">如果未指定磁碟機，則 <see langword="MkDir" /> 會在目前磁碟機上建立新目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2562">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="474c0-2563">建立新目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2563">Creates a new directory.</span></span> <span data-ttu-id="474c0-2564">相較於 <see langword="MkDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2564">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="474c0-2565">如需詳細資訊，請參閱<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2565">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2566">此函式會建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2566">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2567">這個範例會使用`MkDir`函式來建立目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2567">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="474c0-2568">如果未指定磁碟機，在目前的磁碟機上建立新的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2568">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-2569"><paramref name="Path" /> 尚未指定或是空的。</span><span class="sxs-lookup"><span data-stu-id="474c0-2569"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="474c0-2570">權限遭拒。</span><span class="sxs-lookup"><span data-stu-id="474c0-2570">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2571">目錄已經存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2571">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2572">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2572">Required.</span></span> <span data-ttu-id="474c0-2573">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2573">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="474c0-2574">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2574">Optional.</span></span> <span data-ttu-id="474c0-2575">要寫入檔案的零或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2575">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="474c0-2576"><c>Output</c> 引數設定為：</span><span class="sxs-lookup"><span data-stu-id="474c0-2576">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="474c0-2577"><see langword="T:System.IO.IOException" />︰檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2577"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="474c0-2578"><see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="474c0-2579">將顯示格式資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2579">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2580">`Print`和`PrintLine`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2580">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2581">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2581">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2582">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2582">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2583">`Print` 不包含行結尾處換行字元不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2583">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="474c0-2584">資料寫入與`Print`通常會從檔案讀取使用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2584">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="474c0-2585">如果您省略`Output`如`PrintLine`，列印一行空白行檔案; 以取得`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2585">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="474c0-2586">以逗號分隔的多個運算式將會對齊索引標籤的界限，而混合逗號和`TAB`可能會造成不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="474c0-2586">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="474c0-2587">如`Boolean`資料，在`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="474c0-2587">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="474c0-2588">`True`和`False`未經翻譯關鍵字，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2588">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="474c0-2589">日期資料寫入檔案中，使用您的系統能辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2589">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="474c0-2590">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2590">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="474c0-2591">不寫入至檔案如果`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2591">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="474c0-2592">不過，如果`Output`清單資料是`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2592">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="474c0-2593">如`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2593">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="474c0-2594">`Error`不論地區設定為何不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="474c0-2594">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="474c0-2595">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2595">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="474c0-2596">如果使用者想要使用多個地區設定，輸出資料，`Write`應使用。</span><span class="sxs-lookup"><span data-stu-id="474c0-2596">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="474c0-2597">寫入檔案，使用`Print`或`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2597">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2598">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2598">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2599">這個範例會使用`Print`和`PrintLine`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2599">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2600">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2600">Required.</span></span> <span data-ttu-id="474c0-2601">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2601">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="474c0-2602">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2602">Optional.</span></span> <span data-ttu-id="474c0-2603">要寫入檔案的零或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2603">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="474c0-2604"><c>Output</c> 引數設定為：</span><span class="sxs-lookup"><span data-stu-id="474c0-2604">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="474c0-2605"><see langword="T:System.IO.IOException" />︰檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2605"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="474c0-2606"><see langword="T:System.IO.IOException" />：<c>FileNumber</c> 成員不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="474c0-2607">將顯示格式資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2607">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2608">`Print`和`PrintLine`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2608">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2609">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2609">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2610">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2610">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2611">`Print` 不包含行結尾處換行字元不過，`PrintLine`包含換行字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2611">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="474c0-2612">資料寫入與`Print`通常會從檔案讀取使用`LineInput`或`Input`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2612">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="474c0-2613">如果您省略`Output`如`PrintLine`，列印一行空白行檔案; 以取得`Print`，沒有輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2613">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="474c0-2614">以逗號分隔的多個運算式將會對齊索引標籤的界限，而混合逗號和`TAB`可能會造成不一致的結果。</span><span class="sxs-lookup"><span data-stu-id="474c0-2614">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="474c0-2615">如`Boolean`資料，在`True`或`False`列印。</span><span class="sxs-lookup"><span data-stu-id="474c0-2615">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="474c0-2616">`True`和`False`未經翻譯關鍵字，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2616">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="474c0-2617">日期資料寫入檔案中，使用系統所能辨識的標準的簡短日期格式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2617">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="474c0-2618">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2618">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="474c0-2619">不寫入至檔案如果`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2619">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="474c0-2620">不過，如果`Output`清單資料是`DBNull`，`Null`寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2620">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="474c0-2621">如`Error`資料，輸出會顯示為`Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2621">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="474c0-2622">`Error`不論地區設定為何不會轉譯關鍵字。</span><span class="sxs-lookup"><span data-stu-id="474c0-2622">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="474c0-2623">寫入檔案中使用的所有資料`Print`是國際感知; 也就是資料已正確地格式化使用適當的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2623">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="474c0-2624">如果使用者想要使用多個地區設定，輸出資料，`Write`應使用。</span><span class="sxs-lookup"><span data-stu-id="474c0-2624">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="474c0-2625">寫入檔案，使用`Print`或`PrintLine`函式需要`Write`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2625">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2626">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2626">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2627">這個範例會使用`Print`和`PrintLine`函式將資料寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2627">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="474c0-2628">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2628">Required.</span></span> <span data-ttu-id="474c0-2629"><see langword="String" /> 運算式，指定現有的檔案名稱和位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2629"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="474c0-2630"><c>OldPath</c> 可包含檔案的目錄及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2630"><c>OldPath</c> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="474c0-2631">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2631">Required.</span></span> <span data-ttu-id="474c0-2632"><see langword="String" /> 運算式，指定新檔案的名稱和位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2632"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="474c0-2633"><c>NewPath</c> 可包含目的位置的目錄及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2633"><c>NewPath</c> may include directory and drive of the destination location.</span></span> <span data-ttu-id="474c0-2634"><c>NewPath</c> 指定的檔案名稱不能已經存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2634">The file name specified by <c>NewPath</c> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="474c0-2635">重新命名磁碟的檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2635">Renames a disk file or directory.</span></span> <span data-ttu-id="474c0-2636">相較於 <see langword="Rename" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2636">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="474c0-2637">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2637">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2638">`Rename`函式重新命名的檔案，並將它移到不同的目錄，如有必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2638">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="474c0-2639">`Rename`函式可以將檔案移到磁碟機，但它只能重新命名現有的目錄時同時`NewPath`和`OldPath`位於相同的磁碟機上。</span><span class="sxs-lookup"><span data-stu-id="474c0-2639">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="474c0-2640">`Rename` 無法建立新檔案或目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2640">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="474c0-2641">使用`Rename`開啟的檔案的函式會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2641">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="474c0-2642">您必須關閉開啟的檔案再重新命名它。</span><span class="sxs-lookup"><span data-stu-id="474c0-2642">You must close an open file before renaming it.</span></span> <span data-ttu-id="474c0-2643">`Rename` 引數不能包含多個字元 （\*） 和單一字元 （？） 的萬用字元。</span><span class="sxs-lookup"><span data-stu-id="474c0-2643">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="474c0-2644">當使用`Rename`將從受保護的位置將檔案複製到受保護的位置，檔案會保留較不受限的權限。</span><span class="sxs-lookup"><span data-stu-id="474c0-2644">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="474c0-2645">請檢查並確定沒有引入可能的安全性風險。</span><span class="sxs-lookup"><span data-stu-id="474c0-2645">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2646">這個範例會使用`Rename`函式，將檔案重新命名。</span><span class="sxs-lookup"><span data-stu-id="474c0-2646">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="474c0-2647">此範例的目的，假設已經指定的目錄存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2647">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="474c0-2648">路徑無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2648">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="474c0-2649"><paramref name="OldPath" /> 檔案不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2649"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2650">無法重新命名為不同的裝置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2650">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474c0-2651">關閉所有使用 <see langword="FileOpen" /> 函式開啟的磁碟檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2651">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2652">相較於 <see langword="Reset" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2652">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="474c0-2653">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2653">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2654">`Reset`函式會關閉所有開啟的作用中的檔案`FileOpen`函式，並擁有的相同功能與`FileClose()`不含任何參數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2654">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2655">這個範例會使用`Reset`函式來關閉所有開啟的檔案並寫入磁碟中的所有檔案緩衝區的內容。</span><span class="sxs-lookup"><span data-stu-id="474c0-2655">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="474c0-2656">請注意使用`Object`變數`FileNumber`做為字串和數字。</span><span class="sxs-lookup"><span data-stu-id="474c0-2656">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="474c0-2657">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2657">Required.</span></span> <span data-ttu-id="474c0-2658"><see langword="String" /> 運算式，可識別要移除的目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-2658"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="474c0-2659"><c>Path</c> 可包含磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2659"><c>Path</c> can include the drive.</span></span> <span data-ttu-id="474c0-2660">如果未指定磁碟機，則 <see langword="RmDir" /> 會移除目前磁碟機上的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2660">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="474c0-2661">移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2661">Removes an existing directory.</span></span> <span data-ttu-id="474c0-2662">相較於 <see langword="RmDir" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="474c0-2663">如需詳細資訊，請參閱<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2663">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2664">如果您嘗試使用，就會發生錯誤`RmDir`包含檔案的目錄上。</span><span class="sxs-lookup"><span data-stu-id="474c0-2664">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="474c0-2665">使用`Kill`函式來刪除所有檔案，然後再移除目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2665">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2666">這個範例會使用`RmDir`函式以移除現有的目錄。</span><span class="sxs-lookup"><span data-stu-id="474c0-2666">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-2667"><paramref name="Path" /> 尚未指定或是空的。</span><span class="sxs-lookup"><span data-stu-id="474c0-2667"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2668">目標目錄包含檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2668">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="474c0-2669">目錄不存在。</span><span class="sxs-lookup"><span data-stu-id="474c0-2669">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-2670">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2670">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2671">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2671">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="474c0-2672">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2672">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2673">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2673">Required.</span></span> <span data-ttu-id="474c0-2674">包含有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2674">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2675">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2675">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2676">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="474c0-2677">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="474c0-2678">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2678">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2679">`Seek` 傳回介於 1 到 2147483647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="474c0-2679">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="474c0-2680">以下描述的傳回值，每個檔案存取模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2680">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="474c0-2681">模式</span><span class="sxs-lookup"><span data-stu-id="474c0-2681">Mode</span></span>|<span data-ttu-id="474c0-2682">傳回值</span><span class="sxs-lookup"><span data-stu-id="474c0-2682">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="474c0-2683">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="474c0-2683">Number of the next record read or written</span></span>|  
|<span data-ttu-id="474c0-2684">`Binary`、`Input`、`Output``Append`</span><span class="sxs-lookup"><span data-stu-id="474c0-2684">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="474c0-2685">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2685">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2686">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-2686">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2687">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2687">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="474c0-2688">這個範例假設`TestFile`是包含結構的記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2688">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="474c0-2689">在 開啟檔案的`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2689">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="474c0-2690">檔案不是在模式中開啟`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2690">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2691">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2691">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="474c0-2692">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2692">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="474c0-2693">檔案不是在模式中開啟`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2693">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2694">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2695">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2695">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2696">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2696">Required.</span></span> <span data-ttu-id="474c0-2697">包含有效檔案編號的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2697">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="474c0-2698">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2698">Required.</span></span> <span data-ttu-id="474c0-2699">在 1–2,147,483,647 範圍之間的數字 (包括頭尾)，表示應該發生下一個讀取 / 寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2699">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="474c0-2700">傳回指定使用 <see langword="Long" /> 函式開啟的檔案中目前讀取/寫入位置的 <see langword="FileOpen" />，或設定使用 <see langword="FileOpen" /> 函式開啟的檔案中下一個讀取/寫入作業的位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2700">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="474c0-2701">相較於 <see langword="Seek" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2701">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="474c0-2702">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2702">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2703">`Seek` 傳回介於 1 到 2147483647 之間的值 (相當於 2 ^31-1) 之間，內含。</span><span class="sxs-lookup"><span data-stu-id="474c0-2703">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="474c0-2704">以下描述的傳回值，每個檔案存取模式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2704">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="474c0-2705">模式</span><span class="sxs-lookup"><span data-stu-id="474c0-2705">Mode</span></span>|<span data-ttu-id="474c0-2706">傳回值</span><span class="sxs-lookup"><span data-stu-id="474c0-2706">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="474c0-2707">下一個記錄讀取或寫入的數目</span><span class="sxs-lookup"><span data-stu-id="474c0-2707">Number of the next record read or written</span></span>|  
|<span data-ttu-id="474c0-2708">`Binary`、`Input`、`Output``Append`</span><span class="sxs-lookup"><span data-stu-id="474c0-2708">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="474c0-2709">下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2709">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2710">在檔案中的第一個位元組位於位置 1，第二個位元組是在位置 2，以此類推。</span><span class="sxs-lookup"><span data-stu-id="474c0-2710">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2711">這個範例會使用`Seek`函數來傳回目前的檔案位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2711">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="474c0-2712">這個範例假設`TestFile`是包含結構的記錄檔`Record`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2712">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="474c0-2713">在 開啟檔案的`Random`模式中，`Seek`傳回下一筆記錄的數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2713">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="474c0-2714">檔案不是在模式中開啟`Random`模式中，`Seek`傳回下一項作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2714">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2715">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2715">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="474c0-2716">這個範例會使用`Seek`函式，以將位置設定下一個要讀取或寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2716">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="474c0-2717">檔案不是在模式中開啟`Random`模式中，`Seek`設定下一個作業就會發生的位元組位置。</span><span class="sxs-lookup"><span data-stu-id="474c0-2717">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="474c0-2718">假設`TestFile`是包含幾行文字的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2718">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2719">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2719">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="474c0-2720">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2720">Required.</span></span> <span data-ttu-id="474c0-2721">指定檔名的 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2721"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="474c0-2722"><c>PathName</c> 可包含目錄或資料夾及磁碟機。</span><span class="sxs-lookup"><span data-stu-id="474c0-2722"><c>PathName</c> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="474c0-2723">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2723">Required.</span></span> <span data-ttu-id="474c0-2724">常數或數值運算式，其總和可以表示檔案屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2724">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="474c0-2725">設定檔案的屬性 (Attribute) 資訊。</span><span class="sxs-lookup"><span data-stu-id="474c0-2725">Sets attribute information for a file.</span></span> <span data-ttu-id="474c0-2726">相較於 <see langword="SetAttr" />，<see langword="My" /> 功能可提升檔案 I/O 作業的產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2726">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="474c0-2727">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2727">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2728">如果您嘗試設定開啟檔案的屬性，就會發生執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="474c0-2728">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="474c0-2729">`Attributes`引數的列舉值如下：</span><span class="sxs-lookup"><span data-stu-id="474c0-2729">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="474c0-2730">值</span><span class="sxs-lookup"><span data-stu-id="474c0-2730">Value</span></span>|<span data-ttu-id="474c0-2731">常數</span><span class="sxs-lookup"><span data-stu-id="474c0-2731">Constant</span></span>|<span data-ttu-id="474c0-2732">描述</span><span class="sxs-lookup"><span data-stu-id="474c0-2732">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="474c0-2733">標準 （預設值）。</span><span class="sxs-lookup"><span data-stu-id="474c0-2733">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="474c0-2734">唯讀。</span><span class="sxs-lookup"><span data-stu-id="474c0-2734">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="474c0-2735">隱藏。</span><span class="sxs-lookup"><span data-stu-id="474c0-2735">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="474c0-2736">系統檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2736">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="474c0-2737">磁碟區標籤</span><span class="sxs-lookup"><span data-stu-id="474c0-2737">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="474c0-2738">目錄或資料夾。</span><span class="sxs-lookup"><span data-stu-id="474c0-2738">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="474c0-2739">前次備份之後，檔案已經有了變更。</span><span class="sxs-lookup"><span data-stu-id="474c0-2739">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="474c0-2740">檔案有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="474c0-2740">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2741">這些列舉類型 (Enumeration) 是由 Visual Basic 語言所指定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2741">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="474c0-2742">名稱可以用在您的程式碼，而非實際值的處。</span><span class="sxs-lookup"><span data-stu-id="474c0-2742">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2743">這個範例會使用`SetAttr`函式可設定檔案的屬性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2743">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="474c0-2744"><paramref name="Attribute" /> 類型無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2744"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="474c0-2745">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2745">Required.</span></span> <span data-ttu-id="474c0-2746">在顯示或列印清單中的下一個運算式之前所要插入的空格數。</span><span class="sxs-lookup"><span data-stu-id="474c0-2746">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="474c0-2747">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2747">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="474c0-2748">搭配 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式使用，以定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2748">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2749">如果`Count`少於輸出線條寬度下, 一個列印位置立即遵循的列印的空格數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2749">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="474c0-2750">如果`Count`大於輸出的行寬，`SPC`計算下一步的列印位置，使用的公式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2750">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="474c0-2751">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="474c0-2751">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="474c0-2752">例如，當目前的列印位置為 24，輸出線條寬度為 80，並且您指定`SPC(90)`下, 一個列印將會開始於位置 34 （目前的列印位置 + 90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="474c0-2752">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="474c0-2753">如果目前的列印位置而輸出線條的寬度之間的差異小於`Count`(或`Count` `Mod` *寬度*)、`SPC`函式會跳到下一行的開頭，並產生空間等於`Count`– (*寬度*– *currentprintposition*)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2753">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2754">請確定您的表格式資料行的寬度不足以容納寬字母。</span><span class="sxs-lookup"><span data-stu-id="474c0-2754">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2755">這個範例會使用`SPC`函式，將輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="474c0-2755">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-2756">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2756">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="474c0-2757">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2757">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="474c0-2758">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2759">如果目前的行上目前的列印位置大於`Column`，`TAB`會跳到資料行的值等於`Column`在下一行中輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2759">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="474c0-2760">如果`Column`小於 1，`TAB`的列印位置移至資料行 1。</span><span class="sxs-lookup"><span data-stu-id="474c0-2760">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="474c0-2761">如果`Column`大於輸出的行寬，`TAB`計算下一步的列印位置，使用的公式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2761">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="474c0-2762">資料行 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="474c0-2762">Column Mod width</span></span>  
  
 <span data-ttu-id="474c0-2763">例如，如果*寬度*為 80，而且您指定`TAB(90)`下, 一個列印會開始資料行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="474c0-2763">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="474c0-2764">如果`Column`小於目前的列印位置，列印在下一行導出的位置開始。</span><span class="sxs-lookup"><span data-stu-id="474c0-2764">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="474c0-2765">如果導出的列印位置大於目前的列印位置，列印會在導出列印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="474c0-2765">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="474c0-2766">在輸出行上最左邊的列印位置永遠為 1。</span><span class="sxs-lookup"><span data-stu-id="474c0-2766">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="474c0-2767">當您使用`Print`或`PrintLine`函數來列印至檔案，最右邊的列印位置是您可以使用設定輸出檔的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2767">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="474c0-2768">`TAB`函式也可用以`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2768">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="474c0-2769">它不能與<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2769">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2770">請確定您的表格式資料行的寬度不足以包含寬的字母。</span><span class="sxs-lookup"><span data-stu-id="474c0-2770">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2771">這個範例會使用`TAB`函式，將輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="474c0-2771">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="474c0-2772">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2772">Optional.</span></span> <span data-ttu-id="474c0-2773">在顯示或列印清單中的下一個運算式之前所要移至的欄位編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2773">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="474c0-2774">如果省略，則 <see langword="TAB" /> 會將插入點移到下一個列印區 (Print Zone) 的開頭。</span><span class="sxs-lookup"><span data-stu-id="474c0-2774">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="474c0-2775">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2775">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="474c0-2776">配合 <see langword="Print" /> 或 <see langword="PrintLine" /> 函式用於定位輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2776">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2777">如果目前的行上目前的列印位置大於`Column`，`TAB`會跳到資料行的值等於`Column`在下一行中輸出。</span><span class="sxs-lookup"><span data-stu-id="474c0-2777">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="474c0-2778">如果`Column`小於 1，`TAB`的列印位置移至資料行 1。</span><span class="sxs-lookup"><span data-stu-id="474c0-2778">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="474c0-2779">如果`Column`大於輸出的行寬，`TAB`計算下一步的列印位置，使用的公式：</span><span class="sxs-lookup"><span data-stu-id="474c0-2779">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="474c0-2780">資料行 Mod 寬度</span><span class="sxs-lookup"><span data-stu-id="474c0-2780">Column Mod width</span></span>  
  
 <span data-ttu-id="474c0-2781">例如，如果*寬度*為 80，而且您指定`TAB(90)`下, 一個列印會開始資料行 10 （90/80 的餘數）。</span><span class="sxs-lookup"><span data-stu-id="474c0-2781">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="474c0-2782">如果`Column`小於目前的列印位置，列印在下一行導出的位置開始。</span><span class="sxs-lookup"><span data-stu-id="474c0-2782">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="474c0-2783">如果導出的列印位置大於目前的列印位置，列印會在導出列印位置在同一行。</span><span class="sxs-lookup"><span data-stu-id="474c0-2783">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="474c0-2784">在輸出行上最左邊的列印位置永遠為 1。</span><span class="sxs-lookup"><span data-stu-id="474c0-2784">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="474c0-2785">當您使用`Print`或`PrintLine`函數來列印至檔案，最右邊的列印位置是您可以使用設定輸出檔的目前寬度`FileWidth`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2785">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="474c0-2786">`TAB`函式也可用以`WriteLine`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2786">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="474c0-2787">它不能與<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2787">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="474c0-2788">請確定您的表格式資料行的寬度不足以包含寬的字母。</span><span class="sxs-lookup"><span data-stu-id="474c0-2788">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2789">這個範例會使用`TAB`函式，將輸出檔案中，然後在**輸出**視窗。</span><span class="sxs-lookup"><span data-stu-id="474c0-2789">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="474c0-2790">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2791"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2792">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2793">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2793">Required.</span></span> <span data-ttu-id="474c0-2794">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2794">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="474c0-2795">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2795">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2796"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2797">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2798">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2798">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2799">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2799">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2800">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2800">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2801">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2801">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2802">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2802">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2803">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2803">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2804">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2804">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2805">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2805">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2806">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2806">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2807">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2807">Required.</span></span> <span data-ttu-id="474c0-2808">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2808">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="474c0-2809">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2809">Optional.</span></span> <span data-ttu-id="474c0-2810">要鎖定或解除鎖定的唯一資料錄或位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2810">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="474c0-2811">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2811">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2812"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2812">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2813">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2813">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2814">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2814">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2815">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2815">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2816">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2816">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2817">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2817">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2818">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2818">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2819">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2819">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2820">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2820">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2821">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2821">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2822">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2822">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2823">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2823">Required.</span></span> <span data-ttu-id="474c0-2824">任何有效的檔案數目。</span><span class="sxs-lookup"><span data-stu-id="474c0-2824">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="474c0-2825">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2825">Optional.</span></span> <span data-ttu-id="474c0-2826">要鎖定或解除鎖定的第一筆資料錄或第一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2826">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="474c0-2827">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2827">Optional.</span></span> <span data-ttu-id="474c0-2828">要鎖定或解除鎖定的最後一筆資料錄或最後一個位元組的編號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2828">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="474c0-2829">控制項由其他處理序存取以 <see langword="Open" /> 函式開啟的整個或部分檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2829">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="474c0-2830"><see langword="My" /> 功能提供比 <see langword="Lock" /> 和 <see langword="Unlock" /> 更優越的檔案 I/O 作業產能和效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="474c0-2831">如需詳細資訊，請參閱<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="474c0-2831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2832">`Lock`和`Unlock`函式適用於環境中，數個程序可能需要存取相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2832">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="474c0-2833">`Lock` 和`Unlock`函式一律會以配對。</span><span class="sxs-lookup"><span data-stu-id="474c0-2833">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="474c0-2834">引數`Lock`和`Unlock`必須相同。</span><span class="sxs-lookup"><span data-stu-id="474c0-2834">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="474c0-2835">如果`Record`，或`FromRecord`和`ToRecord`所未提供，鎖定將會是整個檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2835">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="474c0-2836">如果`Record`單獨指定的單一資料錄將會鎖定/解除鎖定。</span><span class="sxs-lookup"><span data-stu-id="474c0-2836">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="474c0-2837">如果已開啟檔案的循序輸入或輸出，`Lock`和`Unlock`會影響整個檔案，而不論所指定的範圍`FromRecord`和`ToRecord`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2837">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2838">此範例說明如何使用`Lock`和`Unlock`函式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2838">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="474c0-2839">這個範例假設`People.txt`是包含結構的記錄檔`Person`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2839">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2840">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2841">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2841">Required.</span></span> <span data-ttu-id="474c0-2842">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2842">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="474c0-2843">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2843">Optional.</span></span> <span data-ttu-id="474c0-2844">要寫入檔案的一或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2844">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="474c0-2845">將資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2845">Writes data to a sequential file.</span></span> <span data-ttu-id="474c0-2846">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-2846">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2847">`Write`和`WriteLine`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2847">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2848">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2848">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2849">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2849">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2850">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2850">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="474c0-2851">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2851">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="474c0-2852">不同於`Print`函式，`Write`函式插入項目和引號括住的字串之間的逗號，當寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2852">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="474c0-2853">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2853">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="474c0-2854">當`Write`用來將資料寫入至檔案，只是數值， `Boolean`，日期、 null、 和`Error`資料格式都受到支援。</span><span class="sxs-lookup"><span data-stu-id="474c0-2854">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="474c0-2855">因此資料一律可以讀取並正確解譯使用，會遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="474c0-2855">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="474c0-2856">寫入的數值資料使用句號當做十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2856">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="474c0-2857">如`Boolean`資料，在`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="474c0-2857">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="474c0-2858">`True`和`False`未經翻譯關鍵字，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2858">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="474c0-2859">日期資料會寫入至檔案使用通用的日期格式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2859">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="474c0-2860">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2860">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="474c0-2861">不寫入至檔案如果`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2861">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="474c0-2862">不過，對於 null 的資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="474c0-2862">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="474c0-2863">如`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2863">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="474c0-2864">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2864">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="474c0-2865">`WriteLine` 插入新行字元 (也就是歸位字元/換，或`Chr(13) + Chr(10)`)、 撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2865">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="474c0-2866">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="474c0-2866">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="474c0-2867">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="474c0-2867">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="474c0-2868">傳回值是字串`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2868">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="474c0-2869">寫入檔案，使用`Write`或`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2869">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2870">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2870">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2871">這個範例會使用`Write`函式，將原始資料寫入至循序檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2871">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="474c0-2872">檔案模式無效。</span><span class="sxs-lookup"><span data-stu-id="474c0-2872">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="474c0-2873">必要。</span><span class="sxs-lookup"><span data-stu-id="474c0-2873">Required.</span></span> <span data-ttu-id="474c0-2874">包含任何有效檔案數目的 <see langword="Integer" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2874">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="474c0-2875">選擇性。</span><span class="sxs-lookup"><span data-stu-id="474c0-2875">Optional.</span></span> <span data-ttu-id="474c0-2876">要寫入檔案的一或多個逗點分隔運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2876">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="474c0-2877">將資料寫入循序檔。</span><span class="sxs-lookup"><span data-stu-id="474c0-2877">Writes data to a sequential file.</span></span> <span data-ttu-id="474c0-2878">使用 <see langword="Write" /> 寫入的資料，通常會透過使用 <see langword="Input" /> 從檔案讀取。</span><span class="sxs-lookup"><span data-stu-id="474c0-2878">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="474c0-2879">`Write`和`WriteLine`函式提供回溯相容性，而且可能會影響效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2879">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="474c0-2880">對於非傳統應用程式，`My.Computer.FileSystem`物件提供更佳的效能。</span><span class="sxs-lookup"><span data-stu-id="474c0-2880">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="474c0-2881">如需詳細資訊，請參閱[使用 Visual Basic 檔案存取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)。</span><span class="sxs-lookup"><span data-stu-id="474c0-2881">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="474c0-2882">如果您省略`Output`，空白的線條會列印到檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2882">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="474c0-2883">可以以逗號分隔的多個運算式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2883">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="474c0-2884">不同於`Print`函式，`Write`函式插入項目和引號括住的字串之間的逗號，當寫入檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2884">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="474c0-2885">您沒有在清單中放置明確的分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2885">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="474c0-2886">當`Write`用來將資料寫入至檔案，只是數值， `Boolean`，日期、 null、 和`Error`資料格式都受到支援。</span><span class="sxs-lookup"><span data-stu-id="474c0-2886">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="474c0-2887">因此資料一律可以讀取並正確解譯使用，會遵循下列通用假設`Input`，而不論地區設定：</span><span class="sxs-lookup"><span data-stu-id="474c0-2887">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="474c0-2888">寫入的數值資料使用句號當做十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="474c0-2888">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="474c0-2889">如`Boolean`資料，在`#TRUE#`或`#FALSE#`列印。</span><span class="sxs-lookup"><span data-stu-id="474c0-2889">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="474c0-2890">`True`和`False`未經翻譯關鍵字，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2890">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="474c0-2891">日期資料會寫入至檔案使用通用的日期格式。</span><span class="sxs-lookup"><span data-stu-id="474c0-2891">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="474c0-2892">當日期或時間的元件遺失或為零時，只提供部分寫入至檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2892">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="474c0-2893">不寫入至檔案如果`Output`是空的資料。</span><span class="sxs-lookup"><span data-stu-id="474c0-2893">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="474c0-2894">不過，對於 null 的資料，`#NULL#`寫入。</span><span class="sxs-lookup"><span data-stu-id="474c0-2894">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="474c0-2895">如`Error`資料，輸出會顯示為`#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2895">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="474c0-2896">`Error`關鍵字不會轉譯，不論地區設定為何。</span><span class="sxs-lookup"><span data-stu-id="474c0-2896">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="474c0-2897">`WriteLine` 插入新行字元 (也就是歸位字元/換，或`Chr(13) + Chr(10)`)、 撰寫最後一個字元之後`Output`檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2897">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="474c0-2898">您也可以使用雙引號括住，在字串中內嵌引號或""。</span><span class="sxs-lookup"><span data-stu-id="474c0-2898">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="474c0-2899">例如，套用至物件的</span><span class="sxs-lookup"><span data-stu-id="474c0-2899">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="474c0-2900">傳回值是字串`Double quotation marks aren't "difficult" to handle`。</span><span class="sxs-lookup"><span data-stu-id="474c0-2900">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="474c0-2901">寫入檔案，使用`Write`或`WriteLine`函式需要`Append`從存取`FileIOPermissionAccess`列舉型別。</span><span class="sxs-lookup"><span data-stu-id="474c0-2901">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="474c0-2902">如需詳細資訊，請參閱<xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="474c0-2902">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="474c0-2903">這個範例會使用`Write`函式，將原始資料寫入至循序檔案。</span><span class="sxs-lookup"><span data-stu-id="474c0-2903">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>