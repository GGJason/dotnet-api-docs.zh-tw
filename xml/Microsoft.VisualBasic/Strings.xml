<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d280d7091deccbfedb3ef79e964a4134a7f6da28" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52206106" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Strings" /> 模組包含用來執行字串作業的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和操作字串的執行階段程式庫成員。  
  
   
  
## Examples  
 下列範例示範如何在其空間將字串分隔。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">關鍵字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 執行階段程式庫成員</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必要。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 運算式。 如果 <paramref name="String" /> 為 <see langword="String" /> 運算式，則只有字串的第一個字元才會用於輸入。 如果 <paramref name="String" /> 為 <see langword="Nothing" /> 或者不包含任何字元，則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 會傳回*字碼指標*，或輸入字元的字元碼。 這可以是 0 到 255，單一位元組字元集 (sbcs) 的值介於-32768 到 32767 之間任一雙位元組字集 (DBCS) 的值。  
  
 `AscW` 傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和程式碼頁面設定無關。  
  
> [!NOTE]
>  `AscB`舊版的 Visual Basic 的函式會傳回一個位元組，而不是字元的程式碼。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`AscB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Asc`函數來傳回`Integer`字元對應至每個字串中的第一個字母的代碼。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必要。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 運算式。 如果 <paramref name="String" /> 為 <see langword="String" /> 運算式，則只有字串的第一個字元才會用於輸入。 如果 <paramref name="String" /> 為 <see langword="Nothing" /> 或者不包含任何字元，則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 會傳回*字碼指標*，或輸入字元的字元碼。 這可以是 0 到 255，單一位元組字元集 (sbcs) 的值介於-32768 到 32767 之間任一雙位元組字集 (DBCS) 的值。  
  
 `AscW` 傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和程式碼頁面設定無關。  
  
> [!NOTE]
>  `AscB`舊版的 Visual Basic 的函式會傳回一個位元組，而不是字元的程式碼。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`AscB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Asc`函數來傳回`Integer`字元對應至每個字串中的第一個字母的代碼。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函式 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必要。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 運算式。 如果 <paramref name="String" /> 為 <see langword="String" /> 運算式，則只有字串的第一個字元才會用於輸入。 如果 <paramref name="String" /> 為 <see langword="Nothing" /> 或者不包含任何字元，則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 會傳回*字碼指標*，或輸入字元的字元碼。 這可以是 0 到 255，單一位元組字元集 (sbcs) 的值介於-32768 到 32767 之間任一雙位元組字集 (DBCS) 的值。  
  
 `AscW` 傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和程式碼頁面設定無關。  
  
> [!NOTE]
>  `AscB`舊版的 Visual Basic 的函式會傳回一個位元組，而不是字元的程式碼。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`AscB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Asc`函數來傳回`Integer`字元對應至每個字串中的第一個字母的代碼。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必要。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 運算式。 如果 <paramref name="String" /> 為 <see langword="String" /> 運算式，則只有字串的第一個字元才會用於輸入。 如果 <paramref name="String" /> 為 <see langword="Nothing" /> 或者不包含任何字元，則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示對應至字元的字元碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 會傳回*字碼指標*，或輸入字元的字元碼。 這可以是 0 到 255，單一位元組字元集 (sbcs) 的值介於-32768 到 32767 之間任一雙位元組字集 (DBCS) 的值。  
  
 `AscW` 傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和程式碼頁面設定無關。  
  
> [!NOTE]
>  `AscB`舊版的 Visual Basic 的函式會傳回一個位元組，而不是字元的程式碼。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`AscB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Asc`函數來傳回`Integer`字元對應至每個字串中的第一個字母的代碼。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">函式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必要。 <see langword="Integer" /> 運算式，表示字元的<c>字碼指標</c>或字元碼。</param>
        <summary>傳回與指定的字元碼關聯的字元。</summary>
        <returns>傳回與指定的字元碼關聯的字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非對稱式的範圍所接受`CharCode`儲存體之間的差異會補償`Short`而`Integer`。 比方說，是-29183`Short`但 +36353 `Integer`。 這也能與 Visual Basic 6.0 的相容性。  
  
 `Chr` 會使用<xref:System.Text.Encoding>類別中<xref:System.Text?displayProperty=nameWithType>命名空間，以判斷目前的執行緒是否使用單一位元組字元集 (SBCS) 或雙位元組字集 (DBCS)。 然後`CharCode`為程式碼指向適當的集合。 此範圍可以是 0 到 255 的 SBCS 字元-32768 到 65535 DBCS 字元。  
  
 傳回的值取決於目前的執行緒中包含的字碼頁<xref:System.Globalization.TextInfo.ANSICodePage%2A>的屬性<xref:System.Globalization.TextInfo>類別中<xref:System.Globalization>命名空間。 您可以取得<xref:System.Globalization.TextInfo.ANSICodePage%2A>藉由指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。  
  
 `ChrW` 採用`CharCode`做為 Unicode 字碼指標。 範圍是目前執行緒的文化特性和字碼頁設定獨立的。 範圍為-32768 到-1 的值會視為相同 32768 到 + 65535 的範圍中的值。  
  
 從 0 到 31 的數字是標準非可列印的 ASCII 碼相同。 比方說，`Chr(10)`傳回換行字元。  
  
> [!NOTE]
>  `ChrB`在舊版的 Visual Basic 中的函式會傳回單一位元組。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 和.NET Framework 中的所有字串都會以 Unicode，和`ChrB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Chr`函式，傳回與指定的字元碼相關聯的字元。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">針對 <see langword="Chr" /> 為 <paramref name="CharCode" /> &lt; 0 或 &gt; 255。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必要。 <see langword="Integer" /> 運算式，表示字元的<c>字碼指標</c>或字元碼。</param>
        <summary>傳回與指定的字元碼關聯的字元。</summary>
        <returns>傳回與指定的字元碼關聯的字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非對稱式的範圍所接受`CharCode`儲存體之間的差異會補償`Short`而`Integer`。 比方說，是-29183`Short`但 +36353 `Integer`。 這也能與 Visual Basic 6.0 的相容性。  
  
 `Chr` 會使用<xref:System.Text.Encoding>類別中<xref:System.Text?displayProperty=nameWithType>命名空間，以判斷目前的執行緒是否使用單一位元組字元集 (SBCS) 或雙位元組字集 (DBCS)。 然後`CharCode`為程式碼指向適當的集合。 此範圍可以是 0 到 255 的 SBCS 字元-32768 到 65535 DBCS 字元。  
  
 傳回的值取決於目前的執行緒中包含的字碼頁<xref:System.Globalization.TextInfo.ANSICodePage%2A>的屬性<xref:System.Globalization.TextInfo>類別中<xref:System.Globalization>命名空間。 您可以取得<xref:System.Globalization.TextInfo.ANSICodePage%2A>藉由指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。  
  
 `ChrW` 採用`CharCode`做為 Unicode 字碼指標。 範圍是目前執行緒的文化特性和字碼頁設定獨立的。 範圍為-32768 到-1 的值會視為相同 32768 到 + 65535 的範圍中的值。  
  
 從 0 到 31 的數字是標準非可列印的 ASCII 碼相同。 比方說，`Chr(10)`傳回換行字元。  
  
> [!NOTE]
>  `ChrB`在舊版的 Visual Basic 中的函式會傳回單一位元組。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 和.NET Framework 中的所有字串都會以 Unicode，和`ChrB`不受支援。  
  
   
  
## Examples  
 下列範例會使用`Chr`函式，傳回與指定的字元碼相關聯的字元。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">針對 <see langword="ChrW" /> 為 <paramref name="CharCode" /> &lt; -32768 或 &gt; 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回以零起始的陣列，其中包含以指定篩選準則為依據的 <see langword="String" /> 陣列子集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必要。 要搜尋的一維字串陣列。</param>
        <param name="Match">必要。 要搜尋的字串。</param>
        <param name="Include">選擇性。 <see langword="Boolean" /> 值，表示是否要傳回包含或排除 <paramref name="Match" /> 的子字串。 如果 <paramref name="Include" /> 為 <see langword="True" />，則 <see langword="Filter" /> 函式會傳回包含 <paramref name="Match" /> 做為子字串的陣列子集。 如果 <paramref name="Include" /> 為 <see langword="False" />，則 <see langword="Filter" /> 函式會傳回未包含 <paramref name="Match" /> 做為子字串的陣列子集。</param>
        <param name="Compare">選擇性。 數值，表示要使用的字串比較類型。 如需有關值的資訊，請參閱＜設定＞。</param>
        <summary>傳回以零起始的陣列，其中包含以指定篩選準則為依據的 <see langword="String" /> 陣列子集。</summary>
        <returns>傳回以零起始的陣列，其中包含以指定篩選準則為依據的 <see langword="String" /> 陣列子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有相符的`Match`內找到`Source`，則`Filter`函式會傳回空陣列。 如果發生錯誤`Source`設為`Nothing`或不是一維陣列。  
  
 所傳回的陣列`Filter`函式僅包含足夠項目包含相符的項目數目。  
  
 `Compare`引數可以是下列值。  
  
|常數|描述|  
|-|-|  
|常數|描述|  
|`CompareMethod.Binary`|執行二進位比較|  
|`CompareMethod.Text`|執行文字比較|  
  
   
  
## Examples  
 此範例示範如何使用`Filter`函式。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> 是 <see langword="Nothing" /> 或不是一維陣列。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必要。 要搜尋的一維字串陣列。</param>
        <param name="Match">必要。 要搜尋的字串。</param>
        <param name="Include">選擇性。 <see langword="Boolean" /> 值，表示是否要傳回包含或排除 <paramref name="Match" /> 的子字串。 如果 <paramref name="Include" /> 為 <see langword="True" />，則 <see langword="Filter" /> 函式會傳回包含 <paramref name="Match" /> 做為子字串的陣列子集。 如果 <paramref name="Include" /> 為 <see langword="False" />，則 <see langword="Filter" /> 函式會傳回未包含 <paramref name="Match" /> 做為子字串的陣列子集。</param>
        <param name="Compare">選擇性。 數值，表示要使用的字串比較類型。 如需有關值的資訊，請參閱＜設定＞。</param>
        <summary>傳回以零起始的陣列，其中包含以指定篩選準則為依據的 <see langword="String" /> 陣列子集。</summary>
        <returns>傳回以零起始的陣列，其中包含以指定篩選準則為依據的 <see langword="String" /> 陣列子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有相符的`Match`內找到`Source`，則`Filter`函式會傳回空陣列。 如果發生錯誤`Source`設為`Nothing`或不是一維陣列。  
  
 所傳回的陣列`Filter`函式僅包含足夠項目包含相符的項目數目。  
  
 `Compare`引數可以是下列值。  
  
|常數|描述|  
|-|-|  
|`CompareMethod.Binary`|執行二進位比較|  
|`CompareMethod.Text`|執行文字比較|  
  
   
  
## Examples  
 此範例示範如何使用`Filter`函式。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> 是 <see langword="Nothing" /> 或不是一維陣列。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 任何有效的運算式。</param>
        <param name="Style">選擇性。 有效的具名或使用者定義的格式 <see langword="String" /> 運算式。</param>
        <summary>傳回字串，其格式化方式是根據格式 <see langword="String" /> 運算式內包含的指令。</summary>
        <returns>傳回字串，其格式化方式是根據格式 <see langword="String" /> 運算式內包含的指令。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType>方法也會提供類似的功能。  
  
 如果您要格式化的未當地語系化的數字字串，您應該使用使用者定義數值格式，以確保您取得想要的外觀。  
  
 如果您嘗試將數字格式而不指定`Style`，則`Format`函式會提供類似的功能`Str`函式，雖然它是國際感知。 不過，正值的數字格式化成使用的字串`Format`函式不包含前置空格保留正負號的值; 這些轉換使用`Str`函式會保留前置空格。  
  
## <a name="different-formats-for-different-numeric-values"></a>不同的格式，為不同的數值的  
 數字的使用者定義的格式運算式可以有一至三個以分號分隔的區段。 如果`Style`引數`Format`函式包含其中一個預先定義數值格式，則允許只有一個區段。  
  
|如果您使用|這是結果|  
|-|-|  
|只有一個區段|格式運算式套用至所有值。|  
|兩個區段|第一個區段套用至正值和零;第二個適用於負數值。|  
|三個區段|第一個區段套用至正值、 負值，適用於第二個和第三個適用於零值。|  
  
 下列範例有兩個區段： 第一個定義正值和零; 值的格式第二個區段定義負值的格式。 由於`Style`引數`Format`函式會接受字串，它用引號括住。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 如果您幾個分號而它們之間沒有任何東西，遺漏的區段會列印使用正值的格式。 比方說，下列格式顯示正值和負值值 使用第一個區段中的格式，並且顯示`Zero`如果值為零。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>預先定義數值格式  
 下表會識別預先定義數值格式名稱。 這些可能會使用名稱做為`Style`引數`Format`函式：  
  
|格式名稱|描述|  
|-|-|  
|`General Number`、 `G`或 `g`|顯示數字，且沒有千位分隔符號。<br /><br /> 例如，`Format(&H3FA, "g")`傳回`1018`。|  
|`Currency`、 `C`或 `c`|使用千分位分隔符號，會顯示數字，如果適當;在小數點分隔符號的右邊顯示兩位數。 輸出根據系統地區設定。<br /><br /> 例如，`Format(1234567, "c")`傳回`$1,234,567.00`。|  
|`Fixed`、 `F`或 `f`|在小數點分隔符號的右邊，會顯示至少一個數字向左和兩位數。<br /><br /> 例如，`Format(1234567, "f")`傳回`1234567.00`。|  
|`Standard`、 `N`或 `n`|在小數點分隔符號的右邊顯示千位分隔符號，左邊的至少一個數字與兩位數的數字。<br /><br /> 例如，`Format(1234567, "n")`傳回`1,234,567.00`。|  
|`Percent`|顯示乘以 100 百分比符號 （%），立即在右邊加上; 在小數點分隔符號的右邊永遠顯示兩位數。<br /><br /> 例如，`Format(0.4744, "Percent")`傳回`47.44%`。|  
|`P`或 `p`|會顯示含有千位分隔符號，乘以 100 百分比符號 （%），用單一空格來附加至正確的和分隔的數字; 在小數點分隔符號的右邊永遠顯示兩位數。<br /><br /> 例如，`Format(0.80345, "p")`傳回`80.35 %`。|  
|`Scientific`|使用標準科學記號標記法，提供兩個有效位數。<br /><br /> 例如，`Format(1234567, "Scientific")`傳回`1.23E+06`。|  
|`E`或 `e`|使用標準科學記號標記法，提供六個有效位數。<br /><br /> 例如，`Format(1234567, "e")`傳回`1.234567e+006`。|  
|`D`或 `d`|包含值的十進位 (基底 10) 格式的數字的字串顯示數字。 整數類資料類型支援此選項 (`Byte`， `Short`， `Integer`， `Long`) 只。<br /><br /> 例如，`Format(&H7F, "d")`傳回`127`。|  
|`X`或 `x`|包含值的十六進位 (基底 16) 格式的數字的字串顯示數字。 整數類資料類型支援此選項 (`Byte`， `Short`， `Integer`， `Long`) 只。<br /><br /> 例如，`Format(127, "x")`傳回`7f`。|  
|`Yes/No`|會顯示`No`數字為 0，否則為，如果會顯示`Yes`。<br /><br /> 例如，`Format(0, "Yes/No")`傳回`No`。|  
|`True/False`|會顯示`False`數字為 0，否則為，如果會顯示`True`。<br /><br /> 例如，`Format(1, "True/False")`傳回`True`。|  
|`On/Off`|會顯示`Off`數字為 0，否則為，如果會顯示`On`。<br /><br /> 例如，`Format(1, "On/Off")`傳回`On`。|  
  
### <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Yes/No`， `True/False`，和`On/Off`不支援格式。  
  
## <a name="user-defined-numeric-formats"></a>使用者定義數值格式  
 下表列出可用來建立使用者定義的數字格式的字元。 這些可能用來建置`Style`引數`Format`函式：  
  
|字元|描述|  
|-|-|  
|無|顯示沒有格式的數字。|  
|(`0`)|數字預留位置。 顯示數字或零。 如果運算式在格式字串中零出現的位置有一個數字，則會顯示;否則，會顯示在該位置為零。<br /><br /> 如果此數字較少的字位數比會是零 （在的小數點任何一邊） 格式的運算式，會顯示前置或尾端零。 如果此數字位數比在小數點分隔符號的右邊，有格式運算式小數點右邊的零四捨五入數量一樣多的小數位數為零。 如果此數字位數比在小數點分隔符號的左邊有格式運算式小數點左邊零顯示未經修改的額外位數。|  
|(`#`)|數字預留位置。 顯示數字或零。 如果運算式的位置有數字其中`#`字元會出現在格式字串，它會顯示; 否則會執行任何動作顯示在該位置。<br /><br /> 這個符號的運作方式類似`0`數字預留位置，但前置和尾端零不會顯示如果此數字的位數，比有`#`格式運算式在小數點分隔符號的任一邊的字元。|  
|(`.`)|小數預留位置。 小數預留位置可決定小數點左側和右側顯示多少位數。 如果格式運算式僅包含`#`這個符號左邊的字元; 小於 1 開頭的小數點的數字。 若要顯示前置零，小數的數字，使用零做為小數點分隔符號的左邊，第一個數字預留位置。 在某些地區設定中，使用逗號作為小數分隔符號。 做為小數預留位置，在格式化輸出中實際的字元取決於您的系統可辨識的數字格式。 因此，您應該使用句號做為小數預留位置格式中即使您是使用逗號做為小數預留位置的地區設定中。 格式化的字串會出現在正確的地區設定格式。|  
|(`%`)|百分比預留位置。 將運算式乘以 100。 百分比字元 (`%`) 會插入格式字串中出現的位置。|  
|(`,`)|千位分隔符號。 千位分隔符號隔開百四個以上的地方，可以在小數點分隔符號的左邊的數字。 在指定千位分隔符號的標準用法如果格式中包含的千位分隔符號括住數字預留位置 (`0`或`#`)。<br /><br /> 千位分隔符號左邊或最右邊的小數分隔符號 （指定小數） 表示字串中字元 「 延展數字除以 1000，來進位，視。 」 為顯示數字小於 1,000 但大於或等於 500 `1`，和數字小於 500 顯示為`0`。 在這個位置中的兩個相鄰千位分隔符號的 1 百萬個和另一個因素為 1,000 個每個額外的分隔符號來調整。<br /><br /> 以外任何位置，在小數點分隔符號的左邊或右邊的位置，在字串中的多個分隔符號都會直接視為指定要使用千位分隔符號。 在某些地區設定，用句點做為千位分隔符號。 做為千位分隔符號，在格式化輸出中實際的字元取決於您的系統可辨識的數字格式。 因此，您應該使用逗號做為千位分隔符號格式中即使您是使用句點作為千位分隔符號的地區設定。 格式化的字串會出現在正確的地區設定格式。<br /><br /> 例如，請考慮下列的三個格式字串：<br /><br /> -   `"#,0."`將數值 100 萬個格式化為字串"100,000,000"哪些使用千位分隔符號。<br />-   `"#0,."`是使用一千倍來格式化數字 100 萬個做為字串"100000"。<br />-   `"#,0,."`哪些使用千位分隔符號和以一千做為字串"100,000"格式化數字 100 萬。|  
|(`:`)|時間分隔符號。 在某些地區設定中，您可能使用其他字元來代表時間分隔符號。 時間分隔符號區隔小時、 分鐘和秒數會在格式化時間值時。 實際使用做為時間分隔符號，在格式化輸出中的字元取決於您的系統設定。|  
|(`/`)|日期分隔符號。 在某些地區設定中，您可能使用其他字元來代表日期分隔符號。 日期分隔符號區隔會在格式化日期值時日、 月和年。 實際格式化輸出中的日期分隔符號使用的字元取決於您的系統設定。|  
|(`E-``E+``e-``e+`)|科學格式。 如果格式運算式包含至少一個數字預留位置 (`0`或`#`) 的左邊`E-`， `E+`， `e-`，或`e+`，號碼會顯示在科學格式和`E`或`e`數目及其指數之間插入。 左邊的數字預留位置的數目會決定指數中的數字數目。 使用`E-`或`e-`放置負指數旁邊的減號。 使用`E+`或`e+`放置負指數旁邊的減號和正指數旁邊的加號。 您也必須包含這個符號右邊，以取得正確的格式的數字預留位置。|  
|`-` `+` `$` ( )|常值字元。 這些字元會完全按照輸入格式字串中顯示。 若要顯示未在所列其中一項，前面加上反斜線 (`\`) 或將它括在雙引號 ("")。|  
|(`\`)|顯示格式字串中的下一個字元。 若要顯示的字元有特殊義意的常值字元，前面加上反斜線 (`\`)。 反斜線本身不會顯示。 使用反斜線就是以雙引號括住的下一個字元。 若要顯示一個反斜線，請使用兩個反斜線 (`\\`)。<br /><br /> 範例的常值的字元都格式化的日期和時間格式字元無法顯示的字元 (`a`， `c`， `d`， `h`， `m`， `n`， `p`， `q`， `s`， `t`， `w`， `y`， `/`，以及`:`)，數值格式字元 (`#`， `0`， `%`， `E`， `e`，逗號和句號)，並將字串格式字元 (`@`， `&`， `<`， `>`，和`!`)。|  
|(`"``ABC``"`)|顯示雙引號內的字串 ("")。 若要從程式碼中的樣式引數中包含字串，您必須使用`Chr(34)`括住的文字 (`34`是引號 （"） 的字元程式碼)。|  
  
### <a name="legacy-code-example"></a>舊版程式碼範例  
 下表包含數字的範例格式的運算式。 （這些範例全都會假設您的系統地區設定是英文-美國）第一個資料行包含格式字串`Style`引數`Format`函式; 如果格式化的資料具有欄標題中指定的值包含所產生的輸出的資料行。  
  
|格式 (`Style`)|"5"格式化為|"5"格式化為|"0.5"格式化為|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>預先定義的日期/時間格式  
 下表會識別預先定義的日期和時間格式名稱。 這些可能會使用依名稱的樣式引數為`Format`函式：  
  
|格式名稱|描述|  
|-|-|  
|`General Date`或 `G`|顯示日期和/或時間。 例如，`3/12/2008 11:07:31 AM`。 日期顯示取決於您的應用程式目前的文化特性值。|  
|`Long Date`、 `Medium Date`或 `D`|根據目前文化特性的完整日期格式日期格式顯示。 例如，`Wednesday, March 12, 2008`。|  
|`Short Date`或 `d`|顯示使用目前文化特性的簡短日期格式的日期。 例如，`3/12/2008`。<br /><br /> `d`字元會顯示在使用者定義的日期格式的日期。|  
|`Long Time`、 `Medium Time`或 `T`|使用目前文化特性的完整時間格式; 來顯示時間通常包含時、 分和秒。 例如，`11:07:31 AM`。|  
|`Short Time` 或 `t`|顯示使用目前文化特性的簡短時間格式的時間。 例如，`11:07 AM`。<br /><br /> `t`字元會顯示`AM`或`PM`以使用者定義的時間格式使用 12 小時制的地區設定的值。|  
|`f`|顯示完整日期和簡短時間，根據目前文化特性的格式。 例如，`Wednesday, March 12, 2008 11:07 AM`。|  
|`F`|顯示完整日期和長的時間，根據目前文化特性的格式。 例如，`Wednesday, March 12, 2008 11:07:31 AM`。|  
|`g`|顯示簡短日期和簡短時間，根據目前文化特性的格式。 例如，`3/12/2008 11:07 AM`。|  
|`M`、 `m`|顯示的月份和日期的日。 例如，`March 12`。<br /><br /> `M`字元會以使用者定義的日期格式顯示月份。 `m`字元會以使用者定義的時間格式顯示分鐘。|  
|`R`、 `r`|根據日期格式化<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>屬性。 例如，`Wed, 12 Mar 2008 11:07:31 GMT`。 格式化的日期不需要調整日期和時間值。 您必須調整為 GMT 日期/時間值，然後再呼叫`Format`函式。|  
|`s`|格式化的日期和時間做為可排序的索引。 例如，`2008-03-12T11:07:31`。<br /><br /> `s`字元會以使用者定義的時間格式顯示秒。|  
|`u`|日期及時間格式化為 GMT 可排序的索引。 例如，`2008-03-12 11:07:31Z`。|  
|`U`|格式化日期和時間很長的日期和長的時間為 GMT。 例如，`Wednesday, March 12, 2008 6:07:31 PM`。|  
|`Y`、 `y`|將日期格式化為年份和月份。 例如，`March, 2008`。<br /><br /> `Y`和`y`字元以使用者定義的日期格式顯示年份。|  
  
 如需應用程式的目前文化特性資訊的詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
## <a name="user-defined-datetime-formats"></a>使用者定義日期/時間格式  
 下表顯示的字元，您可以用來建立使用者定義日期/時間格式。 不同於在舊版的 Visual Basic 中，這些格式的字元會區分大小寫。  
  
|字元|描述|  
|-|-|  
|(`:`)|時間分隔符號。 在某些地區設定中，您可能使用其他字元來代表時間分隔符號。 時間分隔符號區隔小時、 分鐘和秒數會在格式化時間值時。 使用做為時間分隔符號，在格式化輸出中實際的字元取決於您的應用程式目前的文化特性值。|  
|(`/`)|日期分隔符號。 在某些地區設定中，您可能使用其他字元來代表日期分隔符號。 日期分隔符號區隔會在格式化日期值時日、 月和年。 做為日期分隔符號，在格式化輸出中實際的字元取決於您的應用程式目前的文化特性。|  
|(`%`)|用來表示接下來的字元應該會顯示單一字母格式，而不考慮任何結尾的字母。 也用來指示將單一字母格式讀取做為使用者定義的格式。 請參閱以下的其他詳細資料。|  
|`d`|將日期顯示為沒有前置零的數字 (例如`1`)。 使用`%d`如果這是使用者定義數值格式中唯一的字元。|  
|`dd`|將日期顯示為有前置零的數字 (例如`01`)。|  
|`ddd`|將日期顯示為縮寫 (例如`Sun`)。|  
|`dddd`|將日期顯示為完整名稱 (例如`Sunday`)。|  
|`M`|將月份顯示為沒有前置零的數字 (例如，以表示一月`1`)。 使用`%M`如果這是使用者定義數值格式中唯一的字元。|  
|`MM`|將月份顯示為有前置零的數字 (例如`01/12/01`)。|  
|`MMM`|將月份顯示為縮寫 (例如`Jan`)。|  
|`MMMM`|將月份顯示為完整月份名稱 (例如`January`)。|  
|`gg`|顯示期間/紀元字串 (例如`A.D.`)。|  
|`h`|沒有前置零使用 12 小時制，將小時顯示為 數字 (例如`1:15:15 PM`)。 使用`%h`如果這是使用者定義數值格式中唯一的字元。|  
|`hh`|將小時顯示為開頭使用 12 小時制的零的數字 (例如`01:15:15 PM`)。|  
|`H`|沒有前置零使用 24 小時制，將小時顯示為 數字 (例如`1:15:15`)。 使用`%H`如果這是使用者定義數值格式中唯一的字元。|  
|`HH`|將小時顯示為開頭使用 24 小時制的零的數字 (例如`01:15:15`)。|  
|`m`|表示為數字顯示分鐘，沒有前置零 (比方說， `12:1:15`)。 使用`%m`如果這是使用者定義數值格式中唯一的字元。|  
|`mm`|將分鐘顯示為有前置零的數字 (例如`12:01:15`)。|  
|`s`|沒有前置零的數字顯示第二個 (比方說， `12:15:5`)。 使用`%s`如果這是使用者定義數值格式中唯一的字元。|  
|`ss`|開頭為零的數字顯示第二個 (比方說， `12:15:05`)。|  
|`f`|顯示秒的小數。 比方說`ff`會顯示百分之一秒，而則`ffff`顯示萬分之一秒。 您可以使用最多七個`f`使用者定義格式中的符號。 使用`%f`如果這是使用者定義數值格式中唯一的字元。|  
|`t`|使用 12 小時制，並顯示大寫`A`正午之前的任何小時顯示大寫`P`介於正午與 11:59 P.M 之間的任何小時 使用`%t`如果這是使用者定義數值格式中唯一的字元。|  
|`tt`|針對使用 12 小時制的地區設定，顯示大寫`AM`正午之前顯示大寫`PM`介於正午與 11:59 P.M 之間的任何小時使用<br /><br /> 針對使用 24 小時制的地區設定，則不顯示。|  
|`y`|顯示沒有前置零的年份數字 (0-9)。 使用`%y`如果這是使用者定義數值格式中唯一的字元。|  
|`yy`|如果適用的話，請以有前置零，兩位數數值格式顯示年份。|  
|`yyy`|將年份顯示四位數的數值格式中。|  
|`yyyy`|將年份顯示四位數的數值格式中。|  
|`z`|以無前置零的時區時差顯示為 (比方說， `-8`)。 使用`%z`如果這是使用者定義數值格式中唯一的字元。|  
|`zz`|顯示以有前置零的時區時差 (例如`-08`)|  
|`zzz`|顯示完整的時區時差 (例如`-08:00`)|  
  
### <a name="legacy-code-example"></a>舊版程式碼範例  
 以下是使用者定義的日期和時間格式的範例`December 7, 1958, 8:50 PM, 35 seconds`:  
  
|格式|顯示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 裝置的最小時間解析是由裝置製造商決定。 如果裝置的時間解析會粗略，`f`格式字元會傳回 0，當該裝置上執行。  
  
   
  
## Examples  
 此範例將示範 `Format` 函式的各種使用方式，以透過 `String` 格式及使用者定義的格式，將值格式化。 對於日期分隔符號 (`/`)、時間分隔符號 (`:`) 和 AM/PM 指示器 (`t` 和 `tt`) 而言，系統顯示的實際格式化輸出需視程式碼使用的地區設定而定。 當時間和日期顯示在開發環境內時，會使用程式碼地區設定的簡短時間格式和簡短日期格式。  
  
> [!NOTE]
>  若為使用 24 小時制的地區設定，AM/PM 指示器 (`t` 和 `tt`) 不會顯示任何內容。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 要格式化的運算式。</param>
        <param name="NumDigitsAfterDecimal">選擇性。 數值，表示小數點右邊要顯示多少位。 預設值為 –1，表示要使用電腦的地區設定。</param>
        <param name="IncludeLeadingDigit">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 列舉，表示是否要顯示小數值前面的零。 如需值，請參閱＜備註＞。</param>
        <param name="UseParensForNegativeNumbers">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 列舉，表示是否要將負值放在括號內。 如需值，請參閱＜備註＞。</param>
        <param name="GroupDigits">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 列舉，表示是否使用電腦的地區設定中指定之群組分隔符號將數字分組。 如需值，請參閱＜備註＞。</param>
        <summary>使用 [系統] 控制台中定義的貨幣符號，傳回格式化成貨幣值的運算式。</summary>
        <returns>使用 [系統] 控制台中定義的貨幣符號，傳回格式化成貨幣值的運算式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當省略選擇性的一或多個引數時，會改用的電腦相符的地區設定值。  
  
 相對於貨幣值的貨幣符號的位置取決於系統的地區設定。  
  
> [!NOTE]
>  所有的設定資訊是來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 不過，它可能會變更以程式設計方式使用.NET Framework 中，但前置零，則來自`Number` 索引標籤。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數採用下列 Tri-state 列舉值。  
  
|值|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|電腦的地區設定|  
  
   
  
## Examples  
 下面範例說明如何使用 `FormatCurrency` 函式：  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小數點後的數字超過 99 個。</exception>
        <exception cref="T:System.InvalidCastException">型別不是數字。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 要格式化的 <see langword="Date" /> 運算式。</param>
        <param name="NamedFormat">選擇性。 數值，表示使用的日期/時間格式。 如果省略，則會使用 <see langword="DateFormat.GeneralDate" />。</param>
        <summary>傳回表示日期/時間值的字串運算式。</summary>
        <returns>傳回表示日期/時間值的字串運算式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`資料型別一定會包含日期和時間資訊。 基於型別轉換的詳細資訊，Visual Basic 會考慮 1/1/1 (1 年的 1 年) 是中性的值必須是中性的值時間的日期和 00:00:00 （午夜）。 如果您格式化`Date`值為日期/時間字串，`FormatDateTime`不產生的字串中包含中性的值。 例如，如果您將轉換 #1/1/0001 9:30:00 # 字串時，結果會是 「 上午 9:30:00";已隱藏的日期資訊。 不過，日期資訊是仍會出現在原始`Date`值，而且可以使用函式這類復原`DatePart`。  
  
> [!NOTE]
>  如果您傳遞`Expression`做為引數`String`常值`FormatDateTime`解譯它根據<xref:System.Globalization.CultureInfo.CurrentCulture%2A>設定您的應用程式。 不過，如果您將它傳遞為`Date`常值中，使用格式 #mm/dd/yyyy # 中，因為`FormatDateTime`一律會解譯`Date`根據英文 （美國） 文化特性的常值。 這是必要的因為如果應用程式開發，並使用自動程式化`Date`常值從一個文化特性，但有不同的文化特性，平台上執行`Date`常值可能不正確剖析。  
  
 `NamedFormat`引數具有下列設定。  
  
|常數|描述|  
|-|-|  
|`DateFormat.GeneralDate`|顯示日期和/或時間。 顯示為簡短日期的日期部分。 如果沒有時間部分，則會顯示為長的時間。 如果有的話，便會顯示這兩個部分。|  
|`DateFormat.LongDate`|顯示使用電腦的地區設定中指定的長日期格式的日期。|  
|`DateFormat.ShortDate`|顯示使用電腦的地區設定中指定的簡短日期格式的日期。|  
|`DateFormat.LongTime`|顯示使用電腦的地區設定中指定的時間格式的時間。|  
|`DateFormat.ShortTime`|顯示使用 24 小時制格式 (hh: mm) 的時間。|  
  
   
  
## Examples  
 此範例示範如何使用`FormatDateTime`函式。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> 設定無效。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 要格式化的運算式。</param>
        <param name="NumDigitsAfterDecimal">選擇性。 數值，表示小數點右邊要顯示多少位。 預設值為 –1，表示要使用電腦的地區設定。</param>
        <param name="IncludeLeadingDigit">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，表示是否要顯示小數值的前置 0 字元。 如需有關值的資訊，請參閱＜設定＞。</param>
        <param name="UseParensForNegativeNumbers">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，表示是否要將負值放在括號內。 如需有關值的資訊，請參閱＜設定＞。</param>
        <param name="GroupDigits">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，指出是否使用地區設定中指定的群組分隔符號將數字分組。 如需有關值的資訊，請參閱＜設定＞。</param>
        <summary>傳回格式化成數字的運算式。</summary>
        <returns>傳回格式化成數字的運算式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當一或多個選擇性引數會略過由地區設定提供省略的引數的值。  
  
> [!NOTE]
>  所有的設定資訊是來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 但是，它可能會變更以程式設計方式使用的.NET Framework。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數具有下列設定。  
  
|常數|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|電腦的地區設定|  
  
   
  
## Examples  
 此範例示範`FormatNumber`函式。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型別不是數字。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 要格式化的運算式。</param>
        <param name="NumDigitsAfterDecimal">選擇性。 會顯示數字值，指出小數點右邊顯示多少位數。 預設值為 – 1，表示使用的地區設定。</param>
        <param name="IncludeLeadingDigit">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，指出分數值是否顯示前置的零。 如需有關值的資訊，請參閱＜設定＞。</param>
        <param name="UseParensForNegativeNumbers">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，指出是否應將負值放在括號內。 如需有關值的資訊，請參閱＜設定＞。</param>
        <param name="GroupDigits">選擇性。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常數，指出是否使用地區設定中指定的群組分隔符號將數字分組。 如需有關值的資訊，請參閱＜設定＞。</param>
        <summary>傳回格式化為百分比 (也就是乘以 100) 且尾端包含 % 字元的運算式。</summary>
        <returns>傳回格式化為百分比 (也就是乘以 100) 且尾端包含 % 字元的運算式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當一或多個選擇性引數會略過時，省略的引數的值會提供由地區設定。  
  
> [!NOTE]
>  所有的設定資訊是來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 但是，它可能會變更以程式設計方式使用的.NET Framework。  
  
 `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數具有下列設定。  
  
|常數|描述|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|電腦的地區設定|  
  
   
  
## Examples  
 此範例說明如何使用`FormatPercent`函式。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型別不是數字。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <param name="Index">必要。 <see langword="Integer" /> 運算式。 所要傳回之 <paramref name="str" /> 中的字元 (以 1 起始) 索引。</param>
        <summary>傳回 <see langword="Char" /> 值，表示提供的字串內指定之索引的字元。</summary>
        <returns>
          <see langword="Char" /> 值，表示提供的字串內指定之索引的字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Index`小於 1 或大於最後一個字元的索引`str`、`ArgumentException`就會擲回。  
  
   
  
## Examples  
 此範例示範如何使用`GetChar`函式來傳回從指定的索引中的字元`String`。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> 是 <see langword="Nothing" />、<paramref name="Index" /> &lt; 1，或 <paramref name="Index" /> 大於 <paramref name="str" /> 之最後一個字元的索引。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回整數，指定一個字串在另一個字串內第一次出現的起始位置。  如果找到符合項目，則整數是以一起始的索引。  如果找到相符項目，則函式傳回零。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必要。 正在搜尋的 <see langword="String" /> 運算式。</param>
        <param name="String2">必要。 找到的 <see langword="String" /> 運算式。</param>
        <param name="Compare">選擇性。 指定字串比較的類型。 如果省略了 <paramref name="Compare" />，則 <see langword="Option Compare" /> 設定可決定比較的類型。</param>
        <summary>傳回整數，指定一個字串在另一個字串內第一次出現的起始位置。</summary>
        <returns>
          <list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 會傳回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的長度為零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的長度為零或 <see langword="Nothing" /></term>
              <description> 搜尋的起始位置，預設為第一個字元位置。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 找不到。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 符合開始的位置 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，`InStr`剖析字串時，會使用函式。  
  
> [!NOTE]
>  `InStrB`在舊版的 Visual Basic 中的函式傳回的位元組，而不是字元位置數目。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`InStrB`不受支援。  
  
 `Compare` 引數設定為︰  
  
|常數|值|描述|  
|-|-|-|  
|`Binary`|0|執行二進位比較|  
|`Text`|1|執行文字比較|  
  
   
  
## Examples  
 此範例使用 `InStr` 函式傳回某個字串在另一個字串中第一次出現的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 陳述式</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">選擇性。 數值運算式，可設定每一個搜尋的開始位置。 如果省略，則搜尋會從第一個字元位置開始。 起始索引是以 1 起始的。</param>
        <param name="String1">必要。 正在搜尋的 <see langword="String" /> 運算式。</param>
        <param name="String2">必要。 找到的 <see langword="String" /> 運算式。</param>
        <param name="Compare">選擇性。 指定字串比較的類型。 如果省略了 <paramref name="Compare" />，則 <see langword="Option Compare" /> 設定可決定比較的類型。</param>
        <summary>傳回整數，指定一個字串在另一個字串內第一次出現的起始位置。</summary>
        <returns>
          <list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 會傳回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的長度為零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的長度為零或 <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 找不到。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 符合開始的位置 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; <paramref name="String1" /> 的長度</term>
              <description> 0 
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，`InStr`剖析字串時，會使用函式。  
  
> [!NOTE]
>  `InStrB`在舊版的 Visual Basic 中的函式傳回的位元組，而不是字元位置數目。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 Visual Basic 2005 的所有字串都會以 Unicode，和`InStrB`不受支援。  
  
 `Compare` 引數設定為︰  
  
|常數|值|描述|  
|-|-|-|  
|`Binary`|0|執行二進位比較|  
|`Text`|1|執行文字比較|  
  
   
  
## Examples  
 此範例使用 `InStr` 函式傳回某個字串在另一個字串中第一次出現的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 陳述式</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必要。 正在搜尋的字串運算式。</param>
        <param name="StringMatch">必要。 正在搜尋的字串運算式。</param>
        <param name="Start">選擇性。 為每一個搜尋設定以 1 起始的位置之數值運算式，從字串的左邊開始。 如果省略 <paramref name="Start" />，則會使用 –1，表示搜尋會從最後一個字元位置開始。 從右到左進行的搜尋。</param>
        <param name="Compare">選擇性。 數值，表示在評估子字串時要使用的比較類型。 如果省略，則會執行二進位比較。 請參閱數值的設定。</param>
        <summary>傳回某個字串在另一個字串中第一次出現的位置，從字串的右邊開始。</summary>
        <returns>
          <list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStrRev 會傳回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> 的長度為零 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 的長度為零 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 找不到。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 中找到 <paramref name="StringCheck" /></term>
              <description> 找到第一個符合項目的位置，從字串的右邊開始。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 大於 <paramref name="StringMatch" /> 的長度</term>
              <description> 0 
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，語法`InStrRev`函式不是相同的語法`InStr`函式。  
  
 `Compare`引數可以是下列值。  
  
|常數|描述|  
|-|-|  
|`Binary`|執行二進位比較。|  
|`Text`|執行文字比較。|  
  
   
  
## Examples  
 此範例示範如何使用`InStrRev`函式。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 或 <paramref name="Start" /> &lt; -1。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回結合包含在陣列中幾個子字串所建立的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必要。 一維陣列，包含要結合的子字串。</param>
        <param name="Delimiter">選擇性。 用來分隔傳回字串內的子字串之任何字串。 如果省略，則會使用空白字元 (" ")。 如果 <paramref name="Delimiter" /> 是長度為零的字串 ("") 或 <see langword="Nothing" />，則清單中的所有項目都會與非分隔符號串連。</param>
        <summary>傳回結合包含在陣列中幾個子字串所建立的字串。</summary>
        <returns>傳回結合包含在陣列中幾個子字串所建立的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 沒有之間的同位`Join`和`Split`函式。 `Join`函式接受字串陣列，並結合使用分隔符號字串，以傳回單一字串。 `Split`函式會使用字串，並分隔在分隔符號，以傳回字串陣列。 不過，主要差異在於`Join`可以串連字串，使用任何分隔符號的字串、`Split`只可以分開使用單一字元分隔符號的字串。  
  
   
  
## Examples  
 下列範例示範如何使用`Join`函式來建立數個字串的清單。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> 不是一維。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必要。 一維陣列，包含要結合的子字串。</param>
        <param name="Delimiter">選擇性。 用來分隔傳回字串內的子字串之任何字串。 如果省略，則會使用空白字元 (" ")。 如果 <paramref name="Delimiter" /> 是長度為零的字串 ("") 或 <see langword="Nothing" />，則清單中的所有項目都會與非分隔符號串連。</param>
        <summary>傳回結合包含在陣列中幾個子字串所建立的字串。</summary>
        <returns>傳回結合包含在陣列中幾個子字串所建立的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 沒有之間的同位`Join`和`Split`函式。 `Join`函式接受字串陣列，並結合使用分隔符號字串，以傳回單一字串。 `Split`函式會使用字串，並分隔在分隔符號，以傳回字串陣列。 不過，主要差異在於`Join`可以串連字串，使用任何分隔符號的字串、`Split`只可以分開使用單一字元分隔符號的字串。  
  
   
  
## Examples  
 下列範例示範如何使用`Join`函式來建立數個字串的清單。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> 不是一維。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回已轉換成小寫的字串或字元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必要。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 運算式。</param>
        <summary>傳回已轉換成小寫的字串或字元。</summary>
        <returns>傳回已轉換成小寫的字串或字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 僅有大寫的字母會轉換為小寫;所有小寫字母和 nonletter 字元都保持不變。  
  
 管理字串，使大小寫變更所適用的地區設定中使用應用程式時，此函數會使用應用程式的文化特性資訊。  
  
> [!IMPORTANT]
>  如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則作業應該使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，然後傳遞<xref:System.StringComparison.Ordinal>或是<xref:System.StringComparison.OrdinalIgnoreCase>如`comparisonType`引數。 如需詳細資訊，請參閱 <<c0> [ 如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 這個範例會使用`LCase`函式來傳回字串的小寫版本。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必要。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 運算式。</param>
        <summary>傳回已轉換成小寫的字串或字元。</summary>
        <returns>傳回已轉換成小寫的字串或字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 僅有大寫的字母會轉換為小寫;所有小寫字母和 nonletter 字元都保持不變。  
  
 管理字串，使大小寫變更所適用的地區設定中使用應用程式時，此函數會使用應用程式的文化特性資訊。  
  
> [!IMPORTANT]
>  如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則作業應該使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，然後傳遞<xref:System.StringComparison.Ordinal>或是<xref:System.StringComparison.OrdinalIgnoreCase>如`comparisonType`引數。 如需詳細資訊，請參閱 <<c0> [ 如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 這個範例會使用`LCase`函式來傳回字串的小寫版本。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 <see langword="String" /> 運算式，最左邊的字元會從此運算式中傳回。</param>
        <param name="Length">必要。 <see langword="Integer" /> 運算式。 數值運算式，表示要傳回的字元數。 如果為 0，則會傳回長度為零的字串 ("")。 如果大於或等於 <paramref name="str" /> 中的字元數，則會傳回整個字串。</param>
        <summary>傳回字串，其中包含從字串的左邊開始的指定數目的字元。</summary>
        <returns>傳回字串，其中包含從字串的左邊開始的指定數目的字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷中的字元數目`str`，使用`Len`函式。 如果使用中的 Windows Forms 應用程式中或任何其他類別具有`Left`屬性，您必須完整限定函式搭配`Microsoft.VisualBasic.Left`。  
  
> [!NOTE]
>  `LeftB`在舊版的 Visual Basic 中的函式會傳回字串位元組，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LeftB`不受支援。  
  
   
  
## Examples  
 此範例示範如何使用`Left`函數來傳回子字串的指定`String`。 在具有的類別`Left`屬性，它可能需要完整限定`Left`函式。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 運算式或變數名稱。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，<see langword="Len" /> 函式就會傳回要由 <see langword="FilePut" /> 函式寫入檔案的大小。</param>
        <summary>傳回包含字串中字元數或儲存變數所需位元組數的整數。</summary>
        <returns>傳回包含字串中字元數或儲存變數所需位元組數的整數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。  
  
 `VBFixedString`屬性可以套用至字串欄位中表示的字串，以位元組為單位的大小，寫入時的物件至磁碟。 `Len`函式會使用`VBFixedString`屬性，如果有的話，決定的大小時`Object`變數。  
  
> [!NOTE]
>  `Len`函式可能無法判斷實際的可變長度的字串，用於使用者定義資料類型搭配使用時所需的儲存體位元組數目。  
  
> [!NOTE]
>  `LenB`在舊版的 Visual Basic 中的函式會傳回的位元組數目的字串，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`LenB`不受支援。  
  
## <a name="smart-device-developer-notes"></a>智慧型裝置開發人員注意事項  
 `Len`函式只接受`String`和`Object`變數做為參數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數為 NULL`Object`參考，此函數會傳回零。 如果`Object`不含任何其他類型，會擲回例外狀況。  
  
   
  
## Examples  
 這個範例使用 `Len` 傳回字串中的字元數。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必要。 <see langword="String" /> 運算式。 字串變數的名稱。</param>
        <param name="Length">必要。 <see langword="Integer" /> 運算式。 傳回的字串長度。</param>
        <summary>傳回靠左對齊的字串，其中包含調整為指定之長度的指定字串。</summary>
        <returns>傳回靠左對齊的字串，其中包含調整為指定之長度的指定字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的字串長度超過指定的長度，傳回的字串會縮短成指定的長度。 如果指定的字串小於指定的長度，傳回的字串，以產生適當的長度最右邊加入空格。  
  
   
  
## Examples  
 此範例示範如何使用`LSet`函式。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">有效率地使用資料類型</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <summary>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</summary>
        <returns>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函式會移除字串的結尾中的空白。  
  
   
  
## Examples  
 此範例使用 `LTrim` 函式刪除字串變數中的前置空格，並使用 `RTrim` 函式刪除字串變數中的尾端空格。 它會使用 `Trim` 函式刪除這兩種類型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回包含指定之字串中的字元的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 <see langword="String" /> 運算式，字元會從此運算式中傳回。</param>
        <param name="Start">必要。 <see langword="Integer" /> 運算式。 要傳回字元的開始位置。 如果 <paramref name="Start" /> 大於 <paramref name="str" /> 中的字元數，則 <see langword="Mid" /> 函式會傳回長度為零的字串 ("")； <paramref name="Start" /> 是以一起始。</param>
        <summary>傳回字串，這個字串包含某個字串中從指定之位置開始的所有字元。</summary>
        <returns>字串，包含字串中從指定之位置開始的所有字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷中的字元數目`str`，使用`Len`函式。  
  
 Visual Basic 也有`Mid`函式和`Mid`陳述式。 這些項目都會運作指定的字串中的字元數，但`Mid`函式會傳回的字元時`Mid`陳述式會取代字元。 如需詳細資訊，請參閱 < [Mid 陳述式](~/docs/visual-basic/language-reference/statements/mid-statement.md)。  
  
> [!NOTE]
>  `MidB`在舊版的 Visual Basic 中的函式會傳回字串位元組，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有的 Visual Basic 字串為 Unicode，和`MidB`不受支援。  
  
   
  
## Examples  
 在此範例中的最後一行會使用此多載`Mid`函式傳回的第五個和後續字元字串。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 陳述式</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 <see langword="String" /> 運算式，字元會從此運算式中傳回。</param>
        <param name="Start">必要。 <see langword="Integer" /> 運算式。 要傳回字元的開始位置。 如果 <paramref name="Start" /> 大於 <paramref name="str" /> 中的字元數，則 <see langword="Mid" /> 函式會傳回長度為零的字串 ("")； <paramref name="Start" /> 是以一起始。</param>
        <param name="Length">選擇性。 <see langword="Integer" /> 運算式。 要傳回的字元數。 如果省略，或者此字元數少於文字中的 <paramref name="Length" /> 字元 (包括 <paramref name="Start" /> 位置上的字元)，則會傳回從起始位置到字串結尾的所有字元。</param>
        <summary>傳回字串，這個字串包含某個字串中從指定之位置開始的指定數目字元。</summary>
        <returns>字串，包含字串中從指定之位置開始的指定數目字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷中的字元數目`str`，使用`Len`函式。  
  
 Visual Basic 也有`Mid`函式和`Mid`陳述式。 這些項目都會運作指定的字串中的字元數，但`Mid`函式會傳回的字元時`Mid`陳述式會取代字元。 如需詳細資訊，請參閱 < [Mid 陳述式](~/docs/visual-basic/language-reference/statements/mid-statement.md)。  
  
> [!NOTE]
>  `MidB`在舊版的 Visual Basic 中的函式會傳回字串位元組，而不是字元。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有的 Visual Basic 字串為 Unicode，和`MidB`不受支援。  
  
   
  
## Examples  
 前兩個`Mid`在此範例中的函式會傳回指定的字元數，從字串、 從給定位置開始。 (最後一個函式說明<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>多載，並只會指定字串擷取的起始點。)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 陳述式</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必要。 字串運算式，包含要取代的子字串。</param>
        <param name="Find">必要。 正在搜尋的子字串。</param>
        <param name="Replacement">必要。 取代子字串。</param>
        <param name="Start">選擇性。 <paramref name="Expression" /> 內用於取代的子字串的開始位置。 <see langword="Replace" /> 的傳回值是以 <paramref name="Start" /> 開頭且具有適當替代的字串。 如果省略，則假設為 1。</param>
        <param name="Count">選擇性。 要執行的子字串替代次數。 如果省略，則預設值為 –1，這表示「執行所有可能的替代」。</param>
        <param name="Compare">選擇性。 數值，表示在評估子字串時要使用的比較類型。 請參閱數值的設定。</param>
        <summary>傳回字串，其中的指定之子字串已經被另一個子字串取代了指定的次數。</summary>
        <returns>
          <see langword="Replace" /> 會傳回下列值。  
  
 <list type="table"><item><term> 如果 
 </term><description> Replace 會傳回 
 </description></item><item><term><paramref name="Find" /> 的長度為零或 <see langword="Nothing" /></term><description><paramref name="Expression" /> 的複本</description></item><item><term><paramref name="Replace" /> 的長度為零 
 </term><description><paramref name="Expression" /> 的複本沒有出現 <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> 的長度為零或 <see langword="Nothing" />，或 <paramref name="Start" /> 大於 <paramref name="Expression" /> 的長度</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> 為 0 
 </term><description><paramref name="Expression" /> 的複本</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值`Replace`函式是一個字串，所指定的位置開始`Start`，並於結尾的結尾`Expression`替代後的字串所指定`Find`和`Replace`值。  
  
 `Compare`引數可以是下列值。  
  
|常數|描述|  
|-|-|  
|`Binary`|執行二進位比較|  
|`Text`|執行文字比較|  
  
   
  
## Examples  
 此範例示範`Replace`函式。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 或 <paramref name="Start" /> &lt;= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 <see langword="String" /> 運算式，最右邊的字元會從此運算式中傳回。</param>
        <param name="Length">必要。 <see langword="Integer" />. 數值運算式，表示要傳回的字元數。 如果為 0，則會傳回長度為零的字串 ("")。 如果大於或等於 <paramref name="str" /> 中的字元數，則會傳回整個字串。</param>
        <summary>傳回字串，其中包含從字串的右邊開始的指定數目的字元。</summary>
        <returns>傳回字串，其中包含從字串的右邊開始的指定數目的字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷中的字元數目`str`，使用`Len`函式。 如果使用 Windows 表單或有任何其他類別中`Right`屬性，您必須完整限定函式搭配`Microsoft.VisualBasic.Strings.Right`。  
  
> [!NOTE]
>  `RightB`函式在舊版的 Visual Basic 中以位元組為單位，而不是字元傳回字串。 它是主要用於將雙位元組字元集 (DBCS) 應用程式中的字串轉換。 所有目前的 Visual Basic 字串為 Unicode，和`RightB`不受支援。  
  
   
  
## Examples  
 此範例示範如何使用`Right`函數來傳回子字串的指定`String`。 在具有的類別`Right`屬性，它可能需要完整限定`Right`函式。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必要。 <see langword="String" /> 運算式。 字串變數的名稱。</param>
        <param name="Length">必要。 <see langword="Integer" /> 運算式。 傳回的字串長度。</param>
        <summary>傳回靠右對齊的字串，其中包含調整為指定之長度的指定字串。</summary>
        <returns>傳回靠右對齊的字串，其中包含調整為指定之長度的指定字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Source`長於`Length`，`RSet`將只有最左邊字元，長度為`Source`，在傳回的字串。 如果指定的字串小於指定的長度，以產生適當的長度字串的左邊加入空格。 如果指定的字串長度超過指定的長度，會將它縮短為指定的長度。  
  
   
  
## Examples  
 此範例示範如何使用`RSet`函式。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">有效率地使用資料類型</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <summary>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</summary>
        <returns>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函式會移除字串的結尾中的空白。  
  
   
  
## Examples  
 此範例使用 `LTrim` 函式刪除字串變數中的前置空格，並使用 `RTrim` 函式刪除字串變數中的尾端空格。 它會使用 `Trim` 函式刪除這兩種類型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 <see langword="Integer" /> 運算式。 您希望在字串中有多少空格數。</param>
        <summary>傳回字串，此字串是由指定之空格數所組成。</summary>
        <returns>傳回字串，此字串是由指定之空格數所組成。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space`函式很適合用於設定輸出格式和清除固定長度字串中的資料。  
  
   
  
## Examples  
 這個範例會使用`Space`函數來傳回字串，其中包含指定的空格數目。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必要。 <see langword="String" /> 運算式，包含子字串和分隔符號。</param>
        <param name="Delimiter">選擇性。 用來識別子字串限制的單一字元。 如果省略 <paramref name="Delimiter" />，則會假設空白字元 (" ") 為分隔符號。</param>
        <param name="Limit">選擇性。 輸入字串應該分割之子字串數目的最大值。 預設為 –1，表示應該在每次遇到 <paramref name="Delimiter" /> 字串時即分割輸入字串。</param>
        <param name="Compare">選擇性。 數值，表示在評估子字串時要使用的比較。 如需有關值的資訊，請參閱＜設定＞。</param>
        <summary>傳回以零起始的一維陣列，其中包含指定之子字串數目。</summary>
        <returns>
          <see langword="String" /> 陣列。 如果 <paramref name="Expression" /> 是長度為零的字串 ("")，<see langword="Split" /> 會傳回包含長度為零的字串之單一元素陣列。 如果 <paramref name="Delimiter" /> 是長度為零的字串，或是未出現在 <paramref name="Expression" /> 內的任何位置，則 <see langword="Split" /> 會傳回單一元素陣列，其中包含整個 <paramref name="Expression" /> 字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，或當`Limit`等於-1，`Split`函式會在每次出現的分隔符號字串中，輸入的字串分割，並傳回陣列中的子字串。 當`Limit`參數是小於或等於零，`Split`函式會分割此字串在第一個`Limit`-1 出現的分隔符號，並傳回產生的子字串的陣列。 例如，`Split("a:b:c", ":")`會傳回陣列`{"a", "b", "c"}`，雖然`Split("a:b:c", ":", 2)`會傳回陣列`{"a", "b:c"}`。  
  
 當`Split`函式遇到在資料列中的兩個分隔符號或分隔符號的開頭或結尾的字串，它會將它們解譯為周圍的空字串 ("")。 比方說，`Split("xx", "x")`會傳回包含三個空白的字串陣列： 一個介於開頭的字串和第一個"x"，其中這兩個"x"字串，頭尾包括在內，另一個介於最後一個"x"和字串的結尾。  
  
 下表示範如何選擇性`Delimiter`， `Limit`，並`Compare`參數可變更的行為`Split`函式。  
  
|分割呼叫|傳回值|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice 和 Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"，"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone"，"example.com"}|  
  
 `Compare`引數可以是下列值。  
  
|常數|描述|值|  
|-|-|-|  
|`CompareMethod.Binary`|執行二進位比較|0|  
|`CompareMethod.Text`|執行文字比較|1|  
  
   
  
## Examples  
 下列範例示範如何在其空間將字串分隔。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 下列範例示範如何分割資料列中的多個分隔符號的字串，並篩選出空的字串。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <param name="String2">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <param name="Compare">選擇性。 指定字串比較的類型。 如果省略了 <paramref name="Compare" />，則 <see langword="Option Compare" /> 設定可決定比較的類型。</param>
        <summary>根據字串比較的結果傳回 -1、0 或 1。</summary>
        <returns>
          <see langword="StrComp" /> 函式具有下列的傳回值。  
  
 <list type="table"><item><term> 如果 
 </term><description> StrComp 會傳回 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 之前</term><description> -1 
 </description></item><item><term><paramref name="String1" /> 等於 <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 之後</term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所開始的第一個字元的英數字元的排序鍵值比較的字串。 二進位比較、 文字的比較和排序次序的進一步資訊，請參閱[Option 比較陳述式](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)。  
  
 `Compare` 引數設定為︰  
  
|常數|描述|  
|-|-|  
|`Binary`|執行二進位比較，而根據衍生自內部的二進位表示的字元的排序次序。|  
|`Text`|執行文字比較，而根據取決於您的系統的不區分大小寫文字排序順序`LocaleID`值。|  
  
   
  
## Examples  
 這個範例會使用`StrComp`函式傳回的字串比較的結果。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> 值無效。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必要。 要轉換的 <see langword="String" /> 運算式。</param>
        <param name="Conversion">必要。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> 成員。 列舉值，指定要執行的轉換類型。</param>
        <param name="LocaleID">選擇性。 如果不同於系統 <see langword="LocaleID" /> 值，則使用此 <see langword="LocaleID" /> 值  (系統 <see langword="LocaleID" /> 值是預設值)。</param>
        <summary>傳回依照指定方式轉換的字串。</summary>
        <returns>傳回依照指定方式轉換的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常數`VbStrConv.Wide`， `VbStrConv.Narrow`， `VbStrConv.SimplifiedChinese`， `VbStrConv.TraditionalChinese`， `VbStrConv.Katakana`，和`VbStrConv.Hiragana`可能會導致執行階段錯誤時，它們不會套用，地區設定中使用但不是一定： 常數`VbStrConv.Katakana`並`VbStrConv.Hiragana`可以搭配非日文系統中安裝了日文語言套件。 此外，使用的常數`VbStrConv.Wide`和`VbStrConv.Narrow`任何系統上安裝的東亞洲語言支援。  
  
 管理字串，使大小寫變更所適用的地區設定中使用應用程式時，此函數會使用應用程式的文化特性資訊。  
  
> [!IMPORTANT]
>  如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則作業應該使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，然後傳遞<xref:System.StringComparison.Ordinal>或是<xref:System.StringComparison.OrdinalIgnoreCase>如`comparisonType`引數。 如需詳細資訊，請參閱 <<c0> [ 如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
 `Conversion` 引數設定為︰  
  
|列舉型別成員|描述|  
|-|-|  
|`VbStrConv.None`|會執行任何轉換|  
|`VbStrConv.LinguisticCasing`|大小寫，而不是檔案系統 （預設值），會使用語言的規則。 適用於`VbStrConv.UpperCase`和`VbStrConv.LowerCase`只。|  
|`VbStrConv.UpperCase`|將字串轉換為大寫字元。|  
|`VbStrConv.LowerCase`|將字串轉換為小寫字元。|  
|`VbStrConv.ProperCase`|將轉換成大寫的字串中的每個字的第一個字母。|  
|`VbStrConv.Wide` <sup>*</sup>|將窄 （半形） 字元 （全形） 的寬字元字串中。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|將字串中要縮小 （半形） 字元的寬 （全形） 字元轉換。|  
|`VbStrConv.Katakana` <sup>**</sup>|將字串中的平假名字元轉換為片假名字元。|  
|`VbStrConv.Hiragana` <sup>**</sup>|將字串中的片假名字元轉換為平假名字元。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|將繁體中文字元轉換成簡體中文。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|將簡體中文字元轉換成繁體中文。|  
  
 <sup>*</sup> 適用於亞洲地區設定。  
  
 <sup>**</sup> 僅適用於日本。  
  
> [!NOTE]
>  這些常數會指定.NET Framework common language runtime 中。 如此一來，它們可以用於任何地方您的程式碼來取代實際的值。 大部分可以結合 (例如`UpperCase + Wide`)，除非它們是互斥 (比方說， `VbStrConv.Wide + VbStrConv.Narrow`)。  
  
 以下是有效的文字分隔字元的適當大小寫： Null (`Chr$(0)`)，水平索引標籤 (`Chr$(9)`)，換行字元 (`Chr$(10)`)，垂直索引標籤 (`Chr$(11)`)、 換頁字元 (`Chr$(12)`)，歸位字元 (`Chr$(13)`)，空間 （單一位元組字元集） (`Chr$(32)`)。 空間，這可以是完整或寬度的一半，實際的值會因國家/地區的東亞語言的文化特性而異。  
  
   
  
## Examples  
 此範例會將文字轉換成小寫字母。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支援的 <paramref name="LocaleID" />、<paramref name="Conversion" /> &lt; 0 或 &gt; 2048，或不支援的指定地區設定轉換。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回由重複指定次數的指定字元所組成的字串或物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 <see langword="Integer" /> 運算式。 要傳回之字串的長度。</param>
        <param name="Character">必要。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 運算式。 只會使用運算式的第一個字元。 如果字元的型別為 <see langword="Object" />，它必須包含 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>傳回由重複指定次數的指定字元所組成的字串或物件。</summary>
        <returns>傳回由重複指定次數的指定字元所組成的字串或物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，並重複`Number`次數。  
  
   
  
## Examples  
 這個範例會使用`StrDup`重複字元的函式傳回的字串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 小於 0 或 <paramref name="Character" /> 類型無效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> 為 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 <see langword="Integer" /> 運算式。 要傳回之字串的長度。</param>
        <param name="Character">必要。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 運算式。 只會使用運算式的第一個字元。 如果字元的型別為 <see langword="Object" />，它必須包含 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>傳回由重複指定次數的指定字元所組成的字串或物件。</summary>
        <returns>傳回由重複指定次數的指定字元所組成的字串或物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，並重複`Number`次數。  
  
   
  
## Examples  
 這個範例會使用`StrDup`重複字元的函式傳回的字串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 小於 0 或 <paramref name="Character" /> 類型無效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> 為 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 <see langword="Integer" /> 運算式。 要傳回之字串的長度。</param>
        <param name="Character">必要。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 運算式。 只會使用運算式的第一個字元。 如果字元的型別為 <see langword="Object" />，它必須包含 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>傳回由重複指定次數的指定字元所組成的字串或物件。</summary>
        <returns>傳回由重複指定次數的指定字元所組成的字串或物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，並重複`Number`次數。  
  
   
  
## Examples  
 這個範例會使用`StrDup`重複字元的函式傳回的字串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 小於 0 或 <paramref name="Character" /> 類型無效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> 為 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 要反轉字元的字串運算式。 如果 <paramref name="Expression" /> 是長度為零的字串 ("")，則會傳回長度為零的字串。</param>
        <summary>傳回字串，其中的指定之字串的字元順序會顛倒。</summary>
        <returns>傳回字串，其中的指定之字串的字元順序會顛倒。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse`函式會傳回字串，包含相同的字元視為`Expression`，但順序相反。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必要。 任何有效的 <see langword="String" /> 運算式。</param>
        <summary>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</summary>
        <returns>傳回包含指定字串複本的字串，但其中不包含前置空格 (<see langword="LTrim" />)、不包含後置空格 (<see langword="RTrim" />)，或是不包含前置或後置空格 (<see langword="Trim" />)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`， `RTrim`，和`Trim`函式會移除字串的結尾中的空白。  
  
   
  
## Examples  
 此範例使用 `LTrim` 函式刪除字串變數中的前置空格，並使用 `RTrim` 函式刪除字串變數中的尾端空格。 它會使用 `Trim` 函式刪除這兩種類型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回包含已轉換成大寫之指定字串的字串或字元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必要。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 運算式。</param>
        <summary>傳回包含已轉換成大寫之指定字串的字串或字元。</summary>
        <returns>傳回包含已轉換成大寫之指定字串的字串或字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只能是小寫字母轉換成大寫;所有的大寫字母和 nonletter 字元保持不變。  
  
 管理字串，使大小寫變更所適用的地區設定中使用應用程式時，此函數會使用應用程式的文化特性資訊。  
  
> [!IMPORTANT]
>  如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則作業應該使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，然後傳遞<xref:System.StringComparison.Ordinal>或是<xref:System.StringComparison.OrdinalIgnoreCase>如`comparisonType`引數。 如需詳細資訊，請參閱 <<c0> [ 如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 此範例使用 `UCase` 函式，傳回大寫字母版本的字串。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必要。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 運算式。</param>
        <summary>傳回包含已轉換成大寫之指定字串的字串或字元。</summary>
        <returns>傳回包含已轉換成大寫之指定字串的字串或字元。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只能是小寫字母轉換成大寫;所有的大寫字母和 nonletter 字元保持不變。  
  
 管理字串，使大小寫變更所適用的地區設定中使用應用程式時，此函數會使用應用程式的文化特性資訊。  
  
> [!IMPORTANT]
>  如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則作業應該使用<xref:System.String.Compare%2A?displayProperty=nameWithType>方法，然後傳遞<xref:System.StringComparison.Ordinal>或是<xref:System.StringComparison.OrdinalIgnoreCase>如`comparisonType`引數。 如需詳細資訊，請參閱 <<c0> [ 如何文化特性會影響字串在 Visual Basic 中](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)。  
  
   
  
## Examples  
 此範例使用 `UCase` 函式，傳回大寫字母版本的字串。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">字串操作摘要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic 中的字串</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic 中的字串簡介</related>
      </Docs>
    </Member>
  </Members>
</Type>