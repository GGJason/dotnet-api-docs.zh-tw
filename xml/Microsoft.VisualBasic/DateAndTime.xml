<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59d35cb4d0012b6046a7dc9eaed7c9256370add6" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52210112" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="DateAndTime" /> 模組包含用於日期和時間作業的程序和屬性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，取得目前的日期或時間、 執行日期計算傳回日期或時間、 設定日期或時間，或處理程序的持續時間的時間。  
  
   
  
## Examples  
 這個範例會使用`Today`屬性來傳回目前的系統日期。  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">日期和時間摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">關鍵字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 執行階段程式庫成員</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回包含日期和時間值，且已加入指定時間間隔的 <see langword="Date" /> 值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您想要加入的時間間隔。</param>
        <param name="Number">必要。 <see langword="Double" />. 浮點運算式，表示您想要加入的間隔數； <paramref name="Number" /> 可以是正數，表示取得未來的日期/時間值，也可以是負數，表示取得過去的日期/時間值。 當 <paramref name="Interval" /> 指定小時、分鐘或秒數時，它可以包含小數部分。 對於其他的 <paramref name="Interval" /> 值而言，會忽略 <paramref name="Number" /> 的任何小數部分。</param>
        <param name="DateValue">必要。 <see langword="Date" />. 運算式，表示要在其中加入間隔的日期和時間； <paramref name="DateValue" /> 本身在呼叫程式中並不會變更。</param>
        <summary>傳回包含日期和時間值，且已加入指定時間間隔的 <see langword="Date" /> 值。</summary>
        <returns>傳回包含日期和時間值，且已加入指定時間間隔的 <see langword="Date" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DateAdd`函式來加入或減去指定的時間間隔開始的日期。 例如，您可以計算目前或前的 45 分鐘的時間現在起 30 天的日期。  
  
 若要將天數`DateValue`，您可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 這些會被視為對等項目因為`DayOfYear`和`Weekday`不是有意義的時間間隔。  
  
 `DateAdd`函式從未傳回無效的日期。 如有必要，產生的日期的日期部分是在產生的 year 中產生的每月的最後一天向下調整。 下列範例會將一個月新增至年 1 月 31 日：  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 在此範例中，`DateAdd`會傳回`#2/28/1995#`，而非`#2/31/1995#`。 如果`DateValue`已`#1/31/1996#`，它會傳回`#2/29/1996#`因為 1996年是否為閏年。  
  
> [!NOTE]
>  `DateAdd` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。  
  
 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您加入的時間間隔中的其他選項。 例如，您可以在其中新增小數的天數，為四捨五入到最接近的毫秒，`Date`變數，如下所示：  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|String|要加入的時間間隔單位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|一天;截斷為整數值|  
|`DateInterval.DayOfYear`|y|一天;截斷為整數值|  
|`DateInterval.Hour`|h|小時;四捨五入為最接近的毫秒數|  
|`DateInterval.Minute`|n|分鐘;四捨五入為最接近的毫秒數|  
|`DateInterval.Month`|m|月份;截斷為整數值|  
|`DateInterval.Quarter`|q|季;截斷為整數值|  
|`DateInterval.Second`|秒|第二個;四捨五入為最接近的毫秒數|  
|`DateInterval.Weekday`|w|一天;截斷為整數值|  
|`DateInterval.WeekOfYear`|ww|每週;截斷為整數值|  
|`DateInterval.Year`|yyyy|年份;截斷為整數值|  
  
   
  
## Examples  
 此範例會採用一個日期，並使用`DateAdd`函式中，指定未來月數就會顯示對應的日期。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">無法將 <paramref name="DateValue" /> 強制為 <see langword="Date" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算出的日期早於 1 年 1 月 1 日 00:00:00 或晚於 9999 年 12 月 31 日 23:59:59。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您想要加入的時間間隔。</param>
        <param name="Number">必要。 <see langword="Double" />. 浮點運算式，表示您想要加入的間隔數； <paramref name="Number" /> 可以是正數，表示取得未來的日期/時間值，也可以是負數，表示取得過去的日期/時間值。 當 <paramref name="Interval" /> 指定小時、分鐘或秒數時，它可以包含小數部分。 對於其他的 <paramref name="Interval" /> 值而言，會忽略 <paramref name="Number" /> 的任何小數部分。</param>
        <param name="DateValue">必要。 <see langword="Date" />. 運算式，表示要在其中加入間隔的日期和時間； <paramref name="DateValue" /> 本身在呼叫程式中並不會變更。</param>
        <summary>傳回包含日期和時間值，且已加入指定時間間隔的 <see langword="Date" /> 值。</summary>
        <returns>傳回包含日期和時間值，且已加入指定時間間隔的 <see langword="Date" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DateAdd`函式來加入或減去指定的時間間隔開始的日期。 例如，您可以計算目前或前的 45 分鐘的時間現在起 30 天的日期。  
  
 若要將天數`DateValue`，您可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 這些會被視為對等項目因為`DayOfYear`和`Weekday`不是有意義的時間間隔。  
  
 `DateAdd`函式從未傳回無效的日期。 如有必要，產生的日期的日期部分是在產生的 year 中產生的每月的最後一天向下調整。 下列範例會將一個月新增至年 1 月 31 日：  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 在此範例中，`DateAdd`會傳回`#2/28/1995#`，而非`#2/31/1995#`。 如果`DateValue`已`#1/31/1996#`，它會傳回`#2/29/1996#`因為 1996年是否為閏年。  
  
> [!NOTE]
>  `DateAdd` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。  
  
 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您加入的時間間隔中的其他選項。 例如，您可以在其中新增小數的天數，為四捨五入到最接近的毫秒，`Date`變數，如下所示：  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|String|要加入的時間間隔單位|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|一天;截斷為整數值|  
|`DateInterval.DayOfYear`|y|一天;截斷為整數值|  
|`DateInterval.Hour`|h|小時;四捨五入為最接近的毫秒數|  
|`DateInterval.Minute`|n|分鐘;四捨五入為最接近的毫秒數|  
|`DateInterval.Month`|m|月份;截斷為整數值|  
|`DateInterval.Quarter`|q|季;截斷為整數值|  
|`DateInterval.Second`|秒|第二個;四捨五入為最接近的毫秒數|  
|`DateInterval.Weekday`|w|一天;截斷為整數值|  
|`DateInterval.WeekOfYear`|ww|每週;截斷為整數值|  
|`DateInterval.Year`|yyyy|年份;截斷為整數值|  
  
   
  
## Examples  
 此範例會採用一個日期，並使用`DateAdd`函式中，指定未來月數就會顯示對應的日期。  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">無法將 <paramref name="DateValue" /> 強制為 <see langword="Date" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 無效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算出的日期早於 1 年 1 月 1 日 00:00:00 或晚於 9999 年 12 月 31 日 23:59:59。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回指定兩個 <see langword="Long" /> 值之間時間間隔數的 <see langword="Date" /> 值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您希望當做 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之間差異的單位使用之時間間隔。</param>
        <param name="Date1">必要。 <see langword="Date" />. 在計算中需要使用的第一個日期/時間值。</param>
        <param name="Date2">必要。 <see langword="Date" />. 在計算中需要使用的第二個日期/時間值。</param>
        <param name="DayOfWeek">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">選擇性。 選自 <see langword="FirstWeekOfYear" /> 列舉類型的值，指定一年的第一週。 如果未指定，就會使用 <see langword="FirstWeekOfYear.Jan1" />。</param>
        <summary>傳回指定兩個 <see langword="Long" /> 值之間時間間隔數的 <see langword="Date" /> 值。</summary>
        <returns>傳回指定兩個 <see langword="Long" /> 值之間時間間隔數的 <see langword="Date" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DateDiff`函式來判斷兩個日期/時間值之間有多少的指定的時間間隔。 例如，您可以使用`DateDiff`來計算兩個日期或今天與一年結尾之間的週數之間的天數。  
  
## <a name="behavior"></a>行為  
  
-   **參數的處理。** `DateDiff` 值減去`Date1`的值從`Date2`產生差異。 這兩個值會變更呼叫程式中。  
  
-   **傳回值。** 因為`Date1`並`Date2`屬於`Date`資料型別，它們保存日期和時間值精確度為 100 奈秒刻度系統計時器。 不過，`DateDiff`一律會傳回時間間隔數目`Long`值。  
  
     如果`Date1`代表更新的日期和時間會比`Date2`，`DateDiff`傳回的負數的數字。  
  
-   **一天的間隔。** 如果`Interval`設定為`DateInterval.DayOfYear`，則會視為相同`DateInterval.Day`，因為`DayOfYear`時間間隔內不是有意義的單位。  
  
-   **一週的間隔。** 如果`Interval`設定為`DateInterval.WeekOfYear`，傳回的值表示包含的一週的第一天之間的週數`Date1`和 包含的一週的第一天`Date2`。 下列範例示範如何從不同的結果會產生。 `DateInterval.Weekday`。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     在上述範例中，`DateDiff`會傳回 0，`wD`因為兩個日期之間的差異是不超過七天的資料，但它會傳回 1 到`wY`因為七天之間差異的個別的行事曆的第一天週數。  
  
-   **較大的間隔。** 如果`Interval`設定為`DateInterval.Year`，傳回的值會計算完全從的年部分`Date1`和`Date2`。 同樣地，傳回值`DateInterval.Month`純粹從年份和月份的部分引數，以及計算`DateInterval.Quarter`從包含兩個日期的季數。  
  
     例如，當比較年 12 月 31 日的下一年度，1 年 1 月`DateDiff`會傳回 1，如`DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使過了最多只能有一天。  
  
     文化特性，例如具有多個紀元，日文`DateDiff`方法不會傳回年份差異，如果差異會跨越兩個或多個紀元。 相反地，您可以在其中計算所傳回的值中的差異<xref:System.DateTime.Year%2A>屬性，如下列範例所示： `date2.Year - date1.Year`。  
  
-   **其他的間隔。** 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您在尋找時間間隔中的其他選項。 比方說，您可以使用`Subtract`其多載形式幾種方法：<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>減去<xref:System.TimeSpan>從`Date`變數，以傳回另一個`Date`的值，並<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>減去`Date`值要傳回<xref:System.TimeSpan>。 您可以計算時間的程序，以瞭解花費，如下列範例所示的毫秒數。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|字串值|時間差異的單位|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月份|  
|`DateInterval.Quarter`|"q"|季|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|一週|  
|`DateInterval.WeekOfYear`|「 ww"|行事曆週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系統設定中指定的週第一天|  
|`FirstDayOfWeek.Sunday`|1|星期日 （預設值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `WeekOfYear`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|在 系統設定中指定年份的第一週|  
|`FirstWeekOfYear.Jan1`|1|週中年 1 月 1 日 （預設值）|  
|`FirstWeekOfYear.FirstFourDays`|2|至少包含四天 （符合 ISO 8601 標準，節 3.17） 新的一年中的週|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個完整星期|  
  
   
  
## Examples  
 這個範例會使用`DateDiff`函式來顯示給定的日期和今天之間的天數。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超過範圍。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> 或 <paramref name="Date2" /> 的類型無效。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您希望當做 <paramref name="Date1" /> 和 <paramref name="Date2" /> 之間差異的單位使用之時間間隔。</param>
        <param name="Date1">必要。 <see langword="Date" />. 在計算中需要使用的第一個日期/時間值。</param>
        <param name="Date2">必要。 <see langword="Date" />. 在計算中需要使用的第二個日期/時間值。</param>
        <param name="DayOfWeek">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">選擇性。 選自 <see langword="FirstWeekOfYear" /> 列舉類型的值，指定一年的第一週。 如果未指定，就會使用 <see langword="FirstWeekOfYear.Jan1" />。</param>
        <summary>傳回指定兩個 <see langword="Long" /> 值之間時間間隔數的 <see langword="Date" /> 值。</summary>
        <returns>傳回指定兩個 <see langword="Long" /> 值之間時間間隔數的 <see langword="Date" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DateDiff`函式來判斷兩個日期/時間值之間有多少的指定的時間間隔。 例如，您可以使用`DateDiff`來計算兩個日期或今天與一年結尾之間的週數之間的天數。  
  
## <a name="behavior"></a>行為  
  
-   **參數的處理。** `DateDiff` 值減去`Date1`的值從`Date2`產生差異。 這兩個值會變更呼叫程式中。  
  
-   **傳回值。** 因為`Date1`並`Date2`屬於`Date`資料型別，它們保存日期和時間值精確度為 100 奈秒刻度系統計時器。 不過，`DateDiff`一律會傳回時間間隔數目`Long`值。  
  
     如果`Date1`代表更新的日期和時間會比`Date2`，`DateDiff`傳回的負數的數字。  
  
-   **一天的間隔。** 如果`Interval`設定為`DateInterval.DayOfYear`，則會視為相同`DateInterval.Day`，因為`DayOfYear`時間間隔內不是有意義的單位。  
  
-   **一週的間隔。** 如果`Interval`設定為`DateInterval.WeekOfYear`，傳回的值表示包含的一週的第一天之間的週數`Date1`和 包含的一週的第一天`Date2`。 下列範例示範如何從不同的結果會產生。 `DateInterval.Weekday`。  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     在上述範例中，`DateDiff`會傳回 0，`wD`因為兩個日期之間的差異是不超過七天的資料，但它會傳回 1 到`wY`因為七天之間差異的個別的行事曆的第一天週數。  
  
-   **較大的間隔。** 如果`Interval`設定為`DateInterval.Year`，傳回的值會計算完全從的年部分`Date1`和`Date2`。 同樣地，傳回值`DateInterval.Month`純粹從年份和月份的部分引數，以及計算`DateInterval.Quarter`從包含兩個日期的季數。  
  
     例如，當比較年 12 月 31 日的下一年度，1 年 1 月`DateDiff`會傳回 1，如`DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使過了最多只能有一天。  
  
     文化特性，例如具有多個紀元，日文`DateDiff`方法不會傳回年份差異，如果差異會跨越兩個或多個紀元。 相反地，您可以在其中計算所傳回的值中的差異<xref:System.DateTime.Year%2A>屬性，如下列範例所示： `date2.Year - date1.Year`。  
  
-   **其他的間隔。** 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您在尋找時間間隔中的其他選項。 比方說，您可以使用`Subtract`其多載形式幾種方法：<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>減去<xref:System.TimeSpan>從`Date`變數，以傳回另一個`Date`的值，並<xref:System.DateTime.Subtract%2A?displayProperty=nameWithType>減去`Date`值要傳回<xref:System.TimeSpan>。 您可以計算時間的程序，以瞭解花費，如下列範例所示的毫秒數。  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|字串值|時間差異的單位|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月份|  
|`DateInterval.Quarter`|"q"|季|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|一週|  
|`DateInterval.WeekOfYear`|「 ww"|行事曆週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系統設定中指定的週第一天|  
|`FirstDayOfWeek.Sunday`|1|星期日 （預設值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `WeekOfYear`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|在 系統設定中指定年份的第一週|  
|`FirstWeekOfYear.Jan1`|1|週中年 1 月 1 日 （預設值）|  
|`FirstWeekOfYear.FirstFourDays`|2|至少包含四天 （符合 ISO 8601 標準，節 3.17） 新的一年中的週|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個完整星期|  
  
   
  
## Examples  
 這個範例會使用`DateDiff`函式來顯示給定的日期和今天之間的天數。  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />、<paramref name="Date2" /> 或 <paramref name="DayofWeek" /> 超過範圍。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> 或 <paramref name="Date2" /> 的類型無效。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see langword="Integer" /> 值，其中包含指定的 <see langword="Date" /> 值的指定元件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您想傳回的日期/時間值的部分。</param>
        <param name="DateValue">必要。 您想評估的 <see langword="Date" /> 值。</param>
        <param name="FirstDayOfWeekValue">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.Sunday" />。</param>
        <param name="FirstWeekOfYearValue">選擇性。 選自 <see langword="FirstWeekOfYear" /> 列舉類型的值，指定一年的第一週。 如果未指定，就會使用 <see langword="FirstWeekOfYear.Jan1" />。</param>
        <summary>傳回 <see langword="Integer" /> 值，其中包含指定的 <see langword="Date" /> 值的指定元件。</summary>
        <returns>傳回 <see langword="Integer" /> 值，其中包含指定的 <see langword="Date" /> 值的指定元件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DatePart`函式來評估日期/時間值，並傳回特定的元件。 例如，您可以使用`DatePart`來計算目前的小時或天。  
  
 如果您選擇`DateInterval.Weekday`for`Interval`引數，傳回的值是一致的值`FirstDayOfWeek`列舉型別。 如果您選擇`DateInterval.WeekOfYear`，`DatePart`會使用<xref:System.Globalization.Calendar>並<xref:System.Globalization.CultureInfo>類別的<xref:System.Globalization>命名空間，以判斷您目前的設定。  
  
 `FirstDayOfWeekValue`引數會影響使用的計算`DateInterval.Weekday`並`DateInterval.WeekOfYear``Interval`設定。 `FirstWeekOfYearValue`引數會影響指定的計算`DateInterval.WeekOfYear`如`Interval`。  
  
 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您在擷取日期/時間部分的其他選項。 例如，您可以在其中取得的完整日期值`Date`的時間值的變數設定為午夜，如下所示：  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|String|要傳回的日期/時間值的一部分|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|月中的日 (1 到 31)|  
|`DateInterval.DayOfYear`|y|年中的日 (1 到 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|月份|  
|`DateInterval.Quarter`|q|季|  
|`DateInterval.Second`|秒|Second|  
|`DateInterval.Weekday`|w|週中的日 (1 到 7)|  
|`DateInterval.WeekOfYear`|ww|年中的週 (1 到 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系統設定中指定的週第一天|  
|`FirstDayOfWeek.Sunday`|1|星期日 （預設值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `FirstWeekOfYearValue`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|在 系統設定中指定年份的第一週|  
|`FirstWeekOfYear.Jan1`|1|週中年 1 月 1 日 （預設值）|  
|`FirstWeekOfYear.FirstFourDays`|2|至少包含四天 （符合 ISO 8601 標準，節 3.17） 新的一年中的週|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個完整星期|  
  
   
  
## Examples  
 此範例會採用一個日期，並使用`DatePart`函式中，會顯示發生之年的季。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 無效。</exception>
        <exception cref="T:System.InvalidCastException">無法將 <paramref name="DateValue" /> 強制為 <see langword="Date" />。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必要。 <see langword="DateInterval" /> 列舉值或 <see langword="String" /> 運算式，表示您想傳回的日期/時間值的部分。</param>
        <param name="DateValue">必要。 您想評估的 <see langword="Date" /> 值。</param>
        <param name="DayOfWeek">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.Sunday" />。</param>
        <param name="WeekOfYear">選擇性。 選自 <see langword="FirstWeekOfYear" /> 列舉類型的值，指定一年的第一週。 如果未指定，就會使用 <see langword="FirstWeekOfYear.Jan1" />。</param>
        <summary>傳回 <see langword="Integer" /> 值，其中包含指定的 <see langword="Date" /> 值的指定元件。</summary>
        <returns>傳回 <see langword="Integer" /> 值，其中包含指定的 <see langword="Date" /> 值的指定元件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用`DatePart`函式來評估日期/時間值，並傳回特定的元件。 例如，您可以使用`DatePart`來計算目前的小時或天。  
  
 如果您選擇`DateInterval.Weekday`for`Interval`引數，傳回的值是一致的值`FirstDayOfWeek`列舉型別。 如果您選擇`DateInterval.WeekOfYear`，`DatePart`會使用<xref:System.Globalization.Calendar>並<xref:System.Globalization.CultureInfo>類別的<xref:System.Globalization>命名空間，以判斷您目前的設定。  
  
 `FirstDayOfWeekValue`引數會影響使用的計算`DateInterval.Weekday`並`DateInterval.WeekOfYear``Interval`設定。 `FirstWeekOfYearValue`引數會影響指定的計算`DateInterval.WeekOfYear`如`Interval`。  
  
 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您在擷取日期/時間部分的其他選項。 例如，您可以在其中取得的完整日期值`Date`的時間值的變數設定為午夜，如下所示：  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval`引數可以具有下列設定的其中一個。  
  
|列舉值|String|要傳回的日期/時間值的一部分|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|月中的日 (1 到 31)|  
|`DateInterval.DayOfYear`|y|年中的日 (1 到 366)|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|月份|  
|`DateInterval.Quarter`|q|季|  
|`DateInterval.Second`|秒|Second|  
|`DateInterval.Weekday`|w|週中的日 (1 到 7)|  
|`DateInterval.WeekOfYear`|ww|年中的週 (1 到 53)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系統設定中指定的週第一天|  
|`FirstDayOfWeek.Sunday`|1|星期日 （預設值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
 `FirstWeekOfYearValue`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|在 系統設定中指定年份的第一週|  
|`FirstWeekOfYear.Jan1`|1|週中年 1 月 1 日 （預設值）|  
|`FirstWeekOfYear.FirstFourDays`|2|至少包含四天 （符合 ISO 8601 標準，節 3.17） 新的一年中的週|  
|`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個完整星期|  
  
   
  
## Examples  
 此範例會採用一個日期，並使用`DatePart`函式中，會顯示發生之年的季。  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> 無效。</exception>
        <exception cref="T:System.InvalidCastException">無法將 <paramref name="DateValue" /> 強制為 <see langword="Date" />。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">必要。 從 1 到 9999 的 <see langword="Integer" /> 運算式。 不過，也接受這個範圍以下的值。 如果 <paramref name="Year" /> 為 0 到 99，則它會解譯為 1930 和 2029 之間，如以下＜備註＞一節所說明。 如果 <paramref name="Year" /> 小於 1，則會從目前的年份中減去它。</param>
        <param name="Month">必要。 從 1 到 12 的 <see langword="Integer" /> 運算式。 不過，也接受超過這個範圍的值。 <paramref name="Month" /> 的值會位移 1，且會套用到計算所得年份的一月。 換句話說，(<paramref name="Month" /> - 1) 會加入到一月。 必要時，會重新計算年份。 下列結果將說明這樣的作用： 
如果 <paramref name="Month" /> 為 1，則結果為計算所得年份的一月。  
  
如果 <paramref name="Month" /> 為 0，則結果為前一年度的十二月。  
  
如果 <paramref name="Month" /> 為 -1，則結果為前一年度的十一月。  
  
如果 <paramref name="Month" /> 為 13，則結果為下一年度的一月。</param>
        <param name="Day">必要。 從 1 到 31 的 <see langword="Integer" /> 運算式。 不過，也接受超過這個範圍的值。 <paramref name="Day" /> 的值會位移 1，且會套用到計算所得月份的第一天。 換句話說，(<paramref name="Day" /> - 1) 會加入到此月份的第一天。 必要時，會重新計算月份和年份。 下列結果將說明這樣的作用： 
如果 <paramref name="Day" /> 為 1，則結果為計算所得月份的第一天。  
  
如果 <paramref name="Day" /> 為 0，則結果為上一月份的最後一天。  
  
如果 <paramref name="Day" /> 為 -1，則結果為上一月份的倒數第二天。  
  
如果 <paramref name="Day" /> 超過目前月份的結尾，則結果為下一月份的適當日。 例如，如果 <paramref name="Month" /> 是 4 且 <paramref name="Day" /> 為 31，結果會是 5 月 1 日。</param>
        <summary>傳回 <see langword="Date" /> 值，表示指定之年、月和日，且時間資訊設定為午夜 (00:00:00)。</summary>
        <returns>傳回 <see langword="Date" /> 值，表示指定之年、月和日，且時間資訊設定為午夜 (00:00:00)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Windows 98 或 Windows 2000 中，兩位數年份的`Year`引數解譯根據使用者定義的電腦設定。 預設值是從 0 到 29 的值會解譯為年份 2000年 – 2029 之間，而且從 30 到 99 的值會解譯為 1930年 – 1999年年。 如需所有其他`Year`引數，使用四位數年份，例如 1924年。  
  
 舊版 Windows 的解譯兩位數年份，根據先前所述的預設值。 若要確保函式會傳回適當的值，請使用四位數字`Year`。  
  
 下列範例示範負值，零，而正數的引數值。 在這裡，`DateSerial`函式會傳回`Date`代表前一年在目前的年份; 的前 10 年的 3 月的第一天一天換句話說，年 2 月前十年的最後一天。  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 如果有任一`Month`或`Day`超過其一般的範圍，它會套用到下一個較大單位適當地。 比方說，如果您指定了 32 天，它會評估為一個月和一到四天，根據的值從`Month`。 如果`Year`是大於 9999，或如果任何引數超出範圍-2,147,483,648 到 2,147,483,647，<xref:System.ArgumentException>就會發生錯誤。 如果三個引數所指定的日期早於 1 月 1 年的 1 日或更晚 23:59:59 年 12 月 31 日的 00:00:00 9999，<xref:System.ArgumentOutOfRangeException>就會發生錯誤。  
  
 `Date`資料型別包含時間元件。 `DateSerial` 所有為 0 時，這些設定，使傳回的值代表的導出的一天開始。  
  
 因為每個`Date`值受到<xref:System.DateTime>結構，其方法讓您在組合中的其他選項`Date`值。 例如，您可以使用其中一個多載<xref:System.DateTime.%23ctor%2A>建構函式來擴展`Date`變數使用的元件所需的組合。 下列範例會設定`NewDateTime`至 1978 年 6 的十分之一秒之前在早上 8:30 的：  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 這個範例會使用`DateSerial`函數來傳回指定的年、 月和日的日期。  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據您的系統，傳回或設定表示目前日期的 <see langword="String" /> 值。</summary>
        <value>根據您的系統，傳回或設定表示目前日期的 <see langword="String" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` 傳回系統日期 MM dd yyyy 格式會使用縮寫的月份名稱。 接受的格式的日期是 M d yyyy，M d y，yyyy/m/m/y。 這是適用於所有的系統地區設定，除了使用雙位元組字元集 (DBCS)。 如果系統地區設定使用雙位元組字元集， `DateString` yyyy 為 yyyy-mm-dd 格式傳回系統日期。 系統地區設定使用來設定**時鐘、 語言和地區**中的項目**控制台**。  
  
 **附註**`DateString`屬性會傳回只以 yyyy 為 yyyy-mm-dd 格式的系統日期`zh`（簡體中文）， `ko` （韓文），和`ja`（日文） 的系統地區設定，如果您正在執行中的 Visual BasicSilverlight。  
  
 取得或設定目前的系統時間`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>屬性。  
  
 若要取得目前的系統日期或時間，格式為您的地區設定或自訂格式，提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>屬性設<xref:Microsoft.VisualBasic.Strings.Format%2A>函式，指定預先定義或使用者定義的日期/時間格式。 下列範例為其示範。  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 若要存取與目前的系統日期`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。  
  
> [!IMPORTANT]
>  設定系統日期或時間需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 下列範例會使用`DateString`屬性來顯示目前的系統日期。  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">用來設定 <see langword="DateString" /> 值的格式無效。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">必要。 <see langword="String" /> 運算式，表示從西元 1 年的 1 月 1 日 00:00:00 到西元 9999 年 12 月 31 日 23:59:59 之間的日期/時間值。</param>
        <summary>傳回 <see langword="Date" /> 值，包含由字串表示的日期資訊，且其時間資訊設定為午夜 (00:00:00)。</summary>
        <returns><see langword="Date" /> 值，包含由字串表示的日期資訊，且其時間資訊設定為午夜 (00:00:00)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`StringDate`只包含數字 1 到 12 由有效的日期分隔符號分隔`DateValue`可辨識的順序，如月、 日和年根據指定的系統的簡短日期格式。 `DateValue` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。 您可以設定連線，覆寫的簡短日期格式<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>的屬性<xref:System.Globalization.DateTimeFormatInfo>類別中<xref:System.Globalization>命名空間。  
  
 `DateValue` 會辨識長、 縮寫，以及數值格式的月份名稱。 例如，除了辨識 12/30/1991年和 12/30/91 `DateValue` 1991 年 12 月 30 和 1991 年 12 月 30，也會辨識。  
  
 如果年份部份`StringDate`省略，則`DateValue`會使用您的電腦的系統日期的目前年份。  
  
 如果`StringDate`引數包含時間資訊`DateValue`不包含它在傳回的值。 不過，如果`StringDate`包含無效的時間資訊，例如 「 89: 98"<xref:System.InvalidCastException>就會發生錯誤。  
  
   
  
## Examples  
 這個範例會使用`DateValue`函式，將字串轉換成日期。 您也可以使用日期常值直接指派至日期`Object`或是`Date`變數，例如`oldDate = #2/12/69#`。  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> 包含無效時間資訊。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必要。 您想從中取出日期的 <see langword="Date" /> 值。</param>
        <summary>傳回 1 到 31 的 <see langword="Integer" /> 值，表示月中的日。</summary>
        <returns>傳回 1 到 31 的 <see langword="Integer" /> 值，表示月中的日。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您使用`Day`函式，您可能必須限定`Microsoft.VisualBasic`命名空間，因為<xref:System.Windows.Forms>命名空間會定義<xref:System.Windows.Forms.Day>列舉型別。 下列範例顯示如何限定`Day`可以解決此模稜兩可：  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 您也可以藉由呼叫取得月份天數`DatePart`並指定`DateInterval.Day`for*間隔*引數。  
  
   
  
## Examples  
 下列範例會使用`Day`函式來取得從指定之日期的月份天數。 在開發環境中，日期常值會顯示在標準簡短格式 （例如，"02/12/1969 」) 使用您的程式碼的地區設定。  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` 是限定有別於<xref:System.Windows.Forms.Day?displayProperty=nameWithType>列舉型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必要。 您想從中取出小時的 <see langword="Date" /> 值。</param>
        <summary>傳回 0 到 23 的 <see langword="Integer" /> 值，表示一天中的小時。</summary>
        <returns>傳回 0 到 23 的 <see langword="Integer" /> 值，表示一天中的小時。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由呼叫取得的當日小時`DatePart`並指定`DateInterval.Hour`如`Interval`引數。  
  
   
  
## Examples  
 這個範例會使用`Hour`函式來取得在一小時，從指定的時間。 在開發環境中，時間常值會顯示在使用您的程式碼的地區設定的簡短時間格式。  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必要。 您想從中取出分鐘的 <see langword="Date" /> 值。</param>
        <summary>傳回 0 到 59 的 <see langword="Integer" /> 值，表示一小時中的分鐘。</summary>
        <returns>傳回 0 到 59 的 <see langword="Integer" /> 值，表示一小時中的分鐘。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由呼叫來取得在一小時的分鐘數`DatePart`並指定`DateInterval.Minute`如`Interval`引數。  
  
   
  
## Examples  
 這個範例會使用`Minute`函式來取得在一小時的分鐘數，從指定的時間。 在開發環境中，時間常值會顯示在使用您的程式碼的地區設定的簡短時間格式。  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必要。 您想從中取出月份的 <see langword="Date" /> 值。</param>
        <summary>傳回 1 到 12 的 <see langword="Integer" /> 值，表示一年中的月。</summary>
        <returns>傳回 1 到 12 的 <see langword="Integer" /> 值，表示一年中的月。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由呼叫來取得一年的月份`DatePart`並指定`DateInterval.Month`如`Interval`引數。  
  
   
  
## Examples  
 這個範例會使用`Month`函式來取得從指定之日期的月份。 在開發環境中，常值會顯示在簡短日期格式的日期使用您的程式碼的地區設定。  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">必要。 <see langword="Integer" />. 以 1 到 13 的數值指派月份，1 表示一月，12 表示十二月。 您也可以在有 13 個月的行事曆中使用 13 的值。 如果系統使用 12 個月份的行事曆，且 <paramref name="Month" /> 為 13，則 <see langword="MonthName" /> 會傳回空字串。</param>
        <param name="Abbreviate">選擇性。 <see langword="Boolean" /> 值，表示是否要將月份縮寫。 如果省略，則預設值為 <see langword="False" />，這表示不會將月份縮寫。</param>
        <summary>傳回 <see langword="String" /> 值，包含指定之月份。</summary>
        <returns>傳回 <see langword="String" /> 值，包含指定之月份。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的字串`MonthName`取決於輸入的引數，但也**地區選項**的 Windows 控制台中**控制台**。  
  
> [!NOTE]
>  `MonthName` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。  
  
   
  
## Examples  
 這個範例會使用`MonthName`函式來判斷所指定的整數的月份名稱。 布林值會決定是否完整名稱 (`False`) 或縮寫的名稱 (`True`) 將會顯示。  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> 小於 1 或大於 13。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據您的系統，傳回包含目前日期和時間的 <see langword="Date" /> 值。</summary>
        <value>根據您的系統，傳回包含目前日期和時間的 <see langword="Date" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要設定系統日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。 若要設定系統時間，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。  
  
   
  
## Examples  
 下列範例會使用`Now`屬性來傳回目前的系統日期和時間。  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必要。 您想從中取出秒鐘的 <see langword="Date" /> 值。</param>
        <summary>傳回 0 到 59 的 <see langword="Integer" /> 值，表示一分鐘內的秒鐘。</summary>
        <returns>傳回 0 到 59 的 <see langword="Integer" /> 值，表示一分鐘內的秒鐘。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由呼叫來取得一分鐘內的第二個`DatePart`並指定`DateInterval.Second`如`Interval`引數。  
  
   
  
## Examples  
 下列範例會使用`Second`函式來取得一分鐘內的第二個從指定的時間。 在開發環境中，時間常值會顯示在使用您的程式碼的地區設定的簡短時間格式。  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據您的系統，傳回或設定包含當天目前時間的 <see langword="Date" /> 值。</summary>
        <value>根據您的系統，傳回或設定包含當天目前時間的 <see langword="Date" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`資料型別包括日期元件。 傳回系統時間，當`TimeOfDay`將這些都設定為 1，因此傳回的值代表 1 年的第一天。 設定系統時間時,`TimeOfDay`會忽略日期元件。  
  
 若要存取目前的系統時間`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>屬性。  
  
 若要取得或設定目前的系統日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。  
  
> [!IMPORTANT]
>  設定系統日期或時間需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 這個範例會使用`TimeOfDay`屬性來傳回目前的系統時間。  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回表示從午夜後所經過秒數的 <see langword="Double" /> 值。</summary>
        <value>傳回表示從午夜後所經過秒數的 <see langword="Double" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Timer`屬性傳回最新的午夜起的秒和毫秒數。 秒數是不可或缺的一部分傳回的值，並位於小數部分的毫秒數。  
  
   
  
## Examples  
 這個範例會使用`Timer`暫停應用程式的屬性。 它可以執行期間暫停其他處理。  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 請注意，您必須限定`Timer`具有屬性<xref:Microsoft.VisualBasic?displayProperty=nameWithType>命名空間，因為`Timer`也是在定義的類別<xref:System.Threading?displayProperty=nameWithType>， <xref:System.Timers?displayProperty=nameWithType>，和<xref:System.Windows.Forms?displayProperty=nameWithType>命名空間。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">必要。 從 0 到 23 的 <see langword="Integer" /> 運算式。 不過，也接受超過這個範圍的值。</param>
        <param name="Minute">必要。 從 0 到 59 的 <see langword="Integer" /> 運算式。 不過，也接受超過這個範圍的值。 <paramref name="Minute" /> 的值會加入到計算所得的小時，因此負數的值會指定該小時之前的分鐘。</param>
        <param name="Second">必要。 從 0 到 59 的 <see langword="Integer" /> 運算式。 不過，也接受超過這個範圍的值。 <paramref name="Second" /> 的值會加入到計算所得的分鐘，因此負數的值會指定該分鐘之前的秒鐘。</param>
        <summary>傳回 <see langword="Date" /> 值，表示指定之時、分和秒，且日期資訊設定為相對於西元 1 年的一月 1 日。</summary>
        <returns>傳回 <see langword="Date" /> 值，表示指定之時、分和秒，且日期資訊設定為相對於西元 1 年的一月 1 日。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列範例示範負值，零，而正數的引數值。 `TimeSerial`函式會傳回代表正午或 45： 上午 8:00 前三個小時前 15 分鐘的時間。  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 如果有任一`Minute`或`Second`超過其一般的範圍，它會套用到下一個較大單位適當地。 比方說，如果您指定 75 分鐘，它會評估為 1 小時 15 分鐘。  
  
 `TimeSerial` 這是在一天內的秒數減少模數 86,400 的總秒數。 因此，傳回的時間一律為 00:00:00 和 23:59:59 之間。  
  
 `Date`資料型別包括日期元件。 `TimeSerial` 會將所有這些為 1，因此傳回的值表示 1 年的第一天。 不過，如果引數的值會導致計算出的時間超過 24 小時，一天會遞增為必要。 在下列範例中，值`Hour`和`Minute`導致時間合計超過 24 小時。  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 如果引數的值會產生負面的計算時間，日期資訊設為 1/1/0001 和時間資訊會調整為是 00:00:00 到 23:59:59 之間。 不過，如果計算出的時間小於負 24 小時，<xref:System.ArgumentOutOfRangeException>就會發生錯誤。  
  
 因為每個`Date`值受到<xref:System.DateTime?displayProperty=nameWithType>結構，其方法讓您在組合中的其他選項`Date`值。 例如，您可以採用的其中一個多載<xref:System.DateTime.%23ctor%2A>建構函式來擴展`Date`變數使用的元件所需的組合。 下列範例會設定`newDateTime`至 1978 年 6 的十分之一秒之前在早上 8:30 的：  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 下列範例會使用`TimeSerial`函數來傳回指定的小時、 分和秒的時間。  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引數超出 -2,147,483,648 至 2,147,483,647 的範圍。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算出的時間小於負 24 小時。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定 <see langword="String" /> 值，表示根據系統的當天時間。</summary>
        <value>傳回或設定 <see langword="String" /> 值，表示根據系統的當天時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` 一律會傳回系統時間為"Hh"，這是 24 小時制格式。 此格式會因文化特性而異，這表示即使您變更，並不會變更它**地區選項**中**控制台**。  
  
 取得或設定為目前的系統日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>屬性。  
  
 若要取得目前的系統日期或時間，格式為您的地區設定或自訂格式，提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>屬性設<xref:Microsoft.VisualBasic.Strings.Format%2A>函式，指定預先定義或使用者定義的日期/時間格式。 下列範例為其示範。  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 若要存取目前的系統時間`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。  
  
> [!IMPORTANT]
>  設定系統日期或時間需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 這個範例會使用`TimeString`屬性來顯示目前的系統時間。  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">用來設定 <see langword="TimeString" /> 值的格式無效。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">必要。 <see langword="String" /> 運算式，表示從西元 1 年的 1 月 1 日 00:00:00 到西元 9999 年 12 月 31 日 23:59:59 之間的日期/時間值。</param>
        <summary>傳回 <see langword="Date" /> 值，包含由字串表示的時間資訊，且其日期資訊設定為西元 1 年的一月 1 日。</summary>
        <returns>傳回 <see langword="Date" /> 值，包含由字串表示的時間資訊，且其日期資訊設定為西元 1 年的一月 1 日。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以輸入有效的時間使用 12 小時制或 24 小時制。 例如，`"2:24 P.M."`並`"14:24"`兩者都有效`StringTime`引數。  
  
 如果`StringTime`引數包含日期的詳細資訊，`TimeValue`不包含它在傳回的值。 不過，如果`StringTime`包含無效日期資訊，例如"年 1 月 32"，<xref:System.InvalidCastException>就會發生錯誤。  
  
   
  
## Examples  
 下列範例會使用`TimeValue`函式，將字串轉換成一次。 您也可以使用日期常值直接指派的時機`Date`變數。  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> 包含無效日期資訊。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據您的系統，傳回或設定包含目前日期的 <see langword="Date" /> 值。</summary>
        <value>根據您的系統，傳回或設定包含目前日期的 <see langword="Date" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`資料型別包含時間元件。 傳回系統日期時`Today`設定所有這些為 0，因此傳回的值代表午夜 (00: 00:00)。 設定系統日期時`Today`會忽略時間元件。  
  
 若要存取與目前的系統日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>屬性。  
  
 若要取得或設定目前的系統時間，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。  
  
> [!IMPORTANT]
>  設定系統日期或時間需要 unmanaged 程式碼的權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱 <<c0> <xref:System.Security.Permissions.SecurityPermission> 並[程式碼存取權限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 這個範例會使用`Today`屬性來傳回目前的系統日期。  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">必要。 您想用來判斷星期幾的 <see langword="Date" /> 值。</param>
        <param name="DayOfWeek">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.Sunday" />。</param>
        <summary>傳回 <see langword="Integer" /> 值，包含一個表示星期幾的數字。</summary>
        <returns>傳回 <see langword="Integer" /> 值，包含一個表示星期幾的數字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值`Weekday`函式對應至值`FirstDayOfWeek`列舉; 也就是說，1 代表星期日而 7 表示星期六。  
  
> [!NOTE]
>  `Weekday` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。  
  
 `DayOfWeek`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|系統設定中指定的週第一天|  
|`FirstDayOfWeek.Sunday`|1|星期日 （預設值）|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
   
  
## Examples  
 下列範例會使用`Weekday`函式來取得一週的星期幾，從指定的日期。  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> 小於 0 或大於 7。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">必要。 <see langword="Integer" />. 以 1 到 7 的數值指派週間日，1 表示一週的第一天，7 表示一週的最後一天。 第一天和最後一天的識別需視 <paramref name="FirstDayOfWeekValue" /> 的設定而定。</param>
        <param name="Abbreviate">選擇性。 <see langword="Boolean" /> 值，表示是否要將週間日縮寫。 如果省略，則預設值為 <see langword="False" />，這表示不會將週間日縮寫。</param>
        <param name="FirstDayOfWeekValue">選擇性。 選自 <see langword="FirstDayOfWeek" /> 列舉類型的值，指定一週的第一天。 如果未指定，就會使用 <see langword="FirstDayOfWeek.System" />。</param>
        <summary>傳回 <see langword="String" /> 值，包含指定之週間日的名稱。</summary>
        <returns>傳回 <see langword="String" /> 值，包含指定之週間日的名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的字串`WeekdayName`取決於輸入的引數，但也**地區選項**的 Windows 控制台中**控制台**。  
  
> [!NOTE]
>  `WeekdayName` 會使用目前的行事曆設定，從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>的屬性<xref:System.Globalization.CultureInfo>類別中<xref:System.Globalization>命名空間。 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。  
  
 `FirstDayOfWeekValue`引數可以具有下列設定的其中一個。  
  
|列舉值|值|描述|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|指定在系統中的每週的第一天設定 （預設值）|  
|`FirstDayOfWeek.Sunday`|1|星期日|  
|`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 標準，節 3.17）|  
|`FirstDayOfWeek.Tuesday`|3|星期二|  
|`FirstDayOfWeek.Wednesday`|4|週三|  
|`FirstDayOfWeek.Thursday`|5|星期四|  
|`FirstDayOfWeek.Friday`|6|週五|  
|`FirstDayOfWeek.Saturday`|7|星期六|  
  
   
  
## Examples  
 下列範例會使用`Weekday`函數來取得一週的星期幾，從指定的日期，然後`WeekDayName`函式來取得的工作日名稱，從其數字。  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> 小於 1 或大於 7，或 <paramref name="FirstDayOfWeekValue" /> 小於 0 或大於 7。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必要。 您想從中取出年份的 <see langword="Date" /> 值。</param>
        <summary>傳回 1 到 9999 的 <see langword="Integer" /> 值，表示年份。</summary>
        <returns>傳回 1 到 9999 的 <see langword="Integer" /> 值，表示年份。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由呼叫取得年份`DatePart`並指定`DateInterval.Year`如`Interval`引數。  
  
   
  
## Examples  
 下列範例會使用`Year`函式來取得從指定之日期的年份。 在開發環境中，常值會顯示在簡短日期格式的日期使用您的程式碼的地區設定。  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>