<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659017" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="acf66-101">
        <see langword="Conversion" /> 模組包含用來執行各種轉換作業的程序。</span>
      <span class="sxs-lookup">
        <span data-stu-id="acf66-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-102">這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，將十進位數字轉換成其他的基底編號，字串、 數字的字串和一個資料輸入到另一個。</span><span class="sxs-lookup"><span data-stu-id="acf66-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-103">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="acf66-104">要轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="acf66-105">要將物件轉換成的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-106">將物件轉換成指定的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-107">物件，其類型於執行階段為所要求的目標類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-108">`CTypeDynamic`方法將做為傳遞的物件轉換`Expression`參數所指定的類型`TargetType`參數。</span><span class="sxs-lookup"><span data-stu-id="acf66-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="acf66-109">如果物件是動態的物件，`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="acf66-110">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="acf66-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="acf66-111">如果動態的物件會繼承自<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`方法第一次嘗試使用使用者定義的靜態轉換執行轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="acf66-112">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法嘗試使用動態轉換執行轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="acf66-113">如果動態物件實作<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`方法提供有透過使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-114">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="acf66-115">要將物件轉換成的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="acf66-116">要轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-117">將物件轉換為指定的泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-118">物件，其靜態類型為所要求的泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-119">`CTypeDynamic`方法將做為傳遞的物件轉換`Expression`泛型參數的型別所指定之類型的參數。</span><span class="sxs-lookup"><span data-stu-id="acf66-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="acf66-120">如果物件是動態的物件，`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="acf66-121">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="acf66-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="acf66-122">如果動態的物件會繼承自<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`方法第一次嘗試使用使用者定義的靜態轉換執行轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="acf66-123">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法嘗試使用動態轉換執行轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="acf66-124">如果動態物件實作<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`方法提供有透過使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-125">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-126">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="acf66-127">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-128">對應至最近一次執行階段錯誤的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-129">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="acf66-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="acf66-130">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="acf66-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="acf66-131">如果沒有執行階段錯誤，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="acf66-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="acf66-132">在 Visual Basic 6.0 或更早版本中提供此功能已`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="acf66-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-133">下列程式碼會使用`ErrorToString`函式，以顯示錯誤訊息對應到指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="acf66-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-134">
            <paramref name="ErrorNumber" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="acf66-135">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-135">Optional.</span>
          </span>
          <span data-ttu-id="acf66-136">任何有效的錯誤代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-137">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-138">對應到指定之錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-139">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="acf66-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="acf66-140">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="acf66-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="acf66-141">如果`ErrorNumber`是有效的錯誤號碼，但未定義`ErrorToString`傳回字串`"Application-defined or object-defined error."`如果`ErrorNumber`不正確，就會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="acf66-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="acf66-142">如果`ErrorNumber`省略，則對應至最新的訊息就會傳回執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="acf66-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="acf66-143">如果沒有執行階段錯誤或`ErrorNumber`為 0，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="acf66-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="acf66-144">在 Visual Basic 6.0 或更早版本中提供此功能已`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="acf66-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-145">下列程式碼會使用`ErrorToString`函式，以顯示錯誤訊息對應到指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="acf66-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-146">
            <paramref name="ErrorNumber" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-147">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-148">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-148">Required.</span>
          </span>
          <span data-ttu-id="acf66-149">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-150">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-151">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-152">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-153">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-154">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-155">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-156">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-157">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-158">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-159">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-160">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-161">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-162">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-163">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-164">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-165">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-166">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-167">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-168">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-168">Required.</span>
          </span>
          <span data-ttu-id="acf66-169">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-170">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-171">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-172">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-173">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-174">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-175">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-176">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-177">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-178">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-179">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-180">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-181">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-182">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-183">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-184">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-185">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-186">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-187">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-188">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-188">Required.</span>
          </span>
          <span data-ttu-id="acf66-189">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-190">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-191">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-192">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-193">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-194">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-195">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-196">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-197">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-198">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-199">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-200">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-201">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-202">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-203">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-204">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-205">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-206">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-207">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-208">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-208">Required.</span>
          </span>
          <span data-ttu-id="acf66-209">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-210">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-211">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-212">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-213">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-214">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-215">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-216">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-217">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-218">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-219">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-220">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-221">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-222">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-223">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-224">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-225">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-226">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-227">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-228">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-228">Required.</span>
          </span>
          <span data-ttu-id="acf66-229">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-230">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-231">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-232">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-233">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-234">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-235">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-236">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-237">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-238">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-239">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-240">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-241">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-242">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-243">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-244">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-245">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-246">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-247">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-248">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-248">Required.</span>
          </span>
          <span data-ttu-id="acf66-249">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-250">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-251">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-252">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-253">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-254">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-255">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-256">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-257">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-258">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-259">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-260">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-261">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-262">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-263">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-264">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-265">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-266">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-267">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-268">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-268">Required.</span>
          </span>
          <span data-ttu-id="acf66-269">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-270">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-271">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-272">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-273">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-274">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-275">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-276">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-277">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-278">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-279">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-280">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-281">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-282">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-283">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-284">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-285">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-286">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-287">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-288">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-289">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-289">Required.</span>
          </span>
          <span data-ttu-id="acf66-290">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-291">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-292">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-293">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-294">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-294">If `Number` is</span></span>|<span data-ttu-id="acf66-295">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-296">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-296">Empty</span></span>|<span data-ttu-id="acf66-297">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-297">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-298">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-298">Any numeric value</span></span>|<span data-ttu-id="acf66-299">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-300">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-301">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-302">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-303">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-304">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-305">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-305">Required.</span>
          </span>
          <span data-ttu-id="acf66-306">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-307">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-308">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-309">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-310">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-310">If `Number` is</span></span>|<span data-ttu-id="acf66-311">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-312">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-312">Empty</span></span>|<span data-ttu-id="acf66-313">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-313">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-314">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-314">Any numeric value</span></span>|<span data-ttu-id="acf66-315">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-316">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-317">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-318">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-319">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-320">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-321">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-321">Required.</span>
          </span>
          <span data-ttu-id="acf66-322">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-323">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-324">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-325">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-326">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-326">If `Number` is</span></span>|<span data-ttu-id="acf66-327">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-328">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-328">Empty</span></span>|<span data-ttu-id="acf66-329">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-329">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-330">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-330">Any numeric value</span></span>|<span data-ttu-id="acf66-331">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-332">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-333">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-334">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-335">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-336">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-337">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-337">Required.</span>
          </span>
          <span data-ttu-id="acf66-338">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-339">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-340">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-341">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-342">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-342">If `Number` is</span></span>|<span data-ttu-id="acf66-343">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-344">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-344">Empty</span></span>|<span data-ttu-id="acf66-345">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-345">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-346">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-346">Any numeric value</span></span>|<span data-ttu-id="acf66-347">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-348">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-349">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-350">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-351">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-352">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-353">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-353">Required.</span>
          </span>
          <span data-ttu-id="acf66-354">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-355">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-356">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-357">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-358">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-358">If `Number` is</span></span>|<span data-ttu-id="acf66-359">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-360">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-360">Empty</span></span>|<span data-ttu-id="acf66-361">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-361">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-362">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-362">Any numeric value</span></span>|<span data-ttu-id="acf66-363">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-364">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-365">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-366">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-367">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-368">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-369">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-369">Required.</span>
          </span>
          <span data-ttu-id="acf66-370">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-371">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-372">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-373">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-374">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-374">If `Number` is</span></span>|<span data-ttu-id="acf66-375">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-376">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-376">Empty</span></span>|<span data-ttu-id="acf66-377">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-377">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-378">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-378">Any numeric value</span></span>|<span data-ttu-id="acf66-379">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-380">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-381">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-382">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-383">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-384">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-385">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-385">Required.</span>
          </span>
          <span data-ttu-id="acf66-386">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-387">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-388">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-389">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-390">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-390">If `Number` is</span></span>|<span data-ttu-id="acf66-391">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-392">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-392">Empty</span></span>|<span data-ttu-id="acf66-393">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-393">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-394">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-394">Any numeric value</span></span>|<span data-ttu-id="acf66-395">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-396">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-397">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-398">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-399">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-400">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-401">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-401">Required.</span>
          </span>
          <span data-ttu-id="acf66-402">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-403">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-404">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-405">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-406">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-406">If `Number` is</span></span>|<span data-ttu-id="acf66-407">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-408">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-408">Empty</span></span>|<span data-ttu-id="acf66-409">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-409">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-410">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-410">Any numeric value</span></span>|<span data-ttu-id="acf66-411">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-412">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-413">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-414">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-415">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-416">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-417">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-417">Required.</span>
          </span>
          <span data-ttu-id="acf66-418">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-419">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-420">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-421">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-422">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="acf66-422">If `Number` is</span></span>|<span data-ttu-id="acf66-423">Hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="acf66-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-424">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-424">Empty</span></span>|<span data-ttu-id="acf66-425">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-425">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-426">任何數值</span><span class="sxs-lookup"><span data-stu-id="acf66-426">Any numeric value</span></span>|<span data-ttu-id="acf66-427">最多 16 個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="acf66-428">您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="acf66-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="acf66-429">例如，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="acf66-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-430">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-431">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-432">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-433">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-434">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-434">Required.</span>
          </span>
          <span data-ttu-id="acf66-435">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-436">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-437">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-438">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-439">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-440">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-441">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-442">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-443">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-444">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-445">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-446">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-447">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-448">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-449">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-450">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-451">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-452">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-453">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-454">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-454">Required.</span>
          </span>
          <span data-ttu-id="acf66-455">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-456">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-457">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-458">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-459">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-460">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-461">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-462">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-463">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-464">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-465">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-466">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-467">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-468">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-469">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-470">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-471">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-472">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-473">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-474">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-474">Required.</span>
          </span>
          <span data-ttu-id="acf66-475">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-476">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-477">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-478">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-479">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-480">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-481">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-482">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-483">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-484">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-485">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-486">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-487">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-488">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-489">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-490">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-491">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-492">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-493">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-494">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-494">Required.</span>
          </span>
          <span data-ttu-id="acf66-495">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-496">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-497">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-498">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-499">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-500">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-501">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-502">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-503">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-504">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-505">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-506">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-507">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-508">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-509">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-510">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-511">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-512">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-513">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-514">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-514">Required.</span>
          </span>
          <span data-ttu-id="acf66-515">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-516">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-517">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-518">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-519">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-520">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-521">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-522">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-523">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-524">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-525">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-526">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-527">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-528">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-529">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-530">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-531">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-532">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-533">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-534">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-534">Required.</span>
          </span>
          <span data-ttu-id="acf66-535">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-536">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-537">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-538">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-539">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-540">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-541">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-542">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-543">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-544">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-545">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-546">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-547">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-548">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-549">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-550">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-551">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-552">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-553">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-554">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-554">Required.</span>
          </span>
          <span data-ttu-id="acf66-555">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="acf66-556">如果 <c>Number</c> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-557">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-558">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-559">同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="acf66-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="acf66-560">之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="acf66-561">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="acf66-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="acf66-562">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="acf66-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-563">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="acf66-564">如果引數為負，`Int`函式會傳回第一個負整數小於或等於數字，`Fix`函式會傳回第一個負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="acf66-565">下列範例要求您指定`Option Strict Off`因為類型的隱含地轉換`Double`輸入`Integer`下，不允許`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="acf66-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="acf66-566">您可以使用`CInt`函式，明確地將其他資料類型轉換成類型`Integer`與`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="acf66-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="acf66-567">不過，`CInt`四捨五入為最接近的整數，而非截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="acf66-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="acf66-568">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="acf66-569">您可以使用`CInt`函式呼叫的結果上`Fix`或`Int`執行而不需四捨五入成整數的明確轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="acf66-570">例如: </span><span class="sxs-lookup"><span data-stu-id="acf66-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="acf66-571">如需有關`CInt`，請參閱[類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="acf66-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-572">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-573">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-574">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-575">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-575">Required.</span>
          </span>
          <span data-ttu-id="acf66-576">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-577">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-578">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-579">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-580">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-580">If Number is</span></span>|<span data-ttu-id="acf66-581">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-582">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-582">Empty</span></span>|<span data-ttu-id="acf66-583">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-583">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-584">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-584">Any other number</span></span>|<span data-ttu-id="acf66-585">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-586">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-587">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-588">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-589">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-590">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-591">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-591">Required.</span>
          </span>
          <span data-ttu-id="acf66-592">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-593">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-594">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-595">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-596">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-596">If Number is</span></span>|<span data-ttu-id="acf66-597">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-598">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-598">Empty</span></span>|<span data-ttu-id="acf66-599">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-599">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-600">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-600">Any other number</span></span>|<span data-ttu-id="acf66-601">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-602">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-603">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-604">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-605">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-606">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-607">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-607">Required.</span>
          </span>
          <span data-ttu-id="acf66-608">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-609">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-610">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-611">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-612">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-612">If Number is</span></span>|<span data-ttu-id="acf66-613">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-614">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-614">Empty</span></span>|<span data-ttu-id="acf66-615">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-615">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-616">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-616">Any other number</span></span>|<span data-ttu-id="acf66-617">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-618">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-619">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-620">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-621">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-622">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-623">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-623">Required.</span>
          </span>
          <span data-ttu-id="acf66-624">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-625">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-626">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-627">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-628">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-628">If Number is</span></span>|<span data-ttu-id="acf66-629">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-630">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-630">Empty</span></span>|<span data-ttu-id="acf66-631">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-631">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-632">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-632">Any other number</span></span>|<span data-ttu-id="acf66-633">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-634">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-635">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-636">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-637">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-638">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-639">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-639">Required.</span>
          </span>
          <span data-ttu-id="acf66-640">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-641">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-642">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-643">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-644">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-644">If Number is</span></span>|<span data-ttu-id="acf66-645">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-646">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-646">Empty</span></span>|<span data-ttu-id="acf66-647">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-647">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-648">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-648">Any other number</span></span>|<span data-ttu-id="acf66-649">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-650">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-651">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-652">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-653">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-654">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-655">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-655">Required.</span>
          </span>
          <span data-ttu-id="acf66-656">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-657">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-658">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-659">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-660">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-660">If Number is</span></span>|<span data-ttu-id="acf66-661">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-662">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-662">Empty</span></span>|<span data-ttu-id="acf66-663">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-663">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-664">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-664">Any other number</span></span>|<span data-ttu-id="acf66-665">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-666">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-667">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-668">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-669">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-670">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-671">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-671">Required.</span>
          </span>
          <span data-ttu-id="acf66-672">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-673">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-674">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-675">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-676">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-676">If Number is</span></span>|<span data-ttu-id="acf66-677">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-678">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-678">Empty</span></span>|<span data-ttu-id="acf66-679">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-679">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-680">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-680">Any other number</span></span>|<span data-ttu-id="acf66-681">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-682">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-683">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-684">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-685">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-686">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-687">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-687">Required.</span>
          </span>
          <span data-ttu-id="acf66-688">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-689">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-690">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-691">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-692">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-692">If Number is</span></span>|<span data-ttu-id="acf66-693">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-694">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-694">Empty</span></span>|<span data-ttu-id="acf66-695">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-695">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-696">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-696">Any other number</span></span>|<span data-ttu-id="acf66-697">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-698">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-699">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-700">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-701">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-702">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-703">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-703">Required.</span>
          </span>
          <span data-ttu-id="acf66-704">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-705">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-706">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-707">如果`Number`還不是整數，它會計算前捨入到最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="acf66-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="acf66-708">如果數字為</span><span class="sxs-lookup"><span data-stu-id="acf66-708">If Number is</span></span>|<span data-ttu-id="acf66-709">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="acf66-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="acf66-710">Empty</span><span class="sxs-lookup"><span data-stu-id="acf66-710">Empty</span></span>|<span data-ttu-id="acf66-711">零 (0)</span><span class="sxs-lookup"><span data-stu-id="acf66-711">Zero (0)</span></span>|  
|<span data-ttu-id="acf66-712">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="acf66-712">Any other number</span></span>|<span data-ttu-id="acf66-713">最多 22 八進位字元</span><span class="sxs-lookup"><span data-stu-id="acf66-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="acf66-714">您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="acf66-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="acf66-715">例如，`&O10`是十進位 8 八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="acf66-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-716">這個範例會使用`Oct`函數來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-717">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-718">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="acf66-719">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-719">Required.</span>
          </span>
          <span data-ttu-id="acf66-720">包含任何有效數值運算式的 <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-721">傳回數字的 <see langword="String" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-722">傳回數字的 <see langword="String" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-723">當數字轉換為字串時，前置空格一定會保留正負號的`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="acf66-724">如果`Number`為正數，傳回的字串包含空格，而且加號會隱含。</span><span class="sxs-lookup"><span data-stu-id="acf66-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="acf66-725">減號 （-），且沒有前置空格，就會包含為負數。</span><span class="sxs-lookup"><span data-stu-id="acf66-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="acf66-726">使用`Format`將您要格式化為日期、 時間、 貨幣或其他使用者定義格式的數值轉換成函式。</span><span class="sxs-lookup"><span data-stu-id="acf66-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="acf66-727">不同於`Str`函式，`Format`函式不會加上正負號的前置空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="acf66-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acf66-728">`Str`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="acf66-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="acf66-729">如果使用不同的十進位分隔符號 （例如，在國際應用程式），使用`CStr`或`Format`函式來將數字轉換為字串。</span><span class="sxs-lookup"><span data-stu-id="acf66-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="acf66-730">若要取得特定文化特性中的數字的字串表示，使用數字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="acf66-731">例如，使用<xref:System.Double.ToString%2A>轉換類型的值時`Double`為字串。</span><span class="sxs-lookup"><span data-stu-id="acf66-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acf66-732">這個範例會使用`Str`函數來傳回`String`數字表示。</span><span class="sxs-lookup"><span data-stu-id="acf66-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="acf66-733">當的正數值轉換為字串時，一定會為正負號保留前置空格。</span><span class="sxs-lookup"><span data-stu-id="acf66-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acf66-734">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="acf66-735">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acf66-736">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="acf66-737">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-737">Required.</span>
          </span>
          <span data-ttu-id="acf66-738">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="acf66-739">如果 <c>Expression</c> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-740">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-741">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-742">`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。</span><span class="sxs-lookup"><span data-stu-id="acf66-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="acf66-743">無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。</span><span class="sxs-lookup"><span data-stu-id="acf66-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="acf66-744">不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="acf66-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="acf66-745">空格、 定位點和換行字元都會從引數。</span><span class="sxs-lookup"><span data-stu-id="acf66-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="acf66-746">下列呼叫會傳回 1615198 的值。</span><span class="sxs-lookup"><span data-stu-id="acf66-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="acf66-747">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="acf66-748">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="acf66-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="acf66-749">當使用不同的小數分隔符號時，如同國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="acf66-750">若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="acf66-751">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="acf66-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acf66-752"><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="acf66-753">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="acf66-754">數字之間的衝突格式化為`Double`和`Integer`和`Long`會由編譯器所攔截類型字元，如果它未包含在字串中。</span><span class="sxs-lookup"><span data-stu-id="acf66-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="acf66-755">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="acf66-756">`Val` 停止在無法解譯為數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="acf66-757">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-758">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="acf66-759">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-759">Required.</span>
          </span>
          <span data-ttu-id="acf66-760">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="acf66-761">如果 <c>Expression</c> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-762">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-763">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-764">`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。</span><span class="sxs-lookup"><span data-stu-id="acf66-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="acf66-765">無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。</span><span class="sxs-lookup"><span data-stu-id="acf66-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="acf66-766">不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="acf66-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="acf66-767">空格、 定位點和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="acf66-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="acf66-768">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="acf66-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="acf66-769">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="acf66-770">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="acf66-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="acf66-771">會用到其他的十進位分隔符號，例如國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="acf66-772">若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="acf66-773">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="acf66-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acf66-774"><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="acf66-775">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="acf66-776">數字之間的衝突格式化為`Double`和`Integer`和`Long`衝突未包含在字串中，就會由編譯器所攔截類型字元。</span><span class="sxs-lookup"><span data-stu-id="acf66-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="acf66-777">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="acf66-778">`Val` 停止在無法解譯為數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="acf66-779">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-780">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="acf66-781">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-781">Required.</span>
          </span>
          <span data-ttu-id="acf66-782">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="acf66-783">如果 <c>Expression</c> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acf66-784">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acf66-785">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acf66-786">`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。</span><span class="sxs-lookup"><span data-stu-id="acf66-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="acf66-787">無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。</span><span class="sxs-lookup"><span data-stu-id="acf66-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="acf66-788">不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="acf66-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="acf66-789">空格、 定位點和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="acf66-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="acf66-790">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="acf66-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="acf66-791">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="acf66-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="acf66-792">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="acf66-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="acf66-793">會用到其他的十進位分隔符號，例如國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="acf66-794">若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="acf66-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="acf66-795">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="acf66-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acf66-796"><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="acf66-797">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="acf66-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="acf66-798">數字之間的衝突格式化為`Double`和`Integer`和`Long`衝突未包含在字串中，就會由編譯器所攔截類型字元。</span><span class="sxs-lookup"><span data-stu-id="acf66-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="acf66-799">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="acf66-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="acf66-800">`Val` 停止在無法解譯為數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換。</span><span class="sxs-lookup"><span data-stu-id="acf66-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="acf66-801">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acf66-802">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="acf66-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>