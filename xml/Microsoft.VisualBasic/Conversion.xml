<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="17f9663df373a96bd0268bb9ac91da83c9a425cc" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55358624" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Conversion" /> 模組包含用來執行各種轉換作業的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，將十進位數字轉換成其他的基底、 數字的字串、 數字的字串和一個資料類型到另一個。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">關鍵字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 執行階段程式庫成員</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">要轉換的物件。</param>
        <param name="TargetType">要將物件轉換成的型別。</param>
        <summary>將物件轉換成指定的型別。</summary>
        <returns>物件，其類型於執行階段為所要求的目標類型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic`方法會將轉換為傳遞的物件`Expression`參數所指定的型別`TargetType`參數。 如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。  
  
 `CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。 如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。 如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。 如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。  
  
   
  
## Examples  
 下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">使用動態物件 (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">要將物件轉換成的型別。</typeparam>
        <param name="Expression">要轉換的物件。</param>
        <summary>將物件轉換為指定的泛型類型。</summary>
        <returns>物件，其靜態類型為所要求的泛型類型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic`方法將做為傳遞的物件轉換`Expression`泛型參數的型別所指定之類型的參數。 如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。  
  
 `CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。 如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。 如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。 如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。  
  
   
  
## Examples  
 下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">使用動態物件 (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回對應到指定錯誤代碼的錯誤訊息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回對應到指定錯誤代碼的錯誤訊息。</summary>
        <returns>對應至最近一次執行階段錯誤的錯誤訊息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。 傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。 如果執行階段沒有發生任何錯誤，`ErrorToString`傳回零長度字串 ("")。  
  
 在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。  
  
   
  
## Examples  
 下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> 超出範圍。</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">選擇性。 任何有效的錯誤代碼。</param>
        <summary>傳回對應到指定錯誤代碼的錯誤訊息。</summary>
        <returns>對應到指定之錯誤代碼的錯誤訊息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。 傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。 如果`ErrorNumber`是有效的錯誤號碼，但未定義`ErrorToString`會傳回字串`"Application-defined or object-defined error."`如果`ErrorNumber`無效，則會發生錯誤。 如果`ErrorNumber`省略，則對應至最新的訊息就會傳回執行階段錯誤。 如果沒有發生任何執行階段錯誤或`ErrorNumber`為 0，`ErrorToString`傳回零長度字串 ("")。  
  
 在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。  
  
   
  
## Examples  
 下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> 超出範圍。</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回數字的整數部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Decimal" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  

從 Visual Basic 15.8 的效能`Double`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Fix`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Double`所傳回的值`Fix`會隱含地轉換成與整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設定為`Off`。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 下列範例說明這種最佳化的轉換：

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Short" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Integer" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Long" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Object" /> 類型的數字，或是任何有效的數值運算式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  

如果從 Visual Basic 15.8`Number`引數是的物件，其執行階段型別為`Double`或`Single`，如果您傳遞所傳回的值，已最佳化浮點-點對點-整數的轉換的效能`Fix`方法的任何[整數的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果所傳回的值`Fix`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 例如：

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Single" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
從 Visual Basic 15.8 的效能`Single`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Fix`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Single`所傳回的值`Fix`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 下列範例說明這種最佳化的轉換：
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回代表數字十六進位值的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數字十六進位值的字串。</summary>
        <returns>表示數字十六進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果`Number`是|則 hex 會傳回|  
|-|-|  
|Empty|零 (0)|  
|任何數字值|最多擁有十六個十六進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。 比方說，`&H10`表示十進位 16 的十六進位表示法。  
  
   
  
## Examples  
 這個範例會使用`Hex`函數來傳回數字的十六進位值。  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">如何：將十六進位字串轉換為數字</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回數字的整數部分。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Decimal" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
從 Visual Basic 15.8，雙精度浮點數到整數的轉換的效能最佳化如果您傳遞所傳回的值`Int`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者如果雙精度浮點數值所傳回`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 下列範例說明這種最佳化的轉換：

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Short" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Integer" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Long" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Object" /> 類型的數字，或是任何有效的數值運算式。 如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
如果從 Visual Basic 15.8`Number`引數是的物件，其執行階段型別為`Double`或`Single`，如果您傳遞所傳回的值，已最佳化浮點-點對點-整數的轉換的效能`Int`方法的任何[整數的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果所傳回的值`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 例如：

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 <see langword="Single" /> 類型的數字，或是任何有效的數值運算式。</param>
        <summary>傳回數字的整數部分。</summary>
        <returns>數字的整數部分。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。  
  
 之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。  
  
 `Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`  
  
從 Visual Basic 15.8 的效能`Single`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Int`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Single`所傳回的值`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。 這項最佳化可讓程式碼執行速度更快，對於執行大量轉換 (目標為整數類型) 的程式碼，速度最快提高為兩倍。 下列範例說明這種最佳化的轉換：

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。 如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。 下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。 不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。 例如：  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。 例如：  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">未指定 Number。</exception>
        <exception cref="T:System.ArgumentException">Number 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">數學摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">數學函式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回代表數值的八進位值的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 任何有效的數值運算式或 <see langword="String" /> 運算式。</param>
        <summary>傳回代表數值的八進位值的字串。</summary>
        <returns>表示數字八進位值的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Number`尚不是整數，它會計算前捨入為最接近的整數。  
  
|如果數字是|傳回的八進位|  
|-|-|  
|Empty|零 (0)|  
|其他任何數字|最多 22 的八進位字元|  
  
 您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。 比方說，`&O10`是十進位的 8 的八進位標記法。  
  
   
  
## Examples  
 這個範例會使用`Oct`函式來傳回數字的八進位值。  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要項。 包含任何有效數值運算式的 <see langword="Object" />。</param>
        <summary>傳回數字的 <see langword="String" /> 表示。</summary>
        <returns>數字的 <see langword="String" /> 表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當數字轉換成字串時，空格一定會保留正負號的`Number`。 如果`Number`是正數，傳回的字串包含前置空格，而且隱含的加號。 減號 （-），且不得包含前置空格，會包含為負數。  
  
 使用`Format`函式將轉換成日期、 時間、 貨幣或其他使用者定義的格式，您要格式化的數字值。 不同於`Str`函式`Format`函式不會加上正負號的前置空格`Number`。  
  
> [!NOTE]
>  `Str`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 如果不同的小數分隔符號使用 （例如，在國際應用程式），使用`CStr`或`Format`函式來將數字轉換為字串。 若要取得特定文化特性的數字的字串表示，使用數字的`ToString(IFormatProvider)`方法。 例如，使用<xref:System.Double.ToString%2A>轉換類型的值時`Double`為字串。  
  
   
  
## Examples  
 這個範例會使用`Str`函數來傳回`String`數字表示。 當的正數值轉換為字串時，空格一定會保留正負號的。  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> 未指定。</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">轉換摘要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以適當類型的數值傳回包含在字串中的數字。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>以適當類型的數值傳回包含在字串中的數字。</summary>
        <returns>以適當類型數值包含在字串中的數字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。 無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。 不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。 空格、 tab 鍵和換行字元都會從引數。  
  
 下列呼叫會傳回 1615198 的值。  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
下列呼叫會傳回-1 的十進位值。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 會用到不同的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。 若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。  
  
<xref:System.InvalidCastException>可能會擲回例外狀況以回應某些不常見的數字格式。 例如，下列程式碼會引發這個例外狀況。  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果不包含在字串中。  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 下列範例會使用`Val`函數來傳回每個字串中包含的數字。 `Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>以適當類型的數值傳回包含在字串中的數字。</summary>
        <returns>以適當類型數值包含在字串中的數字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。 無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。 不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。 空格、 tab 鍵和換行字元會移除從引數。  
  
 下列呼叫會傳回 1234123 的值。  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
下列呼叫會傳回-1 的十進位值。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。 若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。  
  
> [!NOTE]
>  <xref:System.InvalidCastException>可能會擲回例外狀況以回應某些不常見的數字格式。 例如，下列程式碼會引發這個例外狀況。  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 下列範例會使用`Val`函數來傳回每個字串中包含的數字。 `Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">必要項。 任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。 如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</param>
        <summary>以適當類型的數值傳回包含在字串中的數字。</summary>
        <returns>以適當類型數值包含在字串中的數字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。 無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。 不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。 空格、 tab 鍵和換行字元會移除從引數。  
  
 下列呼叫會傳回 1234123 的值。  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
下列呼叫會傳回-1 的十進位值。  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  `Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。 若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。  
  
> [!NOTE]
>  <xref:System.InvalidCastException>例外狀況可能會引發以回應某些不常見的數字格式。 例如，下列程式碼會引發這個例外狀況。  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 下列範例會使用`Val`函數來傳回每個字串中包含的數字。 `Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> 太大。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
  </Members>
</Type>