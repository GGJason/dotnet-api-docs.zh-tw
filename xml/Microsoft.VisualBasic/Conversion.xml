<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65720e28354cf9fe68efb56839ebd7d07c6348ef" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52381412" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="36144-101"><see langword="Conversion" /> 模組包含用來執行各種轉換作業的程序。</span><span class="sxs-lookup"><span data-stu-id="36144-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-102">這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，將十進位數字轉換成其他的基底、 數字的字串、 數字的字串和一個資料類型到另一個。</span><span class="sxs-lookup"><span data-stu-id="36144-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-103">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-104">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="36144-105">關鍵字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="36144-106">Visual Basic 執行階段程式庫成員</span><span class="sxs-lookup"><span data-stu-id="36144-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="36144-107">要轉換的物件。</span><span class="sxs-lookup"><span data-stu-id="36144-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="36144-108">要將物件轉換成的型別。</span><span class="sxs-lookup"><span data-stu-id="36144-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="36144-109">將物件轉換成指定的型別。</span><span class="sxs-lookup"><span data-stu-id="36144-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="36144-110">物件，其類型於執行階段為所要求的目標類型。</span><span class="sxs-lookup"><span data-stu-id="36144-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-111">`CTypeDynamic`方法會將轉換為傳遞的物件`Expression`參數所指定的型別`TargetType`參數。</span><span class="sxs-lookup"><span data-stu-id="36144-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="36144-112">如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="36144-113">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="36144-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="36144-114">如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="36144-115">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="36144-116">如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-117">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="36144-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="36144-118">使用動態物件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="36144-119">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="36144-120">要將物件轉換成的型別。</span><span class="sxs-lookup"><span data-stu-id="36144-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="36144-121">要轉換的物件。</span><span class="sxs-lookup"><span data-stu-id="36144-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="36144-122">將物件轉換為指定的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="36144-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="36144-123">物件，其靜態類型為所要求的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="36144-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-124">`CTypeDynamic`方法將做為傳遞的物件轉換`Expression`泛型參數的型別所指定之類型的參數。</span><span class="sxs-lookup"><span data-stu-id="36144-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="36144-125">如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="36144-126">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="36144-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="36144-127">如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="36144-128">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="36144-129">如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="36144-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-130">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="36144-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="36144-131">使用動態物件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="36144-132">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-133">傳回對應到指定錯誤代碼的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="36144-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36144-134">傳回對應到指定錯誤代碼的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="36144-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="36144-135">對應至最近一次執行階段錯誤的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="36144-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-136">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="36144-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="36144-137">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="36144-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="36144-138">如果執行階段沒有發生任何錯誤，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="36144-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="36144-139">在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="36144-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-140">下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="36144-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-141"><paramref name="ErrorNumber" /> 超出範圍。</span><span class="sxs-lookup"><span data-stu-id="36144-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="36144-142">選擇性。</span><span class="sxs-lookup"><span data-stu-id="36144-142">Optional.</span></span> <span data-ttu-id="36144-143">任何有效的錯誤代碼。</span><span class="sxs-lookup"><span data-stu-id="36144-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="36144-144">傳回對應到指定錯誤代碼的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="36144-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="36144-145">對應到指定之錯誤代碼的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="36144-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-146">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="36144-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="36144-147">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="36144-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="36144-148">如果`ErrorNumber`是有效的錯誤號碼，但未定義`ErrorToString`會傳回字串`"Application-defined or object-defined error."`如果`ErrorNumber`無效，則會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="36144-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="36144-149">如果`ErrorNumber`省略，則對應至最新的訊息就會傳回執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="36144-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="36144-150">如果沒有發生任何執行階段錯誤或`ErrorNumber`為 0，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="36144-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="36144-151">在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="36144-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-152">下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="36144-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-153"><paramref name="ErrorNumber" /> 超出範圍。</span><span class="sxs-lookup"><span data-stu-id="36144-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-154">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-155">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-155">Required.</span></span> <span data-ttu-id="36144-156"><see langword="Decimal" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-157">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-158">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-159">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-160">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-161">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-162">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="36144-163">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-164">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-165">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-166">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-167">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-168">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-169">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-170">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-171">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-172">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-173">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-175">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-176">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-177">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-178">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-179">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-179">Required.</span></span> <span data-ttu-id="36144-180"><see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-181">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-182">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-183">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-184">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-185">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-186">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="36144-187">從 Visual Basic 15.8 的效能`Double`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Fix`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Double`所傳回的值`Fix`會隱含地轉換成與整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設定為`Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="36144-188">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-189">下列範例說明這種最佳化的轉換：</span><span class="sxs-lookup"><span data-stu-id="36144-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="36144-190">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-191">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-192">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-193">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-194">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-195">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-196">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-197">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-198">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-199">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-200">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-202">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-203">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-204">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-205">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-206">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-206">Required.</span></span> <span data-ttu-id="36144-207"><see langword="Short" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-208">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-209">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-210">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-211">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-212">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-213">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-214">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-215">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-216">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-217">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-218">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-219">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-220">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-221">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-222">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-223">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-224">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-226">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-227">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-228">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-229">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-230">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-230">Required.</span></span> <span data-ttu-id="36144-231"><see langword="Integer" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-232">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-233">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-234">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-235">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-236">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-237">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-238">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-239">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-240">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-241">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-242">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-243">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-244">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-245">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-246">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-247">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-248">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-250">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-251">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-252">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-253">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-254">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-254">Required.</span></span> <span data-ttu-id="36144-255"><see langword="Long" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-256">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-257">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-258">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-259">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-260">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-261">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-262">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-263">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-264">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-265">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-266">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-267">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-268">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-269">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-270">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-271">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-272">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-274">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-275">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-276">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-277">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-278">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-278">Required.</span></span> <span data-ttu-id="36144-279"><see langword="Object" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="36144-280">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="36144-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="36144-281">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-282">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-283">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-284">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-285">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-286">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="36144-287">如果從 Visual Basic 15.8`Number`引數是的物件，其執行階段型別為`Double`或`Single`，如果您傳遞所傳回的值，已最佳化浮點-點對點-整數的轉換的效能`Fix`方法的任何[整數的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果所傳回的值`Fix`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。</span><span class="sxs-lookup"><span data-stu-id="36144-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="36144-288">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-289">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="36144-290">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-291">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-292">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-293">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-294">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-295">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-296">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-297">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-298">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-299">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-300">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-302">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-303">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-304">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-305">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-306">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-306">Required.</span></span> <span data-ttu-id="36144-307"><see langword="Single" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-308">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-309">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-310">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-311">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-312">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-313">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="36144-314">從 Visual Basic 15.8 的效能`Single`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Fix`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Single`所傳回的值`Fix`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。</span><span class="sxs-lookup"><span data-stu-id="36144-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="36144-315">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-316">下列範例說明這種最佳化的轉換：</span><span class="sxs-lookup"><span data-stu-id="36144-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="36144-317">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-318">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-319">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-320">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-321">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-322">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-323">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-324">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-325">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-326">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-327">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-329">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-330">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-331">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-332">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-333">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-334">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-334">Required.</span></span> <span data-ttu-id="36144-335">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-336">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-337">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-337">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-338">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-339">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-339">If `Number` is</span></span>|<span data-ttu-id="36144-340">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-341">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-341">Empty</span></span>|<span data-ttu-id="36144-342">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-342">Zero (0)</span></span>|  
|<span data-ttu-id="36144-343">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-343">Any numeric value</span></span>|<span data-ttu-id="36144-344">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-345">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-346">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-347">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-348"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-349"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-351">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-352">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-352">Required.</span></span> <span data-ttu-id="36144-353">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-354">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-355">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-355">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-356">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-357">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-357">If `Number` is</span></span>|<span data-ttu-id="36144-358">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-359">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-359">Empty</span></span>|<span data-ttu-id="36144-360">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-360">Zero (0)</span></span>|  
|<span data-ttu-id="36144-361">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-361">Any numeric value</span></span>|<span data-ttu-id="36144-362">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-363">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-364">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-365">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-366"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-367"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-369">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-370">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-370">Required.</span></span> <span data-ttu-id="36144-371">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-372">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-373">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-373">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-374">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-375">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-375">If `Number` is</span></span>|<span data-ttu-id="36144-376">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-377">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-377">Empty</span></span>|<span data-ttu-id="36144-378">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-378">Zero (0)</span></span>|  
|<span data-ttu-id="36144-379">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-379">Any numeric value</span></span>|<span data-ttu-id="36144-380">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-381">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-382">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-383">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-384"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-385"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-387">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-388">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-388">Required.</span></span> <span data-ttu-id="36144-389">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-390">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-391">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-391">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-392">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-393">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-393">If `Number` is</span></span>|<span data-ttu-id="36144-394">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-395">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-395">Empty</span></span>|<span data-ttu-id="36144-396">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-396">Zero (0)</span></span>|  
|<span data-ttu-id="36144-397">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-397">Any numeric value</span></span>|<span data-ttu-id="36144-398">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-399">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-400">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-401">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-402"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-403"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-405">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-406">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-406">Required.</span></span> <span data-ttu-id="36144-407">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-408">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-409">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-409">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-410">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-411">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-411">If `Number` is</span></span>|<span data-ttu-id="36144-412">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-413">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-413">Empty</span></span>|<span data-ttu-id="36144-414">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-414">Zero (0)</span></span>|  
|<span data-ttu-id="36144-415">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-415">Any numeric value</span></span>|<span data-ttu-id="36144-416">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-417">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-418">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-419">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-420"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-421"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-423">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-424">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-424">Required.</span></span> <span data-ttu-id="36144-425">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-426">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-427">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-427">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-428">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-429">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-429">If `Number` is</span></span>|<span data-ttu-id="36144-430">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-431">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-431">Empty</span></span>|<span data-ttu-id="36144-432">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-432">Zero (0)</span></span>|  
|<span data-ttu-id="36144-433">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-433">Any numeric value</span></span>|<span data-ttu-id="36144-434">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-435">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-436">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-437">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-438"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-439"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-441">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-442">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-442">Required.</span></span> <span data-ttu-id="36144-443">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-444">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-445">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-445">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-446">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-447">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-447">If `Number` is</span></span>|<span data-ttu-id="36144-448">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-449">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-449">Empty</span></span>|<span data-ttu-id="36144-450">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-450">Zero (0)</span></span>|  
|<span data-ttu-id="36144-451">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-451">Any numeric value</span></span>|<span data-ttu-id="36144-452">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-453">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-454">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-455">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-456"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-457"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-459">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-460">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-460">Required.</span></span> <span data-ttu-id="36144-461">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-462">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-463">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-463">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-464">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-465">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-465">If `Number` is</span></span>|<span data-ttu-id="36144-466">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-467">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-467">Empty</span></span>|<span data-ttu-id="36144-468">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-468">Zero (0)</span></span>|  
|<span data-ttu-id="36144-469">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-469">Any numeric value</span></span>|<span data-ttu-id="36144-470">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-471">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-472">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-473">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-474"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-475"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-477">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-478">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-478">Required.</span></span> <span data-ttu-id="36144-479">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-480">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-481">傳回代表數字十六進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-481">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-482">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-483">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="36144-483">If `Number` is</span></span>|<span data-ttu-id="36144-484">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="36144-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-485">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-485">Empty</span></span>|<span data-ttu-id="36144-486">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-486">Zero (0)</span></span>|  
|<span data-ttu-id="36144-487">任何數字值</span><span class="sxs-lookup"><span data-stu-id="36144-487">Any numeric value</span></span>|<span data-ttu-id="36144-488">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="36144-489">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="36144-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="36144-490">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="36144-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-491">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-492"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-493"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="36144-495">如何：將十六進位字串轉換為數字</span><span class="sxs-lookup"><span data-stu-id="36144-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-496">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-497">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-497">Required.</span></span> <span data-ttu-id="36144-498"><see langword="Decimal" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-499">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-500">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-501">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-502">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-503">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-504">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="36144-505">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-506">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-507">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-508">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-509">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-510">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-511">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-512">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-513">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-514">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-515">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-517">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-518">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-519">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-520">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-521">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-521">Required.</span></span> <span data-ttu-id="36144-522"><see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-523">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-524">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-525">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-526">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-527">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-528">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="36144-529">從 Visual Basic 15.8，雙精度浮點數到整數的轉換的效能最佳化如果您傳遞所傳回的值`Int`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者如果雙精度浮點數值所傳回`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。</span><span class="sxs-lookup"><span data-stu-id="36144-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="36144-530">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-531">下列範例說明這種最佳化的轉換：</span><span class="sxs-lookup"><span data-stu-id="36144-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="36144-532">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-533">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-534">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-535">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-536">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-537">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-538">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-539">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-540">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-541">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-542">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-544">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-545">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-546">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-547">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-548">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-548">Required.</span></span> <span data-ttu-id="36144-549"><see langword="Short" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-550">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-551">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-552">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-553">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-554">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-555">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-556">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-557">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-558">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-559">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-560">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-561">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-562">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-563">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-564">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-565">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-566">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-568">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-569">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-570">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-571">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-572">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-572">Required.</span></span> <span data-ttu-id="36144-573"><see langword="Integer" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-574">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-575">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-576">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-577">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-578">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-579">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-580">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-581">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-582">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-583">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-584">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-585">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-586">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-587">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-588">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-589">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-590">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-592">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-593">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-594">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-595">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-596">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-596">Required.</span></span> <span data-ttu-id="36144-597"><see langword="Long" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-598">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-599">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-600">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-601">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-602">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-603">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-604">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-605">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-606">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-607">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-608">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-609">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-610">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-611">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-612">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-613">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-614">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-616">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-617">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-618">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-619">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-620">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-620">Required.</span></span> <span data-ttu-id="36144-621"><see langword="Object" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="36144-622">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="36144-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="36144-623">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-624">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-625">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-626">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-627">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-628">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="36144-629">如果從 Visual Basic 15.8`Number`引數是的物件，其執行階段型別為`Double`或`Single`，如果您傳遞所傳回的值，已最佳化浮點-點對點-整數的轉換的效能`Int`方法的任何[整數的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果所傳回的值`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。</span><span class="sxs-lookup"><span data-stu-id="36144-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="36144-630">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-631">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="36144-632">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-633">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-634">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-635">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-636">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-637">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-638">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-639">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-640">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-641">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-642">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-644">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-645">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-646">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-647">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-648">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-648">Required.</span></span> <span data-ttu-id="36144-649"><see langword="Single" /> 類型的數字，或是任何有效的數值運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-650">傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-651">數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-652">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="36144-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="36144-653">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="36144-654">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="36144-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="36144-655">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="36144-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="36144-656">從 Visual Basic 15.8 的效能`Single`-至-整數的轉換已最佳化，如果您傳遞所傳回的值`Int`方法的任何[整數類資料的轉換函式](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或如果`Single`所傳回的值`Int`會自動轉換為整數[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設為 Off。</span><span class="sxs-lookup"><span data-stu-id="36144-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="36144-657">此最佳化可讓程式碼執行速度，最多兩次轉換為整數類型的一大堆程式碼的速度一樣。</span><span class="sxs-lookup"><span data-stu-id="36144-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="36144-658">下列範例說明這種最佳化的轉換：</span><span class="sxs-lookup"><span data-stu-id="36144-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="36144-659">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="36144-660">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="36144-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="36144-661">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="36144-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="36144-662">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="36144-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="36144-663">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="36144-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="36144-664">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="36144-665">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="36144-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="36144-666">例如: </span><span class="sxs-lookup"><span data-stu-id="36144-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="36144-667">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="36144-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-668">未指定 Number。</span><span class="sxs-lookup"><span data-stu-id="36144-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-669">Number 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="36144-671">資料類型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="36144-672">數學摘要</span><span class="sxs-lookup"><span data-stu-id="36144-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="36144-673">數學函式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="36144-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-674">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-675">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-676">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-676">Required.</span></span> <span data-ttu-id="36144-677">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-678">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-679">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-679">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-680">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-681">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-681">If Number is</span></span>|<span data-ttu-id="36144-682">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-683">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-683">Empty</span></span>|<span data-ttu-id="36144-684">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-684">Zero (0)</span></span>|  
|<span data-ttu-id="36144-685">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-685">Any other number</span></span>|<span data-ttu-id="36144-686">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-687">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-688">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-689">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-690"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-691"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-692">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-694">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-694">Required.</span></span> <span data-ttu-id="36144-695">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-696">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-697">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-697">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-698">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-699">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-699">If Number is</span></span>|<span data-ttu-id="36144-700">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-701">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-701">Empty</span></span>|<span data-ttu-id="36144-702">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-702">Zero (0)</span></span>|  
|<span data-ttu-id="36144-703">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-703">Any other number</span></span>|<span data-ttu-id="36144-704">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-705">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-706">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-707">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-708"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-709"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-710">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-712">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-712">Required.</span></span> <span data-ttu-id="36144-713">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-714">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-715">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-715">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-716">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-717">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-717">If Number is</span></span>|<span data-ttu-id="36144-718">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-719">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-719">Empty</span></span>|<span data-ttu-id="36144-720">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-720">Zero (0)</span></span>|  
|<span data-ttu-id="36144-721">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-721">Any other number</span></span>|<span data-ttu-id="36144-722">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-723">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-724">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-725">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-726"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-727"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-728">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-730">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-730">Required.</span></span> <span data-ttu-id="36144-731">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-732">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-733">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-733">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-734">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-735">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-735">If Number is</span></span>|<span data-ttu-id="36144-736">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-737">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-737">Empty</span></span>|<span data-ttu-id="36144-738">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-738">Zero (0)</span></span>|  
|<span data-ttu-id="36144-739">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-739">Any other number</span></span>|<span data-ttu-id="36144-740">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-741">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-742">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-743">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-744"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-745"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-746">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-748">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-748">Required.</span></span> <span data-ttu-id="36144-749">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-750">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-751">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-751">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-752">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-753">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-753">If Number is</span></span>|<span data-ttu-id="36144-754">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-755">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-755">Empty</span></span>|<span data-ttu-id="36144-756">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-756">Zero (0)</span></span>|  
|<span data-ttu-id="36144-757">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-757">Any other number</span></span>|<span data-ttu-id="36144-758">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-759">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-760">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-761">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-762"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-763"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-764">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-766">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-766">Required.</span></span> <span data-ttu-id="36144-767">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-768">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-769">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-769">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-770">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-771">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-771">If Number is</span></span>|<span data-ttu-id="36144-772">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-773">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-773">Empty</span></span>|<span data-ttu-id="36144-774">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-774">Zero (0)</span></span>|  
|<span data-ttu-id="36144-775">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-775">Any other number</span></span>|<span data-ttu-id="36144-776">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-777">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-778">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-779">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-780"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-781"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-782">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-784">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-784">Required.</span></span> <span data-ttu-id="36144-785">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-786">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-787">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-787">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-788">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-789">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-789">If Number is</span></span>|<span data-ttu-id="36144-790">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-791">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-791">Empty</span></span>|<span data-ttu-id="36144-792">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-792">Zero (0)</span></span>|  
|<span data-ttu-id="36144-793">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-793">Any other number</span></span>|<span data-ttu-id="36144-794">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-795">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-796">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-797">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-798"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-799"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-800">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-802">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-802">Required.</span></span> <span data-ttu-id="36144-803">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-804">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-805">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-805">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-806">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-807">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-807">If Number is</span></span>|<span data-ttu-id="36144-808">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-809">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-809">Empty</span></span>|<span data-ttu-id="36144-810">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-810">Zero (0)</span></span>|  
|<span data-ttu-id="36144-811">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-811">Any other number</span></span>|<span data-ttu-id="36144-812">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-813">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-814">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-815">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-816"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-817"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-818">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-820">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-820">Required.</span></span> <span data-ttu-id="36144-821">任何有效的數值運算式或 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="36144-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="36144-822">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-823">傳回代表數值的八進位值的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-823">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-824">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="36144-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="36144-825">如果數字是</span><span class="sxs-lookup"><span data-stu-id="36144-825">If Number is</span></span>|<span data-ttu-id="36144-826">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="36144-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="36144-827">Empty</span><span class="sxs-lookup"><span data-stu-id="36144-827">Empty</span></span>|<span data-ttu-id="36144-828">零 (0)</span><span class="sxs-lookup"><span data-stu-id="36144-828">Zero (0)</span></span>|  
|<span data-ttu-id="36144-829">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="36144-829">Any other number</span></span>|<span data-ttu-id="36144-830">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="36144-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="36144-831">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="36144-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="36144-832">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="36144-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-833">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-834"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-835"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-836">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="36144-838">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-838">Required.</span></span> <span data-ttu-id="36144-839">包含任何有效數值運算式的 <see langword="Object" />。</span><span class="sxs-lookup"><span data-stu-id="36144-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="36144-840">傳回數字的 <see langword="String" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="36144-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="36144-841">傳回數字的 <see langword="String" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="36144-841">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-842">當數字轉換成字串時，空格一定會保留正負號的`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="36144-843">如果`Number`是正數，傳回的字串包含前置空格，而且隱含的加號。</span><span class="sxs-lookup"><span data-stu-id="36144-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="36144-844">減號 （-），且不得包含前置空格，會包含為負數。</span><span class="sxs-lookup"><span data-stu-id="36144-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="36144-845">使用`Format`函式將轉換成日期、 時間、 貨幣或其他使用者定義的格式，您要格式化的數字值。</span><span class="sxs-lookup"><span data-stu-id="36144-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="36144-846">不同於`Str`函式`Format`函式不會加上正負號的前置空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="36144-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36144-847">`Str`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="36144-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="36144-848">如果不同的小數分隔符號使用 （例如，在國際應用程式），使用`CStr`或`Format`函式來將數字轉換為字串。</span><span class="sxs-lookup"><span data-stu-id="36144-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="36144-849">若要取得特定文化特性的數字的字串表示，使用數字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="36144-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="36144-850">例如，使用<xref:System.Double.ToString%2A>轉換類型的值時`Double`為字串。</span><span class="sxs-lookup"><span data-stu-id="36144-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36144-851">這個範例會使用`Str`函數來傳回`String`數字表示。</span><span class="sxs-lookup"><span data-stu-id="36144-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="36144-852">當的正數值轉換為字串時，空格一定會保留正負號的。</span><span class="sxs-lookup"><span data-stu-id="36144-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36144-853"><paramref name="Number" /> 未指定。</span><span class="sxs-lookup"><span data-stu-id="36144-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="36144-854"><paramref name="Number" /> 不是數字類型 (Numeric Type)。</span><span class="sxs-lookup"><span data-stu-id="36144-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="36144-855">轉換摘要</span><span class="sxs-lookup"><span data-stu-id="36144-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36144-857">以適當類型的數值傳回包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="36144-858">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-858">Required.</span></span> <span data-ttu-id="36144-859">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="36144-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="36144-860">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span><span class="sxs-lookup"><span data-stu-id="36144-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="36144-861">以適當類型的數值傳回包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="36144-862">以適當類型數值包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-863">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="36144-864">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="36144-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="36144-865">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="36144-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="36144-866">空格、 tab 鍵和換行字元都會從引數。</span><span class="sxs-lookup"><span data-stu-id="36144-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="36144-867">下列呼叫會傳回 1615198 的值。</span><span class="sxs-lookup"><span data-stu-id="36144-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="36144-868">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="36144-869">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="36144-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="36144-870">會用到不同的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="36144-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="36144-871">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="36144-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="36144-872">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="36144-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="36144-873"><xref:System.InvalidCastException>可能會擲回例外狀況以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="36144-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="36144-874">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="36144-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="36144-875">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果不包含在字串中。</span><span class="sxs-lookup"><span data-stu-id="36144-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="36144-876">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="36144-877">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="36144-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="36144-878"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="36144-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-879"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="36144-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="36144-881">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-881">Required.</span></span> <span data-ttu-id="36144-882">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="36144-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="36144-883">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span><span class="sxs-lookup"><span data-stu-id="36144-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="36144-884">以適當類型的數值傳回包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="36144-885">以適當類型數值包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-886">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="36144-887">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="36144-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="36144-888">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="36144-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="36144-889">空格、 tab 鍵和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="36144-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="36144-890">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="36144-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="36144-891">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="36144-892">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="36144-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="36144-893">會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="36144-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="36144-894">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="36144-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="36144-895">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="36144-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36144-896"><xref:System.InvalidCastException>可能會擲回例外狀況以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="36144-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="36144-897">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="36144-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="36144-898">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。</span><span class="sxs-lookup"><span data-stu-id="36144-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="36144-899">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="36144-900">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="36144-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="36144-901"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="36144-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-902"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="36144-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="36144-904">必要。</span><span class="sxs-lookup"><span data-stu-id="36144-904">Required.</span></span> <span data-ttu-id="36144-905">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="36144-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="36144-906">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span><span class="sxs-lookup"><span data-stu-id="36144-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="36144-907">以適當類型的數值傳回包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="36144-908">以適當類型數值包含在字串中的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36144-909">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="36144-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="36144-910">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="36144-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="36144-911">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="36144-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="36144-912">空格、 tab 鍵和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="36144-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="36144-913">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="36144-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="36144-914">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="36144-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="36144-915">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="36144-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="36144-916">會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="36144-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="36144-917">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="36144-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="36144-918">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="36144-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36144-919"><xref:System.InvalidCastException>例外狀況可能會引發以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="36144-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="36144-920">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="36144-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="36144-921">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。</span><span class="sxs-lookup"><span data-stu-id="36144-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="36144-922">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="36144-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="36144-923">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="36144-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="36144-924"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="36144-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36144-925"><paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span><span class="sxs-lookup"><span data-stu-id="36144-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="36144-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="36144-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>