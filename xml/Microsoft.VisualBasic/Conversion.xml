<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242779" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e5e90-101">
        <see langword="Conversion" /> 模組包含用來執行各種轉換作業的程序。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5e90-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-102">這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，將十進位數字轉換成其他的基底、 數字的字串、 數字的字串和一個資料類型到另一個。</span><span class="sxs-lookup"><span data-stu-id="e5e90-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-103">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="e5e90-104">轉換摘要</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5e90-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="e5e90-105">關鍵字 (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5e90-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="e5e90-106">Visual Basic 執行階段程式庫成員</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5e90-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="e5e90-107">要轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="e5e90-108">要將物件轉換成的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-109">將物件轉換成指定的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-110">物件，其類型於執行階段為所要求的目標類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-111">`CTypeDynamic`方法會將轉換為傳遞的物件`Expression`參數所指定的型別`TargetType`參數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="e5e90-112">如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="e5e90-113">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="e5e90-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="e5e90-114">如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="e5e90-115">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="e5e90-116">如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-117">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="e5e90-118">使用動態物件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="e5e90-119">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="e5e90-120">要將物件轉換成的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="e5e90-121">要轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-122">將物件轉換為指定的泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-123">物件，其靜態類型為所要求的泛型類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-124">`CTypeDynamic`方法將做為傳遞的物件轉換`Expression`泛型參數的型別所指定之類型的參數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="e5e90-125">如果物件的動態物件`CTypeDynamic`方法適用於可用的動態轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="e5e90-126">`CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。</span><span class="sxs-lookup"><span data-stu-id="e5e90-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="e5e90-127">如果動態物件繼承自<xref:System.Dynamic.DynamicObject>，則`CTypeDynamic`方法會先嘗試使用使用者定義的靜態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="e5e90-128">如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法會嘗試使用動態轉換來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="e5e90-129">如果動態物件會實作<xref:System.Dynamic.IDynamicMetaObjectProvider>，則`CTypeDynamic`方法可讓使用者定義的靜態轉換優先順序與動態之間的轉換。</span><span class="sxs-lookup"><span data-stu-id="e5e90-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-130">下列範例會使用`CTypeDynamic`使用動態物件所定義的轉換，將動態物件轉換為字串的方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="e5e90-131">使用動態物件 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="e5e90-132">逐步解說：建立和使用動態物件 (C# 和 Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-133">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-134">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-135">對應至最近一次執行階段錯誤的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-136">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="e5e90-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="e5e90-137">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="e5e90-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="e5e90-138">如果執行階段沒有發生任何錯誤，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="e5e90-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="e5e90-139">在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="e5e90-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-140">下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="e5e90-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-141">
            <paramref name="ErrorNumber" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="e5e90-142">選擇性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-142">Optional.</span>
          </span>
          <span data-ttu-id="e5e90-143">任何有效的錯誤代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-144">傳回對應到指定錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-145">對應到指定之錯誤代碼的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-146">`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="e5e90-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="e5e90-147">傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="e5e90-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="e5e90-148">如果`ErrorNumber`是有效的錯誤號碼，但未定義`ErrorToString`會傳回字串`"Application-defined or object-defined error."`如果`ErrorNumber`無效，則會發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e5e90-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="e5e90-149">如果`ErrorNumber`省略，則對應至最新的訊息就會傳回執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="e5e90-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="e5e90-150">如果沒有發生任何執行階段錯誤或`ErrorNumber`為 0，`ErrorToString`傳回零長度字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="e5e90-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="e5e90-151">在 Visual Basic 6.0 和更早版本，這項功能由提供`Error`函式。</span><span class="sxs-lookup"><span data-stu-id="e5e90-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-152">下列程式碼會使用`ErrorToString`函式來顯示相對應的錯誤訊息指定的錯誤號碼。</span><span class="sxs-lookup"><span data-stu-id="e5e90-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-153">
            <paramref name="ErrorNumber" /> 超出範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-154">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-155">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-155">Required.</span>
          </span>
          <span data-ttu-id="e5e90-156">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-157">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-157">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-158">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-159">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-160">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-161">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-162">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-163">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-164">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-165">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-166">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-167">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-168">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-169">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-170">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-171">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-172">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-173">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-174">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-176">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-177">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-178">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-179">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-180">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-180">Required.</span>
          </span>
          <span data-ttu-id="e5e90-181">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-182">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-182">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-183">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-184">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-185">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-186">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-187">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-188">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-189">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-190">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-191">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-192">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-193">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-194">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-195">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-196">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-197">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-198">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-199">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-201">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-202">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-203">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-204">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-205">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-205">Required.</span>
          </span>
          <span data-ttu-id="e5e90-206">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-207">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-207">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-208">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-209">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-210">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-211">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-212">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-213">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-214">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-215">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-216">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-217">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-218">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-219">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-220">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-221">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-222">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-223">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-224">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-226">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-227">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-228">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-229">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-230">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-230">Required.</span>
          </span>
          <span data-ttu-id="e5e90-231">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-232">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-232">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-233">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-234">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-235">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-236">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-237">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-238">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-239">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-240">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-241">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-242">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-243">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-244">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-245">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-246">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-247">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-248">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-249">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-251">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-252">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-253">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-254">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-255">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-255">Required.</span>
          </span>
          <span data-ttu-id="e5e90-256">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-257">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-257">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-258">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-259">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-260">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-261">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-262">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-263">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-264">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-265">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-266">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-267">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-268">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-269">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-270">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-271">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-272">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-273">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-274">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-276">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-277">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-278">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-279">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-280">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-280">Required.</span>
          </span>
          <span data-ttu-id="e5e90-281">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-282">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-282">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-283">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-284">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-285">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-286">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-287">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-288">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-289">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-290">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-291">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-292">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-293">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-294">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-295">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-296">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-297">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-298">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-299">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-301">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-302">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-303">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-304">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-305">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-305">Required.</span>
          </span>
          <span data-ttu-id="e5e90-306">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-307">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-307">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-308">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-309">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-310">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-311">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-312">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-313">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-314">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-315">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-316">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-317">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-318">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-319">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-320">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-321">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-322">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-323">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-324">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-326">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-327">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-328">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-329">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-330">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-331">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-331">Required.</span>
          </span>
          <span data-ttu-id="e5e90-332">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-333">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-334">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-335">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-336">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-336">If `Number` is</span></span>|<span data-ttu-id="e5e90-337">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-338">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-338">Empty</span></span>|<span data-ttu-id="e5e90-339">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-339">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-340">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-340">Any numeric value</span></span>|<span data-ttu-id="e5e90-341">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-342">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-343">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-344">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-345">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-346">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-348">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-349">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-349">Required.</span>
          </span>
          <span data-ttu-id="e5e90-350">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-351">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-352">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-353">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-354">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-354">If `Number` is</span></span>|<span data-ttu-id="e5e90-355">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-356">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-356">Empty</span></span>|<span data-ttu-id="e5e90-357">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-357">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-358">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-358">Any numeric value</span></span>|<span data-ttu-id="e5e90-359">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-360">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-361">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-362">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-363">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-364">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-366">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-367">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-367">Required.</span>
          </span>
          <span data-ttu-id="e5e90-368">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-369">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-370">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-371">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-372">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-372">If `Number` is</span></span>|<span data-ttu-id="e5e90-373">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-374">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-374">Empty</span></span>|<span data-ttu-id="e5e90-375">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-375">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-376">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-376">Any numeric value</span></span>|<span data-ttu-id="e5e90-377">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-378">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-379">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-380">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-381">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-382">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-384">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-385">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-385">Required.</span>
          </span>
          <span data-ttu-id="e5e90-386">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-387">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-388">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-389">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-390">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-390">If `Number` is</span></span>|<span data-ttu-id="e5e90-391">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-392">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-392">Empty</span></span>|<span data-ttu-id="e5e90-393">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-393">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-394">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-394">Any numeric value</span></span>|<span data-ttu-id="e5e90-395">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-396">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-397">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-398">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-399">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-400">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-402">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-403">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-403">Required.</span>
          </span>
          <span data-ttu-id="e5e90-404">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-405">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-406">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-407">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-408">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-408">If `Number` is</span></span>|<span data-ttu-id="e5e90-409">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-410">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-410">Empty</span></span>|<span data-ttu-id="e5e90-411">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-411">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-412">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-412">Any numeric value</span></span>|<span data-ttu-id="e5e90-413">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-414">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-415">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-416">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-417">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-418">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-420">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-421">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-421">Required.</span>
          </span>
          <span data-ttu-id="e5e90-422">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-423">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-424">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-425">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-426">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-426">If `Number` is</span></span>|<span data-ttu-id="e5e90-427">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-428">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-428">Empty</span></span>|<span data-ttu-id="e5e90-429">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-429">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-430">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-430">Any numeric value</span></span>|<span data-ttu-id="e5e90-431">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-432">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-433">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-434">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-435">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-436">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-438">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-439">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-439">Required.</span>
          </span>
          <span data-ttu-id="e5e90-440">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-441">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-442">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-443">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-444">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-444">If `Number` is</span></span>|<span data-ttu-id="e5e90-445">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-446">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-446">Empty</span></span>|<span data-ttu-id="e5e90-447">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-447">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-448">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-448">Any numeric value</span></span>|<span data-ttu-id="e5e90-449">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-450">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-451">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-452">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-453">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-454">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-456">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-457">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-457">Required.</span>
          </span>
          <span data-ttu-id="e5e90-458">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-459">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-460">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-461">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-462">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-462">If `Number` is</span></span>|<span data-ttu-id="e5e90-463">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-464">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-464">Empty</span></span>|<span data-ttu-id="e5e90-465">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-465">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-466">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-466">Any numeric value</span></span>|<span data-ttu-id="e5e90-467">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-468">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-469">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-470">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-471">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-472">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-474">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-475">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-475">Required.</span>
          </span>
          <span data-ttu-id="e5e90-476">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-477">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-478">傳回代表數字十六進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-479">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-480">如果`Number`是</span><span class="sxs-lookup"><span data-stu-id="e5e90-480">If `Number` is</span></span>|<span data-ttu-id="e5e90-481">則 hex 會傳回</span><span class="sxs-lookup"><span data-stu-id="e5e90-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-482">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-482">Empty</span></span>|<span data-ttu-id="e5e90-483">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-483">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-484">任何數字值</span><span class="sxs-lookup"><span data-stu-id="e5e90-484">Any numeric value</span></span>|<span data-ttu-id="e5e90-485">最多擁有十六個十六進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5e90-486">您可以直接由具有適當的範圍中的數字之前代表十六進位數字`&H`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5e90-487">比方說，`&H10`表示十進位 16 的十六進位表示法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-488">這個範例會使用`Hex`函數來傳回數字的十六進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-489">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-490">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="e5e90-492">如何：將十六進位字串轉換為數字</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-493">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-494">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-494">Required.</span>
          </span>
          <span data-ttu-id="e5e90-495">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-496">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-496">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-497">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-498">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-499">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-500">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-501">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-502">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-503">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-504">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-505">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-506">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-507">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-508">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-509">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-510">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-511">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-512">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-513">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-515">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-516">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-517">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-518">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-519">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-519">Required.</span>
          </span>
          <span data-ttu-id="e5e90-520">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-521">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-521">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-522">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-523">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-524">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-525">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-526">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-527">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-528">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-529">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-530">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-531">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-532">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-533">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-534">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-535">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-536">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-537">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-538">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-540">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-541">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-542">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-543">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-544">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-544">Required.</span>
          </span>
          <span data-ttu-id="e5e90-545">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-546">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-546">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-547">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-548">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-549">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-550">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-551">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-552">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-553">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-554">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-555">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-556">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-557">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-558">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-559">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-560">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-561">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-562">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-563">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-565">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-566">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-567">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-568">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-569">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-569">Required.</span>
          </span>
          <span data-ttu-id="e5e90-570">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-571">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-571">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-572">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-573">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-574">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-575">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-576">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-577">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-578">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-579">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-580">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-581">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-582">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-583">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-584">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-585">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-586">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-587">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-588">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-590">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-591">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-592">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-593">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-594">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-594">Required.</span>
          </span>
          <span data-ttu-id="e5e90-595">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-596">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-596">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-597">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-598">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-599">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-600">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-601">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-602">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-603">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-604">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-605">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-606">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-607">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-608">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-609">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-610">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-611">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-612">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-613">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-615">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-616">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-617">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-618">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-619">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-619">Required.</span>
          </span>
          <span data-ttu-id="e5e90-620">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-621">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-621">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-622">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-623">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-624">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-625">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-626">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-627">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-628">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-629">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-630">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-631">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-632">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-633">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-634">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-635">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-636">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-637">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-638">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-640">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-641">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-642">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-643">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-644">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-644">Required.</span>
          </span>
          <span data-ttu-id="e5e90-645">
            <see langword="Double" /> 類型的數字，或是任何有效的數值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="e5e90-646">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，則會傳回 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-646">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-647">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-648">傳回數字的整數部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-649">同時`Int`並`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5e90-650">之間的差異`Int`並`Fix`函式時，如果`Number`是負數`Int`傳回小於或等於第一個的負整數`Number`，而`Fix`傳回第一個的負整數大於或等於`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5e90-651">例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。</span><span class="sxs-lookup"><span data-stu-id="e5e90-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5e90-652">`Fix(number)` 相當於 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5e90-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-653">此範例說明如何`Int`和`Fix`函式會傳回數字的整數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5e90-654">如果是負數的數字引數，是`Int`函式會傳回第一個的負整數小於或等於數字，`Fix`函式會傳回第一個的負整數，大於或等於數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5e90-655">下列範例會要求您指定`Option Strict Off`因為的隱含地轉換類型`Double`鍵入`Integer`不會允許下`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5e90-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5e90-656">您可以使用`CInt`函式來明確地將其他資料類型轉換成類型`Integer`使用`Option Strict Off`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5e90-657">不過，`CInt`會捨入為最接近的整數，而不是截斷數字的小數部分。</span><span class="sxs-lookup"><span data-stu-id="e5e90-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5e90-658">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5e90-659">您可以使用`CInt`函式呼叫的結果`Fix`或`Int`執行明確轉換為整數，而不需進位。</span><span class="sxs-lookup"><span data-stu-id="e5e90-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5e90-660">例如: </span><span class="sxs-lookup"><span data-stu-id="e5e90-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5e90-661">如需詳細資訊`CInt`，請參閱 <<c2> [ 類型轉換函式](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="e5e90-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-662">未指定 Number。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-663">Number 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="e5e90-665">資料類型摘要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="e5e90-666">數學摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="e5e90-667">數學函式 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-668">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-669">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-670">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-670">Required.</span>
          </span>
          <span data-ttu-id="e5e90-671">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-672">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-673">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-674">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-675">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-675">If Number is</span></span>|<span data-ttu-id="e5e90-676">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-677">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-677">Empty</span></span>|<span data-ttu-id="e5e90-678">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-678">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-679">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-679">Any other number</span></span>|<span data-ttu-id="e5e90-680">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-681">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-682">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-683">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-684">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-685">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-686">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-688">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-688">Required.</span>
          </span>
          <span data-ttu-id="e5e90-689">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-690">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-691">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-692">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-693">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-693">If Number is</span></span>|<span data-ttu-id="e5e90-694">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-695">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-695">Empty</span></span>|<span data-ttu-id="e5e90-696">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-696">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-697">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-697">Any other number</span></span>|<span data-ttu-id="e5e90-698">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-699">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-700">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-701">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-702">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-703">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-704">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-706">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-706">Required.</span>
          </span>
          <span data-ttu-id="e5e90-707">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-708">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-709">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-710">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-711">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-711">If Number is</span></span>|<span data-ttu-id="e5e90-712">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-713">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-713">Empty</span></span>|<span data-ttu-id="e5e90-714">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-714">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-715">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-715">Any other number</span></span>|<span data-ttu-id="e5e90-716">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-717">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-718">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-719">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-720">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-721">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-722">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-724">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-724">Required.</span>
          </span>
          <span data-ttu-id="e5e90-725">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-726">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-727">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-728">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-729">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-729">If Number is</span></span>|<span data-ttu-id="e5e90-730">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-731">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-731">Empty</span></span>|<span data-ttu-id="e5e90-732">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-732">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-733">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-733">Any other number</span></span>|<span data-ttu-id="e5e90-734">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-735">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-736">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-737">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-738">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-739">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-740">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-742">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-742">Required.</span>
          </span>
          <span data-ttu-id="e5e90-743">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-744">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-745">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-746">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-747">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-747">If Number is</span></span>|<span data-ttu-id="e5e90-748">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-749">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-749">Empty</span></span>|<span data-ttu-id="e5e90-750">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-750">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-751">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-751">Any other number</span></span>|<span data-ttu-id="e5e90-752">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-753">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-754">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-755">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-756">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-757">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-758">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-760">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-760">Required.</span>
          </span>
          <span data-ttu-id="e5e90-761">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-762">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-763">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-764">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-765">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-765">If Number is</span></span>|<span data-ttu-id="e5e90-766">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-767">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-767">Empty</span></span>|<span data-ttu-id="e5e90-768">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-768">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-769">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-769">Any other number</span></span>|<span data-ttu-id="e5e90-770">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-771">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-772">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-773">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-774">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-775">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-776">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-778">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-778">Required.</span>
          </span>
          <span data-ttu-id="e5e90-779">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-780">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-781">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-782">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-783">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-783">If Number is</span></span>|<span data-ttu-id="e5e90-784">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-785">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-785">Empty</span></span>|<span data-ttu-id="e5e90-786">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-786">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-787">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-787">Any other number</span></span>|<span data-ttu-id="e5e90-788">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-789">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-790">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-791">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-792">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-793">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-794">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-796">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-796">Required.</span>
          </span>
          <span data-ttu-id="e5e90-797">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-798">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-799">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-800">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-801">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-801">If Number is</span></span>|<span data-ttu-id="e5e90-802">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-803">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-803">Empty</span></span>|<span data-ttu-id="e5e90-804">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-804">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-805">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-805">Any other number</span></span>|<span data-ttu-id="e5e90-806">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-807">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-808">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-809">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-810">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-811">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-812">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-814">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-814">Required.</span>
          </span>
          <span data-ttu-id="e5e90-815">任何有效的數值運算式或 <see langword="String" /> 運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-816">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-817">傳回代表數值的八進位值的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-818">如果`Number`尚不是整數，它會計算前捨入為最接近的整數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5e90-819">如果數字是</span><span class="sxs-lookup"><span data-stu-id="e5e90-819">If Number is</span></span>|<span data-ttu-id="e5e90-820">傳回的八進位</span><span class="sxs-lookup"><span data-stu-id="e5e90-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5e90-821">Empty</span><span class="sxs-lookup"><span data-stu-id="e5e90-821">Empty</span></span>|<span data-ttu-id="e5e90-822">零 (0)</span><span class="sxs-lookup"><span data-stu-id="e5e90-822">Zero (0)</span></span>|  
|<span data-ttu-id="e5e90-823">其他任何數字</span><span class="sxs-lookup"><span data-stu-id="e5e90-823">Any other number</span></span>|<span data-ttu-id="e5e90-824">最多 22 的八進位字元</span><span class="sxs-lookup"><span data-stu-id="e5e90-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5e90-825">您可以直接由具有適當的範圍中的數字之前表示八進位數字`&O`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5e90-826">比方說，`&O10`是十進位的 8 的八進位標記法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-827">這個範例會使用`Oct`函式來傳回數字的八進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-828">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-829">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-830">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="e5e90-832">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-832">Required.</span>
          </span>
          <span data-ttu-id="e5e90-833">包含任何有效數值運算式的 <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-834">傳回數字的 <see langword="String" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-835">傳回數字的 <see langword="String" /> 表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-836">當數字轉換成字串時，空格一定會保留正負號的`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="e5e90-837">如果`Number`是正數，傳回的字串包含前置空格，而且隱含的加號。</span><span class="sxs-lookup"><span data-stu-id="e5e90-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="e5e90-838">減號 （-），且不得包含前置空格，會包含為負數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="e5e90-839">使用`Format`函式將轉換成日期、 時間、 貨幣或其他使用者定義的格式，您要格式化的數字值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="e5e90-840">不同於`Str`函式`Format`函式不會加上正負號的前置空格`Number`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-841">`Str`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e5e90-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5e90-842">如果不同的小數分隔符號使用 （例如，在國際應用程式），使用`CStr`或`Format`函式來將數字轉換為字串。</span><span class="sxs-lookup"><span data-stu-id="e5e90-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="e5e90-843">若要取得特定文化特性的數字的字串表示，使用數字的`ToString(IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="e5e90-844">例如，使用<xref:System.Double.ToString%2A>轉換類型的值時`Double`為字串。</span><span class="sxs-lookup"><span data-stu-id="e5e90-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-845">這個範例會使用`Str`函數來傳回`String`數字表示。</span><span class="sxs-lookup"><span data-stu-id="e5e90-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="e5e90-846">當的正數值轉換為字串時，空格一定會保留正負號的。</span><span class="sxs-lookup"><span data-stu-id="e5e90-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e5e90-847">
            <paramref name="Number" /> 未指定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e5e90-848">
            <paramref name="Number" /> 不是數字類型 (Numeric Type)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="e5e90-849">轉換摘要</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e5e90-851">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="e5e90-852">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-852">Required.</span>
          </span>
          <span data-ttu-id="e5e90-853">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="e5e90-854">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-854">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-855">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-856">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-857">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="e5e90-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5e90-858">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="e5e90-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5e90-859">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="e5e90-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5e90-860">空格、 tab 鍵和換行字元都會從引數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="e5e90-861">下列呼叫會傳回 1615198 的值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="e5e90-862">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-863">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e5e90-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5e90-864">會用到不同的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5e90-865">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5e90-866">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-867"><xref:System.InvalidCastException>例外狀況可能會引發以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="e5e90-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5e90-868">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e5e90-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="e5e90-869">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果不包含在字串中。</span><span class="sxs-lookup"><span data-stu-id="e5e90-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-870">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5e90-871">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="e5e90-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e5e90-872">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-873">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="e5e90-875">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-875">Required.</span>
          </span>
          <span data-ttu-id="e5e90-876">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="e5e90-877">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-877">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-878">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-879">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-880">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="e5e90-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5e90-881">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="e5e90-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5e90-882">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="e5e90-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5e90-883">空格、 tab 鍵和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="e5e90-884">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="e5e90-885">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-886">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e5e90-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5e90-887">會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5e90-888">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5e90-889">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-890"><xref:System.InvalidCastException>例外狀況可能會引發以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="e5e90-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5e90-891">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e5e90-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="e5e90-892">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。</span><span class="sxs-lookup"><span data-stu-id="e5e90-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-893">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5e90-894">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="e5e90-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e5e90-895">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-896">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="e5e90-898">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-898">Required.</span>
          </span>
          <span data-ttu-id="e5e90-899">任何有效的 <see langword="String" /> 運算式、<see langword="Object" /> 變數或 <see langword="Char" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="e5e90-900">如果 <paramref name="Expression" /> 的型別為 <see langword="Object" />，其值必須可轉換成 <see langword="String" />，否則會發生 <see cref="T:System.ArgumentException" /> 錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-900">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e5e90-901">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e5e90-902">以適當類型的數值傳回包含在字串中的數字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5e90-903">`Val`函式停止讀取它無法辨識為數字一部分的第一個字元的字串。</span><span class="sxs-lookup"><span data-stu-id="e5e90-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5e90-904">無法辨識符號和通常被視為數字的值，例如貨幣符號和逗號的組件的字元。</span><span class="sxs-lookup"><span data-stu-id="e5e90-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5e90-905">不過，函式會辨識的基底的前置詞`&O`(為八進位) 和`&H`（適用於十六進位方式）。</span><span class="sxs-lookup"><span data-stu-id="e5e90-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5e90-906">空格、 tab 鍵和換行字元會移除從引數。</span><span class="sxs-lookup"><span data-stu-id="e5e90-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="e5e90-907">下列呼叫會傳回 1234123 的值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="e5e90-908">下列呼叫會傳回-1 的十進位值。</span><span class="sxs-lookup"><span data-stu-id="e5e90-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-909">`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。</span><span class="sxs-lookup"><span data-stu-id="e5e90-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5e90-910">會用到其他的小數分隔符號，例如國際應用程式，使用`CDbl`或`CInt`改將字串轉換為數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5e90-911">若要將特定文化特性的數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。</span><span class="sxs-lookup"><span data-stu-id="e5e90-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5e90-912">例如，使用<xref:System.Double.Parse%2A?displayProperty=nameWithType>若要將字串轉換成`Double`。</span><span class="sxs-lookup"><span data-stu-id="e5e90-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5e90-913"><xref:System.InvalidCastException>例外狀況可能會引發以回應某些不常見的數字格式。</span><span class="sxs-lookup"><span data-stu-id="e5e90-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5e90-914">例如，下列程式碼會引發這個例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e5e90-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="e5e90-915">衝突之間的數字格式化成`Double`而`Integer`和`Long`會遭編譯器攔截類型字元，如果字串中未包含衝突。</span><span class="sxs-lookup"><span data-stu-id="e5e90-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="e5e90-916">下列範例會使用`Val`函數來傳回每個字串中包含的數字。</span><span class="sxs-lookup"><span data-stu-id="e5e90-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5e90-917">`Val` 無法解譯為數值的數字、 數字的修飾詞、 數字的標點符號或泛空白字元的第一個字元轉換的停駐點。</span><span class="sxs-lookup"><span data-stu-id="e5e90-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e5e90-918">
            <paramref name="InputStr" /> 太大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e5e90-919">
            <paramref name="Expression" /> 是 <see langword="Object" /> 類型運算式，無法轉換成 <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="e5e90-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5e90-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>