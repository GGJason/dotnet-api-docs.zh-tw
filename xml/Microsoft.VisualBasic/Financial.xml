<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="597d502122a98f40bf01b84397044f3c295f1b2b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Financial" /> 模組包含用來執行帳務處理運算的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援 Visual Basic 執行階段程式庫成員來執行例如折舊、 目前和未來的值、 利率、 率傳回時和付款的財務計算。  
  
   
  
## Examples  
 這個範例會使用`Rate`函數來計算貸款利率付款的總數目 (`TotPmts`)，loan 付款數量 (`Payment`)，目前的值或主體的貸款 (`PVal`)，未來值的貸款 (`FVal`)、 數字，指出是否為開頭或結尾付款期到期付款 (`PayType`)，和預期的利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要。 <see langword="Double" />，指定資產的初始成本。</param>
        <param name="Salvage">必要。 <see langword="Double" />，指定資產在可用期末的價值。</param>
        <param name="Life">必要。 <see langword="Double" />，指定資產的可用期間長度。</param>
        <param name="Period">必要。 <see langword="Double" />，指定計算資產折舊所用的期間。</param>
        <param name="Factor">選擇性。 <see langword="Double" />，指定餘額遞減所用的利率。 如果省略，則假設是 2 (雙倍遞減法)。</param>
        <summary>傳回 <see langword="Double" />，指定在使用雙倍餘額遞減法或您指定的某個其他方法時，資產在特定期間內的折舊。</summary>
        <returns>傳回 <see langword="Double" />，指定在使用雙倍餘額遞減法或您指定的某個其他方法時，資產在特定期間內的折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 餘額倍率遞減法計算折舊以加速速率。 折舊的第一個週期中最高，而且在連續期間會降低。  
  
 `Life`和`Period`引數必須以相同的單位表示。 例如，如果`Life`指定月數`Period`也必須指定以月為單位。 所有引數必須是正數。  
  
 `DDB`函式會使用下列公式來計算給定的期間內的折舊：  
  
 折舊 / 週期 = ((Cost – Salvage) * 因數) / 生命週期  
  
   
  
## Examples  
 這個範例會使用`DDB`函數來傳回計算資產折舊的初始成本在指定期間內 (`InitCost`)，結尾的資產使用年限的殘值 (`SalvageVal`)、 總年數 (資產的生命週期`LifeTime`)，計算的折舊的年度之期間 (`Depr`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0、<paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &lt;= 0 或 <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" />，指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要。 <see langword="Double" />，指定年金的總付款期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="Pmt">必要。 <see langword="Double" />，指定每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">選擇性。 選擇項。<see langword="Double" />，指定一系列未來付款的現值 (或整筆金額)。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <see langword="DueDate.EndOfPeriod" /> (若付款期限是付款期間的結束日)，或 <see langword="DueDate.BegOfPeriod" /> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <see langword="DueDate.EndOfPeriod" />。</param>
        <summary>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金未來值。</summary>
        <returns>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金未來值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示付款期計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也使用來計算月。  
  
 所有引數，若是現金支出 （例如存款） 會以負號;現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 這個範例會使用`FV`函數來傳回給定百分比投資的未來值比率，每個期間導致視覺效果 (`APR / 12`)，付款的總數 (`TotPmts`)，付款 (`Payment`)，目前的值投資 (`PVal`)，並指出是否付款的開頭或結尾付款期的數字 (`PayType`)。 請注意，因為`Payment`代表現金支出，它是負數。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" />，指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Per">必要。 <see langword="Double" /> 可指定在 1 到 <c>NPer</c> 範圍內的付款期間。</param>
        <param name="NPer">必要。 <see langword="Double" />，指定年金的總付款期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要。 <see langword="Double" />，指定一系列的未來付款或收到款項的現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 <see langword="Double" />，指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為那是它在最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金在給定之期間內的利息付款。</summary>
        <returns>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金在給定之期間內的利息付款。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示付款期計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也使用來計算月。  
  
 所有引數，若是現金支出 （例如存款） 會以負號;現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 這個範例會使用`IPmt`計算多少付款時所有付款相等值的函式。 指定為每個期間百分比利率 (`APR / 12`)、 付款期間的所需的感興趣的部分 (`Period`)，付款的總數 (`TotPmts`)，目前的值或主體的貸款 (`PVal`)，未來的貸款值 (`FVal`)，並指出是否為開頭或結尾付款期到期付款的數字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 或 <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必要。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <param name="Guess">選擇性。 指定您預估值的物件將會由 <see langword="IRR" /> 所傳回。 如果省略，則 <c>Guess</c> 會是 0.1 (10%)。</param>
        <summary>傳回 <see langword="Double" />，指定一系列的定期現金流量 (付款及收到的款項) 之實質報酬率。</summary>
        <returns>傳回 <see langword="Double" />，指定一系列的定期現金流量 (付款及收到的款項) 之實質報酬率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 內部報酬率是接收付款和在定期間隔發生的回條組成的投資的利率。  
  
 `IRR`函式會使用值陣列中的順序解譯收支的順序。 請務必輸入您的付款和回條的值，以正確的順序。 現金流量，每個期間不需要固定，因為其適用於年金。  
  
 `IRR` 計算方式為反覆項目。 開始值是`Guess`，`IRR`循環的計算，直到 0.00001%為止。 如果`IRR`找不到 20 之後的結果會嘗試，它將會失敗。  
  
   
  
## Examples  
 在此範例中，`IRR`函式會傳回陣列中包含五個現金流量的一系列的內部報酬率`Values()`。 第一個陣列元素是負的現金流量，代表商務啟動成本。 剩餘的四個現金流量代表正數現金流量接下來四年。 `Guess` 是預估的內部報酬率。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">陣列引數值無效或 <paramref name="Guess" /> &lt;= -1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必要。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <param name="FinanceRate">必要。 <see langword="Double" />，指定當做融資成本支付的利率。</param>
        <param name="ReinvestRate">必要。 <see langword="Double" />，指定從現金重新投資的收益所收到的利率。</param>
        <summary>傳回 <see langword="Double" />，指定一系列的定期現金流量 (付款及收到的款項) 之修正的實質報酬率。</summary>
        <returns>傳回 <see langword="Double" />，指定一系列的定期現金流量 (付款及收到的款項) 之修正的實質報酬率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已修改的內部報酬率收支使用不同的速率時的內部報酬率。 `MIRR`函式會考量投資成本 (`FinanceRate`) 和利率的現金計算 (`ReinvestRate`)。  
  
 `FinanceRate`和`ReinvestRatearguments`會表示為十進位值的百分比。 例如，12%會表示為 0.12。  
  
 `MIRR`函式會使用值陣列中的順序解譯收支的順序。 請務必輸入您的付款和回條的值，以正確的順序。  
  
   
  
## Examples  
 這個範例會使用`MIRR`函數傳回的已修改內部報酬率的一系列的現金流量陣列中包含`Values()`。 `LoanAPR` 代表融資感興趣，和`InvAPR`代表計算的利率。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> 的陣序不等於 1、<paramref name="FinanceRate" /> = -1 或 <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">發生除數為零的情形。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" />，指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Pmt">必要。 <see langword="Double" />，指定每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">必要。 <see langword="Double" />，指定一系列的未來付款或收到款項的現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 <see langword="Double" />，指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金期數。</summary>
        <returns>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金期數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 所有引數，若是現金支出 （例如存款） 會以負號;現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 這個範例會使用`NPer`函數來傳回必須支付貸款其值進行付款期間的期數包含在`PVal`。 也提供了一些每段期間的百分比利率 (`APR / 12`)，付款 (`Payment`)，貸款的未來值 (`FVal`)，並指出是否為開頭或結尾付款期到期付款的數字 (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 和 <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" />，指定某段期間的重貼現率，以十進位值表示。</param>
        <param name="ValueArray">必要。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <summary>傳回 <see langword="Double" />，指定根據一系列的定期現金流量 (付款和收款) 及重貼現率所得的投資淨現值。</summary>
        <returns>傳回 <see langword="Double" />，指定根據一系列的定期現金流量 (付款和收款) 及重貼現率所得的投資淨現值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 投資的淨現值是一連串的未來的付款和回條的目前值。  
  
 `NPV`函式會使用值陣列中的順序解譯收支的順序。 請務必輸入您的付款和回條的值，以正確的順序。  
  
 `NPV`投資開始的第一個現金流量值的前一期，並結束陣列中的最後一個現金流量值。  
  
 淨現值計算根據未來的現金流量。 如果第一個的現金流量就會發生的第一個週期的開頭，必須加入的第一個值所傳回的值`NPV`，且不得包含的現金流量值`ValueArray`。  
  
 `NPV`函數很相似`PV`函式 （存在的值），除了`PV`函式可讓現金流量開始於結尾或句點開頭。 不同於變數`NPV`現金流量值`PV`現金流量必須固定在整個投資。  
  
   
  
## Examples  
 這個範例會使用`NPV`函數傳回的一系列的現金流量陣列中包含淨現值`values()`。 傳回值，儲存在`FixedRetRate`，代表固定的內部報酬率。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> 是 <see langword="Nothing" />、<paramref name="ValueArray" /> &lt;&gt; 1 的陣序或 <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" /> 可指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要。 <see langword="Double" /> 指定年金保險投資中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要。 <see langword="Double" /> 會指定未來要支付的一系列付款款項的現值 (或整筆金額)。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 <see langword="Double" />，指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金付款款項。</summary>
        <returns>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金付款款項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是時間的一系列固定的現金付款期間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示付款期計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也使用來計算月。  
  
 所有的引數所負的數字，代表現金支出 （例如存款）現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 這個範例會使用`Pmt`函數來傳回在一段固定時間期間的貸款的每月付款。 指定為每個期間百分比利率 (`APR / 12`)，付款的總數 (`TotPmts`)，目前的值或主體的貸款 (`PVal`)，貸款的未來值 (`FVal`)，和數字，指出是否付款已到期的開頭或結尾付款期 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" /> 可指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Per">必要。 <see langword="Double" /> 可指定在 1 到 <c>NPer</c> 範圍內的付款期間。</param>
        <param name="NPer">必要。 <see langword="Double" /> 指定年金保險投資中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要。 必要項。<see langword="Double" /> 可指定一系列的未來付款或收到款項的現值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 <see langword="Double" />，指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金在給定之期間內的本金付款款項。</summary>
        <returns>傳回 <see langword="Double" />，指定根據定期、定額款項及固定利率所計算的年金在給定之期間內的本金付款款項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示付款期計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也使用來計算月。  
  
 所有的引數所負的數字，代表現金支出 （例如存款）現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 這個範例會使用`PPmt`計算所有付款都是相等的值時，在特定時段的付款多少是主體的函式。 指定為每個期間百分比利率 (`APR / 12`)、 付款期間的所需的主要部分 (`Period`)，付款的總數 (`TotPmts`)，目前的值或主體的貸款 (`PVal`)，未來的貸款值 (`FVal`)，並指出是否為開頭或結尾付款期到期付款的數字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 或 <paramref name="Per" /> &gt; <paramref name="NPer" />。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要。 <see langword="Double" /> 可指定每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要。 <see langword="Double" /> 指定年金保險投資中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="Pmt">必要。 <see langword="Double" /> 可指定每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="FV">選擇性。 <see langword="Double" /> 可指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回 <see langword="Double" />，指定根據未來要支付的定期、定額款項及固定利率所計算的年金現值。</summary>
        <returns>傳回 <see langword="Double" />，指定根據未來要支付的定期、定額款項及固定利率所計算的年金現值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示付款期計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也使用來計算月。  
  
 所有引數，若是現金支出 （例如存款） 會以負號;現金收入 （例如被除數檢查） 會以正值的數字。  
  
   
  
## Examples  
 在此範例中，`PV`函式會傳回提供年 20 年內 $50,000 的 $1,000,000 年金的現值。 提供的會預期年利率百分比 (`APR`)，付款的總數 (`TotPmts`)，每個付款數量 (`YrIncome`)，總計未來投資的價值 (`FVal`)，和數字，指出是否每個付款的開頭或結尾付款期 (`PayType`)。 請注意，`YrIncome`為負數，因為它代表現金支出從年金每一年。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必要。 <see langword="Double" /> 指定年金保險投資中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 * 12 (即 48) 期。</param>
        <param name="Pmt">必要。 <see langword="Double" /> 可指定每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">必要。 <see langword="Double" /> 可指定一系列的未來付款或收到款項的現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 <see langword="Double" /> 可指定您在最後一次付款之後想要的未來值或現金結存。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <param name="Guess">選擇性。 <see langword="Double" />，指定您預估的值會由 <see langword="Rate" /> 傳回。 如果省略，則 <c>Guess</c> 會是 0.1 (10%)。</param>
        <summary>傳回 <see langword="Double" />，指定年金在每一期的利率。</summary>
        <returns>傳回 <see langword="Double" />，指定年金在每一期的利率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列固定的現金付款經過一段時間。 年金可以貸款 （例如房屋貸款） 或 （例如每月節省計劃） 投資。  
  
 所有引數，若是現金支出 （例如存款） 會以負號;現金收入 （例如被除數檢查） 會以正值的數字。  
  
 `Rate` 計算方式為反覆項目。 開始值是`Guess`，`Rate`循環的計算，直到 0.00001%為止。 如果`Rate`找不到 20 之後的結果會嘗試，它將會失敗。 如果您的猜測是百分之 10 和`Rate`失敗，嘗試不同的值`Guess`。  
  
   
  
## Examples  
 這個範例會使用`Rate`函數來計算指定的付款總數的貸款利率 (`TotPmts`)，loan 付款數量 (`Payment`)，目前的值或主體的貸款 (`PVal`)，未來值的貸款 (`FVal`)、 數字，指出是否為開頭或結尾付款期到期付款 (`PayType`)，和預期的利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要。 <see langword="Double" />，指定資產的初始成本。</param>
        <param name="Salvage">必要。 <see langword="Double" />，指定資產在可用期末的價值。</param>
        <param name="Life">必要。 <see langword="Double" />，指定資產的可用期間長度。</param>
        <summary>傳回 <see langword="Double" />，指定資產在單一期間內的直線折舊。</summary>
        <returns>傳回 <see langword="Double" />，指定資產在單一期間內的直線折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必須為相同的單位表示折舊期間`Life`引數。 所有引數必須是正數。  
  
   
  
## Examples  
 這個範例會使用`SLN`函數來傳回指定資產的最初成本單期資產的直線折舊 (`InitCost`)，結尾的資產使用年限的殘值 (`SalvageVal`)，和總計的存留期年中的資產 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要。 <see langword="Double" />，指定資產的初始成本。</param>
        <param name="Salvage">必要。 <see langword="Double" />，指定資產在可用期末的價值。</param>
        <param name="Life">必要。 <see langword="Double" />，指定資產的可用期間長度。</param>
        <param name="Period">必要。 <see langword="Double" />，指定計算資產折舊所用的期間。</param>
        <summary>傳回 <see langword="Double" />，指定資產在指定之期間內的年數總和法折舊。</summary>
        <returns>傳回 <see langword="Double" />，指定資產在指定之期間內的年數總和法折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life`和`Period`引數必須以相同的單位表示。 例如，如果`Life`指定月數`Period`也必須指定以月為單位。 所有引數必須是正數。  
  
   
  
## Examples  
 這個範例會使用`SYD`函數來傳回計算資產折舊資產的最初成本在指定期間內 (`InitCost`)，結尾的資產使用年限的殘值 (`SalvageVal`)，和總計的生命週期中的資產年 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &gt; <paramref name="Life" /> 或 <paramref name="Period" /> &lt;=0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>