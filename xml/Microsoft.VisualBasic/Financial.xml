<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8511747393acaa47d3cd5482ba9cb12ae3010583" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55390812" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> 模組包含用來執行帳務處理運算的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 執行階段程式庫成員來執行例如折舊、 現在與未來的值、 利率、 率傳回時和付款的財務計算。  
  
   
  
## Examples  
 這個範例會使用`Rate`函數來計算的貸款利率提供付款的總數 (`TotPmts`)，loan 付款金額 (`Payment`)，現值或主體的貸款 (`PVal`)，未來貸款的值 (`FVal`)，表示是否付款已到期的開頭或結尾的付款期間的數字 (`PayType`)，和預期的利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">關鍵字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 執行階段程式庫成員</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要項。 資產的初始成本。</param>
        <param name="Salvage">必要項。 資產在可用年限末期的價值。</param>
        <param name="Life">必要項。 資產的可用年限長度。</param>
        <param name="Period">必要項。 計算資產折舊的期間。</param>
        <param name="Factor">選擇性。 餘額遞減所用的利率。 如果省略，則假設是 2 (雙倍遞減法)。</param>
        <summary>傳回值，指定在使用倍率遞減法或您指定的某個其他方法時，資產在特定期間內的折舊。</summary>
        <returns>在使用倍率遞減法或您指定的某個其他方法時，資產在特定期間內的折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雙精度浮點數餘額遞減倍率遞減法計算以加速速率的折舊。 折舊的第一個週期中最高，並減少在後續的期間。  
  
 `Life`和`Period`引數必須以相同的單位表示。 例如，如果`Life`有幾個月，`Period`也必須指定幾個月。 所有引數必須是正數。  
  
 `DDB`函式會使用下列公式來計算給定的期間內的折舊：  
  
 折舊期間 = / ((Cost-Salvage) * 因素) / 生命  
  
   
  
## Examples  
 這個範例會使用`DDB`函數來傳回計算資產折舊的初始成本在指定期間內 (`InitCost`)，殘餘價值的資產使用年限的結尾 (`SalvageVal`)，總計的生命週期的年份 (中的資產`LifeTime`)，與計算的折舊的年度期間 (`Depr`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0、<paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &lt;= 0 或 <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="Pmt">必要項。 每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">選擇性。 一系列未來付款的現值 (或整筆金額)。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <see langword="DueDate.EndOfPeriod" /> (若付款期限是付款期間的結束日)，或 <see langword="DueDate.BegOfPeriod" /> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <see langword="DueDate.EndOfPeriod" />。</param>
        <summary>傳回值，指定根據定期、定額付款及固定利率所計算的年金未來值。</summary>
        <returns>根據定期、定額付款及固定利率所計算的年金未來值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示一期付款期間計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也計算使用幾個月。  
  
 負數的數字; 對於所有的引數，表示現金支付方式 （例如存款）現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 這個範例會使用`FV`函數來傳回給定百分比所計算的年金未來值比率，每個期間都會累算 (`APR / 12`)，付款的總數 (`TotPmts`)，付款 (`Payment`)，目前的值投資 (`PVal`)，並指出是否會扣款的開頭或結尾的付款期間的數字 (`PayType`)。 請注意，因為`Payment`代表現金支出，它是負數。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Per">必要項。 在 1 到 <paramref name="NPer" /> 範圍內的付款期間。</param>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要項。 一系列未來付款或收款之現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為那是它在最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回值，指定根據定期、定額付款及固定利率所計算的年金在給定之期間內的利息付款。</summary>
        <returns>根據定期、定額付款及固定利率所計算的年金在給定之期間內的利息付款。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示一期付款期間計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也計算使用幾個月。  
  
 負數的數字; 對於所有的引數，表示現金支付方式 （例如存款）現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 這個範例會使用`IPmt`計算相等值的所有付款時多少付款是感興趣的函式。 是每一期百分比利率 (`APR / 12`)，想要與感興趣部分的付款期間 (`Period`)，付款的總數 (`TotPmts`)，現值或主體的貸款 (`PVal`)，貸款的未來值 (`FVal`)，並指出付款是否已到期的開頭或結尾的付款期間的數字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 或 <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必要項。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <param name="Guess">選擇性。 指定您預估值的物件將會由 <see langword="IRR" /> 所傳回。 如果省略，則 <paramref name="Guess" /> 會是 0.1 (百分之 10)。</param>
        <summary>傳回值，指定一系列定期現金流量 (付款及收款) 的內部報酬率。</summary>
        <returns>一系列定期現金流量 (付款及收款) 的內部報酬率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 內部報酬率是收到的款項及固定間隔發生的回條組成的投資的利率。  
  
 `IRR`函式會使用解譯的付款和收款順序的值陣列中的順序。 請務必輸入您的付款和收款值正確的順序。 因為它是計算的年金每段期間之現金流量不需要予以修正。  
  
 `IRR` 計算方式為反覆項目。 值的起始`Guess`，`IRR`循環的計算，直到 0.00001%為止。 如果`IRR`找不到 20 之後的結果會嘗試，它將會失敗。  
  
   
  
## Examples  
 在此範例中，`IRR`函式會傳回一系列的五個陣列中包含的現金流量的內部報酬率`Values()`。 第一個陣列元素是負的現金流量，代表商務成本。 其餘的四個現金流量代表後續的四年正數的現金流量。 `Guess` 是預估的內部報酬率。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">陣列引數值無效或 <paramref name="Guess" /> &lt;= -1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必要項。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <param name="FinanceRate">必要項。 作為融資成本支付的利率。</param>
        <param name="ReinvestRate">必要項。 從現金重投資之收益所收到的利率。</param>
        <summary>傳回值，指定一系列定期現金流量 (付款及收款) 之修正的內部報酬率。</summary>
        <returns>一系列定期現金流量 (付款及收款) 的內部報酬率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已修改的內部報酬率時付款和收款融資不同費率的內部報酬率。 `MIRR`函式會考慮投資成本 (`FinanceRate`) 和利率的現金上收到的利率 (`ReinvestRate`)。  
  
 `FinanceRate`和`ReinvestRatearguments`會表示為十進位值的百分比。 例如，12 百分比會以 0.12。  
  
 `MIRR`函式會使用解譯的付款和收款順序的值陣列中的順序。 請務必輸入您的付款和收款值正確的順序。  
  
   
  
## Examples  
 這個範例會使用`MIRR`函數來傳回陣列中包含的現金流量的一系列的實質報酬率`Values()`。 `LoanAPR` 代表融資感興趣，和`InvAPR`代表存款上收到的利率。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> 的陣序不等於 1、<paramref name="FinanceRate" /> = -1 或 <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">發生除數為零的情形。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Pmt">必要項。 每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">必要項。 一系列未來付款或收款之現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回值，指定根據定期、定額付款及固定利率所計算的年金期數。</summary>
        <returns>根據定期、定額付款及固定利率所計算的年金期數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 負數的數字; 對於所有的引數，表示現金支付方式 （例如存款）現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 這個範例會使用`NPer`函數來傳回期間付款必須對其值償還貸款的期數包含在`PVal`。 此外還提供一些每一期百分比利率 (`APR / 12`)，付款 (`Payment`)，貸款的未來值 (`FVal`)，並指出付款是否已到期的開頭或結尾的付款期間的數字 (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 和 <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 某段期間的貼現率，以十進位值表示。</param>
        <param name="ValueArray">必要項。 指定現金流量值的 <see langword="Double" /> 陣列； 這個陣列至少必須含有一項負值 (付款) 和一項正值 (收款)。</param>
        <summary>傳回值，指定根據一系列定期現金流量 (付款及收款) 及貼現率所得的投資淨現值。</summary>
        <returns>根據一系列定期現金流量 (付款及收款) 及貼現率所得的投資淨現值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的值，一系列未來付款和收款的投資淨現值。  
  
 `NPV`函式會使用解譯的付款和收款順序的值陣列中的順序。 請務必輸入您的付款和收款值正確的順序。  
  
 `NPV`投資開始的第一個的現金流量值的前一期，並在陣列結尾的最後一個的現金流量值。  
  
 淨現值計算根據未來的現金流量。 如果您第一次的現金流量發生的第一個週期的開頭，必須新增的第一個值所傳回的值`NPV`不會包含的現金流量值`ValueArray`。  
  
 `NPV`函數很相似`PV`函式 （目前的值），不同之處在於`PV`函式可讓現金流量開始在結束或句點開頭。 不同於變數`NPV`現金流量值`PV`現金流量必須固定在整個投資。  
  
   
  
## Examples  
 這個範例會使用`NPV`函數來傳回一系列的現金流量的陣列中所含的淨現值`values()`。 傳回值，儲存在`FixedRetRate`，代表固定的內部報酬率。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> 是 <see langword="Nothing" />、<paramref name="ValueArray" /> &lt;&gt; 1 的陣序或 <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要項。 未來要支付之一系列付款的現值 (或整筆金額)。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回值，指定根據定期、定額付款及固定利率所計算的年金付款款項。</summary>
        <returns>根據定期、定額付款及固定利率所計算的年金付款款項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是時間的一系列固定的現金付款期間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示一期付款期間計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也計算使用幾個月。  
  
 現金支出 （例如存款） 表示負數; 所有的引數，現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 這個範例會使用`Pmt`函數來傳回在一段固定期間貸款的每月付款。 是每一期百分比利率 (`APR / 12`)，付款的總數 (`TotPmts`)，現值或主體的貸款 (`PVal`)，貸款的未來值 (`FVal`)，和數字，指出是否付款已到期的開頭或結尾的付款期間 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="Per">必要項。 在 1 到 <paramref name="NPer" /> 範圍內的付款期間。</param>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="PV">必要項。 一系列未來付款或收款的現值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回值，指定根據定期、定額付款及固定利率所計算的年金在給定之期間內的本金付款款項。</summary>
        <returns>根據定期、定額付款及固定利率所計算的年金在給定之期間內的本金付款款項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示一期付款期間計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也計算使用幾個月。  
  
 現金支出 （例如存款） 表示負數; 所有的引數，現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 這個範例會使用`PPmt`計算相等值的所有付款時，在特定期間內的付款中有多少是主體的函式。 是每一期百分比利率 (`APR / 12`)，為其所需的主體部分的付款期間 (`Period`)，付款的總數 (`TotPmts`)，現值或主體的貸款 (`PVal`)，貸款的未來值 (`FVal`)，並指出付款是否已到期的開頭或結尾的付款期間的數字 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 或 <paramref name="Per" /> &gt; <paramref name="NPer" />。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必要項。 每期利率。 例如，如果您的汽車貸款年利率 (APR) 為 10% 並採月付方式償還，則每期的利率為 0.1/12，也就是 0.0083。</param>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 x 12 (即 48) 期。</param>
        <param name="Pmt">必要項。 每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>傳回值，指定根據未來要支付的定期、定額付款及固定利率所計算的年金現值。</summary>
        <returns>根據未來要支付的定期、定額付款及固定利率所計算的年金現值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 `Rate`和`NPer`引數必須使用相同的單位表示一期付款期間計算。 例如，如果`Rate`會使用幾個月，計算`NPer`必須也計算使用幾個月。  
  
 負數的數字; 對於所有的引數，表示現金支付方式 （例如存款）現金收入 （例如被除數檢查） 被以正數。  
  
   
  
## Examples  
 在此範例中，`PV`函式會傳回將提供一年，如接下來 20 年內的 50,000 美元的美金 $1,000,000 年金的現值。 提供的是預期的年度百分比率 (`APR`)，付款的總數 (`TotPmts`)，每個付款金額 (`YrIncome`)，未來的投資的總值 (`FVal`)，和數字，指出是否每個付款的開頭或結尾的付款期間 (`PayType`)。 請注意，`YrIncome`是負數，因為它代表支付方式從年金每年的現金。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必要項。 年金中付款的總期數。 例如，如果您的四年期汽車貸款是採月付方式償還，則付款總期數就是 4 * 12 (即 48) 期。</param>
        <param name="Pmt">必要項。 每一期所要付的款項。 款項通常包含本金，以及不會隨著年金的有效期間而變更的利息。</param>
        <param name="PV">必要項。 一系列未來付款或收款之現值或今天的價值。 例如，當您貸款買車時，貸款金額就是您要以每月支付方式付給貸方的車款金額現值。</param>
        <param name="FV">選擇性。 您在最後一次付款之後想要的未來價值或現金餘額。 例如，貸款的未來值為 $0，因為是代表最後一期付款之後的值。 然而，如果您想在 18 年內存下美金 $50,000 元做為子女教育費用，那麼美金 $50,000 元就是未來值。 如果省略，則假設為 0。</param>
        <param name="Due">選擇性。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 類型的物件，指定付款何時到期。 這個引數必須是 <c>DueDate.EndOfPeriod</c> (若付款期限是付款期間的結束日)，或 <c>DueDate.BegOfPeriod</c> (若付款期限是付款期間的開始日)。 如果省略，則假設為 <c>DueDate.EndOfPeriod</c>。</param>
        <param name="Guess">選擇性。 您估計的值會由 <see langword="Rate" /> 傳回。 如果省略，則 <paramref name="Guess" /> 會是 0.1 (百分之 10)。</param>
        <summary>傳回值，指定年金的每期利率。</summary>
        <returns>年金的每期利率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 計算的年金是一系列固定的現金付款經過一段時間。 計算的年金不一定 （例如房屋貸款） 貸款投資 （例如每月的節省方案）。  
  
 負數的數字; 對於所有的引數，表示現金支付方式 （例如存款）現金收入 （例如被除數檢查） 被以正數。  
  
 `Rate` 計算方式為反覆項目。 值的起始`Guess`，`Rate`循環的計算，直到 0.00001%為止。 如果`Rate`找不到 20 之後的結果會嘗試，它將會失敗。 如果您的猜測是 10%並`Rate`失敗，嘗試不同的值給`Guess`。  
  
   
  
## Examples  
 這個範例會使用`Rate`函數來計算指定的總付款期數的貸款利率 (`TotPmts`)，loan 付款金額 (`Payment`)，現值或主體的貸款 (`PVal`)，未來貸款的值 (`FVal`)，表示是否付款已到期的開頭或結尾的付款期間的數字 (`PayType`)，和預期的利率的近似值 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要項。 資產的初始成本。</param>
        <param name="Salvage">必要項。 資產在可用年限末期的價值。</param>
        <param name="Life">必要項。 資產的可用年限長度。</param>
        <summary>傳回值，指定資產在單一期間內的直線折舊。</summary>
        <returns>資產在單一期間內的直線折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 折舊期間必須為相同的單位來表示`Life`引數。 所有引數必須是正數。  
  
   
  
## Examples  
 這個範例會使用`SLN`函式傳回的直線折舊資產單期，指定資產的初始成本 (`InitCost`)，殘餘價值的資產使用年限的結尾 (`SalvageVal`)，和總生命週期年中的資產 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必要項。 資產的初始成本。</param>
        <param name="Salvage">必要項。 資產在可用年限末期的價值。</param>
        <param name="Life">必要項。 資產的可用年限長度。</param>
        <param name="Period">必要項。 計算資產折舊的期間。</param>
        <summary>傳回值，指定資產在指定期間內的年數合計法折舊。</summary>
        <returns>資產在指定之期間內的年數總和法折舊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life`和`Period`引數必須以相同的單位表示。 例如，如果`Life`有幾個月，`Period`也必須指定幾個月。 所有引數必須是正數。  
  
   
  
## Examples  
 這個範例會使用`SYD`函數來傳回計算資產折舊資產的初始成本在指定期間內 (`InitCost`)，殘餘價值的資產使用年限的結尾 (`SalvageVal`)，和總計的生命週期中的資產年 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &gt; <paramref name="Life" /> 或 <paramref name="Period" /> &lt;=0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">財務摘要</related>
      </Docs>
    </Member>
  </Members>
</Type>