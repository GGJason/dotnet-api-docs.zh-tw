<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1286592f47737a83f40f015b4451378ba6f1a43" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726721" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> 模組包含了可利用 <see langword="Err" /> 物件識別及處理執行階段錯誤的屬性和程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject`模組支援`Err`物件。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.Information.Err%2A>。  
  
   
  
## Examples  
 這個範例會使用的屬性`Err`建構一個錯誤訊息的對話方塊中的物件。 請注意當您使用時，會發生什麼事`Clear`方法第一次： 當您再產生與 Visual Basic 錯誤`Raise`方法時，Visual Basic 預設值會變成屬性`Err`物件。  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see langword="Err" /> 物件的所有屬性設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`Clear`明確清除`Err`物件尚未處理錯誤，例如當您使用延後的錯誤處理常式之後`On Error Resume Next`。 `Clear`方法會自動呼叫任何下列陳述式執行時：  
  
-   任何一種`Resume`陳述式  
  
-   `Exit Sub`、 `Exit Function`或 `Exit Property`  
  
-   任何`On Error`陳述式  
  
-   任何`Try...Catch...Finally`陳述式  
  
    > [!NOTE]
    >  `On Error Resume Next`建構可能會比`On Error GoTo`處理其他物件的存取權期間所產生的錯誤時。 檢查`Err`之後每個互動的物件移除的物件存取的程式碼的模稜兩可： 您可以確定哪一個物件放在錯誤碼`Err.Number`，以及哪一個物件最初產生的錯誤 （該物件指定在`Err.Source`)。  
  
   
  
## Examples  
 這個範例會使用`Err`物件的`Clear`方法來重設的數值屬性`Err`零，而其為零長度字串的字串屬性的物件。 而沒有呼叫`Clear`，第二個呼叫`MsgBox`會顯示相同的錯誤訊息。  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定 <see langword="String" /> 運算式，其中包含與錯誤有關聯的描述性字串。 讀取/寫入。</summary>
        <value>傳回或設定 <see langword="String" /> 運算式，其中包含與錯誤有關聯的描述性字串。 讀取/寫入。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description`屬性設定包含錯誤的簡短描述。 您可以使用這個屬性來警示使用者，您無法或不想要處理錯誤。 當產生一個使用者定義的錯誤時，指派至錯誤的簡短描述`Description`屬性。 如果`Description`中，不會填入屬性和值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>屬性會對應至 Visual Basic 執行階段錯誤，則所傳回的字串<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>函式設定`Description`屬性時，會產生錯誤。  
  
   
  
## Examples  
 這個範例會將使用者定義訊息`Description`屬性`Err`物件。  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回整數，指出最後執行之陳述式的行數。 唯讀。</summary>
        <value>傳回整數，指出最後執行之陳述式的行數。 唯讀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Visual Basic 遇到沒有行號，則會傳回 0。  
  
   
  
## Examples  
 這個範例會使用`Erl`屬性，指出的行號。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回例外狀況，表示所發生的錯誤。</summary>
        <returns>傳回例外狀況，表示所發生的錯誤。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException`函式就只能從`Err`物件類別。 它使用`Exception`屬性`Err`以顯示所發生之錯誤的物件。  
  
   
  
## Examples  
 下列程式碼會顯示指派給中的例外狀況的訊息`Err`物件：  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定 <see langword="Integer" />，其中包含說明檔中某個主題的代碼。 讀取/寫入。</summary>
        <value>傳回或設定 <see langword="Integer" />，其中包含說明檔中某個主題的代碼。 讀取/寫入。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext`屬性用來顯示應用程式的即時線上說明。 如果說明檔中指定了`HelpFile`、`HelpContext`屬性用來自動顯示所識別的說明檔案。 如果兩個`HelpFile`和`HelpContext`屬性是空的值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>會檢查屬性。 如果值`Number`屬性會對應至 Visual Basic 執行階段錯誤值，則會使用錯誤的 Visual Basic 說明內容識別碼。 如果值`Number`屬性沒有對應至 Visual Basic 錯誤時，Visual Basic [說明] 檔案的內容畫面會顯示。  
  
> [!NOTE]
>  您應該撰寫常式，在您的應用程式，以處理一般錯誤。 設計程式時的物件，您可以使用物件的說明檔，以改善品質的錯誤處理，或您的使用者顯示有意義的訊息，如果是無法復原的錯誤。  
  
   
  
## Examples  
 這個範例會使用`HelpContext`屬性`Err`物件，以顯示 Visual Basic 的說明主題，適用於`Overflow`錯誤。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定 <see langword="String" /> 運算式，其中包含說明檔的完整路徑。 讀取/寫入。</summary>
        <value>傳回或設定 <see langword="String" /> 運算式，其中包含說明檔的完整路徑。 讀取/寫入。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的說明檔`HelpFile`屬性，則會自動呼叫時使用者按下的說明鍵 （或 F1 鍵） 在錯誤訊息對話方塊。 如果`HelpContext`屬性包含有效的內容，就會自動顯示所指定的檔案，該主題的識別碼。 如果沒有`HelpFile`指定，會顯示 [Visual Basic 說明] 檔案。  
  
> [!NOTE]
>  您應該撰寫常式，在您的應用程式，以處理一般錯誤。 設計程式時的物件，您可以使用物件的說明檔，以改善品質的錯誤處理，或您的使用者顯示有意義的訊息，如果是無法復原的錯誤。  
  
   
  
## Examples  
 這個範例會使用`HelpFile`屬性`Err`物件來啟動 [說明] 系統。 根據預設，`HelpFile`屬性包含 Visual Basic [說明] 檔案的名稱。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回由動態連結程式庫 (DLL) 的呼叫所產生的系統錯誤碼。 唯讀。</summary>
        <value>傳回由動態連結程式庫 (DLL) 的呼叫所產生的系統錯誤碼。 唯讀。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性只適用於 Visual Basic 程式碼的 DLL 呼叫。 進行這類呼叫時，呼叫的函式通常會傳回指出成功或失敗，程式碼和<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>填滿屬性。 請檢查文件的 DLL 函式來判斷表示成功或失敗的傳回值。 Visual Basic 應用程式時傳回失敗碼，則應該立即檢查<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性。 會引發任何例外狀況時<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性設定。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性受到<xref:System.Security.Permissions.SecurityAction.LinkDemand>，有助於防止它被存取從受信任的程式碼。 不過，<xref:System.Security.Permissions.SecurityAction.LinkDemand>只立即呼叫者必須具備<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>權限。 如果您的程式碼可以呼叫從部分信任程式碼中，公開的值<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>沒有驗證會造成安全性風險。  
>   
>  如需有關如何使用重要限制<xref:System.Security.Permissions.SecurityAction.LinkDemand>成員，請參閱[Demand 與。LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)。 如需權限的詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
 請注意智慧型裝置，這個屬性一律會傳回零。  
  
   
  
## Examples  
 下列範例示範如何使用`LastDllError`之後呼叫 Windows API 中的函式的屬性。 `PrintWindowCoordinates`視窗以及呼叫程序會採用的控制代碼`GetWindowRect`函式。 `GetWindowRect` RECT 資料結構中填入構成視窗矩形的邊的長度。 如果您傳遞無效的控制代碼時，發生錯誤，而且可透過錯誤號碼`LastDllError`屬性。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定可指定錯誤的數值。 讀取/寫入。</summary>
        <value>傳回或設定可指定錯誤的數值。 讀取/寫入。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有的`Raise`引數，除了`Number`是選擇性的。 如果您省略選擇性的引數，以及屬性設定`Err`物件包含未清除的值，這些值做為您的錯誤的值。  
  
 因為`Err`物件會提供更豐富的資訊比當您產生的錯誤`Error`陳述式，`Raise`撰寫類別模組時產生錯誤時很有用。 例如，與`Raise`方法，可在指定產生錯誤的來源`Source`屬性可以參考錯誤的線上說明和等等。  
  
 當從物件中傳回使用者定義的錯誤，設定`Err.Number`增加數字您選取要當做錯誤碼`VbObjectError`常數。 例如，您可以使用下列程式碼，傳回錯誤碼 1051年數字：  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 此範例說明的典型用法`Number`錯誤處理常式中的屬性。  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 這個範例會使用`Err`物件的`Raise`方法來產生 Visual Basic 撰寫的函式內原始錯誤。 呼叫的函式可以攔截到錯誤，並向使用者回報。 請注意該程序`CallingProcedure`對照的資訊，您可以從衍生類型`Err`物件的資訊，您可以從衍生`Exception`物件。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 大於 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 可識別錯誤本質的 <see langword="Long" /> 整數。 Visual Basic 的錯誤位於 0–65535 的範圍內；0–512 的範圍是保留給系統錯誤使用；513–65535 的範圍則是供使用者定義的錯誤使用。 將 <see langword="Number" /> 屬性設定為您在類別模組中的錯誤碼時，您可將錯誤代碼加入 <see langword="vbObjectError" /> 常數。 例如，若要產生錯誤號碼 513，請將 <c>vbObjectError + 513</c> 指派給 <see langword="Number" /> 屬性。</param>
        <param name="Source">選擇性。 <see langword="String" /> 運算式，可為產生錯誤的物件或應用程式命名。 為物件設定這個屬性時，請使用下列格式：<c>project</c>.<c>class</c>。 如果未指定 <c>Source</c>，則會使用目前 Visual Basic 專案的處理序識別碼。</param>
        <param name="Description">選擇性。 描述錯誤的 <see langword="String" /> 運算式。 如果未指定，則會檢查 <see langword="Number" /> 屬性中的值。 如果它可以對應到 Visual Basic 執行階段錯誤碼，則 <see langword="Error" /> 函式將傳回的字串會當成 <see langword="Description" /> 屬性使用。 如果沒有任何 Visual Basic 錯誤對應到 <see langword="Number" /> 屬性，則會使用「應用程式定義或物件定義的錯誤」訊息。</param>
        <param name="HelpFile">選擇性。 可以找到與這個錯誤有關的說明檔之完整路徑。 如果未指定，則 Visual Basic 會使用 Visual Basic 說明檔的完整磁碟機、路徑和檔名。</param>
        <param name="HelpContext">選擇性。 內容識別碼，用於識別 <c>HelpFile</c> 中提供錯誤說明的主題。 如果省略，則會使用對應到 <see langword="Number" /> 屬性的錯誤之 Visual Basic 說明檔主題代碼 (如果存在的話)。</param>
        <summary>產生執行階段錯誤；可以用來取代 <see langword="Error" /> 陳述式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有的`Raise`引數，除了`Number`是選擇性的。 如果您省略選擇性的引數，以及屬性設定`Err`物件包含未清除的值，這些值做為您的錯誤的值。  
  
 因為`Err`物件會提供更豐富的資訊比當您產生的錯誤`Error`陳述式，`Raise`撰寫類別模組時產生錯誤時很有用。 例如，與`Raise`方法，可在指定產生錯誤的來源`Source`屬性可以參考錯誤的線上說明和等等。  
  
   
  
## Examples  
 這個範例會使用`Err`物件的`Raise`方法來產生 Visual Basic 撰寫的函式中發生錯誤。 呼叫的函式可以攔截到錯誤，並回報給使用者，以訊息方塊。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回或設定 <see langword="String" /> 運算式，指定最初產生錯誤的物件或應用程式的名稱。 讀取/寫入。</summary>
        <value>傳回或設定 <see langword="String" /> 運算式，指定最初產生錯誤的物件或應用程式的名稱。 讀取/寫入。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source`屬性會指定`String`代表物件的運算式會產生錯誤; 運算式通常是物件的類別名稱或處理序識別碼。 使用`Source`屬性以提供資訊，當您的程式碼無法處理中存取的物件產生的錯誤。 比方說，如果您存取 Microsoft Excel，並在產生`Division by zero`錯誤，Microsoft Excel 設定`Err.Number`該錯誤與設定其錯誤碼`Source`至 「 Excel.Application"。  
  
 應用程式會從程式碼中，產生錯誤時`Source`是您的應用程式的程式設計 id。 在類別`Source`應該包含名稱具有表單*專案*。*類別*。 在您的程式碼中發生未預期的錯誤時`Source`自動填入屬性。 在模組中，錯誤`Source`包含專案名稱。  
  
   
  
## Examples  
 這個範例示範如何使用`Source`在一般的錯誤處理常式的屬性。 當發生錯誤而引發`Class1`，字串`"Class1"`指派給`Source`屬性`Err`物件。 然後，此字串會顯示在資訊訊息指示的來源和發生的錯誤數目。  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>