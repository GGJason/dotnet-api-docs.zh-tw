<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b0094-101"><see langword="ErrObject" /> 模組包含了可利用 <see langword="Err" /> 物件識別及處理執行階段錯誤的屬性和程序。</span><span class="sxs-lookup"><span data-stu-id="b0094-101">The <see langword="ErrObject" /> module contains properties and procedures used to identify and handle run-time errors using the <see langword="Err" /> object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-102">`ErrObject`模組支援`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-102">The `ErrObject` module supports the `Err` object.</span></span> <span data-ttu-id="b0094-103">如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.Information.Err%2A>。</span><span class="sxs-lookup"><span data-stu-id="b0094-103">For more information, see <xref:Microsoft.VisualBasic.Information.Err%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-104">這個範例會使用的屬性`Err`建構一個錯誤訊息的對話方塊中的物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-104">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="b0094-105">請注意當您使用時，會發生什麼事`Clear`方法第一次： 當您再產生與 Visual Basic 錯誤`Raise`方法時，Visual Basic 預設值會變成屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-105">Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
```  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0094-106">清除 <see langword="Err" /> 物件的所有屬性設定。</span><span class="sxs-lookup"><span data-stu-id="b0094-106">Clears all property settings of the <see langword="Err" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-107">使用`Clear`明確清除`Err`物件尚未處理錯誤，例如當您使用延後的錯誤處理常式之後`On Error Resume Next`。</span><span class="sxs-lookup"><span data-stu-id="b0094-107">Use `Clear` to explicitly clear the `Err` object after an error has been handled, such as when you use deferred error handling with `On Error Resume Next`.</span></span> <span data-ttu-id="b0094-108">`Clear`方法會自動呼叫任何下列陳述式執行時：</span><span class="sxs-lookup"><span data-stu-id="b0094-108">The `Clear` method is called automatically whenever any of the following statements executes:</span></span>  
  
-   <span data-ttu-id="b0094-109">任何一種`Resume`陳述式</span><span class="sxs-lookup"><span data-stu-id="b0094-109">Any type of `Resume` statement</span></span>  
  
-   <span data-ttu-id="b0094-110">`Exit Sub`、 `Exit Function`或 `Exit Property`</span><span class="sxs-lookup"><span data-stu-id="b0094-110">`Exit Sub`, `Exit Function`, or `Exit Property`</span></span>  
  
-   <span data-ttu-id="b0094-111">任何`On Error`陳述式</span><span class="sxs-lookup"><span data-stu-id="b0094-111">Any `On Error` statement</span></span>  
  
-   <span data-ttu-id="b0094-112">任何`Try...Catch...Finally`陳述式</span><span class="sxs-lookup"><span data-stu-id="b0094-112">Any `Try...Catch...Finally` statement</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="b0094-113">`On Error Resume Next`建構可能會比`On Error GoTo`處理其他物件的存取權期間所產生的錯誤時。</span><span class="sxs-lookup"><span data-stu-id="b0094-113">The `On Error Resume Next` construct may be preferable to `On Error GoTo` when handling errors generated during access to other objects.</span></span> <span data-ttu-id="b0094-114">檢查`Err`之後每個互動的物件移除的物件存取的程式碼的模稜兩可： 您可以確定哪一個物件放在錯誤碼`Err.Number`，以及哪一個物件最初產生的錯誤 （該物件指定在`Err.Source`)。</span><span class="sxs-lookup"><span data-stu-id="b0094-114">Checking `Err` after each interaction with an object removes ambiguity about which object was accessed by the code: You can be sure which object placed the error code in `Err.Number`, as well as which object originally generated the error (the object specified in `Err.Source`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-115">這個範例會使用`Err`物件的`Clear`方法來重設的數值屬性`Err`零，而其為零長度字串的字串屬性的物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-115">This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings.</span></span> <span data-ttu-id="b0094-116">而沒有呼叫`Clear`，第二個呼叫`MsgBox`會顯示相同的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="b0094-116">Without the call to `Clear`, the second call to `MsgBox` would display the same error message.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-117">傳回或設定 <see langword="String" /> 運算式，其中包含與錯誤有關聯的描述性字串。</span><span class="sxs-lookup"><span data-stu-id="b0094-117">Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error.</span></span> <span data-ttu-id="b0094-118">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-118">Read/write.</span></span></summary>
        <value><span data-ttu-id="b0094-119">傳回或設定 <see langword="String" /> 運算式，其中包含與錯誤有關聯的描述性字串。</span><span class="sxs-lookup"><span data-stu-id="b0094-119">Returns or sets a <see langword="String" /> expression containing a descriptive string associated with an error.</span></span> <span data-ttu-id="b0094-120">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-120">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-121">`Description`屬性設定包含錯誤的簡短描述。</span><span class="sxs-lookup"><span data-stu-id="b0094-121">The `Description` property setting consists of a short description of the error.</span></span> <span data-ttu-id="b0094-122">您可以使用這個屬性來警示使用者，您無法或不想要處理錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-122">Use this property to alert the user to an error that you cannot or do not want to handle.</span></span> <span data-ttu-id="b0094-123">當產生一個使用者定義的錯誤時，指派至錯誤的簡短描述`Description`屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-123">When generating a user-defined error, assign a short description of your error to the `Description` property.</span></span> <span data-ttu-id="b0094-124">如果`Description`中，不會填入屬性和值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>屬性會對應至 Visual Basic 執行階段錯誤，則所傳回的字串<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>函式設定`Description`屬性時，會產生錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-124">If the `Description` property is not filled in, and the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property corresponds to a Visual Basic run-time error, then the string returned by the <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> function is set in the `Description` property when the error is generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-125">這個範例會將使用者定義訊息`Description`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-125">This example assigns a user-defined message to the `Description` property of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-126">傳回整數，指出最後執行之陳述式的行數。</span><span class="sxs-lookup"><span data-stu-id="b0094-126">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="b0094-127">唯讀。</span><span class="sxs-lookup"><span data-stu-id="b0094-127">Read-only.</span></span></summary>
        <value><span data-ttu-id="b0094-128">傳回整數，指出最後執行之陳述式的行數。</span><span class="sxs-lookup"><span data-stu-id="b0094-128">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="b0094-129">唯讀。</span><span class="sxs-lookup"><span data-stu-id="b0094-129">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-130">如果 Visual Basic 遇到沒有行號，則會傳回 0。</span><span class="sxs-lookup"><span data-stu-id="b0094-130">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-131">這個範例會使用`Erl`屬性，指出的行號。</span><span class="sxs-lookup"><span data-stu-id="b0094-131">This example uses the `Erl` property to indicate the line number.</span></span>  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b0094-132">傳回例外狀況，表示所發生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-132">Returns the exception representing the error that occurred.</span></span></summary>
        <returns><span data-ttu-id="b0094-133">傳回例外狀況，表示所發生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-133">Returns the exception representing the error that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-134">`GetException`函式就只能從`Err`物件類別。</span><span class="sxs-lookup"><span data-stu-id="b0094-134">The `GetException` function is available only from the `Err` object class.</span></span> <span data-ttu-id="b0094-135">它使用`Exception`屬性`Err`以顯示所發生之錯誤的物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-135">It works with the `Exception` property of the `Err` object to display the error that has occurred.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-136">下列程式碼會顯示指派給中的例外狀況的訊息`Err`物件：</span><span class="sxs-lookup"><span data-stu-id="b0094-136">The following code displays the message assigned to the exception in the `Err` object:</span></span>  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-137">傳回或設定 <see langword="Integer" />，其中包含說明檔中某個主題的代碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-137">Returns or sets an <see langword="Integer" /> containing the context ID for a topic in a Help file.</span></span> <span data-ttu-id="b0094-138">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-138">Read/write.</span></span></summary>
        <value><span data-ttu-id="b0094-139">傳回或設定 <see langword="Integer" />，其中包含說明檔中某個主題的代碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-139">Returns or sets an <see langword="Integer" /> containing the context ID for a topic in a Help file.</span></span> <span data-ttu-id="b0094-140">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-140">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-141">`HelpContext`屬性用來顯示應用程式的即時線上說明。</span><span class="sxs-lookup"><span data-stu-id="b0094-141">The `HelpContext` property is used to display context-sensitive Help for an application.</span></span> <span data-ttu-id="b0094-142">如果說明檔中指定了`HelpFile`、`HelpContext`屬性用來自動顯示所識別的說明檔案。</span><span class="sxs-lookup"><span data-stu-id="b0094-142">If a Help file is specified in `HelpFile`, the `HelpContext` property is used to automatically display the Help file identified.</span></span> <span data-ttu-id="b0094-143">如果兩個`HelpFile`和`HelpContext`屬性是空的值<xref:Microsoft.VisualBasic.ErrObject.Number%2A>會檢查屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-143">If both the `HelpFile` and `HelpContext` properties are empty, the value of the <xref:Microsoft.VisualBasic.ErrObject.Number%2A> property  is checked.</span></span> <span data-ttu-id="b0094-144">如果值`Number`屬性會對應至 Visual Basic 執行階段錯誤值，則會使用錯誤的 Visual Basic 說明內容識別碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-144">If the value of the `Number` property corresponds to a Visual Basic run-time error value, then the Visual Basic Help context ID for the error is used.</span></span> <span data-ttu-id="b0094-145">如果值`Number`屬性沒有對應至 Visual Basic 錯誤時，Visual Basic [說明] 檔案的內容畫面會顯示。</span><span class="sxs-lookup"><span data-stu-id="b0094-145">If the value of the `Number` property does not correspond to a Visual Basic error, the contents screen for the Visual Basic Help file is displayed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0094-146">您應該撰寫常式，在您的應用程式，以處理一般錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-146">You should write routines in your application to handle typical errors.</span></span> <span data-ttu-id="b0094-147">設計程式時的物件，您可以使用物件的說明檔，以改善品質的錯誤處理，或您的使用者顯示有意義的訊息，如果是無法復原的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-147">When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-148">這個範例會使用`HelpContext`屬性`Err`物件，以顯示 Visual Basic 的說明主題，適用於`Overflow`錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-148">This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-149">傳回或設定 <see langword="String" /> 運算式，其中包含說明檔的完整路徑。</span><span class="sxs-lookup"><span data-stu-id="b0094-149">Returns or sets a <see langword="String" /> expression containing the fully qualified path to a Help file.</span></span> <span data-ttu-id="b0094-150">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-150">Read/write.</span></span></summary>
        <value><span data-ttu-id="b0094-151">傳回或設定 <see langword="String" /> 運算式，其中包含說明檔的完整路徑。</span><span class="sxs-lookup"><span data-stu-id="b0094-151">Returns or sets a <see langword="String" /> expression containing the fully qualified path to a Help file.</span></span> <span data-ttu-id="b0094-152">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-152">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-153">如果指定的說明檔`HelpFile`屬性，則會自動呼叫時使用者按下的說明鍵 （或 F1 鍵） 在錯誤訊息對話方塊。</span><span class="sxs-lookup"><span data-stu-id="b0094-153">If a Help file is specified by the `HelpFile` property, it is automatically called when the user presses the Help key (or the F1 key) in the error message dialog box.</span></span> <span data-ttu-id="b0094-154">如果`HelpContext`屬性包含有效的內容，就會自動顯示所指定的檔案，該主題的識別碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-154">If the `HelpContext` property contains a valid context ID for the specified file, that topic is automatically displayed.</span></span> <span data-ttu-id="b0094-155">如果沒有`HelpFile`指定，會顯示 [Visual Basic 說明] 檔案。</span><span class="sxs-lookup"><span data-stu-id="b0094-155">If no `HelpFile` is specified, the Visual Basic Help file is displayed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0094-156">您應該撰寫常式，在您的應用程式，以處理一般錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-156">You should write routines in your application to handle typical errors.</span></span> <span data-ttu-id="b0094-157">設計程式時的物件，您可以使用物件的說明檔，以改善品質的錯誤處理，或您的使用者顯示有意義的訊息，如果是無法復原的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-157">When programming with an object, you can use the object's Help file to improve the quality of your error handling, or to display a meaningful message to your user if the error is not recoverable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-158">這個範例會使用`HelpFile`屬性`Err`物件來啟動 [說明] 系統。</span><span class="sxs-lookup"><span data-stu-id="b0094-158">This example uses the `HelpFile` property of the `Err` object to start the Help system.</span></span> <span data-ttu-id="b0094-159">根據預設，`HelpFile`屬性包含 Visual Basic [說明] 檔案的名稱。</span><span class="sxs-lookup"><span data-stu-id="b0094-159">By default, the `HelpFile` property contains the name of the Visual Basic Help file.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-160">傳回由動態連結程式庫 (DLL) 的呼叫所產生的系統錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-160">Returns a system error code produced by a call to a dynamic-link library (DLL).</span></span> <span data-ttu-id="b0094-161">唯讀。</span><span class="sxs-lookup"><span data-stu-id="b0094-161">Read-only.</span></span></summary>
        <value><span data-ttu-id="b0094-162">傳回由動態連結程式庫 (DLL) 的呼叫所產生的系統錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-162">Returns a system error code produced by a call to a dynamic-link library (DLL).</span></span> <span data-ttu-id="b0094-163">唯讀。</span><span class="sxs-lookup"><span data-stu-id="b0094-163">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-164"><xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性只適用於 Visual Basic 程式碼的 DLL 呼叫。</span><span class="sxs-lookup"><span data-stu-id="b0094-164">The <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property applies only to DLL calls made from Visual Basic code.</span></span> <span data-ttu-id="b0094-165">進行這類呼叫時，呼叫的函式通常會傳回指出成功或失敗，程式碼和<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>填滿屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-165">When such a call is made, the called function usually returns a code indicating success or failure, and the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is filled.</span></span> <span data-ttu-id="b0094-166">請檢查文件的 DLL 函式來判斷表示成功或失敗的傳回值。</span><span class="sxs-lookup"><span data-stu-id="b0094-166">Check the documentation for the DLL's functions to determine the return values that indicate success or failure.</span></span> <span data-ttu-id="b0094-167">Visual Basic 應用程式時傳回失敗碼，則應該立即檢查<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-167">Whenever the failure code is returned, the Visual Basic application should immediately check the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property.</span></span> <span data-ttu-id="b0094-168">會引發任何例外狀況時<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="b0094-168">No exception is raised when the <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b0094-169"><xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>屬性受到<xref:System.Security.Permissions.SecurityAction.LinkDemand>，有助於防止它被存取從受信任的程式碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-169">The <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> property is protected by <xref:System.Security.Permissions.SecurityAction.LinkDemand>, which helps prevent it from being accessed from untrusted code.</span></span> <span data-ttu-id="b0094-170">不過，<xref:System.Security.Permissions.SecurityAction.LinkDemand>只立即呼叫者必須具備<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>權限。</span><span class="sxs-lookup"><span data-stu-id="b0094-170">However, <xref:System.Security.Permissions.SecurityAction.LinkDemand> requires only the immediate caller to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> permission.</span></span> <span data-ttu-id="b0094-171">如果您的程式碼可以呼叫從部分信任程式碼中，公開的值<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>沒有驗證會造成安全性風險。</span><span class="sxs-lookup"><span data-stu-id="b0094-171">If your code can be called from partially trusted code, exposing the value of <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> without validation is a security risk.</span></span>  
>   
>  <span data-ttu-id="b0094-172">如需有關如何使用重要限制<xref:System.Security.Permissions.SecurityAction.LinkDemand>成員，請參閱[Demand 與。LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)。</span><span class="sxs-lookup"><span data-stu-id="b0094-172">For important limitations about how to use the <xref:System.Security.Permissions.SecurityAction.LinkDemand> member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5).</span></span> <span data-ttu-id="b0094-173">如需權限的詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="b0094-173">For more information about permissions, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="b0094-174">請注意智慧型裝置，這個屬性一律會傳回零。</span><span class="sxs-lookup"><span data-stu-id="b0094-174">Note   For smart devices this property always returns zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-175">下列範例示範如何使用`LastDllError`之後呼叫 Windows API 中的函式的屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-175">The following example shows how you can use the `LastDllError` property after calling a function in the Windows API.</span></span> <span data-ttu-id="b0094-176">`PrintWindowCoordinates`視窗以及呼叫程序會採用的控制代碼`GetWindowRect`函式。</span><span class="sxs-lookup"><span data-stu-id="b0094-176">The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function.</span></span> <span data-ttu-id="b0094-177">`GetWindowRect` RECT 資料結構中填入構成視窗矩形的邊的長度。</span><span class="sxs-lookup"><span data-stu-id="b0094-177">`GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window.</span></span> <span data-ttu-id="b0094-178">如果您傳遞無效的控制代碼時，發生錯誤，而且可透過錯誤號碼`LastDllError`屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-178">If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-179">傳回或設定可指定錯誤的數值。</span><span class="sxs-lookup"><span data-stu-id="b0094-179">Returns or sets a numeric value specifying an error.</span></span> <span data-ttu-id="b0094-180">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-180">Read/write.</span></span></summary>
        <value><span data-ttu-id="b0094-181">傳回或設定可指定錯誤的數值。</span><span class="sxs-lookup"><span data-stu-id="b0094-181">Returns or sets a numeric value specifying an error.</span></span> <span data-ttu-id="b0094-182">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-182">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-183">所有的`Raise`引數，除了`Number`是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="b0094-183">All of the `Raise` arguments except `Number` are optional.</span></span> <span data-ttu-id="b0094-184">如果您省略選擇性的引數，以及屬性設定`Err`物件包含未清除的值，這些值做為您的錯誤的值。</span><span class="sxs-lookup"><span data-stu-id="b0094-184">If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.</span></span>  
  
 <span data-ttu-id="b0094-185">因為`Err`物件會提供更豐富的資訊比當您產生的錯誤`Error`陳述式，`Raise`撰寫類別模組時產生錯誤時很有用。</span><span class="sxs-lookup"><span data-stu-id="b0094-185">Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules.</span></span> <span data-ttu-id="b0094-186">例如，與`Raise`方法，可在指定產生錯誤的來源`Source`屬性可以參考錯誤的線上說明和等等。</span><span class="sxs-lookup"><span data-stu-id="b0094-186">For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on.</span></span>  
  
 <span data-ttu-id="b0094-187">當從物件中傳回使用者定義的錯誤，設定`Err.Number`增加數字您選取要當做錯誤碼`VbObjectError`常數。</span><span class="sxs-lookup"><span data-stu-id="b0094-187">When returning a user-defined error from an object, set `Err.Number` by adding the number you selected as an error code to the `VbObjectError` constant.</span></span> <span data-ttu-id="b0094-188">例如，您可以使用下列程式碼，傳回錯誤碼 1051年數字：</span><span class="sxs-lookup"><span data-stu-id="b0094-188">For example, you use the following code to return the number 1051 as an error code:</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 <span data-ttu-id="b0094-189">此範例說明的典型用法`Number`錯誤處理常式中的屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-189">This example illustrates a typical use of the `Number` property in an error-handling routine.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 <span data-ttu-id="b0094-190">這個範例會使用`Err`物件的`Raise`方法來產生 Visual Basic 撰寫的函式內原始錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-190">This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic.</span></span> <span data-ttu-id="b0094-191">呼叫的函式可以攔截到錯誤，並向使用者回報。</span><span class="sxs-lookup"><span data-stu-id="b0094-191">The calling function can catch the error and report it to the user.</span></span> <span data-ttu-id="b0094-192">請注意該程序`CallingProcedure`對照的資訊，您可以從衍生類型`Err`物件的資訊，您可以從衍生`Exception`物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-192">Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0094-193"><paramref name="Number" /> 大於 65535。</span><span class="sxs-lookup"><span data-stu-id="b0094-193"><paramref name="Number" /> is greater than 65535.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b0094-194">必要。</span><span class="sxs-lookup"><span data-stu-id="b0094-194">Required.</span></span> <span data-ttu-id="b0094-195">可識別錯誤本質的 <see langword="Long" /> 整數。</span><span class="sxs-lookup"><span data-stu-id="b0094-195"><see langword="Long" /> integer that identifies the nature of the error.</span></span> <span data-ttu-id="b0094-196">Visual Basic 的錯誤位於 0–65535 的範圍內；0–512 的範圍是保留給系統錯誤使用；513–65535 的範圍則是供使用者定義的錯誤使用。</span><span class="sxs-lookup"><span data-stu-id="b0094-196">Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors.</span></span> <span data-ttu-id="b0094-197">將 <see langword="Number" /> 屬性設定為您在類別模組中的錯誤碼時，您可將錯誤代碼加入 <see langword="vbObjectError" /> 常數。</span><span class="sxs-lookup"><span data-stu-id="b0094-197">When setting the <see langword="Number" /> property to your own error code in a class module, you add your error code number to the <see langword="vbObjectError" /> constant.</span></span> <span data-ttu-id="b0094-198">例如，若要產生錯誤號碼 513，請將 <c>vbObjectError + 513</c> 指派給 <see langword="Number" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-198">For example, to generate the error number 513, assign <c>vbObjectError + 513</c> to the <see langword="Number" /> property.</span></span></param>
        <param name="Source"><span data-ttu-id="b0094-199">選擇性。</span><span class="sxs-lookup"><span data-stu-id="b0094-199">Optional.</span></span> <span data-ttu-id="b0094-200"><see langword="String" /> 運算式，可為產生錯誤的物件或應用程式命名。</span><span class="sxs-lookup"><span data-stu-id="b0094-200"><see langword="String" /> expression naming the object or application that generated the error.</span></span> <span data-ttu-id="b0094-201">為物件設定這個屬性時，請使用下列格式：<c>project</c>.<c>class</c>。</span><span class="sxs-lookup"><span data-stu-id="b0094-201">When setting this property for an object, use the form <c>project</c>.<c>class</c>.</span></span> <span data-ttu-id="b0094-202">如果未指定 <c>Source</c>，則會使用目前 Visual Basic 專案的處理序識別碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-202">If <c>Source</c> is not specified, the process ID of the current Visual Basic project is used.</span></span></param>
        <param name="Description"><span data-ttu-id="b0094-203">選擇性。</span><span class="sxs-lookup"><span data-stu-id="b0094-203">Optional.</span></span> <span data-ttu-id="b0094-204">描述錯誤的 <see langword="String" /> 運算式。</span><span class="sxs-lookup"><span data-stu-id="b0094-204"><see langword="String" /> expression describing the error.</span></span> <span data-ttu-id="b0094-205">如果未指定，則會檢查 <see langword="Number" /> 屬性中的值。</span><span class="sxs-lookup"><span data-stu-id="b0094-205">If unspecified, the value in the <see langword="Number" /> property is examined.</span></span> <span data-ttu-id="b0094-206">如果它可以對應到 Visual Basic 執行階段錯誤碼，則 <see langword="Error" /> 函式將傳回的字串會當成 <see langword="Description" /> 屬性使用。</span><span class="sxs-lookup"><span data-stu-id="b0094-206">If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the <see langword="Error" /> function is used as the <see langword="Description" /> property.</span></span> <span data-ttu-id="b0094-207">如果沒有任何 Visual Basic 錯誤對應到 <see langword="Number" /> 屬性，則會使用「應用程式定義或物件定義的錯誤」訊息。</span><span class="sxs-lookup"><span data-stu-id="b0094-207">If there is no Visual Basic error corresponding to the <see langword="Number" /> property, the "Application-defined or object-defined error" message is used.</span></span></param>
        <param name="HelpFile"><span data-ttu-id="b0094-208">選擇性。</span><span class="sxs-lookup"><span data-stu-id="b0094-208">Optional.</span></span> <span data-ttu-id="b0094-209">可以找到與這個錯誤有關的說明檔之完整路徑。</span><span class="sxs-lookup"><span data-stu-id="b0094-209">The fully qualified path to the Help file in which help on this error can be found.</span></span> <span data-ttu-id="b0094-210">如果未指定，則 Visual Basic 會使用 Visual Basic 說明檔的完整磁碟機、路徑和檔名。</span><span class="sxs-lookup"><span data-stu-id="b0094-210">If unspecified, Visual Basic uses the fully qualified drive, path, and file name of the Visual Basic Help file.</span></span></param>
        <param name="HelpContext"><span data-ttu-id="b0094-211">選擇性。</span><span class="sxs-lookup"><span data-stu-id="b0094-211">Optional.</span></span> <span data-ttu-id="b0094-212">內容識別碼，用於識別 <c>HelpFile</c> 中提供錯誤說明的主題。</span><span class="sxs-lookup"><span data-stu-id="b0094-212">The context ID identifying a topic within <c>HelpFile</c> that provides help for the error.</span></span> <span data-ttu-id="b0094-213">如果省略，則會使用對應到 <see langword="Number" /> 屬性的錯誤之 Visual Basic 說明檔主題代碼 (如果存在的話)。</span><span class="sxs-lookup"><span data-stu-id="b0094-213">If omitted, the Visual Basic Help-file context ID for the error corresponding to the <see langword="Number" /> property is used, if it exists.</span></span></param>
        <summary><span data-ttu-id="b0094-214">產生執行階段錯誤；可以用來取代 <see langword="Error" /> 陳述式。</span><span class="sxs-lookup"><span data-stu-id="b0094-214">Generates a run-time error; can be used instead of the <see langword="Error" /> statement.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-215">所有的`Raise`引數，除了`Number`是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="b0094-215">All of the `Raise` arguments except `Number` are optional.</span></span> <span data-ttu-id="b0094-216">如果您省略選擇性的引數，以及屬性設定`Err`物件包含未清除的值，這些值做為您的錯誤的值。</span><span class="sxs-lookup"><span data-stu-id="b0094-216">If you omit optional arguments, and the property settings of the `Err` object contain values that have not been cleared, those values serve as the values for your error.</span></span>  
  
 <span data-ttu-id="b0094-217">因為`Err`物件會提供更豐富的資訊比當您產生的錯誤`Error`陳述式，`Raise`撰寫類別模組時產生錯誤時很有用。</span><span class="sxs-lookup"><span data-stu-id="b0094-217">Because the `Err` object gives richer information than when you generate errors with the `Error` statement, `Raise` is useful for generating errors when writing class modules.</span></span> <span data-ttu-id="b0094-218">例如，與`Raise`方法，可在指定產生錯誤的來源`Source`屬性可以參考錯誤的線上說明和等等。</span><span class="sxs-lookup"><span data-stu-id="b0094-218">For example, with the `Raise` method, the source that generated the error can be specified in the `Source` property, online Help for the error can be referenced, and so on.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-219">這個範例會使用`Err`物件的`Raise`方法來產生 Visual Basic 撰寫的函式中發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-219">This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic.</span></span> <span data-ttu-id="b0094-220">呼叫的函式可以攔截到錯誤，並回報給使用者，以訊息方塊。</span><span class="sxs-lookup"><span data-stu-id="b0094-220">The calling function can catch the error and report it to the user with a message box.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0094-221">傳回或設定 <see langword="String" /> 運算式，指定最初產生錯誤的物件或應用程式的名稱。</span><span class="sxs-lookup"><span data-stu-id="b0094-221">Returns or sets a <see langword="String" /> expression specifying the name of the object or application that originally generated the error.</span></span> <span data-ttu-id="b0094-222">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-222">Read/write.</span></span></summary>
        <value><span data-ttu-id="b0094-223">傳回或設定 <see langword="String" /> 運算式，指定最初產生錯誤的物件或應用程式的名稱。</span><span class="sxs-lookup"><span data-stu-id="b0094-223">Returns or sets a <see langword="String" /> expression specifying the name of the object or application that originally generated the error.</span></span> <span data-ttu-id="b0094-224">讀取/寫入。</span><span class="sxs-lookup"><span data-stu-id="b0094-224">Read/write.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0094-225">`Source`屬性會指定`String`代表物件的運算式會產生錯誤; 運算式通常是物件的類別名稱或處理序識別碼。</span><span class="sxs-lookup"><span data-stu-id="b0094-225">The `Source` property specifies a `String` expression representing the object that generated the error; the expression is usually the object's class name or process ID.</span></span> <span data-ttu-id="b0094-226">使用`Source`屬性以提供資訊，當您的程式碼無法處理中存取的物件產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="b0094-226">Use the `Source` property to provide information when your code is unable to handle an error generated in an accessed object.</span></span> <span data-ttu-id="b0094-227">比方說，如果您存取 Microsoft Excel，並在產生`Division by zero`錯誤，Microsoft Excel 設定`Err.Number`該錯誤與設定其錯誤碼`Source`至 「 Excel.Application"。</span><span class="sxs-lookup"><span data-stu-id="b0094-227">For example, if you access Microsoft Excel and it generates a `Division by zero` error, Microsoft Excel sets `Err.Number` to its error code for that error and sets `Source` to "Excel.Application".</span></span>  
  
 <span data-ttu-id="b0094-228">應用程式會從程式碼中，產生錯誤時`Source`是您的應用程式的程式設計 id。</span><span class="sxs-lookup"><span data-stu-id="b0094-228">When the application is generating an error from code, `Source` is your application's programmatic ID.</span></span> <span data-ttu-id="b0094-229">在類別`Source`應該包含名稱具有表單*專案*。*類別*。</span><span class="sxs-lookup"><span data-stu-id="b0094-229">Within a class, `Source` should contain a name having the form *project*.*class*.</span></span> <span data-ttu-id="b0094-230">在您的程式碼中發生未預期的錯誤時`Source`自動填入屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-230">When an unexpected error occurs in your code, the `Source` property is automatically filled in.</span></span> <span data-ttu-id="b0094-231">在模組中，錯誤`Source`包含專案名稱。</span><span class="sxs-lookup"><span data-stu-id="b0094-231">For errors in a module, `Source` contains the project name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0094-232">這個範例示範如何使用`Source`在一般的錯誤處理常式的屬性。</span><span class="sxs-lookup"><span data-stu-id="b0094-232">This example demonstrates the use of the `Source` property in a typical error-handling routine.</span></span> <span data-ttu-id="b0094-233">當發生錯誤而引發`Class1`，字串`"Class1"`指派給`Source`屬性`Err`物件。</span><span class="sxs-lookup"><span data-stu-id="b0094-233">When an error is raised from `Class1`, the string `"Class1"` is assigned to the `Source` property of the `Err` object.</span></span> <span data-ttu-id="b0094-234">然後，此字串會顯示在資訊訊息指示的來源和發生的錯誤數目。</span><span class="sxs-lookup"><span data-stu-id="b0094-234">This string is then displayed in an informative message indicating the source and number of the error.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>