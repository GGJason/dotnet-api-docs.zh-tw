<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3839187e325901ad3f3f4d5e81304055450240f2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30348412" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="VbMath" /> 模組包含用來執行算術運算的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員產生隨機數字。  
  
   
  
## Examples  
 這個範例會使用`Rnd`函式來產生隨機整數值範圍是從 1 到 6。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化亂數產生器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化亂數產生器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載`Randomize`方法不採用種子值。 相反地，系統計時器所傳回的值作為新的初始值。  
  
 如果`Randomize`不使用`Rnd`函式 （不含引數） 會使用相同的數字當做種子第一次呼叫時，之後會使用最後產生的數字做為種子值。  
  
> [!NOTE]
>  若要重複的隨機數字序列，請呼叫`Rnd`負數的引數之前使用`Randomize`與數字的引數。  
  
> [!IMPORTANT]
>  因為`Random`陳述式和`Rnd`函式使用種子值開始，並產生有限範圍內的數字，結果可能是可預測的人知道用來產生它們的演算法。 因此，`Random`陳述式和`Rnd`函式不應使用來產生加密中使用的隨機數字。 如需詳細資訊，請參閱<xref:System.Security.Cryptography.RandomNumberGenerator>。  
  
   
  
## Examples  
 這個範例會使用`Randomize`陳述式來初始化亂數產生器。 由於已省略引數，`Randomize`使用傳回的值從`Timer`做為新的初始值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">選擇性。 <see langword="Object" /> 或任何有效的數值運算式。</param>
        <summary>初始化亂數產生器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` 使用`Number`初始化`Rnd`函式的隨機數字產生器，並賦予它一個新的初始值。 如果您省略`Number`，系統計時器所傳回的值當做新的初始值。  
  
 如果`Randomize`不使用`Rnd`函式 （不含引數） 會使用相同的數字當做種子第一次呼叫時，之後會使用最後產生的數字做為種子值。  
  
> [!NOTE]
>  若要重複的隨機數字序列，請呼叫`Rnd`負數的引數之前使用`Randomize`與數字的引數。 使用`Randomize`同值`Number`不會重複前一個序列。  
  
> [!IMPORTANT]
>  因為`Random`陳述式和`Rnd`函式使用種子值開始，並產生有限範圍內的數字，結果可能是可預測的人知道用來產生它們的演算法。 因此，`Random`陳述式和`Rnd`函式不應使用來產生加密中使用的隨機數字。 如需詳細資訊，請參閱<xref:System.Security.Cryptography.RandomNumberGenerator>。  
  
   
  
## Examples  
 這個範例會使用`Randomize`陳述式來初始化亂數產生器。 由於已省略引數，`Randomize`使用傳回的值從`Timer`做為新的初始值。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see langword="Single" /> 類型的亂數。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see langword="Single" /> 類型的亂數。</summary>
        <returns>序列中的下一個亂數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`函數會傳回值小於 1，但大於或等於零。  
  
 然後再呼叫`Rnd`，使用`Randomize`陳述式沒有引數來初始化隨機數字產生器種子的基礎系統計時器。  
  
 若要產生亂數，在給定範圍中的，請使用下列公式。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 在這裡，`upperbound`是在範圍中，最高的數字和`lowerbound`是範圍中最低的數字。  
  
> [!NOTE]
>  若要重複的隨機數字序列，請呼叫`Rnd`負數的引數之前使用`Randomize`與數字的引數。  
  
> [!IMPORTANT]
>  因為`Random`陳述式和`Rnd`函式使用種子值開始，並產生有限範圍內的數字，結果可能是可預測的人知道用來產生它們的演算法。 因此，`Random`陳述式和`Rnd`函式不應使用來產生加密中使用的隨機數字。  
  
   
  
## Examples  
 這個範例會使用`Rnd`函式來產生隨機整數值範圍是從 1 到 6。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">選擇性。 <see langword="Single" /> 值或任何有效的 <see langword="Single" /> 運算式。</param>
        <summary>傳回 <see langword="Single" /> 類型的亂數。</summary>
        <returns>如果數字小於零，Rnd 每次都會產生相同的數字 (利用 <paramref name="Number" /> 當做種子值)。 如果數字大於零，則 Rnd 會產生序列中的下一個亂數。 如果數字等於零，則 Rnd 會產生最近所產生的數字。 如果未提供數字，則 Rnd 會產生序列中的下一個亂數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`函數會傳回值小於 1，但大於或等於零。  
  
 值`Number`決定如何`Rnd`產生隨機數字。  
  
 對於任何給定的初始種子，因為，都會產生相同的數字序列的每一個後續呼叫`Rnd`函式使用先前產生的數字當做種子序列中下一個編號。  
  
 然後再呼叫`Rnd`，使用`Randomize`陳述式沒有引數來初始化隨機數字產生器種子的基礎系統計時器。  
  
 若要產生亂數，在給定範圍中的，請使用下列公式。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 在這裡，`upperbound`是在範圍中，最高的數字和`lowerbound`是範圍中最低的數字。  
  
> [!NOTE]
>  若要重複的隨機數字序列，請呼叫`Rnd`負數的引數之前使用`Randomize`與數字的引數。 使用`Randomize`同值`Number`不會重複前一個序列。  
  
> [!IMPORTANT]
>  因為`Random`陳述式和`Rnd`函式使用種子值開始，並產生有限範圍內的數字，結果可能是可預測的人知道用來產生它們的演算法。 因此，`Random`陳述式和`Rnd`函式不應使用來產生加密中使用的隨機數字。  
  
   
  
## Examples  
 這個範例會使用`Rnd`函式來產生隨機整數值範圍是從 1 到 6。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
  </Members>
</Type>