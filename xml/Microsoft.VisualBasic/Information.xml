<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf66978c8a5faf15b71f22573b7ac5f4149e476b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55423468" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Information" /> 模組包含了傳回、測試或驗證資訊所用的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員所提供的錯誤資訊、 驗證資料、 判斷陣列界限和擷取的資料類型及色彩資訊。  
  
   
  
## Examples  
 下列範例會使用`VbTypeName`函式傳回多個變數的資料型別名稱。  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">資訊和互動摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">宣告和常數摘要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">關鍵字 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 執行階段程式庫成員</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回整數，指出最後執行之陳述式的行數。 唯讀。</summary>
        <returns>傳回整數，指出最後執行之陳述式的行數。 唯讀。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Visual Basic 遇到沒有行號，則會傳回 0。  
  
   
  
## Examples  
 這個範例會使用`Erl`屬性，可指出的行號。  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>包含執行階段錯誤的相關資訊。</summary>
        <returns>包含執行階段錯誤的相關資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性`Err`物件所設定的錯誤-Visual Basic、 物件或程式設計人員的產生器。  
  
 執行階段發生錯誤時，屬性`Err`物件會填入唯一識別錯誤的資訊，並可供您處理錯誤。 若要在程式碼中產生執行階段錯誤，請使用`Raise`方法。  
  
 `Err`物件的屬性會重設為零或零長度字串 ("") 之後`Exit Sub`， `Exit Function`， `Exit Property`，或`Resume Next`錯誤處理常式內的陳述式。 使用任何形式的`Resume`之外的錯誤處理常式的陳述式不會重設`Err`物件的屬性。 您可以使用`Clear`方法來明確地重設`Err`。  
  
 使用`Raise`方法而非`Error`陳述式來產生執行階段錯誤，系統錯誤，並在類別模組。 您決定是否要使用`Raise`其他程式碼中的方法取決於您想要傳回的資訊的豐富功能。  
  
 `Err`物件是具有全域領域的內建函式物件。 因此，您不需要程式碼中建立它的執行個體。  
  
   
  
## Examples  
 此範例使用的屬性`Err`建構錯誤訊息對話方塊中的物件。 請注意，如果您使用`Clear`方法時產生與 Visual Basic 錯誤的先`Raise`方法，而 Visual Basic 的預設值會變成屬性`Err`物件。  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error 陳述式</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 陳述式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit 陳述式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume 陳述式</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">錯誤訊息 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally 陳述式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必要項。 <see langword="Object" /> 變數。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出變數是否指向陣列。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出變數是否指向陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` 會傳回`True`變數指向的陣列中; 否則它會傳回`False`。 `IsArray` 會使用物件，其中可能包含陣列特別有用。  
  
   
  
## Examples  
 這個範例會使用`IsArray`檢查幾個變數如果參考陣列的函式。  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Visual Basic 中的陣列</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出運算式是否表示有效的 <see langword="Date" /> 值。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出運算式是否表示有效的 <see langword="Date" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` 會傳回`True`如果`Expression`屬於<xref:System.DateTime>資料類型，或可以轉換成它; 否則它會傳回`False`。  
  
 <xref:System.DateTime>資料類型會保留日期值和時間值。 `IsDate` 會傳回`True`如果`Expression`代表有效的日期、 有效的時間，或有效的日期和時間。  
  
   
  
## Examples  
 下列範例會使用`IsDate`函式來判斷是否數個變數代表有效<xref:System.DateTime>值。  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 在上述範例中，`IsDate`會傳回`True`前四個呼叫和`False`的最後一次呼叫。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出運算式是否會計算結果為 <see cref="T:System.DBNull" /> 類別。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出運算式是否會計算結果為 <see cref="T:System.DBNull" /> 類別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` 會傳回`True`資料類型，是否`Expression`評估為<xref:System.DBNull>類型; 否則`IsDBNull`傳回`False`。  
  
 <xref:System.DBNull?displayProperty=nameWithType>值，指出`Object`表示遺失或不存在的資料。 `DBNull` 不與相同`Nothing`，這表示尚未初始化的變數。 `DBNull` 也不是零長度字串相同 (`""`)，這有時稱為 null 字串。  
  
   
  
## Examples  
 這個範例會使用`IsDBNull`函式來判斷變數是否評估為`DBNull`。  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出運算式是否為例外狀況類型。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出運算式是否為例外狀況類型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` 會傳回`True`如果運算式代表`Object`變數，會衍生自<xref:System.Exception>類別在<xref:System>命名空間。  
  
 例外狀況衍生自<xref:System.Exception?displayProperty=nameWithType>可攔截與`Try...Catch...Finally`陳述式。  
  
   
  
## Examples  
 下列範例會使用`IsError`函式來檢查運算式是否代表系統例外狀況。  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出是否沒有將任何物件指派給運算式。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出是否沒有將任何物件指派給運算式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` 會傳回`True`如果運算式代表目前不含任何物件指派給它，否則為物件變數，它會傳回`False`。  
  
 `IsNothing` 被要在參考類型上運作。 實值型別不能保存的值，並還原為其預設值，如果您指派`Nothing`給它。 如果您提供在中的實值型別`Expression`，`IsNothing`一律會傳回`False`。  
  
   
  
## Examples  
 下列範例會使用`IsNothing`函式來判斷是否與任何物件執行個體相關聯的物件變數。  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出運算式是否可以評估為數字。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出運算式是否可以評估為數字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` 會傳回`True`資料類型，是否`Expression`是`Boolean`， `Byte`， `Decimal`， `Double`， `Integer`， `Long`， `SByte`， `Short`， `Single`， `UInteger`，`ULong`，或`UShort`。 它也會傳回`True`如果`Expression`是`Char`， `String`，或`Object`，可以成功轉換的數字。 `Expression` 可以包含非數字字元。 `IsNumeric` 會傳回`True`如果`Expression`是包含有效的十六進位或八進位表示數字的字串。 `IsNumeric` 也會傳回`True`如果`Expression`包含有效的數值運算式以 + 或-字元或包含逗號。  
  
 `IsNumeric` 會傳回`False`如果`Expression`資料類型`Date`。 它會傳回`False`如果`Expression`是`Char`， `String`，或`Object`，無法成功轉換成數字。  
  
   
  
## Examples  
 下列範例會使用`IsNumeric`函式來判斷是否變數的內容可以評估為數字。  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要項。 <see langword="Object" /> 運算式。</param>
        <summary>傳回 <see langword="Boolean" /> 值，指出運算式是否會計算結果為參考類型。</summary>
        <returns>傳回 <see langword="Boolean" /> 值，指出運算式是否會計算結果為參考類型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` 會傳回`True`如果`Expression`表示參考類型，例如類別執行個體`String`型別或任何類型; 的陣列，否則會傳回`False`。  
  
 參考型別包含資料儲存在記憶體中的其他位置的指標。 實值型別包含它自己的資料。  
  
   
  
## Examples  
 這個範例會使用`IsReference`函式來檢查是否數個變數指向參考型別。  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 在上述範例中前, 三個呼叫來`IsReference`傳回`True`。 最後一次呼叫會傳回`False`，因為`Integer`是實值類型，而不是參考型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必要項。 任何資料類型的陣列， 您想在該陣列中找到維度的最低可能註標。</param>
        <param name="Rank">選擇性。 <see langword="Integer" />. 針對可能的最低註標，所要傳回的維度。 使用 1 表示第一個維度，2 表示第二個維度，依此類推。 如果省略了 <paramref name="Rank" />，則假設為 1。</param>
        <summary>傳回所指示的陣列維度之可用的最低註標 (Subscript)。</summary>
        <returns><see langword="Integer" />. 指定之維度的註標可以包含的最低值。 只要 <paramref name="Array" /> 已經完成初始化，<see langword="LBound" /> 一定會傳回 0，即使它沒有任何項目也是如此，例如，如果它是長度為零的字串。 如果 <paramref name="Array" /> 為 <see langword="Nothing" />，則 <see langword="LBound" /> 會擲回 <see cref="T:System.ArgumentNullException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由於陣列註標起始為 0，每個維度的最低可用註標永遠為 0。  
  
 與下列維度中，陣列`LBound`傳回下表中的值：  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|LBound 呼叫|傳回值|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 下列範例會使用`LBound`函式來判斷指定的陣列維度之最低可用註標。  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> 小於 1 或 <paramref name="Rank" /> 大於 <paramref name="Array" /> 的陣序規範。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim 陳述式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim 陳述式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">必要項。 介於 0-15 範圍之間的整數。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示對應到指定之色彩編號的 RGB 色彩代碼。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示對應到指定之色彩編號的 RGB 色彩代碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從最小顯著性位元組開始，傳回的值，指定用來設定適當的色彩，RGB 系統使用的 Visual Basic 語言中的紅色、 綠色和藍色值。  
  
 `Color`引數具有這些設定。  
  
|number|色彩|number|色彩|  
|------------|-----------|------------|-----------|  
|0|黑色|8|灰色|  
|1|藍色|9|淺藍色|  
|2|綠色|10|淺綠色|  
|3|青色|11|淺青綠|  
|4|紅色|12|淡紅色|  
|5|洋紅色|13|淺洋紅色|  
|6|黃色|14|淺黃色|  
|7|白皮書|15|亮白色|  
  
   
  
## Examples  
 這個範例會使用`QBColor`所指定的函式來變更色彩`colorInteger`。 `QBColor` 接受介於 0 到 15 之間的整數值。  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> 超出 0 到 15 的範圍 (含 0 和 15)。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">必要項。 在 0-255 範圍 (包含頭尾) 中的 <see langword="Integer" />，表示色彩中紅色元件的濃度。</param>
        <param name="Green">必要項。 在 0-255 範圍 (包含頭尾) 中的 <see langword="Integer" />，表示色彩中綠色元件的濃度。</param>
        <param name="Blue">必要項。 在 0-255 範圍 (包含頭尾) 中的 <see langword="Integer" />，表示色彩中藍色元件的濃度。</param>
        <summary>傳回 <see langword="Integer" /> 值，表示一組紅色、綠色和藍色元件中的 RGB 色彩值。</summary>
        <returns>傳回 <see langword="Integer" /> 值，表示一組紅色、綠色和藍色元件中的 RGB 色彩值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式的方法和屬性接受的色彩規格，預期規格是數字表示的 RGB 色彩值。 RGB 色彩值會指定相對的紅色、 綠色和藍色顯示的色彩濃度。  
  
 如果任何引數的值`RGB`大於 255，則使用 255。  
  
 下表列出一些標準的色彩及其包含的紅色、 綠色和藍色值。  
  
|色彩|紅色值|環保價值|藍色的值|  
|-----------|---------------|-----------------|----------------|  
|黑色|0|0|0|  
|藍色|0|0|255|  
|綠色|0|255|0|  
|青色|0|255|255|  
|紅色|255|0|0|  
|洋紅色|255|0|255|  
|黃色|255|255|0|  
|白皮書|255|255|255|  
  
   
  
## Examples  
 此範例示範如何`RGB`函式用來傳回整數，代表`RGB`色彩值。  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />、<paramref name="Blue" /> 或 <paramref name="Red" /> 超出 0 到 225 的範圍 (含 0 和 225)。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">必要項。 <see langword="String" /> 變數，包含 Visual Basic 類型名稱。</param>
        <summary>傳回 <see langword="String" /> 值，其中包含某個變數的系統資料類型名稱。</summary>
        <returns>傳回 <see langword="String" /> 值，其中包含某個變數的系統資料類型名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` 傳回完整 common language runtime (CLR) 型別名稱對應至 Visual Basic 類型名稱。 例如，如果`VbName`包含 「 日期 」，`SystemTypeName`傳回"System.DateTime"。 如果`SystemTypeName`無法辨識的值`VbName`，它會傳回`Nothing`(不是字串"Nothing")。  
  
   
  
## Examples  
 下列範例會使用`SystemTypeName`函式傳回多個變數的資料型別名稱。  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必要項。 <see langword="Object" /> 變數。 如果 <see langword="Option Strict" /> 為 <see langword="Off" />，您可以傳遞任何資料型別的變數，但是結構除外。</param>
        <summary>傳回 <see langword="String" /> 值，其中包含與變數有關的資料類型資訊。</summary>
        <returns>傳回 <see langword="String" /> 值，其中包含與變數有關的資料類型資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示`String`所傳回的值`TypeName`當作不同內容`VarName`。  
  
|`VarName` 內容|傳回的字串|  
|------------------------|---------------------|  
|16 位元`True`或`False`實值型別|"Boolean"|  
|8 位元二進位實值型別|「 位元組 」|  
|16 位元字元實值型別|"Char"|  
|64 位元的日期和時間值類型|「 日期 」|  
|表示資料遺失或不存在的參考型別|"DBNull"|  
|128 位元定點的實值型別|[十進位]|  
|64 位元浮點數的實值型別|"Double"|  
|32 位元整數實值型別|"Integer"|  
|指向特製化的物件參考型別|「 物件 」|  
|指向 從類別建立的特定物件的參考型別*objectclass*|"*objectclass*"|  
|64 位元整數實值型別|"Long"|  
|與目前已指派給它的任何物件的參考型別|"Nothing"|  
|8 位元帶正負號的整數值的型別|"SByte"|  
|16 位元整數實值型別|"Short"|  
|32 位元浮點數的實值型別|「 單一 」|  
|16 位元的字元字串所指向的參考型別|「 字串 」|  
|32 位元不帶正負號的整數值型別|「 UInteger"|  
|64 位元不帶正負號的整數值型別|「 ULong"|  
|16 位元不帶正負號的整數值型別|「 UShort"|  
  
 如果`VarName`是陣列，傳回的字串可以是其中一個以附加空括號上表中的字串。 例如，如果`VarName`指向整數的陣列、`TypeName`傳回 「 Integer()"。  
  
 當`TypeName`傳回參考類型的名稱等類別，它會傳回只有名稱本身，而不是限定名稱。 例如，如果`VarName`指向類別的物件<xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>，`TypeName`傳回 「 PaperSource"。 請注意，如果宣告為特定類別類型的變數，但卻沒有物件指派給它，`TypeName`傳回"Nothing"。  
  
   
  
## Examples  
 下列範例會使用`TypeName`函式來傳回幾個變數的資料型別資訊。  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必要項。 任何資料類型的陣列， 您想在該陣列中找到維度的最高可能註標。</param>
        <param name="Rank">選擇性。 <see langword="Integer" />. 針對可能的最高註標，所要傳回的維度。 使用 1 表示第一個維度，2 表示第二個維度，依此類推。 如果省略了 <paramref name="Rank" />，則假設為 1。</param>
        <summary>傳回所指示的陣列維度之可用的最高註標。</summary>
        <returns><see langword="Integer" />. 指定之維度的註標可以包含的最高值。 如果 <paramref name="Array" /> 只有一個元素，則 <see langword="UBound" /> 會傳回 0。 如果 <paramref name="Array" /> 沒有任何項目，例如它是零長度字串，則 <see langword="UBound" /> 會傳回 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由於陣列註標起始為 0，就有一個維度的長度大於一比該維度的最大可用註標。  
  
 與下列維度中，陣列`UBound`傳回下表中的值：  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|呼叫 UBound|傳回值|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 您可以使用`UBound`判斷總計的項目數的陣列，但是您必須調整其傳回至註標起始為 0 的事實的值。 下列範例會計算陣列的大小總計`a`在上述範例中：  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 計算值`total`為 3030，也就是 101 * 6 * 5。  
  
   
  
## Examples  
 下列範例會使用`UBound`函式來判斷所指定維度的陣列的最大可用註標。  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> 小於 1 或 <paramref name="Rank" /> 大於 <paramref name="Array" /> 的陣序規範。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim 陳述式 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim 陳述式 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必要項。 <see langword="Object" /> 變數。 如果 <see langword="Option Strict" /> 為 <see langword="Off" />，您可以傳遞任何資料型別的變數，但是結構除外。</param>
        <summary>傳回 <see langword="Integer" /> 值，其中包含某個變數的資料類型分類。</summary>
        <returns>傳回 <see langword="Integer" /> 值，其中包含某個變數的資料類型分類。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的整數值`VarType`隸屬<xref:Microsoft.VisualBasic.VariantType>。  
  
 下表顯示所傳回的值`VarType`的特殊案例`VarName`。  
  
|所表示的資料類型 `VarName`|所傳回的值 `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|列舉|基礎資料類型 (`SByte`， `Byte`， `Short`， `UShort`， `Integer`， `UInteger`， `Long`，或`ULong`)|  
|陣列|陣列項目類型的位元 OR 與 `VariantType.Array`|  
|陣列的陣列|位元 OR`VariantType.Object`和 `VariantType.Array`|  
|結構 (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|不明|`VariantType.Object`|  
  
   
  
## Examples  
 下列範例會使用`VarType`函數來傳回有關數個變數的資料型別分類資訊。  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">必要項。 <see langword="String" /> 變數，包含 Common Language Runtime 所用的類型名稱。</param>
        <summary>傳回 <see langword="String" /> 值，其中包含某個變數的 Visual Basic 資料類型名稱。</summary>
        <returns>傳回 <see langword="String" /> 值，其中包含某個變數的 Visual Basic 資料類型名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` 傳回對應至 common language runtime 型別名稱的 Visual Basic 型別名稱。 例如，如果`UrtName`包含"Int32"或"System.Int32"，`VbTypeName`傳回"Integer"。 如果`VbTypeName`無法辨識的值`UrtName`，它會傳回`Nothing`(不是字串"Nothing")。  
  
 中的類型名稱`UrtName`可以從各種來源，例如取得<xref:System.Reflection.MemberInfo.Name%2A>中的屬性<xref:System.Reflection.MemberInfo>陣列<xref:System.Type>類別。  
  
   
  
## Examples  
 下列範例會使用`VbTypeName`函式傳回多個變數的資料型別名稱。  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">資料類型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>