<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cec0c607fc2b7dd375bd0d2fa79de046945ffe69" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174284" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Interaction" /> 模組會包含用於與物件、應用程式和系統互動的程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，執行其他程式、 呼叫方法或屬性，從電腦嗶、 提供命令列字串、 管理 COM 物件，並控制對話方塊。  
  
   
  
## Examples  
 下列範例會使用`Shell`函式來執行指定使用者的應用程式。 指定<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>做為第二個引數的標準大小開啟應用程式並為其提供焦點。  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
' The preceding path is for Windows XP.  
' The Windows 2000 path is C:\WINNT\system32\calc.exe.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>啟動已經在執行的應用程式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ProcessId">
          <see langword="Integer" />，指定指派給這個處理序 (Process) 的 Win32 處理序 ID 編號。 如果由 <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> 傳回的 ID 不為零，您就可以使用此編號。</param>
        <summary>啟動已經在執行的應用程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用`AppActivate`讓應用程式的使用中視窗成為焦點。 您不可能的控制代碼或使用中視窗的參考，或甚至知道哪一個視窗是作用中，在給定的時刻。 在此情況下，您無法使用<xref:System.Windows.Forms.Control.Focus%2A>方法。  
  
 `AppActivate`函式的焦點變更至具名的應用程式或視窗，但不會影響是否為最大化或最小化。 當使用者採取某些動作來變更焦點或關閉視窗時，焦點會移開啟動的應用程式視窗。 您可以使用`Shell`函式來啟動應用程式，並設定視窗樣式。  
  
 如果您使用`Title`參數，`AppActivate`使用不區分大小寫的比較，而否則要求標題列的內容完全相符。 它會先尋找最上層視窗，然後再透過子視窗。 如果找不到相符項目，它會擲回<xref:System.ArgumentException>。  
  
 您可以使用`AppActivate`只能使用屬於 windows 處理程序。 大部分的主控台應用程式不是擁有的 windows，也就是說，它們不會出現在清單中的處理序`AppActivate`搜尋。 從主控台應用程式執行時，系統會建立個別的處理序執行應用程式，並將輸出傳回到主控台處理序。 因此，當您要求的目前處理序識別碼，您會取得這個個別的處理序的處理序識別碼，而不是主控台應用程式的處理序識別碼。  
  
 在執行階段，`AppActivate`函式會啟用任何執行中應用程式標題的符合`Title`或比對處理序識別碼`ProcessId`。 如果沒有完全相符，它會啟動任何應用程式標題字串的結尾`Title`。 是否有一個以上的應用程式名為`Title`、`AppActivate`函式任意選擇一個啟動。  
  
> [!NOTE]
>  `AppActivate`函式需要`UIPermission`在<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>層級，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.UIPermission>。  
  
   
  
## Examples  
 此範例說明的各種用法`AppActivate`函式可啟動應用程式視窗。 如果未執行 「 記事本 」 處理程序，此範例會擲回<xref:System.ArgumentException>。 `Shell`程序會假設應用程式是在指定的路徑。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Title">
          <see langword="String" /> 運算式，可指定您想啟動的應用程式之標題列中的標題。 當應用程式啟動後，您可以使用指派給應用程式的標題。</param>
        <summary>啟動已經在執行的應用程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用`AppActivate`讓應用程式的使用中視窗成為焦點。 您不可能的控制代碼或使用中視窗的參考，或甚至知道哪一個視窗是作用中，在給定的時刻。 在此情況下，您無法使用<xref:System.Windows.Forms.Control.Focus%2A>方法。  
  
 `AppActivate`函式的焦點變更至具名的應用程式或視窗，但不會影響是否為最大化或最小化。 當使用者採取某些動作來變更焦點或關閉視窗時，焦點會移開啟動的應用程式視窗。 您可以使用`Shell`函式來啟動應用程式，並設定視窗樣式。  
  
 如果您使用`Title`參數，`AppActivate`使用不區分大小寫的比較，而否則要求標題列的內容完全相符。 它會先尋找最上層視窗，然後再透過子視窗。 如果找不到相符項目，它會擲回<xref:System.ArgumentException>。  
  
 您可以使用`AppActivate`只能使用屬於 windows 處理程序。 大部分的主控台應用程式不是擁有的 windows，也就是說，它們不會出現在清單中的處理序`AppActivate`搜尋。 從主控台應用程式執行時，系統會建立個別的處理序執行應用程式，並將輸出傳回到主控台處理序。 因此，當您要求的目前處理序識別碼，您會取得這個個別的處理序的處理序識別碼，而不是主控台應用程式的處理序識別碼。  
  
 在執行階段，`AppActivate`函式會啟用任何執行中應用程式標題的符合`Title`或比對處理序識別碼`ProcessId`。 如果沒有完全相符，它會啟動任何應用程式標題字串的結尾`Title`。 是否有一個以上的應用程式名為`Title`、`AppActivate`函式任意選擇一個啟動。  
  
> [!NOTE]
>  `AppActivate`函式需要`UIPermission`在<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>層級，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.UIPermission>。  
  
   
  
## Examples  
 此範例說明的各種用法`AppActivate`函式可啟動應用程式視窗。 如果未執行 「 記事本 」 處理程序，此範例會擲回<xref:System.ArgumentException>。 `Shell`程序會假設應用程式是在指定的路徑。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>透過電腦的喇叭發出聲音。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字距和嗶聲的持續時間取決於您的硬體和系統軟體，因此電腦而異。  
  
> [!NOTE]
>  `Beep`函式需要`UIPermission`在<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>層級，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.UIPermission>。  
  
   
  
## Examples  
 這個範例會使用`Beep`透過電腦的喇叭音函式。  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">必要。 <see langword="Object" />。 公開屬性或方法之物件的指標。</param>
        <param name="ProcName">必要。 <see langword="String" />。 包含物件之屬性或方法名稱的字串運算式。</param>
        <param name="UseCallType">必要。 型別 <see cref="T:Microsoft.VisualBasic.CallType" /> 的列舉型別成員，其表示正在呼叫的程序型別。 <see langword="CallType" /> 的值可以是 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。</param>
        <param name="Args">選擇性。 <see langword="ParamArray" />。 參數陣列，其中包含要傳遞給屬性或正在呼叫的方法之引數。</param>
        <summary>在物件上執行方法，或是設定或傳回物件上的屬性。</summary>
        <returns>在物件上執行方法，或是設定或傳回物件上的屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName`函式在執行階段用來取得的屬性、 設定屬性，或叫用方法。  
  
   
  
## Examples  
 下列範例中，在第一行會使用`CallByName`設定`Text`屬性文字方塊中的，第二行中擷取的值`Text`屬性，而第三行叫用`Move`方法來移動文字方塊。  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 下一個範例會使用`CallByName`函式來叫用`Add`和`Item`集合物件的方法。  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無效的 <paramref name="UseCallType" /> 值，必須是 <see langword="Method" />、<see langword="Get" /> 或 <see langword="Set" />。</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" />
        <Parameter Name="Choice" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">必要。 <see langword="Double" />。 可以產生一個值的數值運算式，所產生的值範圍介於 1 到傳入 <c>Choice</c> 引數的項目數之間。</param>
        <param name="Choice">必要。 <see langword="Object" /> 參數陣列。 您可以針對以逗號分隔的 <see langword="Object" /> 變數或運算式的清單，或是 <see langword="Object" /> 元素的一維陣列，提供單一變數或是評估為 <see langword="Object" /> 資料類型的運算式。</param>
        <summary>從引數清單中選取及傳回值。</summary>
        <returns>從引數清單中選取及傳回值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Choose`函式會傳回傳入的清單中的成員`Choice()`根據的值， `Index`。 選取清單的第一個成員時`Index`為 1。 選取清單的最後一個成員時`Index`是`UBound`(`Choice()`)。 如果`Index`超出這些限制，`Choose`傳回`Nothing`。  
  
 如果`Index`不是整數，它會計算前捨入到最接近的整數。  
  
 您可以使用`Choose`查閱的可能值清單中的值。  
  
> [!NOTE]
>  引數清單中的運算式可以包含函式呼叫。 準備呼叫的引數清單的過程`Choose`，Visual Basic 編譯器會呼叫每個函式中每個運算式。 這表示您不能依賴特定的函式，如果選取不同的運算式，未呼叫`Index`。  
  
   
  
## Examples  
 這個範例會使用`Choose`函式来顯示的名稱，以回應傳入的程序中的索引`Ind`參數。  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回用來啟動 Visual Basic 之命令列的引數部分，或是使用 Visual Basic 所開發的可執行程式。 <see langword="My" /> 功能提供了比 <see langword="Command" /> 函式更強大的產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />。</summary>
        <returns>傳回用來啟動 Visual Basic 之命令列的引數部分，或是使用 Visual Basic 所開發的可執行程式。  <see langword="My" /> 功能提供了比 <see langword="Command" /> 函式更強大的產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回引數之後，您可以搜尋常用的分隔符號，例如空格、 斜線向前或向後、 連字號或引號，來分割或搜尋字串中的個別參數。  
  
 應用程式與 Visual Basic 開發及編譯成.exe 檔，`Command`函式會傳回出現在命令列，在這種形式的應用程式的名稱之後的任何引數： `MyApp(cmdlineargs)`。  
  
   
  
## Examples  
 這個範例會使用`Command`函數來傳回物件，其中包含陣列中的命令列引數。  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">必要。 <see langword="String" />。 要建立之物件的程式 ID。</param>
        <param name="ServerName">選擇性。 <see langword="String" />。 將建立物件的網路伺服器名稱。 如果 <c>ServerName</c> 為空字串 ("")，則會使用本機電腦。</param>
        <summary>建立並傳回 COM 物件的參考； 除非類別已明確公開為 COM 元件，否則 <see langword="CreateObject" /> 無法用來在 Visual Basic 中建立類別的執行個體。</summary>
        <returns>建立並傳回 COM 物件的參考； 除非類別已明確公開為 COM 元件，否則 <see langword="CreateObject" /> 無法用來在 Visual Basic 中建立類別的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立 COM 元件的執行個體，指定所傳回的物件`CreateObject`物件變數：  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 您用來儲存傳回的物件的物件變數的型別可能會影響您的應用程式效能。 宣告物件變數與`As Object`子句會建立可包含任何類型的物件參考的變數。 不過，透過該變數物件的存取權是*晚期繫結*，也就是繫結，就會發生在程式執行時。 有許多原因，您應該避免晚期繫結，包括應用程式效能變慢。  
  
 您可以建立會產生早期繫結物件變數，也就繫結在編譯程式時。 若要這樣做，請加入您物件的類型程式庫參考**COM**  索引標籤**加入參考** 對話方塊上的**專案**功能表。 然後宣告物件變數的物件的特定型別。 在大部分情況下，會更有效率使用`Dim`陳述式，來建立物件，比使用主要 interop 組件`CreateObject`函式。  
  
## <a name="interacting-with-unmanaged-code"></a>與 Unmanaged 程式碼互動  
 另一個問題是 COM 物件使用 unmanaged 程式碼，common language runtime 的優點沒有程式碼。 沒有了相當程度的複雜性涉及了混合的 Visual Basic 與 unmanaged 程式碼的 managed 程式碼從 com 存取。 當您新增 COM 物件的參考時，Visual Basic 中搜尋該程式庫; 主要 interop 組件 (PIA)如果找到，則會使用它。 如果找不到的 PIA，它會建立包含本機互通性類別的 COM 程式庫中的每個類別的互通性組件。 如需詳細資訊，請參閱[.NET Framework 應用程式中的 COM 互通性](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)。  
  
 您通常應該使用強式繫結的物件和主要 interop 組件盡可能。 使用下方範例`CreateObject`函式與 Microsoft Office 物件，如需示範之用。 不過，這些物件是容易使用且較可靠，當搭配適當的主要 interop 組件。  
  
## <a name="creating-an-object-on-a-remote-computer"></a>在遠端電腦上建立的物件  
 您也可以將電腦的名稱傳遞遠端網路的電腦上建立物件`ServerName`引數的`CreateObject`函式。 該名稱是電腦名稱部分的共用名稱相同： 共用名為"\\\MyServer\Public，"`ServerName`是"MyServer"。  
  
> [!NOTE]
>  請參閱 COM 文件 （請參閱 Microsoft Developer Network） 如需有關讓應用程式能夠存取遠端網路的電腦上。 您可能需要加入您的應用程式的登錄機碼。  
  
 下列程式碼傳回的版本號碼的 Excel 執行個體名為遠端電腦上執行`MyServer`:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 如果遠端伺服器名稱不正確，或如果無法使用，就會發生執行階段錯誤。  
  
> [!NOTE]
>  使用`CreateObject`時沒有目前物件的執行個體。 如果物件的執行個體已在執行中，已啟動的新執行個體，並建立指定型別的物件。 若要使用目前的執行個體，或啟動應用程式，讓它載入檔案，請使用`GetObject`函式。 如果物件已本身註冊為單一執行個體物件，只有一個執行個體物件的建立，不論如何多次`CreateObject`執行。  
  
## <a name="creating-framework-objects"></a>建立架構物件  
 您可以使用`CreateObject`只為建立 COM 物件的函式。 沒有對等的確切機制，建立.NET Framework 物件，而<xref:System.Activator>中<xref:System>命名空間包含建立本機或遠端物件的方法。 特別是，<xref:System.Activator.CreateInstance%2A>方法或<xref:System.Activator.CreateInstanceFrom%2A>方法可能會很有用。  
  
> [!IMPORTANT]
>  `CreateObject`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 下列範例會使用`CreateObject`函數，來建立 Microsoft Excel 工作表，並將工作表儲存到檔案。 若要使用此範例中，必須執行此程式的電腦上安裝 Excel。 此外，您必須在其中加入從類型程式庫的參考**COM**  索引標籤**加入參考** 對話方塊上的**專案**功能表。 類型程式庫的名稱會根據您的電腦上安裝的 Excel 版本而有所不同。 例如，名為類型程式庫的 Microsoft Excel 2002 **Microsoft Excel 10.0 物件程式庫**。  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">伺服器無法使用。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定類型的物件不存在</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必要。 <see langword="String" /> 運算式，包含區段或機碼設定所套用的應用程式或專案的名稱。</param>
        <param name="Section">必要。 <see langword="String" /> 運算式，包含所要刪除之機碼設定的來源區段名稱。 如果只有提供 <c>AppName</c> 和 <c>Section</c>，則指定之區段會連同所有相關的機碼設定一併刪除。</param>
        <param name="Key">選擇性。 <see langword="String" /> 運算式，包含所要刪除之機碼設定的名稱。</param>
        <summary>從 Windows 登錄的應用程式項目中刪除區段或機碼設定。 <see langword="My" /> 功能提供了比 <see langword="DeleteSetting" /> 函式更強大的登錄作業產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所有引數所提供，會刪除指定的設定。 如果您嘗試使用，就會發生執行階段錯誤`DeleteSetting`上不存在的區段或機碼設定。  
  
 `DeleteSetting` 需要使用者登入，因為其下的運作方式`HKEY_LOCAL_USER`登錄機碼，在使用者以互動方式登入才會啟用。  
  
 要從非互動式處理序 （例如 Mtx.exe) 存取的登錄設定應該儲存之下`HKEY_LOCAL_MACHINE\Software\`或`HKEY_USER\DEFAULT\Software`登錄機碼。  
  
   
  
## Examples  
 下列範例會先使用`SaveSetting`程序來建立 Windows 登錄中的項目`MyApp`應用程式，然後再使用`DeleteSetting`函式，將它們移除。 因為沒有`Key`指定引數，則整個`Startup`刪除區段，包含區段名稱和所有其索引鍵。  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">使用者未登入。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與作業系統環境變數關聯的字串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 運算式，可評估包含環境變數名稱的字串，或評估與環境字串表中的環境字串數字順序相對應的整數。</param>
        <summary>傳回與作業系統環境變數關聯的字串。</summary>
        <returns>傳回與作業系統環境變數關聯的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Expression`包含字串，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式會傳回指派給指定的環境字串的文字，也就是將環境字串資料表中的該環境變數等號 （=） 後面的文字。 如果中的字串`Expression`找不到在環境字串資料表中，零長度字串 ("") 會傳回。  
  
 如果`Expression`包含整數佔據環境字串資料表中的數字的位置，會傳回的字串。 在此情況下，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>傳回所有的文字，包括環境變數的名稱。 如果沒有環境字串中指定的位置，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>傳回零長度字串。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式需要環境權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 這個範例會使用<xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式提供的項目數目和長度`PATH`環境字串資料表中的陳述式。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> 遺失。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 運算式，可評估包含環境變數名稱的字串，或評估與環境字串表中的環境字串數字順序相對應的整數。</param>
        <summary>傳回與作業系統環境變數關聯的字串。</summary>
        <returns>傳回與作業系統環境變數關聯的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`Expression`包含字串，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式會傳回指派給指定的環境字串的文字，也就是將環境字串資料表中的該環境變數等號 （=） 後面的文字。 如果中的字串`Expression`找不到在環境字串資料表中，零長度字串 ("") 會傳回。  
  
 如果`Expression`包含整數佔據環境字串資料表中的數字的位置，會傳回的字串。 在此情況下，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>傳回所有的文字，包括環境變數的名稱。 如果沒有環境字串中指定的位置，<xref:Microsoft.VisualBasic.Interaction.Environ%2A>傳回零長度字串。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式需要環境權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 這個範例會使用<xref:Microsoft.VisualBasic.Interaction.Environ%2A>函式提供的項目數目和長度`PATH`環境字串資料表中的陳述式。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> 遺失。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必要。 <see langword="String" /> 運算式，包含要求機碼設定的應用程式或專案的名稱。</param>
        <param name="Section">必要。 <see langword="String" /> 運算式，包含要求機碼設定之區段的名稱。 <see langword="GetAllSettings" /> 會傳回包含二維字串陣列的物件。 這些字串會包含指定之區段中的所有機碼設定，加上其對應的值。</param>
        <summary>從 Windows 登錄的應用程式項目中傳回機碼設定及其對應值的清單 (原本是以 <see langword="SaveSetting" /> 所建立)。 使用 <see langword="My" /> 功能可以提供比 <see langword="GetAllSettings" /> 更強大的登錄作業產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
        <returns>從 Windows 登錄的應用程式項目中傳回機碼設定及其對應值的清單 (原本是以 <see langword="SaveSetting" /> 所建立)。  使用 <see langword="My" /> 功能可以提供比 <see langword="GetAllSettings" /> 更強大的登錄作業產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings` 傳回未初始化`Object`如果`AppName`或`Section`不存在。  
  
 因為其下的運作方式`HKEY_LOCAL_USER`登錄機碼，其不在作用中使用者以互動方式登入前，`GetAllSettings`需要使用者登入。  
  
 要從非互動式處理序 （例如 Mtx.exe) 存取的登錄設定應該儲存之下`HKEY_LOCAL_MACHINE\Software\`或`HKEY_USER\DEFAULT\Software`登錄機碼。  
  
   
  
## Examples  
 這個範例會先使用`SaveSetting`函式要在 Windows 登錄是否為指定的應用程式中的項目`AppName`，然後使用`GetAllSettings`函式來顯示的設定。 請注意該應用程式名稱和`Section`名稱無法使用擷取`GetAllSettings`。 最後，`DeleteSetting`函式會移除應用程式的項目。  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">使用者未登入。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Class" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">選擇性。 <see langword="String" />。 檔案的完整路徑和名稱，此檔案包含要擷取的物件。 如果省略 <c>PathName</c>，則將需要 <c>Class</c>。</param>
        <param name="Class">如果未提供 <c>PathName</c>，則將需要它。 <see langword="String" />。 表示物件類別的字串。 <c>Class</c> 引數具有下列語法和組成部分：<c>appname</c><c>.</c><c>objecttype</c>  [1|1] 參數  [1|2] 說明  [2|1] <c>appname</c>  [2|2] 必要項。 <see langword="String" />。 提供物件的應用程式名稱。  [3|1] <c>objecttype</c>  [3|2] 必要項。 <see langword="String" />。 要建立之物件的類型或類別。</param>
        <summary>傳回 COM 元件提供之物件的參考。</summary>
        <returns>傳回 COM 元件提供之物件的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`GetObject`函式以從檔案載入 COM 元件的執行個體。 下列範例將說明這點。  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 當此程式碼執行時，指定相關聯的應用程式`PathName`已啟動，且會啟動指定的檔案中的物件。  
  
## <a name="default-cases"></a>在預設情況下  
 如果`PathName`為零長度字串 (`""`)，`GetObject`傳回指定的類別類型的新物件執行個體。 如果`PathName`省略引數，則`GetObject`傳回指定型別的類別中的目前作用中物件`Class`。 如果指定之類型的物件不存在，就會發生錯誤。  
  
## <a name="accessing-a-subobject"></a>存取子物件  
 某些應用程式可讓您啟動與檔案相關聯的子物件。 若要這樣做，加上驚嘆號 (`!`) 結尾的檔案名稱和後續它與字串識別檔案的一部分，您要啟動。 如需如何建立這個字串的資訊，請參閱 < 建立物件的應用程式的文件。  
  
 例如，在 繪圖應用程式中您可能至繪圖，儲存在檔案中的多個圖層。 您可以使用下列程式碼來啟動圖層內呼叫繪圖`schema.cad`。  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>指定類別  
 如果您未指定物件的`Class`，Automation 會決定應用程式開始並以物件來啟用，根據您所提供的檔名。 不過，某些檔案，可以支援多個物件類別。 例如，繪圖可能支援三種不同類型的物件：`Application`物件，`Drawing`物件，和`Toolbar`物件，都是相同的檔案部分。 若要指定您要啟動的檔案中的物件，使用選擇性`Class`引數。 下列範例將說明這點。  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 在上述範例中，`Figment`繪圖應用程式的名稱和`Drawing`是其中一個支援的物件類型。  
  
## <a name="using-the-object"></a>使用物件  
 啟動物件後，您在中參考它的程式碼使用您所宣告物件變數。 在上述範例中，存取新的物件使用的物件變數的屬性和方法`drawObj`。 下列範例將說明這點。  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  使用`GetObject`函式物件的目前執行個體時，或如果您想要載入的檔案建立物件。 如果沒有目前的執行個體，而且您不想開始使用的物件載入的檔案，請使用<xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>函式。  
>   
>  如果物件已本身註冊為 ActiveX 單一執行個體物件，只有一個執行個體物件的建立，不論如何多次`CreateObject`呼叫。 使用單一執行個體物件，`GetObject`一律會傳回相同的執行個體時呼叫零長度字串 (`""`) 語法中，而且如果會造成錯誤`PathName`省略引數。 您無法使用`GetObject`來取得要使用 Visual Basic 中建立的類別的參考。  
  
> [!IMPORTANT]
>  `GetObject`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 下列範例會使用`GetObject`函數來取得特定的 Microsoft Excel 工作表的參考 (`excelObj`)。 它會使用工作表的`Application`屬性，以顯示 Excel，請將其關閉，並執行其他動作。 使用兩個 API 呼叫，`detectExcel`程序會尋找 Excel，與正在執行，如果在執行物件表格中輸入它。 第一次呼叫`GetObject`若 Excel 尚未執行，在此範例會產生錯誤會導致`excelWasNotRunning`旗標設為`True`。 第二個呼叫`GetObject`指定要開啟的檔案。 如果尚未執行 Excel，第二次呼叫啟動時，它，並將參考傳回給所指定的檔案，表示工作表`test.xls`。 該檔案必須存在於指定的位置否則，Visual Basic 會擲回<xref:System.IO.FileNotFoundException>。 接下來，範例程式碼會讓 Excel 並包含指定的工作表可見的視窗。  
  
 這個範例需要`Option Strict Off`因為它使用晚期繫結，其中物件指派給變數的型別`Object`。 您可以指定`Option Strict On`和宣告的特定物件類型的物件，如果您將參考加入至 Excel 類型程式庫，從**COM** ] 索引標籤**加入參考**對話方塊中的 [ **專案**Visual Studio 中的功能表。  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 當您呼叫`getExcel`函式，會進行檢查以查看是否已正在執行 Excel。 如果不存在，則會建立執行個體。  
  
> [!IMPORTANT]
>  為了簡單起見，上述範例會假設任何視窗呼叫`XLMAIN`屬於 Microsoft Excel 的執行個體。 如果另一個物件，可能是啟動了其他人違法遭到竄改，具有該名稱建立一個視窗，它會接收您適用於 Excel 的所有訊息。 要用於實際執行應用程式中，您應該包含某些使用較嚴格的測試可讓您確認`XLMAIN`確實屬於 Excel。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定類別類型的物件不存在。</exception>
        <exception cref="T:System.IO.FileNotFoundException">具有指定路徑和檔名的物件不存在。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Default" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必要。 <see langword="String" /> 運算式，包含要求機碼設定的應用程式或專案的名稱。</param>
        <param name="Section">必要。 <see langword="String" /> 運算式，包含找到機碼設定所在的區段名稱。</param>
        <param name="Key">必要。 <see langword="String" /> 運算式，包含要傳回之機碼設定的名稱。</param>
        <param name="Default">選擇性。 如果未在 <c>Key</c> 設定中設定任何值，則為包含傳回值的運算式。 如果省略，則會假設 <c>Default</c> 是長度為零的字串 ("")。</param>
        <summary>從 Windows 登錄的應用程式項目中傳回機碼設定值。 <see langword="My" /> 功能可以提供比 <see langword="GetAllSettings" /> 更強大的登錄作業產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
        <returns>從 Windows 登錄的應用程式項目中傳回機碼設定值。  <see langword="My" /> 功能可以提供比 <see langword="GetAllSettings" /> 更強大的登錄作業產能和效能。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果任一項目中名為`GetSetting`引數不存在，`GetSetting`傳回值的`Default`。  
  
 因為其下的運作方式`HKEY_LOCAL_USER`登錄機碼，其不在作用中使用者以互動方式登入前，`GetSetting`需要使用者登入。  
  
 要從非互動式處理序 （例如 Mtx.exe) 存取的登錄設定應該儲存之下`HKEY_LOCAL_MACHINE\Software\`或`HKEY_USER\DEFAULT\Software`登錄機碼。  
  
 `GetSetting` 需要`Read` <xref:System.Security.Permissions.RegistryPermission> 。  
  
   
  
## Examples  
 這個範例會先使用`SaveSetting`函式要在 Windows 登錄是否為指定的應用程式中的項目`AppName`，然後使用`GetSetting`函式，以顯示其中一個設定。 因為`Default`引數指定時，某些保證值傳回。 請注意，`Section`名稱無法使用擷取`GetSetting`。 最後，`DeleteSetting`函式會移除應用程式的所有項目。  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一個或多個引數不是 <see langword="String" /> 運算式，或使用者未登入。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必要。 <see langword="Boolean" />。 要評估的運算式。</param>
        <param name="TruePart">必要。 <see langword="Object" />。 如果 <c>Expression</c> 評估為 <see langword="True" />，則傳回。</param>
        <param name="FalsePart">必要。 <see langword="Object" />。 如果 <c>Expression</c> 評估為 <see langword="False" />，則傳回。</param>
        <summary>根據運算式的評估結果，傳回兩個物件當中的其中一個。</summary>
        <returns>根據運算式的評估結果，傳回兩個物件當中的其中一個。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IIf`函式會提供對應項目三元[條件運算子:？:](http://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) Visual c + + 中。  
  
   
  
## Examples  
 這個範例會使用`IIf`函數來評估`testMe`參數`checkIt`程序並傳回 word 「 大 」 if 數量大於 1000年; 否則它會傳回這個字 「 小 」。  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 請注意，如果`Option Strict`是`On`，您必須使用`CStr`關鍵字，明確轉換從傳回`Object`至`String`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" />
        <Parameter Name="Title" Type="System.String" />
        <Parameter Name="DefaultResponse" Type="System.String" />
        <Parameter Name="XPos" Type="System.Int32" />
        <Parameter Name="YPos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Prompt">必要項。<see langword="String" /> 運算式，顯示為對話方塊中的訊息。 <c>Prompt</c> 的最大長度約為 1024 個字元，需視使用的字元寬度而定。 如果 <c>Prompt</c> 包含多行，您可以在各行間使用歸位字元 (<see langword="Chr(" />13<see langword=")" />)、換行字元 (<see langword="Chr(" />10<see langword=")" />) 或歸位字元/換行字元組合 (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) 來分隔行。</param>
        <param name="Title">選擇性。 <see langword="String" /> 運算式，會顯示在對話方塊的標題列中。 如果您省略 <c>Title</c>，則會將應用程式名稱置於標題列中。</param>
        <param name="DefaultResponse">選擇性。 <see langword="String" /> 運算式，會在未提供其他輸入時，顯示在文字方塊中當做預設回應。 如果您省略 <c>DefaultResponse</c>，則顯示的文字方塊會是空的。</param>
        <param name="XPos">選擇性。 數值運算式，可指定從螢幕左邊緣算起的對話方塊左邊緣的距離 (以 Twip 為單位)。 如果您省略 <c>XPos</c>，則會以水平置中方式顯示對話方塊。</param>
        <param name="YPos">選擇性。 數值運算式，可指定從螢幕上邊緣算起的對話方塊上邊緣的距離 (以 Twip 為單位)。 如果您省略 <c>YPos</c>，則會以垂直顯示方式將對話方塊置於往螢幕下方距離約三分之一的地方。</param>
        <summary>在對話方塊中顯示提示、等候使用者輸入文字或按一下按鈕，然後傳回包含文字方塊內容的字串。</summary>
        <returns>在對話方塊中顯示提示、等候使用者輸入文字或按一下按鈕，然後傳回包含文字方塊內容的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用者按一下**取消**，就會傳回零長度字串。  
  
 若要指定超過第一個引數，您必須使用`InputBox`函式在運算式中的。 如果您省略任何位置的引數時，您必須保留對應的逗號分隔符號。  
  
> [!NOTE]
>  `InputBox`函式需要`UIPermission`在<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>層級，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱和<xref:System.Security.Permissions.UIPermission>。  
  
   
  
## Examples  
 此範例示範使用各種方式`InputBox`函式來提示使用者輸入的值。 如果 x 和 y 位置會省略，對話方塊會自動置中的個別座標軸。 變數`MyValue`包含如果使用者按一下 [確定]，或按下 ENTER 鍵，使用者所輸入的值。  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" />
        <Parameter Name="Title" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Prompt">必要。 <see langword="String" /> 運算式，顯示為對話方塊中的訊息。 <c>Prompt</c> 的最大長度約為 1024 個字元，需視使用的字元寬度而定。 如果 <c>Prompt</c> 包含多行，您可以在各行間使用歸位字元 (<see langword="Chr(" />13<see langword=")" />)、換行字元 (<see langword="Chr(" />10<see langword=")" />) 或歸位字元/換行字元組合 (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) 來分隔行。</param>
        <param name="Buttons">選擇性。 數值運算式，其為指定要顯示的按鈕數目和類型、要使用的圖示樣式、預設按鈕的識別以及訊息方塊是否為強制回應等值的總和。 如果您省略 <c>Buttons</c>，預設值會是零。</param>
        <param name="Title">選擇性。 <see langword="String" /> 運算式，會顯示在對話方塊的標題列中。 如果您省略 <c>Title</c>，則會將應用程式名稱置於標題列中。</param>
        <summary>在對話方塊中顯示訊息、等候使用者按一下按鈕，然後傳回表示使用者按下的按鈕之整數。</summary>
        <returns>
          <list type="table">
            <item>
              <term> 常數  </term>
              <description> 值  </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1  </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2  </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3  </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4  </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5  </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6  </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您省略任何位置的引數時，您必須保留對應的逗號分隔符號。  
  
 如果對話方塊顯示**取消**按鈕時，按 ESC 鍵具有相同的效果與按一下**取消**  
  
 如果對話方塊包含**協助**按鈕時，對話方塊中提供即時線上說明。 不過，直到選擇其中一個其他按鈕，則會不傳回任何值。 Windows Form 應用程式中，選擇**協助**按鈕會執行<xref:System.Windows.Forms.Control.HelpRequested>事件表單。  
  
> [!NOTE]
>  `MsgBox`函式需要`UIPermission`在<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>層級，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.UIPermission>。  
  
 `MsgBoxStyle`列舉值會列在下表。  
  
|成員|值|描述|  
|-|-|-|  
|成員|值|描述|  
|`OKOnly`|0|只顯示 [確定] 按鈕。|  
|`OKCancel`|1|顯示 [確定] 和 [取消] 按鈕。|  
|`AbortRetryIgnore`|2|顯示 中止、 重試 」 和 忽略 按鈕。|  
|`YesNoCancel`|3|會顯示 Yes、 No 和取消按鈕。|  
|`YesNo`|4|顯示 [是] 和 [否] 按鈕。|  
|`RetryCancel`|5|顯示 [重試] 和 [取消] 5d; 按鈕。|  
|`Critical`|16|顯示重大訊息圖示。|  
|`Question`|32|顯示警告查詢 圖示。|  
|`Exclamation`|48|顯示警告訊息圖示。|  
|`Information`|64|顯示資訊的訊息圖示。|  
|`DefaultButton1`|0|第一個按鈕是預設值。|  
|`DefaultButton2`|256|第二個按鈕是預設值。|  
|`DefaultButton3`|512|第三個按鈕是預設值。|  
|`ApplicationModal`|0|應用程式是強制回應。 使用者必須再繼續目前的應用程式中的工作回應訊息方塊。|  
|`SystemModal`|4096|系統為強制回應。 所有應用程式會暫停，直到使用者回應訊息方塊。|  
|`MsgBoxSetForeground`|65536|指定訊息方塊視窗為前景視窗。|  
|`MsgBoxRight`|524288|文字是靠右對齊。|  
|`MsgBoxRtlReading`|1048576|指定文字應該顯示為右至左讀取希伯來文和阿拉伯文系統上。|  
  
 第一個值 (0-5) 群組描述 對話方塊中顯示的按鈕類型與數量。 第二個群組 （16、 32、 48、 64） 描述的圖示樣式。 第三個群組 0、 256 （512） 會判斷哪一個按鈕是預設值。 第四個群組的值 （0，4096） 會決定訊息方塊中的強制回應和第五個群組可讓您指定訊息方塊視窗是前景視窗，以及對齊和文字的方向。 加入數字來建立的最後一個值時`Buttons`引數，從每個群組的使用只有一個數字。  
  
   
  
## Examples  
 這個範例會使用`MsgBox`顯示嚴重錯誤訊息包含 [是] 和 [否] 按鈕的對話方塊中的函式。 [否] 按鈕已指定為預設回應。 這是結合`MsgBox`成一個數值運算式的常數值。 在此情況下，將 4 (是/否 按鈕組合) 到 16 (**重大訊息**視窗) 和 256 （第二個按鈕為預設按鈕） 提供 276 總數。 所傳回的值`MsgBox`函式取決於使用者選擇按鈕: [是] 會傳回 6; 的值沒有傳回值為 7。  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Prompt" /> 不是 <see langword="String" /> 運算式，或 <paramref name="Title" /> 無效。</exception>
        <exception cref="T:System.InvalidOperationException">處理序不是在使用者互動模式中執行。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">一或多個參數不是 <see langword="MsgBoxResult" /> 或 <see langword="MsgBoxStyle" /> 列舉類型的成員。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
        <Parameter Name="Start" Type="System.Int64" />
        <Parameter Name="Stop" Type="System.Int64" />
        <Parameter Name="Interval" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必要。 <see langword="Long" />。 在其中一個計算範圍中所要尋找的整數值。</param>
        <param name="Start">必要。 <see langword="Long" />。 整數值，表示這組計算範圍的開頭。 <c>Start</c> 不得小於 0。</param>
        <param name="Stop">必要。 <see langword="Long" />。 整數值，表示這組計算範圍的結尾。 <c>Stop</c> 不得小於或等於 <c>Start</c>。</param>
        <param name="Interval">必要。 <see langword="Long" />。 整數值，表示 <c>Start</c> 到 <c>Stop</c> 之間所計算之每一個範圍的大小。 <c>Interval</c> 不得小於 1。</param>
        <summary>傳回字串，表示包含數字的計算範圍。</summary>
        <returns>傳回字串，表示包含數字的計算範圍。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Partition`函式會計算一組的數值範圍，每一個都會包含所指定的值數目`Interval`。 第一個範圍的開頭位於`Start`，且最後一個範圍結束於`Stop`。 `Partition`函式，然後識別哪些範圍包含`Number`並傳回描述該範圍內的字串。 範圍以字串中"*值較低值*:*較高值*"，其中範圍下限 (*值較低值*) 分開高階 (*較高值*) 以冒號 （:）。  
  
 如有必要，`Partition`函式會插入開頭空白之前*值較低值*和*較高值*，讓它們都具有相同的字元數為字串表示的值 （`Stop` + 1)。 這可確保，如果您使用的輸出`Partition`具有數個值的函式`Number`，產生的文字會正確地處理在任何後續的排序作業期間。  
  
 下表顯示使用三組計算範圍的某些範例字串`Start`， `Stop`，和`Interval`。 「 第一次的範圍 」 和 「 上次範圍 」 資料行顯示最低和最大可能範圍已知值的`Start`和`Stop`。 "之前第一個範圍 」 和 「 呼叫後最後一個範圍 」 資料行顯示的值傳回的字串`Number`小於`Start`且大於`Stop`分別。  
  
|`Start`|`Stop`|`Interval`|第一個範圍之前|第一個範圍|最後一個範圍|最後一個範圍後|  
|-|-|-|-|-|-|-|  
|0|99|5|"   : -1"|"0: 4"|「 95: 99"|「 100:"|  
|20|199|10|「: 19"|"20: 29"|"190:199"|「 200:"|  
|100|1010|20|「: 99"|「 100: 119"|"1000:1010"|"1011年:"|  
  
 在上表中，第三行顯示結果時`Start`和`Stop`定義一組數字，無法由平均分配`Interval`。 在最後一個範圍結束於`Stop`，使得只有 11 個數，即使`Interval`為 20。  
  
 如果`Interval`為 1，範圍是 「`Number`:`Number`"，而不論`Start`和`Stop`引數。 例如，如果`Number`是 267，`Stop`為 1000，和`Interval`為 1，`Partition`傳回"267: 267"。  
  
 `Partition` 建構資料庫查詢時，可能很有用。 您可以建立的 SELECT 查詢，顯示發生在不同的數值範圍，例如與發票值從 1 到 1000、 1001年到 2000年多少訂單等等。  
  
   
  
## Examples  
 下列範例會設定範圍的一系列數十 2049 1950。 找到的值`year`內適當的範圍並傳回`String`顯示範圍的值。 如果`year`比方說，其值為 1984，`Partition`傳回"1980:1989"。  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 0, <paramref name="Stop" /> &lt;= <paramref name="Start" /> 或 <paramref name="Interval" /> &lt; 1。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Setting" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必要。 <see langword="String" /> 運算式，包含此設定所套用的應用程式或專案的名稱。</param>
        <param name="Section">必要。 <see langword="String" /> 運算式，包含機碼設定儲存所在的區段名稱。</param>
        <param name="Key">必要。 <see langword="String" /> 運算式，包含所要儲存之機碼設定的名稱。</param>
        <param name="Setting">必要。 運算式，包含 <c>Key</c> 所設定成的值。</param>
        <summary>在 Windows 登錄中儲存或建立應用程式項目。 <see langword="My" /> 功能可以提供比 <see langword="SaveSetting" /> 更強大的登錄作業產能和效能。 如需詳細資訊，請參閱<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveSetting`函式會將關鍵`HKEY_CURRENT_USER\Software\VB and VBA Program Settings`。  
  
 如果因為任何原因無法儲存索引鍵的設定，就會發生錯誤。  
  
 `SaveSetting` 需要使用者登入，因為其下的運作方式`HKEY_LOCAL_USER`登錄機碼，在使用者以互動方式登入才會啟用。  
  
 要從非互動式處理序 （例如 Mtx.exe) 存取的登錄設定應該儲存之下`HKEY_LOCAL_MACHINE\Software\`或`HKEY_USER\DEFAULT\Software`登錄機碼。  
  
 `SaveSetting` 需要`Write`和`Create` <xref:System.Security.Permissions.RegistryPermission> 。  
  
   
  
## Examples  
 下列範例會先使用`SaveSetting`函式來建立 Windows 登錄中的項目`MyApp`應用程式，然後再使用`DeleteSetting`函式，將它們移除。  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無法建立登錄機碼或使用者未登入。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" />
        <Parameter Name="Wait" Type="System.Boolean" />
        <Parameter Name="Timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="PathName">必要。 <see langword="String" />。 要執行的程式名稱，以及任何必要的引數和命令列參數。 <c>PathName</c> 也可包含磁碟機和目錄路徑或資料夾。  如果您不知道此程式的路徑，可以使用 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> 來尋找。 例如，您可以呼叫 <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c>，以傳回磁碟機 C:\\ 上任何位置名為 <c>testFile.txt</c> 之每個檔案的完整路徑。</param>
        <param name="Style">選擇性。 <see langword="AppWinStyle" />。 選自 <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> 的值，可指定此程式執行所在之視窗的樣式。 如果省略 <c>Style</c>，則 <see langword="Shell" /> 會使用 <see langword="AppWinStyle.MinimizedFocus" /> (其會以最小化狀態啟動程式，並具有焦點)。</param>
        <param name="Wait">選擇性。 <see langword="Boolean" />。 值，表示 <see langword="Shell" /> 函式是否應該等候程式完成。 如果省略 <c>Wait</c>，則 <see langword="Shell" /> 會使用 <see langword="False" />。</param>
        <param name="Timeout">選擇性。 <see langword="Integer" />。 如果 <c>Wait</c> 為 <see langword="True" />，則為等候完成的毫秒數。 如果省略 <c>Timeout</c>，則 <see langword="Shell" /> 會使用 -1，這表示沒有逾時，且 <see langword="Shell" /> 要等到程式完成後才會傳回。 因此，如果您省略 <c>Timeout</c> 或是將它設定為 -1，則 <see langword="Shell" /> 有可能永遠不會將控制權交回給您的程式。</param>
        <summary>執行可執行程式，並在它仍在執行中時傳回一個整數 (整數中包含此程式的處理序 ID)。</summary>
        <returns>執行可執行程式，並在它仍在執行中時傳回一個整數 (整數中包含此程式的處理序 ID)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回值`Shell`函式，取決於程式是否在名為`PathName`仍在執行時`Shell`傳回。 如果您設定`Wait`至`True`和在程式完成之前逾時過期，`Shell`傳回零。 如果在逾時到期，或如果您省略`Wait`或將它設定為`False`，`Shell`傳回程式的處理序識別碼。 處理序識別碼是唯一的數字，識別執行的程式。  
  
## <a name="failure-to-start"></a>無法啟動  
 如果`Shell`函式的具名的程式中，無法啟動<xref:System.IO.FileNotFoundException>就會發生錯誤。 這種情形，例如，當您嘗試執行的 16 位元程式，例如`command.com`，從應用程式使用<xref:System.Windows.Forms?displayProperty=nameWithType>。 因應措施，您可以執行呼叫所需的 16 位元程式的 32 位元程式。 如果是`command.com`，您可以執行`cmd.exe`替代。  
  
## <a name="waiting-for-completion"></a>等待完成  
 根據預設，`Shell`函式會以非同步方式執行程式。 這表示程式入門`Shell`函式可能會無法完成下列陳述式之前執行`Shell`函式會執行。 如果您想要等待程式完成，您才能繼續，請設定`Wait`至`True`。  
  
## <a name="determining-the-exit-code"></a>判斷結束程式碼  
 處理程序可以傳回*結束代碼*當它所終止。 不過，您無法使用`Shell`擷取這個結束程式碼，因為`Shell`等候終止時，如果傳回零，也因為處理序會從不同物件中執行`Shell`。  
  
 若要擷取的結束代碼的處理程序，您必須撰寫自己的程式碼來初始化程序，並等候終止。 下列範例會示範如何起始處理程序，請靜待其終止，並擷取它的結束代碼。  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>保護的檔案規格  
 您應該一律括住整個路徑和檔案規格引號，如下列範例所示。  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 每一對相鄰雙引號 (`" "`) 內的字串常值會解譯為字串中的一個雙引號字元。 因此，上述範例中會顯示下列字串`Shell`函式：  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 如果您不需要以引號括住的路徑，Windows 會尋找名為的檔案`Program.exe`在 C:\ 目錄中，而不是`display.exe`C:\Program Files 目錄中。  
  
> [!IMPORTANT]
>  您無法執行將路徑和檔案規格括在引號中，有安全性風險如果檔案名稱或路徑節點包含空格。 在上述範例中，路徑節點`\Program Files`包含空格。 如果規格沒有引號中，名為程式`Program.exe`已安裝在 c:\\，例如依了其他人違法遭到竄改，Windows 會執行，而不是`display.exe`。  
  
> [!IMPORTANT]
>  `Shell`函式需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。  
  
   
  
## Examples  
 下列範例會使用`Shell`函式來執行指定使用者的應用程式。 指定<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>做為第二個引數的標準大小開啟應用程式並為其提供焦點。  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Style" /> 不在 0 到 9 的範圍內 (含 0 和 9)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <see langword="Shell" /> 找不到 <paramref name="PathName" /> 檔案。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="PathName" /> 為 <see langword="Nothing" />。</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">必要。 <see langword="Object" /> 參數陣列。 必須有偶數數目的元素。 您可以提供以逗號分隔的 <see langword="Object" /> 變數或運算式的清單，或是一維的 <see langword="Object" /> 元素陣列。</param>
        <summary>評估運算式的清單，並傳回對應到此清單中第一個 <see langword="Object" /> 的運算式之 <see langword="True" /> 值。</summary>
        <returns>評估運算式的清單，並傳回對應到此清單中第一個 <see langword="Object" /> 的運算式之 <see langword="True" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引數提供給`VarExpr`配對的運算式和值所組成。 `Switch`函式評估奇數運算式從最低到最高的索引中`VarExpr`，並傳回第一個運算式評估為相關聯的偶數值`True`。 例如，如果`VarExpr(0)`是`True`，`Switch`傳回`VarExpr(1)`，如果`VarExpr(0)`是`False`但`VarExpr(2)`是`True`，`Switch`傳回`VarExpr(3)`，依此類推。  
  
 如果您未提供`VarExpr`引數，`Switch`傳回`Nothing`。  
  
> [!NOTE]
>  引數清單中的運算式可以包含函式呼叫。 準備呼叫的引數清單的過程`Switch`，Visual Basic 編譯器會呼叫每個函式中每個運算式。 這表示您不能依賴特定函式引數清單中之前的運算式時，未呼叫`True`。  
  
   
  
## Examples  
 下列範例會使用`Switch`函數來傳回相符的城市名稱的語言名稱。 它要求`Option Strict`是`Off`。  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 因為<xref:System.Diagnostics>命名空間也包含一種類別稱為<xref:System.Diagnostics.Switch>，呼叫`Switch`函式必須以限定<xref:Microsoft.VisualBasic>命名空間。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引數的數目為奇數。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>