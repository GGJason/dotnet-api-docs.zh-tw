<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fec15f3aa469e16359d9844dba0b87ed75e1b2a" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39729397" /></Metadata><TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含語音合成器引擎所使用的文字和語音屬性資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語音平台基礎結構會解壓縮之 SSML 輸入和建構的 XML 架構結構<xref:System.Speech.Synthesis.TtsEngine.TextFragment>物件。  
  
 語音內容均可透過<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>， <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，並<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>的屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
 語音屬性資訊，例如強調、 音調、 和速率會取自<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回的物件<xref:System.Speech.Synthesis.TtsEngine.TextFragment><xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建構 <see langword="TextFragment" /> 的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設建構函式<xref:System.Speech.Synthesis.TtsEngine.TextFragment>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see langword="TextFragment" /> 的語音屬性資訊。</summary>
        <value><see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />執行個體會傳回，或用來設定<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />的語音屬性資訊。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性的預設值為 `null`。  
  
 韻律資訊可以從執行個體取得<xref:System.Speech.Synthesis.TtsEngine.Prosody>所傳回<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A>執行個體上的屬性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定片段中語音文字的長度。</summary>
        <value><see langword="int" />會傳回，也可以用來設定和要說出的這個片段相關聯的文字字串的長度（以字元為單位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的預設值為 0。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定片段中文字起始的位置。</summary>
        <value><see langword="int" />會傳回，也可以用來設定和要說出的這個片段相關聯的該文字字串部分的開始位置（以字元為單位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的預設值為 0。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定或取得片段的語音文字。</summary>
        <value><see langword="System.String" />會傳回，或者可以用來設定語音合成引擎所要使用的語音文字以產生音訊輸出。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性的預設值為 `System.String.Empty`。  
  
 應用程式是免費的值完全變更<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>。  
  
 重設的值<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>不會變更的值<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>和<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>