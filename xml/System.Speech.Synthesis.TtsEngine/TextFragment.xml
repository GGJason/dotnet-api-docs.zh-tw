<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13e928cdfeca3e5e8c57f46129caf5ae136b3dba" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529252" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含語音合成器引擎所使用的文字和語音屬性資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語音平台基礎結構會解壓縮的 SSML 輸入和建構 XML 為基礎結構<xref:System.Speech.Synthesis.TtsEngine.TextFragment>物件。  
  
 語音內容是透過<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>， <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，和<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
 語音會屬性的詳細資訊，例如強調、 音調、 和速率取自<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回物件<xref:System.Speech.Synthesis.TtsEngine.TextFragment><xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性。  
  
   
  
## Examples  
 下列範例是繼承自自訂語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用使用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞給`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>針對新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值的中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每個屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將 Americanism Britishisms 以轉譯要讀出的文字。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>介面提供給實作支援<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成器完成百分比的磁碟機。  
  
3.  語音轉譯引擎接著會呼叫以修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建構 <see langword="TextFragment" /> 的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設建構函式<xref:System.Speech.Synthesis.TtsEngine.TextFragment>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see langword="TextFragment" /> 的語音屬性資訊。</summary>
        <value>
          <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />執行個體會傳回，或用來設定<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />的語音屬性資訊。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性的預設值為 `null`。  
  
 可以從執行個體取得 prosody 資訊<xref:System.Speech.Synthesis.TtsEngine.Prosody>傳回<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A>屬性的執行個體上<xref:System.Speech.Synthesis.TtsEngine.FragmentState>傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定片段中語音文字的長度。</summary>
        <value>
          <see langword="int" />會傳回，也可以用來設定和要說出的這個片段相關聯的文字字串的長度（以字元為單位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的預設值為 0。  
  
   
  
## Examples  
 下列範例是繼承自自訂語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用使用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞給`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>針對新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值的中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每個屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將 Americanism Britishisms 以轉譯要讀出的文字。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>介面提供給實作支援<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成器完成百分比的磁碟機。  
  
3.  語音轉譯引擎接著會呼叫以修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定片段中文字起始的位置。</summary>
        <value>
          <see langword="int" />會傳回，也可以用來設定和要說出的這個片段相關聯的該文字字串部分的開始位置（以字元為單位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的預設值為 0。  
  
   
  
## Examples  
 下列範例是繼承自自訂語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用使用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞給`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>針對新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值的中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每個屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將 Americanism Britishisms 以轉譯要讀出的文字。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>介面提供給實作支援<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成器完成百分比的磁碟機。  
  
3.  語音轉譯引擎接著會呼叫以修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定或取得片段的語音文字。</summary>
        <value>
          <see langword="System.String" />會傳回，或者可以用來設定語音合成引擎所要使用的語音文字以產生音訊輸出。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性的預設值為 `System.String.Empty`。  
  
 應用程式可用的值會完全變更<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>。  
  
 值重設<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>不會變更的值<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>和<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>。  
  
   
  
## Examples  
 下列範例是繼承自自訂語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用使用<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>。  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  接收的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞給`Speak`基礎的合成引擎上的方法。  
  
     特別注意用於尊重<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>，<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>原始<xref:System.Speech.Synthesis.TtsEngine.TextFragment>建立時<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>針對新<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值的中找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.FragmentState>傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>每個屬性<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將 Americanism Britishisms 以轉譯要讀出的文字。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>介面提供給實作支援<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成器完成百分比的磁碟機。  
  
3.  語音轉譯引擎接著會呼叫以修改<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>