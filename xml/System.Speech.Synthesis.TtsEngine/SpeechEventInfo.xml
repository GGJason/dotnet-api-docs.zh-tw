<Type Name="SpeechEventInfo" FullName="System.Speech.Synthesis.TtsEngine.SpeechEventInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="92702392c3c2b20ba439cc4dba49bd51ad94bcfd" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52206561" /></Metadata><TypeSignature Language="C#" Value="public struct SpeechEventInfo : IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpeechEventInfo extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpeechEventInfo&#xA;Implements IEquatable(Of SpeechEventInfo)" />
  <TypeSignature Language="C++ CLI" Value="public value class SpeechEventInfo : IEquatable&lt;System::Speech::Synthesis::TtsEngine::SpeechEventInfo&gt;" />
  <TypeSignature Language="F#" Value="type SpeechEventInfo = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ImmutableObject(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>用來指定要在自訂合成語音引擎將文字轉譯為語音過程中產生之事件的型別及其引數 (如果有的話)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自訂的語音合成引擎藉由提供適當要求的語音平台事件產生<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A>隸屬<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>引擎站台物件傳遞到實作<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>，<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechEventInfo (short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 eventId, int16 parameterType, int32 param1, native int param2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Short, parameterType As Short, param1 As Integer, param2 As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo : int16 * int16 * int * nativeint -&gt; System.Speech.Synthesis.TtsEngine.SpeechEventInfo" Usage="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo (eventId, parameterType, param1, param2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int16" />
        <Parameter Name="parameterType" Type="System.Int16" />
        <Parameter Name="param1" Type="System.Int32" />
        <Parameter Name="param2" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="eventId"><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" />的執行個體，指出<see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件要處理的語音平台事件的排序。</param>
        <param name="parameterType"><see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />的執行個體，指出<paramref name="param2" />的<see langword="System.IntPtr" />參考的解譯方式，以及隱含地指出<paramref name="param1" />的使用。</param>
        <param name="param1">當要建構的<see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />的執行個體所要求的事件產生時，要傳遞至語音平台的整數值。  
  
這個整數的確切意義隱含取決於 <paramref name="parameterType" /> 的值。</param>
        <param name="param2">參考物件的 <see langword="System.IntPtr" /> 執行個體。 當要建構的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 的執行個體所要求的事件產生時，要傳遞至語音平台的整數值。  
  
必須參考的型別是由 <paramref name="parameterType" /> 值來明確定義的。 值 <see langword="System.IntPtr.Zero" />。</param>
        <summary>建構適當的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允許的值用於`parameterType`， `param1`，並`param2`和它們的意義取決於所要求的事件類型所指定的成員<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>用於`eventId`。  
  
 如需適當的值的詳細資訊`parameterType`， `param1`，和`param2`，請參閱文件 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  
  
 事件，可以由語音平台基礎結構的類型可透過<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>合成器引擎站實作的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷 <c>SpeechEventInfo</c> 執行個體是否等於另一個物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="speechEventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要評估的物件。</param>
        <summary>判斷指定的物件是否為 <c>SpeechEventInfo</c> 的執行個體且等於 <c>SpeechEventInfo</c> 目前的執行個體。</summary>
        <returns>如果 <paramref name="obj" /> 等於目前的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Speech.Synthesis.TtsEngine.SpeechEventInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Speech::Synthesis::TtsEngine::SpeechEventInfo other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="speechEventInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="other">要評估的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件。</param>
        <summary>判斷指定的 <c>SpeechEventInfo</c> 物件是否等於 <c>SpeechEventInfo</c> 目前的執行個體。</summary>
        <returns>如果 <paramref name="other" /> 等於目前的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public short EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 EventId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventId As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short EventId { short get(); };" />
      <MemberSignature Language="F#" Value="member this.EventId : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和設定使用 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 之執行個體進行要求的語音平台事件。</summary>
        <value>傳回 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> 的成員做為 <see langword="short" />，表示 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件要產生的事件型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
         上的參數<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>，包括<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>用來記錄事件產生透過`LogSpeechEvent`方法。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="speechEventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供 <c>SpeechEventInfo</c> 物件的雜湊碼。</summary>
        <returns><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件的雜湊碼。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="event1 = event2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1">要與 <paramref name="event2" /> 相比較的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件。</param>
        <param name="event2">要與 <paramref name="event1" /> 相比較的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件。</param>
        <summary>判斷 <c>SpeechEventInfo</c> 的兩個執行個體是否相等。</summary>
        <returns>如果 <paramref name="event1" /> 與 <paramref name="event2" /> 相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[這個運算子的對等方法是<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality (event1, event2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1">要與 <paramref name="event2" /> 相比較的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件。</param>
        <param name="event2">要與 <paramref name="event1" /> 相比較的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 物件。</param>
        <summary>判斷 <c>SpeechEventInfo</c> 的兩個執行個體是否不相等。</summary>
        <returns>如果 <paramref name="event1" /> 與 <paramref name="event2" /> 不同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[這個運算子的對等方法是<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param1">
      <MemberSignature Language="C#" Value="public int Param1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Param1" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param1 As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Param1 { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Param1 : int" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和設定 <see langword="integer" />值 (建構函式中的 <paramref name="param1" />)，這個值要傳遞至語音平台以產生使用 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 之目前執行個體進行要求的事件。</summary>
        <value>傳回在目前的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 執行個體所指定的事件產生時，要傳遞至語音平台的 <see langword="integer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 需求和意義<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>的屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一取決於值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>並<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體。  
  
 如需詳細資訊中，使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>，請參閱文件<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
         上的參數<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>，包括<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>用來記錄事件產生透過`LogSpeechEvent`方法。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param2">
      <MemberSignature Language="C#" Value="public IntPtr Param2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Param2" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param2 As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Param2 { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Param2 : nativeint" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和設定 <see langword="System.IntPtr" />執行個體 (建構函式中的 <paramref name="param2" />)，這個執行個體所參考的物件要傳遞至語音平台以產生使用 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 之目前執行個體進行要求的事件。</summary>
        <value>傳回 <see langword="System.IntPtr" />，參考在目前的 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 執行個體所指定的事件產生時，要傳遞至語音平台的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上的需求`System.IntPtr`的參考<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一取決於值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>並<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體。  
  
 如需詳細資訊中，使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>，請參閱文件<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
         上的參數<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>，包括<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>用來記錄事件產生透過`LogSpeechEvent`方法。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public short ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short ParameterType { short get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterType : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回目前 <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> 物件上 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> 參數所傳回的 <see langword="IntPtr" /> 所指向之物件的資料型別。</summary>
        <value>對應至 <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> 列舉成員的 <see langword="short" />值，指出<see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />參數所傳回的<see langword="IntPtr" />所指的物件的資料型別，並用來作為目前<see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />物件的建構函式的第二個引數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上的需求`System.IntPtr`的參考<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一取決於值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>並<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>屬性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體。  
  
 如需詳細資訊中，使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>，請參閱文件<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。  
  
   
  
## Examples  
 下列範例是繼承自客製化語音合成器實作的一部分<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>，並使用將<xref:System.Speech.Synthesis.TtsEngine.TextFragment>， <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>， <xref:System.Speech.Synthesis.TtsEngine.FragmentState>，及 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 實作 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  收到陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體，並建立新的陣列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體傳遞至`Speak`基礎的合成引擎上的方法。  
  
2.  如果<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>列舉值，藉由從找到<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>屬性上的<xref:System.Speech.Synthesis.TtsEngine.FragmentState>所傳回<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>屬性的每個<xref:System.Speech.Synthesis.TtsEngine.TextFragment>執行個體是<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>，實作  
  
    -   將以 Britishisms Americanism 轉譯要讀出的文字中。  
  
    -   如果<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>上的屬性<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>提供的實作支援介面<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>事件類型、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>執行個體用來建立事件，以便建立合成進度計量表的磁碟機。  
  
         上的參數<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>，包括<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>用來記錄事件產生透過`LogSpeechEvent`方法。  
  
3.  然後會呼叫語音轉譯引擎使用修改後<xref:System.Speech.Synthesis.TtsEngine.TextFragment>陣列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>