<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="806523a2ac4e7853023da7afc4c04b405f3fafaf" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="0ac7f-101">提供用於剖析結構化文字檔的方法和屬性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ac7f-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-102">`TextFieldParser`物件會提供方法和屬性剖析結構化文字檔。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="0ac7f-103">剖析文字檔`TextFieldParser`類似於逐一查看文字檔案，而`ReadFields`方法來擷取文字欄位是類似於分割的字串。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="0ac7f-104">`TextFieldParser`可以剖析兩種檔案類型： 分隔或固定寬度。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="0ac7f-105">某些屬性，例如`Delimiters`並`HasFieldsEnclosedInQuotes`才有意義時使用分隔的檔案，而`FieldWidths`屬性使用固定寬度檔案時，才有意義。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="0ac7f-106">下表列出與工作的範例`Microsoft.VisualBasic.FileIO.TextFieldParser`物件。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="0ac7f-107">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-107">To</span></span>|<span data-ttu-id="0ac7f-108">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-109">從分隔的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-109">Read from a delimited text file</span></span>|[<span data-ttu-id="0ac7f-110">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-111">從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0ac7f-112">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="0ac7f-113">從以多種格式的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="0ac7f-114">如何：以多種格式從文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-115">此範例會剖析 tab 鍵分隔的文字檔，透過`Bigfile`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-116">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="0ac7f-117">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-117">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="0ac7f-118">要剖析的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-118">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-119">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-120">建立新`TextFieldParser`剖析的檔案或資料流的物件由`stream`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-121">
            <paramref name="stream" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-121">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-122">無法從 <paramref name="stream" /> 讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-122">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="0ac7f-123">
            <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-123">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="0ac7f-124">要進行剖析的 <see cref="T:System.IO.TextReader" /> 資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-125">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-126">建立新`TextFieldParser`剖析的檔案或資料流的物件由`reader`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-127">
            <paramref name="reader" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-127">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="0ac7f-128">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-128">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="0ac7f-129">要進行剖析的完整檔案路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-129">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-130">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-131">建立新`TextFieldParser`剖析所指定的檔案物件`path`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-132">
            <paramref name="path" /> 為空字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-132">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="0ac7f-133">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-133">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="0ac7f-134">要剖析的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-134">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="0ac7f-135">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-135">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="0ac7f-136">如果編碼不是從檔案中決定，則為要使用的字元編碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-136">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="0ac7f-137">預設為 <see cref="P:System.Text.Encoding.UTF8" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-138">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-139">建立新`TextFieldParser`剖析的檔案或資料流的物件由`stream`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0ac7f-140">當您編譯以特定的文化特性設定的一組字元，並擷取這些相同的字元，以不同的文化特性設定時，可能會無法解譯字元，並可能會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-141">
            <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-141">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-142">無法從 <paramref name="stream" /> 讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-142">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="0ac7f-143">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-143">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="0ac7f-144">要進行剖析的完整檔案路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-144">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="0ac7f-145">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-145">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="0ac7f-146">如果編碼不是從檔案中決定，則為要使用的字元編碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-146">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="0ac7f-147">預設為 <see cref="P:System.Text.Encoding.UTF8" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-148">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-149">建立新`TextFieldParser`剖析所指定的檔案物件`path`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0ac7f-150">當您編譯以特定的文化特性設定的一組字元，並擷取這些相同的字元，以不同的文化特性設定時，可能會無法解譯字元，並可能會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-151">
            <paramref name="path" /> 為空字串，或 <paramref name="defaultEncoding" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-151">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="0ac7f-152">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-152">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="0ac7f-153">要剖析的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-153">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="0ac7f-154">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-154">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="0ac7f-155">如果編碼不是從檔案中決定，則為要使用的字元編碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-155">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="0ac7f-156">預設為 <see cref="P:System.Text.Encoding.UTF8" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="0ac7f-157">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-157">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="0ac7f-158">表示是否在檔案開頭尋找位元組順序標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-158">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="0ac7f-159">預設為 <see langword="True" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-159">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-160">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-161">建立新`TextFieldParser`剖析的檔案或資料流的物件由`stream`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="0ac7f-162">如果`detectEncoding`參數是`True`，這個建構函式會嘗試偵測藉由查看檔案或資料流的前三個位元組的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0ac7f-163">它會自動識別 utf-8、 big-endian Unicode 與 big endian Unicode 文字如果檔案的開頭適當的位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0ac7f-164">否則，請指定編碼的`defaultEncoding`用。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0ac7f-165">當您編譯以特定的文化特性設定的一組字元，並擷取這些相同的字元，以不同的文化特性設定時，可能會無法解譯字元，並可能會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-166">
            <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-166">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-167">無法從 <paramref name="stream" /> 讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-167">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="0ac7f-168">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-168">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="0ac7f-169">要進行剖析的完整檔案路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-169">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="0ac7f-170">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-170">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="0ac7f-171">如果編碼不是從檔案中決定，則為要使用的字元編碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-171">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="0ac7f-172">預設為 <see cref="P:System.Text.Encoding.UTF8" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="0ac7f-173">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-173">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="0ac7f-174">表示是否在檔案開頭尋找位元組順序標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-174">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="0ac7f-175">預設為 <see langword="True" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-175">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-176">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-177">建立新`TextFieldParser`剖析所指定的檔案物件`path`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="0ac7f-178">如果`detectEncoding`參數是`True`，這個建構函式會嘗試偵測藉由查看檔案或資料流的前三個位元組的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0ac7f-179">它會自動識別 utf-8、 big-endian Unicode 與 big endian Unicode 文字如果檔案的開頭適當的位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0ac7f-180">否則，請指定編碼的`defaultEncoding`用。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0ac7f-181">當您編譯以特定的文化特性設定的一組字元，並擷取這些相同的字元，以不同的文化特性設定時，可能會無法解譯字元，並可能會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-182">
            <paramref name="path" /> 為空字串，或 <paramref name="defaultEncoding" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-182">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="0ac7f-183">
            <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-183">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="0ac7f-184">要剖析的資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-184">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="0ac7f-185">
            <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-185">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="0ac7f-186">如果編碼不是從檔案中決定，則為要使用的字元編碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-186">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="0ac7f-187">預設為 <see cref="P:System.Text.Encoding.UTF8" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="0ac7f-188">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-188">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="0ac7f-189">表示是否在檔案開頭尋找位元組順序標記。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-189">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="0ac7f-190">預設為 <see langword="True" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-190">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="0ac7f-191">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-191">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="0ac7f-192">指出是否要在 <see langword="TextFieldParser" /> 物件關閉時保持 <c>stream</c> 開啟。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="0ac7f-193">預設為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-193">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-194">初始化 <see langword="TextFieldParser" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-195">建立新`TextFieldParser`剖析的檔案或資料流的物件由`stream`參數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="0ac7f-196">如果`detectEncoding`參數是`True`，這個建構函式會嘗試偵測藉由查看檔案或資料流的前三個位元組的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="0ac7f-197">它會自動識別 utf-8、 big-endian Unicode 與 big endian Unicode 文字如果檔案的開頭適當的位元組順序標記。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="0ac7f-198">否則，請指定編碼的`defaultEncoding`用。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0ac7f-199">當您編譯以特定的文化特性設定的一組字元，並擷取這些相同的字元，以不同的文化特性設定時，可能會無法解譯字元，並可能會導致擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="0ac7f-200">
            <paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 為 <see langword="Nothing" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-200">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-201">無法從 <paramref name="stream" /> 讀取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-201">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-202">關閉目前的 <see langword="TextFieldParser" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-202">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0ac7f-203">此範例會關閉`TextFieldParser.FileReader`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-204">定義註解語彙基元 (Token)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-204">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="0ac7f-205">註解語彙基元是一個字串，當置於一行的開頭時，表示該行為註解，剖析器 (Parser) 應當忽略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-206">字串陣列，其中包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件的所有註解語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-207">這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下 [**所有**] 索引標籤。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0ac7f-208">長度為零的註解語彙基元會被忽略。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-209">這個範例會指定基於`TextFieldParser`，`FileReader`單引號 （'） 為開頭的行會應該予以忽略。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-210">註解語彙基元包含空白字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-210">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-211">定義文字檔的分隔符號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-211">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-212">字串陣列，其中包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件的所有欄位分隔符號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-213">此屬性才有意義才<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>屬性設定為`FieldType.Delimited`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="0ac7f-214">定義分隔符號文字檔也可以使用完成<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="0ac7f-215">下表列出的工作，包含範例`Delimiters`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="0ac7f-216">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-216">To</span></span>|<span data-ttu-id="0ac7f-217">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-218">從分隔的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-218">Read from a delimited text file</span></span>|[<span data-ttu-id="0ac7f-219">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-220">這個範例會指定的分隔符號`TextFieldParser`物件， `FileReader`，是逗號 （，）。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-221">設定為新行字元、空字串或 <see langword="Nothing" /> 的分隔符號值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-222">釋放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-223">釋放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="0ac7f-224">布林值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-224">Boolean.</span>
          </span>
          <span data-ttu-id="0ac7f-225">
            <see langword="True" /> 表示同時釋放 Managed 和 Unmanaged 資源，<see langword="False" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-225">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-226">釋放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-227">如果目前的游標位置和檔案結尾之間沒有非空白的非註解行，則會傳回 <see langword="True" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-228">如果沒有任何資料可供讀取則為 <see langword="True" />，否則為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-228">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-229">這個屬性可以從檔案讀取時用來判斷正在讀取資料的結尾。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="0ac7f-230">下表列出與工作的範例`EndOfData`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="0ac7f-231">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-231">To</span></span>|<span data-ttu-id="0ac7f-232">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-233">從分隔的檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-233">Read from a delimited file</span></span>|[<span data-ttu-id="0ac7f-234">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-235">從固定寬度檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="0ac7f-236">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-237">這個範例會使用`EndofData`循環檔案中的所有欄位的屬性`TextFieldReader`， `FileReader`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-238">傳回造成最新 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外狀況的行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-239">行，其造成最近的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-240">如果沒有<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>擲回例外狀況，則傳回空的字串。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="0ac7f-241"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>屬性可以用來顯示造成此例外狀況的行號。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="0ac7f-242">下表列出與工作的範例`ErrorLine`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="0ac7f-243">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-243">To</span></span>|<span data-ttu-id="0ac7f-244">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-245">從分隔的檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-245">Read from a delimited file</span></span>|[<span data-ttu-id="0ac7f-246">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-247">從固定寬度檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="0ac7f-248">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-249">這個範例會使用`ErrorLine`屬性來顯示導致目前的行<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-250">傳回造成最新 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外狀況的行號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-251">造成最近 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外狀況之行的號碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-252">如果沒有<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>擲回例外狀況，則傳回-1。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="0ac7f-253"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>屬性可以用來顯示造成此例外狀況的行號。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="0ac7f-254">判斷的行號時，會忽略空白行和註解。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="0ac7f-255">下表列出與工作的範例`ErrorLineNumber`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="0ac7f-256">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-256">To</span></span>|<span data-ttu-id="0ac7f-257">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-258">從分隔的檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-258">Read from a delimited file</span></span>|[<span data-ttu-id="0ac7f-259">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-260">從固定寬度檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="0ac7f-261">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-262">這個範例會使用`ErrorLineNumber`屬性來顯示導致目前的行位置<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-263">代表正在剖析文字檔中每一個資料行的寬度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-263">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-264">整數陣列，其中包含正在剖析之文字檔中每一個資料行的寬度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-264">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-265">此屬性才有意義才<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>屬性設定為`FieldType.FixedWidth`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="0ac7f-266">如果陣列中的最後一個項目小於或等於零，則會將欄位假設為可變寬度。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="0ac7f-267"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>方法也可用來設定欄位寬度。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="0ac7f-268">下表列出與工作的範例`FieldWidths`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="0ac7f-269">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-269">To</span></span>|<span data-ttu-id="0ac7f-270">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-271">從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0ac7f-272">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-273">這個範例會讀取檔案`ParserText.txt`，指定的寬度; 第一個資料行是 5 個字元寬、 第二個是 10，第三個為 11，以及第四個則為可變寬度</span><span class="sxs-lookup"><span data-stu-id="0ac7f-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-274">任何位置 (除了陣列的最後一個項目以外) 中的寬度值會小於或等於零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-275">在記憶體回收 (GC) 回收 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物件前，允許其嘗試釋放資源並執行其他清除作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-276">代表分隔的檔案進行剖析時，欄位是否加上引號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-277">如果欄位要以引號括住則為 <see langword="True" />，否則為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-277">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-278">這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下 [**所有**] 索引標籤。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0ac7f-279">如果屬性是`True`，剖析器會假設欄位會括在引號 ("")，而且可能會包含行尾結束符號。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="0ac7f-280">如果欄位以引號括住，例如`abc, "field2a,field2b", field3`這個屬性，而且`True`，則會傳回所有以引號括住的文字，因為; 此範例會傳回`abc|field2a,field2b|field3`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="0ac7f-281">將此屬性設定為`False`讓此範例會傳回`abc|"field2a|field2b"|field3`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-282">此範例會設定`HasFieldsEnclosedInQuotes`屬性，以`True`如`myReader`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-283">傳回目前的行號，如果資料流中已沒有可用的字元，則會傳回 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-284">目前的行號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-284">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-285">這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下 [**所有**] 索引標籤。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0ac7f-286">判斷的行號時，會忽略空白行和註解。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-287">這個範例會在文字檔案中搜尋"Jones"的名稱，並報告上哪一行。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="0ac7f-288">
            <see langword="Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-288">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="0ac7f-289">要讀取的字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-289">Number of characters to read.</span>
          </span>
          <span data-ttu-id="0ac7f-290">必要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-290">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-291">讀取指定數目的字元而不使游標前進。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-291">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ac7f-292">字串，包含指定的已讀取字元數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-292">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-293">`numberOfChars`值必須小於行中的字元總數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="0ac7f-294">如果不是，所傳回的字串`PeekChars`會截斷成列的長度。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="0ac7f-295">空白行會遭到忽略。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="0ac7f-296">不會傳回行結尾字元。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="0ac7f-297">`PeekChars`方法會執行不需要剖析; 行尾字元分隔欄位中的會解譯為實際尾。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="0ac7f-298">下表列出與工作的範例`PeekChars`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="0ac7f-299">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-299">To</span></span>|<span data-ttu-id="0ac7f-300">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-301">判斷剖析它之前的欄位的格式</span><span class="sxs-lookup"><span data-stu-id="0ac7f-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="0ac7f-302">如何：以多種格式從文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-303">這個範例會使用`PeekChars`尋找資料的結尾，並停止在該點剖析檔案。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-304">
            <paramref name="numberOfChars" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-304">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-305">讀取目前行上的所有欄位，將它們傳回為字串陣列，並將游標前進至包含資料的下一行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ac7f-306">字串陣列，包含目前行的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-306">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-307">若要允許使用者剖析多個格式的文字檔`ReadFields`方法會檢查的值`TextFieldType`， `Delimiters`，和`FieldWidths`、 如果有指定，每次呼叫時。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="0ac7f-308">使用者必須正確設定`TextFieldType`並`FieldWidths`或`Delimiters`適當的屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="0ac7f-309">如果`TextFieldType`設為`Delimited`，並`Delimiters`未設定，或如果`TextFieldType`設定為`FixedWidth`和`FieldWidths`，擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ac7f-310">如果`ReadFields`遇到空白列，則會略過，而且會傳回下一個非空白列。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="0ac7f-311">如果`ReadFields`方法無法剖析目前這一行時，會引發例外狀況並不會移動到下一行。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="0ac7f-312">這可讓您的應用程式，以嘗試剖析列一次。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="0ac7f-313">下表列出與工作的範例`ReadFields`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="0ac7f-314">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-314">To</span></span>|<span data-ttu-id="0ac7f-315">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-316">從分隔的檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-316">Read from a delimited file</span></span>|[<span data-ttu-id="0ac7f-317">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-318">從固定寬度檔案讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="0ac7f-319">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-320">這個範例會使用`ReadFields`方法從逗號分隔的檔案讀取`ParserText.txt`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="0ac7f-321">範例會寫入至欄位`Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="0ac7f-322">欄位無法使用指定的格式進行剖析。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-322">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="0ac7f-323">關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="0ac7f-324">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-325">將目前的行以字串傳回，並將游標前進至下一行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-325">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ac7f-326">取自檔案或資料流的目前行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-326">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-327">`ReadLine`方法會執行不需要剖析; 行尾字元分隔欄位中的會解譯為實際尾。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="0ac7f-328">`Nothing` 如果已到達檔案結尾傳回的。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-329">這個範例會讀取整個檔案`ParserText.txt`並將它寫入`Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="0ac7f-330">如果`Testfile.txt`不存在，它由`WriteAllText`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="0ac7f-331">此範例會寫入欄位做為單一字串。將每一行顯示的那一行，在目的地檔案中，`VbCrLf`應該在每一行的結尾附加字元。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-332">讀取文字檔的其餘部分，並將其以字串傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-332">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ac7f-333">取自檔案或資料流的其餘文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-333">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-334">這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下 [**所有**] 索引標籤。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="0ac7f-335">如果沒有任何多個讀取，因為已達到檔案結尾，`Nothing`會傳回。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="0ac7f-336">`ReadToEnd`方法不會忽略空白行和註解。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-337">這個範例會使用`ReadToEnd`方法來讀取整個檔案`ParserText.txt`並將它寫入檔案`Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="0ac7f-338">如果`Testfile.txt`不存在，它由`WriteAllText`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="0ac7f-339">型別 <see langword="String" /> 的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-339">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-340">將讀取器 (Reader) 的分隔符號設為指定的值，並將欄位型別 (Field Type) 設為 <see langword="Delimited" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-341">現有的內容`Delimiters`當設定這個方法時，會清除屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="0ac7f-342">這個方法可用來設定分隔符號，而不需要建立陣列。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="0ac7f-343">下表列出的工作，包含範例`SetDelimiters`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="0ac7f-344">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-344">To</span></span>|<span data-ttu-id="0ac7f-345">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-346">剖析文字檔案</span><span class="sxs-lookup"><span data-stu-id="0ac7f-346">Parse a text file</span></span>|[<span data-ttu-id="0ac7f-347">使用 TextFieldParser 物件剖析文字檔</span><span class="sxs-lookup"><span data-stu-id="0ac7f-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-348">這個範例會開啟文字欄位的剖析器，並定義做為分隔符號`vbTab`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="0ac7f-349">將路徑`C:\logs\test.log`與您想要剖析的檔案名稱與路徑。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0ac7f-350">分隔符號長度為零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-350">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="0ac7f-351">
            <see langword="Integer" /> 的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-351">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ac7f-352">將讀取器 (Reader) 的分隔符號設定為指定的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-352">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-353">現有的內容`Delimiters`設定完成後，會清除屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="0ac7f-354">這個方法可用來設定分隔符號，而不需要建立陣列。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="0ac7f-355">下表列出範例中的工作涉及`SetFieldWidths`方法。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="0ac7f-356">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-356">To</span></span>|<span data-ttu-id="0ac7f-357">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-358">剖析文字檔案。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-358">Parse a text file.</span></span>|[<span data-ttu-id="0ac7f-359">使用 TextFieldParser 物件剖析文字檔</span><span class="sxs-lookup"><span data-stu-id="0ac7f-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-360">這個範例會開啟文字欄位的剖析器，並定義欄位寬度為`5`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="0ac7f-361">將路徑`C:\logs\test.log`與您想要剖析的檔案名稱與路徑。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="0ac7f-362">下列範例會開啟文字欄位的剖析器，並定義為欄位寬度`5`， `10`，和變數。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="0ac7f-363">將路徑`C:\logs\test.log`與您想要剖析的檔案名稱與路徑。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-364">指出剖析的檔案是分隔的檔案，還是固定寬度的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-364">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-365">
            <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 值，指出要剖析的檔案是分隔的檔案，還是固定寬度的檔案。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-366">這個屬性的預設值被分隔。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="0ac7f-367">下表列出與工作的範例`TextFieldType`屬性。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="0ac7f-368">以</span><span class="sxs-lookup"><span data-stu-id="0ac7f-368">To</span></span>|<span data-ttu-id="0ac7f-369">請參閱</span><span class="sxs-lookup"><span data-stu-id="0ac7f-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="0ac7f-370">從分隔的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-370">Read from a delimited text file</span></span>|[<span data-ttu-id="0ac7f-371">如何：從逗號分隔文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="0ac7f-372">從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="0ac7f-373">如何：從固定寬度的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="0ac7f-374">從以多種格式的文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="0ac7f-375">如何：以多種格式從文字檔讀取</span><span class="sxs-lookup"><span data-stu-id="0ac7f-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-376">這個範例會建立`TextFieldParser`， `FileReader`，並指定它分隔。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="0ac7f-377">這個範例會建立`TextFieldParser`， `FileReader`，並指定它是固定寬度。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ac7f-378">指出是否應當去除欄位值中前置和結尾的空白字元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-378">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0ac7f-379">如果應去除欄位值的前置和結尾空白字元則為 <see langword="True" />，否則為 <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ac7f-379">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ac7f-380">這個屬性的預設值為 `True`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ac7f-381">這個範例會建立`TextFieldParser`， `FileReader`，並設定`TrimWhiteSpace`屬性設`True`。</span><span class="sxs-lookup"><span data-stu-id="0ac7f-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>