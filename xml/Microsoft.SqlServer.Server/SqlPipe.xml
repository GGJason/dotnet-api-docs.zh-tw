<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f715fd742165d7d4ffbc7cb2e9be3f2dfa6d157e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715744" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允許 SQL Server 資料庫上同處理序 (In-Process) 執行的 Managed 預存程序 (Stored Procedure) 將結果傳回呼叫端。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此類別的執行個體可透過受管理的預存程序<xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A>屬性<xref:Microsoft.SqlServer.Server.SqlContext>類別。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlCommand>從預存程序中的資料來源選取資料列。 然後此範例使用<xref:Microsoft.SqlServer.Server.SqlPipe>來執行命令，並將結果傳送回用戶端。  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">要執行的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 物件。</param>
        <summary>執行做為參數傳遞的命令，並將結果傳送至用戶端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何實際的結果，除了其他訊息和錯誤會也直接傳送到用戶端。  
  
 輸出參數和傳回值不會傳送到用戶端中;這些可供呼叫端，透過命令物件的參數集合。  
  
 如果命令未繫結至同處理序連線，<xref:System.InvalidOperationException>就會擲回。 繫結至跨處理序 (Out-Of-Process) 連接的命令不支援這個方法。  
  
 如果錯誤<xref:System.Data.SqlClient.SqlCommand>原先送出，例外狀況都會傳送至管道，但複本也會傳送至呼叫的 managed 程式碼的物件。 如果呼叫程式碼不會攔截例外狀況，它會散佈到堆疊的 TRANSACT-SQL 程式碼，並在輸出中出現兩次。 如果呼叫的程式碼攔截例外狀況，管道取用者還是會看到錯誤，但不是會有重複的錯誤。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlCommand>從預存程序中的資料來源選取資料列。 然後此範例使用<xref:Microsoft.SqlServer.Server.SqlPipe>來執行命令，並將結果傳送回用戶端。  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">繫結至跨處理序 (Out-Of-Process) 連接的命令不支援這個方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 是否處於將單一結果集 (Result Set) 傳送回用戶端的模式。 這個屬性是唯讀的。</summary>
        <value>如果已呼叫 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法，且 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 處於將單一結果集傳送回用戶端的模式，則為 <see langword="true" />，否則為 <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將結果直接傳送至用戶端或目前的輸出消費者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **傳送**方法的資料將直接傳送至用戶端或呼叫端。 它通常是用戶端取用的輸出**管道**方法，但在巢狀 CLR 的情況下預存程序，輸出取用者也可以是預存程序。 例如，Procedure1 呼叫<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>命令文字"EXEC Procedure2"。 Procedure2 也是受管理的預存程序。 如果 Procedure2 此時呼叫<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>，資料列會傳送至 Procedure1 的讀取器，不會對用戶端。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">要傳送至用戶端的單一資料列結果集：<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 物件。</param>
        <summary>將單一資料列結果集直接傳送至用戶端或目前的輸出消費者。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">要傳送至用戶端的多資料列結果集：<see cref="T:System.Data.SqlClient.SqlDataReader" /> 物件。</param>
        <summary>將多資料列結果集直接傳送至用戶端或目前的輸出消費者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Data.SqlClient.SqlDataReader>物件傳遞為參數已隱藏資料行、 資料行不會傳播至結果集傳送至用戶端。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要傳送至用戶端的訊息字串。</param>
        <summary>將字串訊息直接傳送至用戶端或目前的輸出消費者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 訊息字串做為參考用訊息傳送至用戶端。 用戶端應用程式可以透過不同的機制，根據資料存取應用程式開發介面 (API)，它們會使用接聽訊息。 例如，如果用戶端使用 ADO.NET，訊息傳輸到<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件。  
  
   
  
## Examples  
 下列範例會使用<xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>訊息字串直接傳送到用戶端的方法。  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> 超過 4,000 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標記結果集的結尾，並將 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 執行個體返回初始狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed 預存程序可以將結果集傳送給未實作的用戶端<xref:System.Data.SqlClient.SqlDataReader>。 這種方法，連同<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>和<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>，允許自訂結果集傳送至用戶端的預存程序。  
  
   
  
## Examples  
 下列範例會建立新<xref:Microsoft.SqlServer.Server.SqlDataRecord>及其<xref:Microsoft.SqlServer.Server.SqlMetaData>。 範例接著標示結果集使用的開頭<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法，將範例資料的記錄傳送回用戶端會使用<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，並將標記為結尾的結果集<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">未先呼叫 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">
          <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 物件，具有要傳送至用戶端之資料列的資料行值。 記錄的結構描述必須符合傳遞至 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 方法之 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 的中繼資料 (Metadata) 所描述的結構描述。</param>
        <summary>將資料的單一資料列傳送回用戶端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed 預存程序可以將結果集傳送給未實作的用戶端<xref:System.Data.SqlClient.SqlDataReader>。 這種方法，連同<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>和<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>，允許自訂結果集傳送至用戶端的預存程序。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法會傳回給用戶端來傳送單一資料列。 資料列可以接著傳回給呼叫者藉由呼叫<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>，一次傳送每個資料列。 已傳送所有資料列，呼叫之後<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法，才能標示結果集的結尾。  
  
   
  
## Examples  
 下列範例會建立新<xref:Microsoft.SqlServer.Server.SqlDataRecord>及其<xref:Microsoft.SqlServer.Server.SqlMetaData>。 範例接著標示結果集使用的開頭<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法，將範例資料的記錄傳送回用戶端會使用<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，並將標記為結尾的結果集<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">未先呼叫 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">
          <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 物件，您可以從中擷取中繼資料，也可用它來描述結果集。</param>
        <summary>標記要傳送回用戶端之結果集的開頭，並使用這個 record 參數，建構描述結果集的中繼資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed 預存程序可以將結果集傳送給未實作的用戶端<xref:System.Data.SqlClient.SqlDataReader>。 這種方法，連同<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>和<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>，允許自訂結果集傳送至用戶端的預存程序。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法標示結果集的開頭，並使用這個 record 參數來建構描述結果集的中繼資料。 所有後續資料列，使用傳送<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，必須符合該中繼資料定義。  
  
 請注意，在呼叫<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>，則僅<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>和<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>可以呼叫。 在相同的執行個體中的任何其他方法<xref:Microsoft.SqlServer.Server.SqlPipe>會擲回<xref:System.InvalidOperationException>。 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 設定<xref:Microsoft.SqlServer.Server.SqlPipe>回到其中可以呼叫其他方法的初始狀態。  
  
 從 CLR 執行 TRANSACT-SQL 傳回控制項之後，請勿嘗試使用靜態或本機變數初始化為 CLR 的記憶體。 例如，不要儲存在程序的執行個體類別，例如`SQLDataRecord`，以用之後，控制權會從 CLR。 其中一個例外是`SQLMetaData`process 類別中。  
  
   
  
## Examples  
 下列範例會建立新<xref:Microsoft.SqlServer.Server.SqlDataRecord>及其<xref:Microsoft.SqlServer.Server.SqlMetaData>。 範例接著標示結果集使用的開頭<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法，將範例資料的記錄傳送回用戶端會使用<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，並將標記為結尾的結果集<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> 沒有資料行或尚未初始化。</exception>
        <exception cref="T:System.InvalidOperationException">在呼叫 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法之後，呼叫了 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 或 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 之外的方法。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>