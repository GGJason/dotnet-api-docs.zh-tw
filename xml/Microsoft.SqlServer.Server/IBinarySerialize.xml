<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30338262" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>提供使用者定義型別 (UDT) 和使用者定義彙總序列化 (Serialization) 與還原序列化 (Deserialization) 的自訂實作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者定義型別 (Udt) 和使用者定義彙總都必須先定義儲存格式，可為<xref:Microsoft.SqlServer.Server.Format>。`Native` 或<xref:Microsoft.SqlServer.Server.Format>。`UserDefined`。  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` 可讓 SQL Server 處理序列化和還原序列化時自動執行，但此格式有限制的類型，它可以處理類型。 <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` 可讓使用者定義型別和彙總處理自己的序列化。 使用者定義型別和彙總都必須標記為<xref:Microsoft.SqlServer.Server.Format>。`UserDefined` 在`SqlUserDefinedType`或`SqlUserDefinedAggregate`屬性，而且必須實作<xref:Microsoft.SqlServer.Server.IBinarySerialize>介面。  
  
 請注意，即使使用自訂序列化，每個執行個體的總大小必須是允許的限制，目前 8000 個位元組到最大值。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">還原序列化物件的 <see cref="T:System.IO.BinaryReader" /> 資料流。</param>
        <summary>從其二進位形式產生使用者定義型別 (UDT) 或使用者定義彙總。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法必須 deserialization 物件使用的資訊寫入<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>方法。  
  
   
  
## Examples  
 下列範例顯示實作<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法會使用 UDT 的<xref:System.IO.BinaryReader>還原序列化先前保留的 UDT。 這個範例假設 UDT 有兩個資料屬性：`StringValue`和`DoubleValue`。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">將 UDT 或使用者定義彙總序列化至的 <see cref="T:System.IO.BinaryWriter" /> 資料流。</param>
        <summary>將使用者定義型別 (UDT) 或使用者定義彙總轉換成其二進位格式，以便將它保存。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 足夠的資訊寫入二進位資料流，以允許<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>deserialization 您 UDT 或使用者定義彙總的方法。  
  
   
  
## Examples  
 下列範例顯示實作<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>方法會使用 UDT 的<xref:System.IO.BinaryWriter>序列化 UDT 中的使用者定義的二進位格式。 Null 字元填補的目的是要確保的字串值完全分開雙精度浮點數值，使一個 UDT 與另一個 TRANSACT-SQL 程式碼、 比較字串位元組字串位元組和雙位元組比較為 double個位元組。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>