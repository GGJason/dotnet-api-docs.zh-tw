<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6398bbefc1b84167ce0d9b13447ecb4af91d8f1b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715873" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="12a91-101">提供使用者定義型別 (UDT) 和使用者定義彙總序列化 (Serialization) 與還原序列化 (Deserialization) 的自訂實作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="12a91-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12a91-102">使用者定義型別 (Udt) 和使用者定義彙總所定義的儲存格式，這可以是<xref:Microsoft.SqlServer.Server.Format>。`Native`</span><span class="sxs-lookup"><span data-stu-id="12a91-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="12a91-103">或是<xref:Microsoft.SqlServer.Server.Format>。`UserDefined`。</span><span class="sxs-lookup"><span data-stu-id="12a91-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="12a91-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="12a91-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="12a91-105">可讓 SQL Server 處理序列化和還原序列化自動執行，但此格式具有限制的類型，它可以處理類型。</span><span class="sxs-lookup"><span data-stu-id="12a91-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="12a91-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="12a91-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="12a91-107">可讓使用者定義型別和彙總，來處理自己的序列化。</span><span class="sxs-lookup"><span data-stu-id="12a91-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="12a91-108">使用者定義型別和彙總必須標記為<xref:Microsoft.SqlServer.Server.Format>。`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="12a91-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="12a91-109">在 `SqlUserDefinedType`或是`SqlUserDefinedAggregate`屬性，而且必須實作<xref:Microsoft.SqlServer.Server.IBinarySerialize>介面。</span><span class="sxs-lookup"><span data-stu-id="12a91-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="12a91-110">請注意，即使使用自訂序列化，每個執行個體的總大小必須在允許的上限，目前在 8000 個位元組。</span><span class="sxs-lookup"><span data-stu-id="12a91-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="12a91-111">還原序列化物件的 <see cref="T:System.IO.BinaryReader" /> 資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12a91-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12a91-112">從其二進位形式產生使用者定義型別 (UDT) 或使用者定義彙總。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12a91-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12a91-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法必須重新建構您使用由寫入資訊的物件<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="12a91-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12a91-114">下列範例示範實作<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法會使用 UDT 的<xref:System.IO.BinaryReader>還原序列化之前保存的 UDT。</span><span class="sxs-lookup"><span data-stu-id="12a91-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="12a91-115">這個範例假設 UDT 有兩個資料屬性：`StringValue`和`DoubleValue`。</span><span class="sxs-lookup"><span data-stu-id="12a91-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="12a91-116">將 UDT 或使用者定義彙總序列化至的 <see cref="T:System.IO.BinaryWriter" /> 資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12a91-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12a91-117">將使用者定義型別 (UDT) 或使用者定義彙總轉換成其二進位格式，以便將它保存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12a91-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12a91-118">足夠的資訊寫入二進位資料流，以允許<xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>方法來重新建構您的 UDT 或使用者定義彙總。</span><span class="sxs-lookup"><span data-stu-id="12a91-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12a91-119">下列範例示範實作<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>方法會使用 UDT 的<xref:System.IO.BinaryWriter>序列化 UDT 中的使用者定義的二進位格式。</span><span class="sxs-lookup"><span data-stu-id="12a91-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="12a91-120">Null 字元填補目的是要確保的字串值完全分開的雙精度浮點數值，以便一 UDT 進行比較到另一個在 TRANSACT-SQL 程式碼中，字串位元組比較字串的位元組和雙位元組比較為 double位元組。</span><span class="sxs-lookup"><span data-stu-id="12a91-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>