<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50b9aa3506602f76059bc392b34ddefa0c71ba17" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52599119" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlContext sealed" />
  <TypeSignature Language="F#" Value="type SqlContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示呼叫端內容的抽象，提供對 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 和 <see cref="T:System.Security.Principal.WindowsIdentity" /> 物件的存取。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlContext>物件可用來取得觸發程序內容 （適用於觸發程序中執行的程式碼） 和管道物件 （如果有，例如預存程序）。 它也可用來取得<xref:System.Security.Principal.WindowsIdentity>物件，表示呼叫的用戶端，Microsoft Windows 識別，如果用戶端驗證伺服器使用整合式驗證。  
  
   
  
## Examples  
 下列範例會建立新<xref:Microsoft.SqlServer.Server.SqlDataRecord>及其<xref:Microsoft.SqlServer.Server.SqlMetaData>。 範例接著標示結果集使用的開頭<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法，將範例資料的記錄傳送回用戶端會使用<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法，並將標記為結尾的結果集<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>方法。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定呼叫程式碼是否在 SQL Server 中執行，且是否可存取內容連接。</summary>
        <value>如果內容連接可用且可存取其他 <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> 成員，則為 <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性會傳回 false，所有其他<xref:Microsoft.SqlServer.Server.SqlContext>成員會擲回<xref:System.InvalidOperationException>如果使用。  
  
 如果這個屬性會傳回 false，則任何嘗試開啟連接物件的 「 內容連線 = true"的連接字串中就會失敗。  
  
 這個屬性是唯讀的。  
  
 如果一段程式碼可能會執行 （使用 common language runtime 整合） 的 SQL Server 內部和外部 SQL Server，請使用 ADO.NET 存取資料，此屬性可用來檢查是否可以使用內容連接。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pipe As SqlPipe" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlPipe ^ Pipe { Microsoft::SqlServer::Server::SqlPipe ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pipe : Microsoft.SqlServer.Server.SqlPipe" Usage="Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得管道物件，允許呼叫端將結果集、訊息和執行命令的結果傳送回用戶端。</summary>
        <value>如果管道可用，則為 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 的執行個體 (Instance)；如果在管道不可用的內容中呼叫 (例如，在使用者定義函式中)，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果從 SQL Server 外部，叫用<xref:System.NotSupportedException>就會擲回。  
  
 這個屬性是唯讀的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TriggerContext As SqlTriggerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlTriggerContext ^ TriggerContext { Microsoft::SqlServer::Server::SqlTriggerContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TriggerContext : Microsoft.SqlServer.Server.SqlTriggerContext" Usage="Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得觸發程序內容，用於向呼叫端提供何者引發觸發程序的相關資訊，以及更新之資料行的對應。</summary>
        <value>如果觸發程序內容可用，則為 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 的執行個體；如果從觸發程序引動過程外部呼叫，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.SqlTriggerContext>物件只可從擷取的通用語言執行階段觸發程序內。  
  
 如果<xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A>從 SQL Server 外部存取屬性<xref:System.NotSupportedException>就會擲回。  
  
 這個屬性是唯讀的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼叫端的 Microsoft Windows 識別。</summary>
        <value>
          <see cref="T:System.Security.Principal.WindowsIdentity" /> 執行個體，表示呼叫端的 Windows 識別；如果使用 SQL Server 驗證 (SQL Server Authentication) 驗證用戶端，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL server 中的 common language runtime (CLR) 程式碼永遠會叫用處理序帳戶的內容中。 如果有必要，程式碼才能執行使用呼叫使用者的身分識別，而不 SQL Server 處理序身分識別的動作，模擬語彙基元應該取得透過這個屬性。 取得 <xref:System.Security.Principal.WindowsIdentity> 物件之後，呼叫端可以模擬用戶端帳戶，並代表它執行動作。  
  
 如果從 SQL Server 外部，叫用<xref:System.NotSupportedException>就會擲回。  
  
 只有以 `EXTERNAL_ACCESS` 或 `UNSAFE` 使用權限標記的組件才能存取此屬性。  
  
 這個屬性是唯讀的。  
  
   
  
## Examples  
 下列範例示範如何取得呼叫用戶端 Windows 身分識別，並模擬用戶端。
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>