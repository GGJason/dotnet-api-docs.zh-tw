<Type Name="SecurityManager" FullName="System.Security.SecurityManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="51b52be500a5be1b9b263e9528638a7f09b2cb2a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500682" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class SecurityManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed SecurityManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityManager" />
  <TypeSignature Language="VB.NET" Value="Public Class SecurityManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供主要存取點給與安全性系統互動的類別。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全性會提供方法來存取及管理安全性原則組態。 您無法建立執行個體<xref:System.Security.SecurityManager>。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckExecutionRights">
      <MemberSignature Language="C#" Value="public static bool CheckExecutionRights { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckExecutionRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityManager.CheckExecutionRights" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckExecutionRights As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckExecutionRights { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出程式碼是否必須具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能執行。</summary>
        <value>
          如果程式碼必須具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能執行，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性是`false`，即使程式碼不含<xref:System.Security.Permissions.SecurityPermissionFlag.Execution>可以執行。 執行檢查昂貴，而且可以排除延遲的原則解析的優點。 這個屬性被提供來停用檢查在需要時執行。  
  
 這個屬性的變更不會保存直到<xref:System.Security.SecurityManager.SavePolicy%2A>呼叫。 新的處理序將不會受到變更之前它會保存在登錄中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThreadRequiresSecurityContextCapture">
      <MemberSignature Language="C#" Value="public static bool CurrentThreadRequiresSecurityContextCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CurrentThreadRequiresSecurityContextCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CurrentThreadRequiresSecurityContextCapture () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CurrentThreadRequiresSecurityContextCapture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>判斷如果稍後必須重新建立目前執行緒的安全性狀態，目前執行緒是否需要擷取安全性內容。</summary>
        <returns>
          如果堆疊未包含部分信任的應用程式定義域、部分信任的組件及目前使用中的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> 或 <see cref="M:System.Security.CodeAccessPermission.Deny" /> 修飾詞，則為 <see langword="false" />，如果 Common Language Runtime 無法保證堆疊完全不含上述任何項目，則為 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture%2A>之前您快取在成功的安全性要求之後取得的機密資料的方法。  
  
 如果<xref:System.Security.CodeAccessPermission.Assert%2A>方法更高版本上呼叫堆疊，資料應該不會快取不會擷取對應的安全性內容。 否則，敏感性下取得的資料<xref:System.Security.CodeAccessPermission.Assert%2A>可能會變成可供程式碼也就是不再執行，與<xref:System.Security.CodeAccessPermission.Assert%2A>就地。  
  
> [!IMPORTANT]
>  傳回值時才是可靠`false`，這表示，執行緒保證不需要安全性內容擷取。 方法不需要，以避免安全性弱點的安全性內容擷取時，可能會傳回 true。  
  
 <xref:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture%2A> 為安全性關鍵，因為其主要用途是為了避免不必要的安全性內容擷取時，表示使用它的程式碼有安全性顧慮，您必須稽核。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStandardSandbox">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet GetStandardSandbox (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet GetStandardSandbox(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ GetStandardSandbox(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">要與權限集合比對的主辨識項。</param>
        <summary>取得可安全授與具提供之辨識項的應用程式的權限集合。</summary>
        <returns>權限集合，可用來當做具提供之辨識項的應用程式的授權集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，主應用程式中的證據`evidence`必須包含<xref:System.Security.Policy.Zone?displayProperty=nameWithType>辨識項。  
>   
>  下表會傳回每個區域的權限集合。  
  
|區域|權限集合|  
|----------|--------------------|  
|<xref:System.Security.SecurityZone.MyComputer>|`FullTrust`|  
|<xref:System.Security.SecurityZone.Intranet>|`LocalIntranet`|  
|<xref:System.Security.SecurityZone.Trusted>|`Internet`|  
|<xref:System.Security.SecurityZone.Internet>|`Internet`|  
|<xref:System.Security.SecurityZone.Untrusted>|無|  
|<xref:System.Security.SecurityZone.NoZone>|無|  
  
 其他的證據，例如<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Site>，列入考量。  
  
 傳回的權限集合可供沙箱，執行應用程式。 請注意，這個方法不會指定原則，可協助判斷應用程式所要求的權限集合是否為合理的主機。 這個方法可以用來將區域對應至沙箱。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Security.SecurityManager.GetStandardSandbox%2A>方法，以取得權限設定沙箱化應用程式。 如需在沙箱中執行的應用程式的詳細資訊，請參閱[如何： 執行部分信任程式碼在沙箱中](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)。  
  
 [!code-csharp[sandboxingApis#1](~/samples/snippets/csharp/VS_Snippets_CLR/SandboxingAPIs/CS/program.cs#1)]
 [!code-vb[sandboxingApis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SandboxingAPIs/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evidence" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetZoneAndOrigin">
      <MemberSignature Language="C#" Value="public static void GetZoneAndOrigin (out System.Collections.ArrayList zone, out System.Collections.ArrayList origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetZoneAndOrigin([out] class System.Collections.ArrayList&amp; zone, [out] class System.Collections.ArrayList&amp; origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetZoneAndOrigin (ByRef zone As ArrayList, ByRef origin As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetZoneAndOrigin([Runtime::InteropServices::Out] System::Collections::ArrayList ^ % zone, [Runtime::InteropServices::Out] System::Collections::ArrayList ^ % origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="System.Collections.ArrayList&amp;" RefType="out" />
        <Parameter Name="origin" Type="System.Collections.ArrayList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="zone">輸出參數，包含所授與 <see cref="T:System.Collections.ArrayList" /> 物件的 <see cref="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone" />。</param>
        <param name="origin">輸出參數，包含所授與 <see cref="T:System.Collections.ArrayList" /> 物件的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" />。</param>
        <summary>取得目前組件的已授與區域識別 (Identity) 和 URL 識別使用權限集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法建議的替代做法是使用執行的組件的 URL 和區域辨識項來呼叫<xref:System.Security.SecurityManager.ResolvePolicy%2A>每個辨識項型別。 從傳回的權限集合<xref:System.Security.SecurityManager.ResolvePolicy%2A>呼叫識別執行的組件的來源 URL 及其區域為基礎來授與的權限。  
  
> [!NOTE]
>  這個成員會產生代表 ECMA 公用金鑰，不是有效的密碼編譯金鑰，但虛擬索引鍵連結要求。 在.NET Framework 中的 ECMA 虛擬機碼的連結要求會自動轉換為 Microsoft 公開金鑰的連結要求。 安全性例外狀況根據 Microsoft 公開金鑰，不 ECMA 虛擬索引鍵。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 的要求失敗。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫者。 這個成員無法供部分信任或安全性透明程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="IsGranted">
      <MemberSignature Language="C#" Value="public static bool IsGranted (System.Security.IPermission perm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGranted(class System.Security.IPermission perm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.IsGranted(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsGranted (perm As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsGranted(System::Security::IPermission ^ perm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="perm" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="perm">要測試呼叫端授與的使用權限。</param>
        <summary>判斷是否授與呼叫端使用權限。</summary>
        <returns>
          如果授與呼叫端的使用權限包括 <paramref name="perm" /> 使用權限，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 授與權限由原則和不同的要求主體覆寫，例如判斷提示。 此外，<xref:System.Security.SecurityManager.IsGranted%2A>只測試的呼叫程式碼組件，獨立於其他呼叫端在堆疊上授與。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPolicyLevelFromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile (string path, System.Security.PolicyLevelType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile(string path, valuetype System.Security.PolicyLevelType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPolicyLevelFromFile (path As String, type As PolicyLevelType) As PolicyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::PolicyLevel ^ LoadPolicyLevelFromFile(System::String ^ path, System::Security::PolicyLevelType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.PolicyLevel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="type" Type="System.Security.PolicyLevelType" />
      </Parameters>
      <Docs>
        <param name="path">包含安全性原則資訊之檔案的實體檔案路徑。</param>
        <param name="type">其中一個列舉值指定要載入的原則層級類型。</param>
        <summary>從指定的檔案載入 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
        <returns>載入的原則層級。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 參數指定的檔案不存在。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。  
  
 -或-  
  
 呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。  
  
 -或-  
  
 呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。  
  
 -或-  
  
 呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</exception>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供檢視和修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">用於讀取和寫入檔案。 列舉型別相關聯： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="LoadPolicyLevelFromString">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString (string str, System.Security.PolicyLevelType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.PolicyLevel LoadPolicyLevelFromString(string str, valuetype System.Security.PolicyLevelType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPolicyLevelFromString (str As String, type As PolicyLevelType) As PolicyLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Policy::PolicyLevel ^ LoadPolicyLevelFromString(System::String ^ str, System::Security::PolicyLevelType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.PolicyLevel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="type" Type="System.Security.PolicyLevelType" />
      </Parameters>
      <Docs>
        <param name="str">安全性原則層級之 XML 表示的格式，和組態檔中的格式相同。</param>
        <param name="type">其中一個列舉值指定要載入的原則層級類型。</param>
        <summary>從指定的字串載入 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
        <returns>載入的原則層級。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> 參數無效。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供檢視和修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PolicyHierarchy">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator PolicyHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerator PolicyHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.PolicyHierarchy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PolicyHierarchy () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerator ^ PolicyHierarchy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供依層級存取安全性原則階層的列舉程式，例如電腦原則和使用者原則。</summary>
        <returns>構成安全性原則階層之 <see cref="T:System.Security.Policy.PolicyLevel" /> 物件的列舉程式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回列舉值提供連續<xref:System.Security.Policy.PolicyLevel>代表個別的原則物件 （電腦、 使用者、 企業、 應用程式定義域） 階層的層級。 這些物件是即時的原則。改變這些物件可以有無法預期的結果。  
  
 最小原則階層是由電腦層級、 企業層級和使用者層級所組成。 不過，階層可以包含其他層級。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供檢視和修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResolvePolicy">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>判斷授與程式碼的使用權限。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">用來評估原則的辨識項集合。</param>
        <summary>根據指定的辨識項，判斷授與程式碼的權限。</summary>
        <returns>可由安全性系統授與的一組權限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用的安全性原則引擎，提供與呼叫程式碼識別的辨識項。 安全性原則會決定結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence[] evidences);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence[] evidences) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResolvePolicy (evidences As Evidence()) As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(cli::array &lt;System::Security::Policy::Evidence ^&gt; ^ evidences);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidences" Type="System.Security.Policy.Evidence[]" />
      </Parameters>
      <Docs>
        <param name="evidences">用來評估原則的辨識項物件陣列。</param>
        <summary>根據指定的辨識項，判斷授與程式碼的權限。</summary>
        <returns>適用於所有提供的辨識項的一組權限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用的安全性原則引擎，提供陣列<xref:System.Security.Policy.Evidence>物件。 傳回的權限集合代表陣列中每個辨識項來套用這些權限。 這些權限是對等項目或原則授與每個個別的辨識項的權限的子集。 這個方法就如同您需要解決每個原則的結果上執行的交集<xref:System.Security.Policy.Evidence>陣列中的物件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet reqdPset, class System.Security.PermissionSet optPset, class System.Security.PermissionSet denyPset, [out] class System.Security.PermissionSet&amp; denied) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolvePolicy(System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ reqdPset, System::Security::PermissionSet ^ optPset, System::Security::PermissionSet ^ denyPset, [Runtime::InteropServices::Out] System::Security::PermissionSet ^ % denied);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="reqdPset" Type="System.Security.PermissionSet" />
        <Parameter Name="optPset" Type="System.Security.PermissionSet" />
        <Parameter Name="denyPset" Type="System.Security.PermissionSet" />
        <Parameter Name="denied" Type="System.Security.PermissionSet&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="evidence">用來評估原則的辨識項集合。</param>
        <param name="reqdPset">執行程式碼所需的必要權限。</param>
        <param name="optPset">授與時將使用的選擇性權限，但非執行程式碼所需。</param>
        <param name="denyPset">即使原則以其他方式允許，也永遠不得授與程式碼的拒絕的使用權限。</param>
        <param name="denied">包含未授與的一組權限的輸出參數。</param>
        <summary>根據指定的辨識項和要求，判斷授與程式碼的權限。</summary>
        <returns>由安全性系統授與的一組權限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用的安全性原則引擎，提供與呼叫程式碼識別的辨識項和權限集的程式碼的要求。 安全性原則會決定結果。 這個方法傳回的安全性系統，所要授與的權限集，並傳回為輸出參數會被拒絕的權限的集合。 有效授與權限會授與不在拒絕的集合中的集合中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.Policy.PolicyException">原則無法授與 <paramref name="reqdPset" /> 參數指定的基本必要權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolvePolicyGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator ResolvePolicyGroups (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerator ResolvePolicyGroups(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerator ^ ResolvePolicyGroups(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">針對評估之原則設定的辨識項。</param>
        <summary>取得符合指定之辨識項的程式碼群組集合。</summary>
        <returns>符合辨識項之程式碼群組集合的列舉。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是分析指定的原則組態的辨識項的特定類型的運作方式很有用。  
  
 程式碼群組將會傳回所有適用的層級的比對原則階層`evidence`參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveSystemPolicy">
      <MemberSignature Language="C#" Value="public static System.Security.PermissionSet ResolveSystemPolicy (System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.PermissionSet ResolveSystemPolicy(class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::PermissionSet ^ ResolveSystemPolicy(System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="evidence">用來評估原則的辨識項集合。</param>
        <summary>根據指定的辨識項，判斷要授與程式碼何種權限，但不包括 <see cref="T:System.AppDomain" /> 層級的原則。</summary>
        <returns>可由安全性系統授與的一組權限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用的安全性原則引擎，並提供與呼叫程式碼識別的辨識項。 結果由系統安全性原則，不包含任何<xref:System.AppDomain>原則。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
      </Docs>
    </Member>
    <Member MemberName="SavePolicy">
      <MemberSignature Language="C#" Value="public static void SavePolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SavePolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.SavePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SavePolicy ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SavePolicy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存已修改的安全性原則狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會儲存原則，公開由<xref:System.Security.SecurityManager.PolicyHierarchy%2A>， <xref:System.Security.Policy.PolicyLevel>，和其他類別，代表安全性原則設定。 除非呼叫此方法時，原則物件所做的變更將不會儲存，而且不會影響後續的應用程式執行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SavePolicyLevel">
      <MemberSignature Language="C#" Value="public static void SavePolicyLevel (System.Security.Policy.PolicyLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SavePolicyLevel(class System.Security.Policy.PolicyLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SavePolicyLevel (level As PolicyLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SavePolicyLevel(System::Security::Policy::PolicyLevel ^ level);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Security.Policy.PolicyLevel" />
      </Parameters>
      <Docs>
        <param name="level">要儲存的原則層級物件。</param>
        <summary>儲存使用 <see cref="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" /> 載入之已修改的安全性原則層級。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Policy.PolicyLevel>將儲存到它載入來源的相同位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <exception cref="T:System.NotSupportedException">此方法使用在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 中已過時的程式碼存取安全性 (CAS) 原則。 若要啟用 CAS 原則對舊版 .NET Framework 的相容性，請使用 [&lt;legacyCasPolicy&gt; 項目](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityEnabled">
      <MemberSignature Language="C#" Value="public static bool SecurityEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SecurityEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityManager.SecurityEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SecurityEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SecurityEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The security manager cannot be turned off on MS runtime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否啟用安全性。</summary>
        <value>
          如果啟用安全性，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性供[Caspol.exe （程式碼存取安全性原則工具）](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)  
  
 `-security` (`-s`) 若要關閉程式碼為基礎的安全性選項。  
  
 <xref:System.Security.SecurityManager.SecurityEnabled%2A> 可讓系統管理員停用程式碼存取安全性。 停用程式碼存取安全性時，所有的程式碼存取需求都會成功。 實際上，這會授與所有的程式碼`FullTrust`。 停用程式碼存取安全性會略過安全性系統，以便執行程式碼可能會稍微好一點比對等的安全性原則授與`FullTrust`所有程式碼。 這個屬性不會停用角色為基礎的安全性。因此，<xref:System.Security.Permissions.PrincipalPermission>要求不會受到影響。  
  
> [!CAUTION]
>  停用程式碼存取安全性會讓系統容易受惡意程式碼的攻擊，如病毒和破壞程式。 停用程式碼存取安全性不會自動封鎖任何方式執行的 managed 程式碼。 It 只會導致 managed 程式碼執行不受限制的程式碼存取安全性系統，以及應該只有在最極端謹慎執行。 關閉安全性，以取得額外的效能只應該已採取其他安全措施來協助保護系統安全性。 其他安全性措施的範例，包括從公用網路中斷連結、用實際方法保全電腦等等。  
  
 這個屬性的變更不會保存直到登錄中<xref:System.Security.SecurityManager.SavePolicy%2A>呼叫。 新的處理序將不會受到變更之前它會保存在登錄中。 變更執行的處理序中的此屬性的值不一定會變更狀態以預期的方式。 若要確保變更已生效，您必須呼叫<xref:System.Security.SecurityManager.SavePolicy%2A>並啟動新的處理序。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫此方法的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要修改原則的能力。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>