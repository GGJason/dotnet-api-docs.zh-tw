<Type Name="IPermission" FullName="System.Security.IPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab62c8d43e0ca696a66655b37755ebe3e68e56e6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPermission : System.Security.ISecurityEncodable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPermission implements class System.Security.ISecurityEncodable" />
  <TypeSignature Language="DocId" Value="T:System.Security.IPermission" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPermission&#xA;Implements ISecurityEncodable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPermission : System::Security::ISecurityEncodable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義由使用權限類型實作的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Common language runtime 中的權限是物件，描述可以保護指定資源的作業集。 權限物件描述操作或安全性控制項，受限於的存取它不代表存取或執行作業的權限。 應用程式程式碼和.NET Framework 安全性系統會使用的權限以下列方式。  
  
-   程式碼要求它才能執行需要的權限。  
  
-   安全性系統原則授與權限，才能讓它執行的程式碼。  
  
-   程式碼會要求呼叫程式碼的權限。  
  
-   程式碼會覆寫安全性堆疊使用判斷提示/拒絕/只允許的。  
  
> [!NOTE]
>  如果您撰寫新的權限，您必須在類別中實作這個介面。  
  
> [!IMPORTANT]
>  可以由多個執行緒存取權限。 實作這個介面時，您必須保證<xref:System.Security.IPermission.IsSubsetOf%2A>， <xref:System.Security.IPermission.Intersect%2A>， <xref:System.Security.IPermission.Union%2A>，和<xref:System.Security.IPermission.Copy%2A>方法實作都是安全執行緒。  
  
   
  
## Examples  
 這個範例示範如何定義程式碼存取安全性權限類別使用。 會實作所有必要的權限的介面。  
  
 [!code-cpp[Permission#1](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#1)]
 [!code-csharp[Permission#1](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#1)]
 [!code-vb[Permission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立並傳回目前權限的相同複本。</summary>
        <returns>目前權限的複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一份權限表示與原始的權限資源相同的存取權。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Security.IPermission.Copy%2A>方法。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.IPermission>類別。  
  
 [!code-cpp[Permission#4](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#4)]
 [!code-csharp[Permission#4](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#4)]
 [!code-vb[Permission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果不符合安全性要求，在 Run Time 時會擲回 <see cref="T:System.Security.SecurityException" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法通常可由安全程式庫來確定呼叫端擁有存取資源的權限。 例如，檔案中的類別安全類別庫的呼叫<xref:System.Security.CodeAccessPermission.Demand%2A>必要的<xref:System.Security.Permissions.FileIOPermission>之前執行檔案作業的呼叫端要求。  
  
 雖然大部分的類別可實作此介面方法會滿足安全性準則執行完整堆疊查核行程，不一定會執行堆疊查核行程。 舉例來說，不會執行堆疊查核行程的實作是<xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=nameWithType>。  
  
 執行堆疊查核行程時，就不會檢查呼叫這個方法的程式碼的權限;檢查該程式碼的立即呼叫端從開始，然後進行堆疊。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。 <xref:System.Security.CodeAccessPermission.Demand%2A> 只有當沒有成功<xref:System.Security.SecurityException>，就會引發。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要與目前權限產生交集的權限。 必須與目前權限屬於相同的類型。</param>
        <summary>建立並傳回目前權限與指定權限交集的權限。</summary>
        <returns>代表目前權限與指定權限交集的新權限。 如果交集是空的，這個新使用權限為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 兩個權限的交集會描述一組共同兩者描述的作業的權限。 只有通過這兩個原始的使用權限的需求會通過交集。  
  
 下列陳述式必須為 true 的所有實作<xref:System.Security.IPermission.Intersect%2A>方法。 `X` 和`Y`代表<xref:System.Security.IPermission>物件參考未`null`。  
  
-   `X`.Intersect (`X`) 傳回的值等於`X`。  
  
-   `X`.Intersect (`Y`) 傳回相同的值做為`Y`。Intersect (`X`)。  
  
-   `X`.Intersect (`null`) 傳回`null`。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Security.IPermission.Intersect%2A>方法。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.IPermission>類別。  
  
 [!code-cpp[Permission#2](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#2)]
 [!code-csharp[Permission#2](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#2)]
 [!code-vb[Permission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 參數不是 <see langword="null" />，並且不是與目前使用權限相同類別的執行個體。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要測試子集關聯性的權限。 這個權限必須與目前權限屬於相同的類型。</param>
        <summary>判斷目前權限是否為指定權限的子集。</summary>
        <returns>
          如果目前的使用權限是指定之使用權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目前權限會指定一組完全包含所指定的權限的作業，目前的權限會是所指定權限的子集。 例如，表示 C:\example.txt 的存取權限是到 c： 代表存取權限的子集\\。 如果此方法傳回`true`，目前的權限，表示沒有存取受保護的資源比指定的權限。  
  
 下列陳述式必須為 true 的所有實作<xref:System.Security.IPermission.IsSubsetOf%2A>方法。 `X``Y`，和`Z`代表<xref:System.Security.IPermission>不是物件`null`。  
  
-   `X`.IsSubsetOf (`X`) 傳回`true`。  
  
-   `X`.IsSubsetOf (`Y`) 傳回相同的值做為`Y`。IsSubsetOf (`X`) 如果且只有`X`和`Y`代表相同的權限集。  
  
-   如果`X`。IsSubsetOf (`Y`) 和`Y`。IsSubsetOf (`Z`) 都會傳回`true`， `X`。IsSubsetOf (`Z`) 傳回`true`。  
  
 如果`X`表示空<xref:System.Security.IPermission>具有權限狀態的物件<xref:System.Security.Permissions.PermissionState.None>和`Y`代表<xref:System.Security.IPermission>物件`null`， `X`。IsSubsetOf (`Y`) 傳回`true`。 如果`Z`也是空白的使用權限的複合設定作業`X`。Union(Z)。IsSubsetOf(Y) 也會傳回`true`因為兩個空的權限的聯集是空的權限。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Security.IPermission.IsSubsetOf%2A>方法。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.IPermission>類別。  
  
 [!code-cpp[Permission#3](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#3)]
 [!code-csharp[Permission#3](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#3)]
 [!code-vb[Permission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 參數不是 <see langword="null" />，而且與目前使用權限不是相同的型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">要與目前權限結合的權限， 必須與目前權限屬於相同的類型。</param>
        <summary>建立目前權限與指定權限聯集的權限。</summary>
        <returns>代表目前權限與指定權限聯集的新權限。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要呼叫的結果<xref:System.Security.IPermission.Union%2A>是權限，表示代表的所有作業目前的權限和指定的權限。 傳遞其中一個權限的任何要求會傳遞它們的聯集。  
  
 下列陳述式必須為 true 的所有實作<xref:System.Security.IPermission.Union%2A>方法。 `X` 和`Y`代表<xref:System.Security.IPermission>不是物件`null`。  
  
-   `X`.等位 (`X`) 傳回的物件具有相同的值`X`。  
  
-   `X`.等位 (`Y`) 傳回的物件具有相同的值所傳回的物件`Y`。等位 (`X`)。  
  
-   `X`.等位 (`null`) 傳回的物件具有相同的值`X`。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作<xref:System.Security.IPermission.Union%2A>方法。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Security.IPermission>類別。  
  
 [!code-cpp[Permission#5](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#5)]
 [!code-csharp[Permission#5](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#5)]
 [!code-vb[Permission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#5)]  
  
-  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 參數不是 <see langword="null" />，而且與目前使用權限不是相同的型別。</exception>
      </Docs>
    </Member>
  </Members>
</Type>