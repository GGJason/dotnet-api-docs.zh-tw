<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca9e6292de45ea29ed4d85aa782ecf814e58da00" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52611638" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>代表應該將文字保密，例如於不再使用時將它從電腦記憶體刪除。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  我們不建議您改用`SecureString`開發新的類別。 如需詳細資訊，請參閱 <<c0> [ 不應使用 SecureString](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) GitHub 上。

 <xref:System.Security.SecureString> 是字串類型，提供一層安全性。 它會試著避免潛在的敏感的字串儲存在以純文字格式的程序記憶體。  (如需限制，不過，請參閱[安全是 SecureString？](#HowSecure)一節。)執行個體的值<xref:System.Security.SecureString>自動保護使用初始化的執行個體時，或修改值時，基礎的平台所支援的機制。 您的應用程式可以呈現執行個體的不可變，並避免其他修改叫用<xref:System.Security.SecureString.MakeReadOnly%2A>方法。  
  
 最大長度<xref:System.Security.SecureString>執行個體為 65,536 個字元。  
  
> [!IMPORTANT]
>  此類型會實作<xref:System.IDisposable>介面。 當您完成使用型別的執行個體時，您應該處置它直接或間接。 若要直接處置型別，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。 若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。  
  
 <xref:System.Security.SecureString>類別和其成員都看不到 com。 如需詳細資訊，請參閱<xref:System.Runtime.InteropServices.ComVisibleAttribute>。  
  
 本節內容：  
  
 [Vs 的字串。SecureString](#vsString)   
 [SecureString 作業](#Ops)   
 [SecureString 和 interop](#interop)   
 [如何安全是 SecureString？](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>與 SecureString 的字串  
 執行個體<xref:System.String?displayProperty=nameWithType>類別會是不變，而且不再需要時，無法以程式設計方式排定進行記憶體回收; 亦即，執行個體是唯讀後建立，並不可能預測何時可以在執行個體從電腦記憶體刪除。 因為<xref:System.String?displayProperty=nameWithType>執行個體是固定不變，看似會修改現有的執行個體的作業實際上會建立一份它來操作。 因此，如果<xref:System.String>物件包含機密資訊，例如密碼、 信用卡號碼或個人資料，會有的風險，因為您的應用程式無法從電腦記憶體中刪除資料之後，可能會洩漏資訊.  
  
 A<xref:System.Security.SecureString>物件是類似於<xref:System.String>物件，它也具有一個文字值。 不過，值<xref:System.Security.SecureString>物件在記憶體中 pin，可能會使用保護機制，例如可以修改基礎作業系統，提供的加密，直到您的應用程式會將其標示為唯讀的而且可以從電腦記憶體刪除以您的應用程式呼叫<xref:System.Security.SecureString.Dispose%2A>方法或.NET Framework 記憶體回收行程。  
  
 如需限制的討論<xref:System.Security.SecureString>類別，請參閱[安全是 SecureString？](#HowSecure)一節。  
  
 [回到頁首](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>SecureString 作業  
 <xref:System.Security.SecureString>類別包含的成員，可讓您執行下列動作：  
  
 具現化<xref:System.Security.SecureString>物件  
 您具現化<xref:System.Security.SecureString>藉由呼叫其無參數建構函式的物件。  
  
 新增字元<xref:System.Security.SecureString>物件  
 您可以新增單一字元，一次<xref:System.Security.SecureString>物件，藉由呼叫其<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.InsertAt%2A>方法。  
  
> [!IMPORTANT]
>  A<xref:System.Security.SecureString>物件應該永遠不會從建構<xref:System.String>，因為敏感性資料已是受限於記憶體持續性的後果的不可變<xref:System.String>類別。 若要建構，最好<xref:System.Security.SecureString>物件是從字元-一次未受管理的來源，例如<xref:System.Console.ReadKey%2A?displayProperty=nameWithType>方法。  
  
 移除字元<xref:System.Security.SecureString>物件  
 您可以藉由呼叫來取代個別字元<xref:System.Security.SecureString.SetAt%2A>方法，移除個別字元，藉由呼叫<xref:System.Security.SecureString.RemoveAt%2A>方法或移除所有字元從<xref:System.Security.SecureString>藉由呼叫的執行個體<xref:System.Security.SecureString.Clear%2A>方法。  
  
 請<xref:System.Security.SecureString>唯讀狀態的物件  
 一旦您已定義的字串，<xref:System.Security.SecureString>物件表示，則您呼叫其<xref:System.Security.SecureString.MakeReadOnly%2A>以唯讀模式，讓字串的方法。  
  
 深入了解<xref:System.Security.SecureString>物件  
 <xref:System.Security.SecureString>類別具有提供字串的相關資訊的只有兩個成員： 其<xref:System.Security.SecureString.Length%2A>屬性，指出字串; 中的 UTF16 編碼字碼單位數和<xref:System.Security.SecureString.IsReadOnly%2A>，方法，指出執行個體唯讀的。  
  
 釋出配置給記憶體<xref:System.Security.SecureString>執行個體  
 因為<xref:System.Security.SecureString>會實作<xref:System.IDisposable>介面，您藉由呼叫釋放其記憶體<xref:System.Security.SecureString.Dispose%2A>方法。  
  
 <xref:System.Security.SecureString>類別沒有任何成員，檢查、 比較，或將值轉換成<xref:System.Security.SecureString>。 這類成員不存在，有助於防止意外或惡意公開的執行個體的值。 使用適當的成員<xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType>類別，例如<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>方法，來操作的值<xref:System.Security.SecureString>物件。  
  
 通常會使用.NET Framework 類別庫<xref:System.Security.SecureString>中透過下列方式執行個體：  
  
-   使用提供的密碼資訊至處理序<xref:System.Diagnostics.ProcessStartInfo>結構，或藉由呼叫的多載<xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType>具有類型參數的方法<xref:System.Security.SecureString>。  
  
-   藉由呼叫提供網路密碼資訊<xref:System.Net.NetworkCredential>類別建構函式具有類型的參數<xref:System.Security.SecureString>或使用<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType>屬性。  
  
-   藉由呼叫提供 SQL Server 驗證的密碼資訊<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType>建構函式，或擷取的值<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType>屬性。  
  
-   若要將字串傳遞至 unmanaged 程式碼。 如需詳細資訊，請參閱 < [SecureString 和 interop](#interop)一節。  
  
 [回到頁首](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString 和 interop  
 因為作業系統不直接支援<xref:System.Security.SecureString>，您必須將值轉換成<xref:System.Security.SecureString>成必要的字串類型，再傳遞字串給原生方法的物件。  <xref:System.Runtime.InteropServices.Marshal>類別有五種執行這項操作的方法：  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>將<xref:System.Security.SecureString>字串到 COM 所辨識的二進位字串 (BSTR) 的值  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> 並<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>，複製<xref:System.Security.SecureString>字串至 unmanaged 記憶體中的 ANSI 字串值。  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> 並<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>，複製<xref:System.Security.SecureString>字串至 unmanaged 記憶體中的 Unicode 字串的值。  
  
 每一種方法是在 unmanaged 記憶體中建立純文字字串。 它是會全面清除並釋放該記憶體，只要它不再需要開發人員的責任。 每個字串轉換和記憶體配置方法都有對應的方法，將會全面清除並釋放配置的記憶體：  
  
|配置和轉換方法|零和 free 方法|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [回到頁首](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>如何安全是 SecureString？  
 正常運作，在建立時<xref:System.Security.SecureString>執行個體提供更多的資料保護<xref:System.String>。 當來源的字元-一次，建立字串<xref:System.String>在記憶體中，會建立多個中繼，而<xref:System.Security.SecureString>建立只是單一執行個體。  記憶體回收<xref:System.String>物件是不具決定性。 此外，因為其記憶體未釘選，記憶體回收行程會製作額外複本<xref:System.String>值時移動和壓縮記憶體。 相反地，若要配置的記憶體<xref:System.Security.SecureString>物件已釘選，，而且可以釋放該記憶體，藉由呼叫<xref:System.Security.SecureString.Dispose%2A>方法。  
  
 雖然資料儲存在<xref:System.Security.SecureString>執行個體是儲存在資料比更安全<xref:System.String>執行個體，有安全上的諸多限制<xref:System.Security.SecureString>執行個體。 它們包括：  
  
 Platform  
 在 Windows 作業系統的內容上<xref:System.Security.SecureString>加密執行個體的內部的字元陣列。 不過，是否因為遺漏 Api 或金鑰管理問題，加密並不適用於所有平台。 此平台相依性，因為<xref:System.Security.SecureString>不會加密在非 Windows 平台上的內部儲存體。 在這些平台上使用其他技術來提供額外的保護。
  
 持續期間  
 即使<xref:System.Security.SecureString>實作可利用加密、 純文字指派給<xref:System.Security.SecureString>執行個體可能會公開在不同時間：  
  
-   因為 Windows 不會提供作業系統層級的安全字串實作，.NET Framework 仍然會有將轉換成其純文字格式表示的安全字串值，才能使用它。  
  
-   每當安全字串的值修改方法這類<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.RemoveAt%2A>，必須解密 （亦即，已轉換的後以純文字），修改，並再加密一次。  
  
-   如果使用的 interop 呼叫的安全字串時，它必須轉換成 ANSI 字串、 Unicode 字串或二進位字串 (BSTR)。 如需詳細資訊，請參閱 < [SecureString 和 interop](#interop)一節。  
  
 其中的時間間隔<xref:System.Security.SecureString>公開執行個體的值只是已縮短相為<xref:System.String>類別。  
  
 與使用方式的儲存體  
 更廣泛地<xref:System.Security.SecureString>類別定義應該受保護或保密的字串值的儲存體機制。 不過，.NET Framework 本身以外沒有使用量機制支援<xref:System.Security.SecureString>。 這表示安全字串，必須轉換成可用的格式 （通常是純文字形式），其目標，可以辨識和解密和轉換必須存在於使用者空間。  
  
 整體而言，<xref:System.Security.SecureString>比更安全<xref:System.String>因為它會限制公開機密的字串資料。 不過，這些字串可能仍會暴露任何程序或可存取未經處理的記憶體，例如惡意處理序主機電腦、 處理序傾印或使用者可檢視的分頁檔上執行的作業。 而不是使用<xref:System.Security.SecureString>若要保護的密碼，建議的替代做法是使用不透明的控制代碼儲存在外部處理序的認證。  
  
 [回到頁首](#top)  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Security.SecureString>來保護使用者的密碼作為認證，以開始新的處理序。  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.SecureString" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.SecureString" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用預設值 （或無參數） 建構函式來具現化新<xref:System.Security.SecureString>物件。 然後它會呼叫<xref:System.Security.SecureString.AppendChar%2A>對其新增為字元陣列的方法。  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 下列範例會建立<xref:System.Security.SecureString>物件的值從<xref:System.String>物件。  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個執行個體的值時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">這個平台上不支援這項作業。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Char" /> 物件陣列的指標。</param>
        <param name="length">要包含在新執行個體中之 <paramref name="value" /> 的項目數。</param>
        <summary>從 <see cref="T:System.Char" /> 物件的子陣列，初始化 <see cref="T:System.Security.SecureString" /> 類別的新執行個體。  
  
這個建構函式不符合 CLS 標準。 符合 CLS 標準的替代項目為 <see cref="M:System.Security.SecureString.#ctor" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式初始化的新<xref:System.Security.SecureString>中的字元數的物件`value`所指定`length`; 執行個體的值會加密。  
  
 在 C# 中，這個建構函式定義只能在不安全的程式碼的內容中。  
  
   
  
## Examples  
 下列範例會具現化新<xref:System.Security.SecureString>藉由將其建構函式指標傳遞到字元陣列的物件。  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="length" /> 小於零或大於 65,536。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">這個平台上不支援這項作業。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">需要完全信任立即呼叫端。 此成員不能由部分信任或不透明的程式碼。</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">附加至這個安全字串的字元。</param>
        <summary>將字元附加至目前安全字串的結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果實作會使用的保護機制，例如加密、 如果有的話，這個安全字串的值不受保護的;`c`附加; 然後將安全字串的新值並在重新保護。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，並<xref:System.Security.SecureString.Clear%2A>方法會影響值<xref:System.Security.SecureString>物件。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可用來收集密碼中的字元。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.InvalidOperationException">這個安全字串是唯讀的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">執行這項作業會使這個安全字串的長度大於 65,536 個字元。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刪除目前安全字串的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電腦記憶體，其中包含這個安全字串的值為 0，則這個安全字串的值的長度設定為零。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，並<xref:System.Security.SecureString.Clear%2A>方法會影響值<xref:System.Security.SecureString>物件。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.InvalidOperationException">這個安全字串是唯讀的。</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立目前安全字串的複本。</summary>
        <returns>這個安全字串的複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果執行個體<xref:System.Security.SecureString>是標示為唯讀，該執行個體的複本將不處於唯讀模式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放由 <see cref="T:System.Security.SecureString" /> 物件使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Dispose%2A>方法會寫入至配置的記憶體，其中包含這個值的二進位零<xref:System.Security.SecureString>物件，然後釋放配置的記憶體。  
  
 如需詳細資訊，請參閱 <<c0> [ 回收](~/docs/standard/garbage-collection/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">插入參數 <paramref name="c" /> 的索引位置。</param>
        <param name="c">要插入的字元。</param>
        <summary>將這個安全字串中的字元插入指定索引位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引以零為起始的;這個安全字串中的第一個字元位於索引位置為零。  
  
 如果實作會使用的保護機制，例如加密、 安全的字串，如果有的話，值不受保護的;`c`插入指定的索引位置，則新值並在重新保護。 <xref:System.Security.SecureString.InsertAt%2A>方法會產生與相同的結果<xref:System.Security.SecureString.AppendChar%2A>方法，將安全字串的結尾插入字元，如果`index`參數<xref:System.Security.SecureString.InsertAt%2A>設為這個執行個體的長度。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，並<xref:System.Security.SecureString.Clear%2A>方法會影響值<xref:System.Security.SecureString>物件。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.InvalidOperationException">這個安全字串是唯讀的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零，或大於這個安全字串的長度。  
  
-或- 
執行這項作業會使這個安全字串的長度大於 65,536 個字元。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示這個安全字串是否標示為唯讀。</summary>
        <returns>如果這個安全字串標示為唯讀則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行個體後面<xref:System.Security.SecureString>標示為唯讀<xref:System.Security.SecureString.MakeReadOnly%2A>方法，任何嘗試修改的執行個體則會擲回值<xref:System.InvalidOperationException>。 使用<xref:System.Security.SecureString.IsReadOnly%2A>方法來測試是否<xref:System.Security.SecureString>處於唯讀狀態，然後再嘗試加以修改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前安全字串中的字元數。</summary>
        <value>這個安全字串中 <see cref="T:System.Char" /> 物件的數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A>屬性傳回的數目<xref:System.Char>這個執行個體中的物件，不是 Unicode 字元的數目。 Unicode 字元可能會表示由多個<xref:System.Char>物件。  
  
 最大長度<xref:System.Security.SecureString>執行個體為 65,536 個字元。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使這個安全字串的文字值成為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始化的執行個體的文字值<xref:System.Security.SecureString>類別<xref:System.Security.SecureString.%23ctor%2A>建構函式，並修改使用值<xref:System.Security.SecureString.Clear%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>， <xref:System.Security.SecureString.InsertAt%2A>，和<xref:System.Security.SecureString.AppendChar%2A>方法。  
  
 您最終的修改之後，使用<xref:System.Security.SecureString.MakeReadOnly%2A>方法，讓執行個體的值不可變 （唯讀）。 值標示為唯讀之後，任何進一步嘗試修改它會擲回<xref:System.InvalidOperationException>。  
  
 叫用的效果<xref:System.Security.SecureString.MakeReadOnly%2A>這是永久性因為<xref:System.Security.SecureString>類別會提供任何方法來進行的安全字串可修改一次。 使用<xref:System.Security.SecureString.IsReadOnly%2A>方法來測試的執行個體是否<xref:System.Security.SecureString>處於唯讀狀態。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可用來收集密碼中的字元。 收集密碼之後，它會變成唯讀狀態。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">這個安全字串中字元的索引位置。</param>
        <summary>從這個安全字串移除位在指定索引位置的字元。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引以零為起始的;這個執行個體中的第一個字元位於索引位置為零。  
  
 如果實作會使用的保護機制，例如加密、 如果有的話，這個安全字串的值不受保護的;已移除指定的索引位置處的字元;則重新保護新的值。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，並<xref:System.Security.SecureString.Clear%2A>方法會影響值<xref:System.Security.SecureString>物件。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>和<xref:System.Security.SecureString.RemoveAt%2A>方法可用來收集密碼中的字元。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.InvalidOperationException">這個安全字串是唯讀的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零，或是大於或等於這個安全字串的長度。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">這個安全字串中現有字元的索引位置。</param>
        <param name="c">取代現有字元的字元。</param>
        <summary>使用另一個字元，取代位在指定索引位置的現有字元。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 索引以零為起始的;這個執行個體中的第一個字元位於索引位置為零。  
  
 如果實作會使用的保護機制，例如加密、 安全的字串，如果有的話，值不受保護的;`c`指派給指定的索引位置，則新值並在重新保護。  
  
   
  
## Examples  
 下列範例示範如何<xref:System.Security.SecureString.AppendChar%2A>， <xref:System.Security.SecureString.InsertAt%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>，並<xref:System.Security.SecureString.Clear%2A>方法會影響值<xref:System.Security.SecureString>物件。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">這個安全字串已經過處置。</exception>
        <exception cref="T:System.InvalidOperationException">這個安全字串是唯讀的。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 小於零，或是大於或等於這個安全字串的長度。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">保護或解除保護這個安全字串的值時發生錯誤。</exception>
      </Docs>
    </Member>
  </Members>
</Type>