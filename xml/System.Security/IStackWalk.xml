<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffff6974a1ebf871cd84ed3f0b180c1e73b50d37" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56402365" /></Metadata><TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>管理堆疊查核行程 (Stack Walk)，決定呼叫堆疊中所有的呼叫端是否具有存取受保護資源的使用權限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分信任程式碼一律會造成安全性風險。 它有時可以操作來代表沒有存取資源的權限的惡意程式碼執行動作。 如此一來，惡意程式碼能夠比應允許較高的安全性存取權。  
  
 通用語言執行平台有助於防止這些攻擊中的 managed 程式碼，所有的呼叫上執行堆疊查核行程。 堆疊查核行程要求呼叫堆疊中的所有程式碼必須具有存取受保護的資源的權限。 因為嘗試攻擊的程式碼一定會某處呼叫堆疊中，將無法超過它自己的安全性權限。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>即使堆疊中較高層的呼叫端尚未授與存取資源的使用權限，仍會判斷提示 (Assert) 呼叫的程式碼可存取目前的使用權限物件所識別的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Security.IStackWalk.Assert%2A>呼叫堆疊中較高層的呼叫端的權限檢查就會停止。 因此，即使這些呼叫端沒有必要的權限，他們仍然可以存取資源。 判斷提示是有效的程式碼呼叫時，才<xref:System.Security.IStackWalk.Assert%2A>通過安全性檢查，它會判斷提示之權限。  
  
 呼叫<xref:System.Security.IStackWalk.Assert%2A>會生效，直到呼叫程式碼傳回給其呼叫端，或直到後續呼叫<xref:System.Security.IStackWalk.Assert%2A>轉譯先前的判斷提示無效。 此外，<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或是<xref:System.Security.CodeAccessPermission.RevertAll%2A>移除暫止<xref:System.Security.IStackWalk.Assert%2A>。  
  
 <xref:System.Security.IStackWalk.Assert%2A> 會忽略該權限的要求將會失敗，因為未授與權限。 不過，如果在呼叫堆疊中較低的程式碼會呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，請<xref:System.Security.SecurityException>堆疊查核行程達到嘗試呼叫的程式碼時，會擲回<xref:System.Security.IStackWalk.Assert%2A>。 這是因為，所呼叫的程式碼<xref:System.Security.IStackWalk.Assert%2A>沒有被授予權限，即使應用程式嘗試<xref:System.Security.IStackWalk.Assert%2A>它。  
  
> [!CAUTION]
>  因為呼叫<xref:System.Security.IStackWalk.Assert%2A>移除所有程式碼呼叫鏈結中的需求必須被授與權限來存取指定的資源，如果不正確或不當使用，它可以開啟啟動安全性弱點。 因此，它應該使用小心謹慎。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />。</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">使用 Assert 方法</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>決定在執行階段呼叫堆疊中的所有呼叫端是否都已授與目前使用權限物件所指定的使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全程式庫通常會使用這個方法以確保呼叫端擁有存取資源的權限。 安全類別庫中的檔案類別的呼叫，例如<xref:System.Security.IStackWalk.Demand%2A>的必要<xref:System.Security.Permissions.FileIOPermission>之前執行檔案作業要求的呼叫端。  
  
 呼叫這個方法的程式碼的權限就不會檢查;檢查立即呼叫端程式碼從開始，並繼續向上堆疊。 <xref:System.Security.IStackWalk.Demand%2A> 只有當沒有成功<xref:System.Security.SecurityException>，就會引發。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫堆疊中較高層的呼叫端未授與目前使用權限物件所指定的使用權限。  
  
-或- 
呼叫堆疊中的呼叫端已經呼叫目前使用權限物件上的 <see cref="M:System.Security.IStackWalk.Deny" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>導致經過呼叫程式碼之目前物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 發生錯誤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可防止呼叫堆疊中較高層的呼叫端程式碼呼叫此方法中，透過存取受保護的資源，即使這些呼叫端必須被授與存取權限。 通常，向下成長，來表示呼叫堆疊，使方法呼叫堆疊中較高層呼叫方法較低的呼叫堆疊中。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 可以限制程式設計師的責任或協助避免意外安全性漏洞，因有利於防止呼叫<xref:System.Security.IStackWalk.Deny%2A>從用來存取所拒絕的權限保護的資源。 如果方法呼叫<xref:System.Security.IStackWalk.Deny%2A>權限，而且如果<xref:System.Security.IStackWalk.Demand%2A>該安全性檢查的呼叫堆疊中較低的呼叫端叫用該權限時，將會失敗，當它到達<xref:System.Security.IStackWalk.Deny%2A>。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 會忽略該權限的要求將會失敗，因為未授與權限。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>您無法覆寫這個方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>即使呼叫堆疊中較高層的程式碼已授與存取其他資源的使用權限，還是會導致經過呼叫程式碼、除了目前物件之外之所有物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 發生錯誤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 類似於<xref:System.Security.IStackWalk.Deny%2A>，兩者會導致堆疊查核行程，它們本來可以成功時失敗。 其差異在於<xref:System.Security.IStackWalk.Deny%2A>指定將會導致失敗，堆疊查核行程的權限，但<xref:System.Security.IStackWalk.PermitOnly%2A>指定唯一的權限不會造成失敗的堆疊查核行程。 呼叫此方法，以確保您的程式碼，可用來存取指定的資源。  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 會忽略該權限的要求將會失敗，因為未授與權限。 不過，如果程式碼呼叫較低堆疊稍後呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，請<xref:System.Security.SecurityException>堆疊查核行程達到嘗試呼叫的程式碼時，會擲回<xref:System.Security.IStackWalk.PermitOnly%2A>。 這是因為程式碼，呼叫<xref:System.Security.IStackWalk.PermitOnly%2A>沒有被授予權限，即使它呼叫<xref:System.Security.IStackWalk.PermitOnly%2A>該使用權限。 通常，向下成長，來表示呼叫堆疊，使方法呼叫堆疊中較高層呼叫方法較低的呼叫堆疊中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>