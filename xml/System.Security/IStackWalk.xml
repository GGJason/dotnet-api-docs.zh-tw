<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b37ff083eff27618aa07c0a744562f3f8a613708" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>管理堆疊查核行程，其判斷呼叫堆疊中所有呼叫端是否具有存取受保護資源的必要權限。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分信任程式碼一律會顯示安全性風險。 有時候可以代表沒有存取資源的權限的惡意程式碼執行動作操作。 如此一來，惡意程式碼可以達到比應該允許較高的安全性存取權。  
  
 通用語言執行平台可協助保護免於這些攻擊的 managed 程式碼所執行的所有呼叫堆疊查核行程。 堆疊查核行程要求所有呼叫堆疊中的程式碼必須都具有存取受保護的資源的權限。 因為嘗試攻擊的程式碼一定會某處呼叫堆疊中，將無法超過自己的安全性權限。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>即使堆疊中較高的呼叫端未獲得資源存取權限，呼叫程式碼仍可以存取目前權限物件所識別之資源的判斷提示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Security.IStackWalk.Assert%2A>呼叫堆疊中較高層的呼叫端的權限檢查就會停止。 因此，即使這些呼叫端沒有必要的權限，他們仍然可以存取資源。 判斷提示是有效的程式碼呼叫時，才<xref:System.Security.IStackWalk.Assert%2A>通過安全性檢查，它會判斷提示之權限。  
  
 呼叫<xref:System.Security.IStackWalk.Assert%2A>之前呼叫程式碼會傳回其呼叫端，或直到的後續呼叫是有效<xref:System.Security.IStackWalk.Assert%2A>呈現先前的判斷提示的效果不佳。 此外，<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>移除暫止<xref:System.Security.IStackWalk.Assert%2A>。  
  
 <xref:System.Security.IStackWalk.Assert%2A> 會忽略該權限的要求將會失敗，因為未授與的權限。 不過，如果在呼叫堆疊中較低的程式碼呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，<xref:System.Security.SecurityException>堆疊查核行程到達嘗試呼叫的程式碼時，會擲回<xref:System.Security.IStackWalk.Assert%2A>。 這是因為程式碼呼叫<xref:System.Security.IStackWalk.Assert%2A>未被授與權限，即使應用程式嘗試<xref:System.Security.IStackWalk.Assert%2A>它。  
  
> [!CAUTION]
>  因為呼叫<xref:System.Security.IStackWalk.Assert%2A>移除所有程式碼呼叫鏈結中的需求必須被授與權限可以存取指定的資源，如果使用不正確或不當，它可以開啟個安全性弱點。 因此，應該使用小心謹慎。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼叫的程式碼沒有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>判斷執行階段期間呼叫堆疊中的所有呼叫端，是否已獲得目前權限物件所指定的權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法通常可由安全程式庫來確定呼叫端擁有存取資源的權限。 例如，檔案中的類別安全類別庫的呼叫<xref:System.Security.IStackWalk.Demand%2A>必要的<xref:System.Security.Permissions.FileIOPermission>之前執行檔案作業的呼叫端要求。  
  
 不會檢查呼叫這個方法的程式碼的權限;檢查該程式碼的立即呼叫端從開始，然後進行堆疊。 <xref:System.Security.IStackWalk.Demand%2A> 只有當沒有成功<xref:System.Security.SecurityException>，就會引發。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">此呼叫堆疊中較高層的呼叫端，不需要獲得目前權限物件所指定的權限。  
  
 -或-  
  
 此呼叫堆疊中的呼叫端已呼叫目前權限物件上的 <see cref="M:System.Security.IStackWalk.Deny" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>導致透過呼叫程式碼傳遞之目前物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 都失敗。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會防止呼叫堆疊中較高層的呼叫端程式碼呼叫此方法，透過存取受保護的資源，即使這些呼叫端必須被授與存取權限。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 可以限制程式設計人員的責任或協助防止意外安全性漏洞，因為它可協助避免呼叫此方法<xref:System.Security.IStackWalk.Deny%2A>從用來存取拒絕的權限所保護的資源。 如果方法呼叫<xref:System.Security.IStackWalk.Deny%2A>權限，而且如果<xref:System.Security.IStackWalk.Demand%2A>到達時，該安全性檢查的呼叫堆疊中較低的呼叫端所叫用該權限時，將會失敗<xref:System.Security.IStackWalk.Deny%2A>。  
  
 <xref:System.Security.IStackWalk.Deny%2A> 會忽略該權限的要求將會失敗，因為未授與的權限。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您無法覆寫這個方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>即使呼叫堆疊中較高層的程式碼已授與存取其他資源的使用權限，還是會導致經過呼叫程式碼、除了目前物件之外之所有物件的每一個 <see cref="M:System.Security.IStackWalk.Demand" /> 發生錯誤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 類似於<xref:System.Security.IStackWalk.Deny%2A>，在於兩者會導致堆疊查核行程符合則成功時失敗。 其差異在於，<xref:System.Security.IStackWalk.Deny%2A>指定權限，會導致堆疊查核行程失敗，但<xref:System.Security.IStackWalk.PermitOnly%2A>指定不會導致堆疊查核行程失敗的唯一權限。 呼叫此方法，以確保您的程式碼，可用來存取指定的資源。  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> 會忽略該權限的要求將會失敗，因為未授與的權限。 不過，如果程式碼呼叫較低堆疊稍後呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，<xref:System.Security.SecurityException>堆疊查核行程到達嘗試呼叫的程式碼時，會擲回<xref:System.Security.IStackWalk.PermitOnly%2A>。 這是因為程式碼呼叫<xref:System.Security.IStackWalk.PermitOnly%2A>未被授與權限，即使它呼叫<xref:System.Security.IStackWalk.PermitOnly%2A>該權限。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>