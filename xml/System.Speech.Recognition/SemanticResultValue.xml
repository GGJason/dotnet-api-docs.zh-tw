<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="907b483bc1be02cb41e948c494d9e811209c0ba1" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55374614" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表語意值，並選擇性地將值與語音辨識文法的元件相關聯。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的<xref:System.Speech.Recognition.SemanticResultValue>並<xref:System.Speech.Recognition.SemanticResultKey>物件，搭配<xref:System.Speech.Recognition.GrammarBuilder>並<xref:System.Speech.Recognition.Choices>，是最簡單的方式來設計的語意結構<xref:System.Speech.Recognition.Grammar>。 取得的執行個體存取的片語的語意資訊<xref:System.Speech.Recognition.SemanticValue>，透過<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>屬性上的<xref:System.Speech.Recognition.RecognizedPhrase>。  
  
> [!NOTE]
>  值，由<xref:System.Speech.Recognition.SemanticResultValue>物件由定義<xref:System.Object>執行個體會傳遞至其建構函式。 基礎類型<xref:System.Object>必須是`bool`， `int`， `float`，或`string`。 任何其他型別，會造成建構<xref:System.Speech.Recognition.Grammar>執行個體與<xref:System.Speech.Recognition.SemanticResultValue>。  
  
 典型的用法<xref:System.Speech.Recognition.SemanticResultValue>執行個體關聯的可辨識元件中的執行個體<xref:System.Speech.Recognition.Grammar>，例如片語時，規則，或<xref:System.Speech.Recognition.Choices>物件。 如果相關聯的元件可辨識作業的一部分<xref:System.Speech.Recognition.SemanticResultValue>用來傳回片語的語意中定義的值。  
  
 有兩個基本的方法，來建立關聯<xref:System.Speech.Recognition.SemanticResultValue>文法項目，根據用來建立建構函式的執行個體<xref:System.Speech.Recognition.SemanticResultValue>。  
  
-   如果只有值 (指定的執行個體所<xref:System.Object>) 用來建構<xref:System.Speech.Recognition.SemanticResultValue>物件，<xref:System.Speech.Recognition.SemanticResultValue>前面，除了的文法元件相關聯<xref:System.Speech.Recognition.GrammarBuilder>物件。  
  
     例如，在下面，if 的程式碼片段<xref:System.Speech.Recognition.Grammar>使用此建構<xref:System.Speech.Recognition.GrammarBuilder>執行個體可以辨識的 「 背景 」，針對 word`true`設定已辨識的片語的語意。  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     如需詳細資訊，請參閱 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> 的說明。  
  
-   如果字串值的片語或特定<xref:System.Speech.Recognition.GrammarBuilder>執行個體，是用在連同<xref:System.Object>，指定<xref:System.Speech.Recognition.SemanticResultValue>值，值會自動關聯於字串值的片語或<xref:System.Speech.Recognition.GrammarBuilder>執行個體。  如果片語或<xref:System.Speech.Recognition.GrammarBuilder>物件辨識的過程中，此值會指派給已辨識片語的語意。  
  
     下列範例說明這點，並相當於上述的範例中，使用明確呼叫<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>。 如果辨識邏輯會使用 「 背景 」，此值 word`true`會新增至已辨識的語意。  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     如需詳細資訊，請參閱說明<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>。  
  
 可供<xref:System.Speech.Recognition.Grammar>辨識中, 所有<xref:System.Speech.Recognition.SemanticResultValue>執行個體必須與其中一個相關聯<xref:System.Speech.Recognition.SemanticValue>物件，使用<xref:System.Speech.Recognition.Grammar>。 這是藉由建立與語意索引鍵的關聯<xref:System.Speech.Recognition.SemanticResultValue>。  
  
 語意索引鍵可以明確地附加至<xref:System.Speech.Recognition.SemanticResultValue>，並使用<xref:System.Speech.Recognition.SemanticResultKey>物件。  <xref:System.Speech.Recognition.SemanticResultValue> 未明確附加至索引鍵的執行個體連接到預設的根目錄機碼<xref:System.Speech.Recognition.SemanticValue>。  
  
 之後<xref:System.Speech.Recognition.SemanticResultValue>已經用來設定<xref:System.Speech.Recognition.SemanticValue.Value%2A>、 是否使用預設的根目錄機碼或任何特定標記<xref:System.Speech.Recognition.SemanticResultKey>、 不得修改該值，或辨識作業期間，會發生例外狀況。  
  
 下列範例會造成例外狀況，因為它會設定並接著會修改根<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.Grammar>。  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 相反地，允許在下列範例程式碼。 雖然它會定義多個執行個體<xref:System.Speech.Recognition.SemanticResultValue>，它們會包含在<xref:System.Speech.Recognition.Choices>物件，而用來設定索引鍵的值只有一個會`bgOrfgText`。  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 下列範例會傳回<xref:System.Speech.Recognition.Grammar>，可辨識的命令 設定/變更/Alter 前景/背景... [色彩 清單]"。  <xref:System.Speech.Recognition.SemanticResultValue> 並<xref:System.Speech.Recognition.SemanticResultKey>執行個體 (搭配<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件) 用來定義可剖析的語意的辨識。  已剖析的語意會決定要求的色彩，以及修改是前景或背景。  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">使用 SemanticResultKey 擷取 SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue`建構函式支援指定<xref:System.Object>基礎資料類型的執行個體`bool`， `int`， `float`，或`string`。  
  
 建構函式可以建立`SemanticResultValue`中的兩種情況下的執行個體：  
  
-   `SemanticResultValue`使用時，執行個體必須是明確地相關聯的文法項目<xref:System.Speech.Recognition.GrammarBuilder>建構<xref:System.Speech.Recognition.Grammar>。  
  
-   `SemanticResultValue` Je již přiřazen 的字串值的片語或<xref:System.Speech.Recognition.GrammarBuilder>物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 所管理的值。 必須為型別 <see langword="bool" />、<see langword="int" />、<see langword="float" /> 或 <see langword="string" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 類別的新執行個體，並指定語意值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A`SemanticResultValue`傳回由這個建構函式未與任何特定的文法項目相關聯。 關聯必須設為明確使用的執行個體`SemanticResultValue`搭配<xref:System.Speech.Recognition.GrammarBuilder>。  
  
 例如，在下面，if 的程式碼片段<xref:System.Speech.Recognition.Grammar>使用此建構<xref:System.Speech.Recognition.GrammarBuilder>執行個體可以辨識的 「 背景 」，針對 word`true`設定已辨識的片語的語意。  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 下列範例會傳回<xref:System.Speech.Recognition.Grammar>，可辨識的命令 設定/變更/Alter 前景/背景... [色彩 清單]"。 <xref:System.Speech.Recognition.SemanticResultValue> 並<xref:System.Speech.Recognition.SemanticResultKey>執行個體 (搭配<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件) 用來定義可剖析的語意的辨識。  已剖析的語意會決定要求的色彩，以及修改是前景或背景。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">要用於辨識的文法元件。</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 所管理的值。 必須為型別 <see langword="bool" />、<see langword="int" />、<see langword="float" /> 或 <see langword="string" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 類別的新執行個體，並且使語意值與 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件產生關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所指定的文法項目<xref:System.Speech.Recognition.GrammarBuilder>是邏輯中使用辨識，`value`將可辨識的輸出的語意。  
  
 如果下方的程式碼片段中辨識邏輯建構<xref:System.Speech.Recognition.GrammarBuilder>執行個體 (`myGb`) 會使用<xref:System.Speech.Recognition.Choices>物件 (`myChoice`) 來識別輸入值`true`新增至已辨識的語意。  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 作為<xref:System.Speech.Recognition.GrammarBuilder>支援的隱含轉換<xref:System.Speech.Recognition.Choices>， `SemanticResultValue`，和<xref:System.Speech.Recognition.SemanticResultKey>，這個建構函式可以使用這些物件。  
  
   
  
## Examples  
 下列範例會傳回<xref:System.Speech.Recognition.Grammar>，可辨識的命令 設定/變更/Alter 前景/背景... [色彩 清單]"。 <xref:System.Speech.Recognition.SemanticResultValue> 並<xref:System.Speech.Recognition.SemanticResultKey>執行個體 (搭配<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件) 用來定義可剖析的語意的辨識。  已剖析的語意會決定要求的色彩，以及修改是前景或背景。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">要用於辨識的片語。</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 所管理的值。 必須為型別 <see langword="bool" />、<see langword="int" />、<see langword="float" /> 或 <see langword="string" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 類別的新執行個體，並且使語意值與 <see cref="T:System.String" /> 物件產生關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的字串`phrase`是邏輯中使用辨識，`value`將可辨識的輸出的語意。  
  
 在下列程式碼片段中，如果辨識邏輯以建構<xref:System.Speech.Recognition.GrammarBuilder>執行個體 (`myGb`) 會使用 「 我的貸款 」 的字串來識別輸入值`true`會新增至已辨識的語意。  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 下列範例會傳回<xref:System.Speech.Recognition.Grammar>，可辨識的命令 設定/變更/Alter 前景/背景... [色彩 清單]"。 <xref:System.Speech.Recognition.SemanticResultValue> 並<xref:System.Speech.Recognition.SemanticResultKey>執行個體 (搭配<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件) 用來定義可剖析的語意的辨識。  已剖析的語意會決定要求的色彩，以及修改是前景或背景。  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回從目前 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 執行個體建構的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 執行個體。</summary>
        <returns>傳回從目前 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 執行個體建構的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 善用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相當於使用<xref:System.Speech.Recognition.GrammarBuilder>建構函式<xref:System.Speech.Recognition.SemanticResultValue>做為引數 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Speech.Recognition.Grammar>支援命令來變更背景色彩的物件。  
  
 A<xref:System.Speech.Recognition.Choices>物件 (`colorChoice`) 包含清單的背景色彩選項使用填滿<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>方法<xref:System.Speech.Recognition.GrammarBuilder>執行個體從取得<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>方法`SemanticResultValue`所建立的物件從色彩的字串。  
  
 A<xref:System.Speech.Recognition.GrammarBuilder>接著會取得藉由呼叫<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上<xref:System.Speech.Recognition.SemanticResultKey>執行個體，這將用來索引鍵中的語意選擇`colorChoice`執行個體。  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>