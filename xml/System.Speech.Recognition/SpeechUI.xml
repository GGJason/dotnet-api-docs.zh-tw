<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1f02302a0595556843ce02485a48eb3b3665db7" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52225931" /></Metadata><TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <TypeSignature Language="F#" Value="type SpeechUI = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供要在語音平台使用者介面中顯示的辨識作業文字和狀態資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 成員<xref:System.Speech.Recognition.SpeechUI>類別可以用來指出確切的意見反應給終端使用者透過語音辨識的使用者介面。 任意文字和使用這個類別的成功/失敗資訊，可以傳回應用程式。  
  
   
  
## Examples  
 下列範例是處理常式<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。 此事件由<xref:System.Speech.Recognition.Grammar>，設計來處理在表單中的密碼輸入 「 我的密碼是...」。  
  
 如果密碼不存在或無效，<xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A>將錯誤資訊傳送至語音平台使用者介面。  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="F#" Value="static member SendTextFeedback : System.Speech.Recognition.RecognitionResult * string * bool -&gt; bool" Usage="System.Speech.Recognition.SpeechUI.SendTextFeedback (result, feedback, isSuccessfulAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result">有效的 <see cref="T:System.Speech.Recognition.RecognitionResult" /> 執行個體。</param>
        <param name="feedback"><see cref="T:System.String" />，其中包含產生 <see cref="T:System.Speech.Recognition.RecognitionResult" /><paramref name="result" /> 之辨識作業的相關註解。</param>
        <param name="isSuccessfulAction"><see langword="bool" />，表示應用程式是否將辨識作業視為成功。</param>
        <summary>傳送有關辨識作業狀態的狀態和描述文字到語音平台使用者介面。</summary>
        <returns>如果提供給方法 (<paramref name="Feedback" /> 和 <paramref name="isSuccessfulAction" />) 的資訊已成功使用於語音平台使用者介面，則為 <see langword="true" />，如果作業失敗則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> 可用來表示，辨識作業無法符合特定準則時，即使已辨識輸入。  
  
 例如，安全性程式碼資訊，其中完全已辨識輸入，但驗證資訊是錯誤的驗證。  
  
   
  
## Examples  
 下列範例是處理常式<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。 此事件由<xref:System.Speech.Recognition.Grammar>，設計來處理密碼輸入的格式、 「 我的密碼是...」。  
  
 如果密碼不存在，或不合法**SendTextFeedback**用來將錯誤資訊傳送至語音平台使用者介面。  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>