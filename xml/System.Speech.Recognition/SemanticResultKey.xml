<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8b6fbce71937b97c8c66f7bac8e781c2f7f3e49" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52254076" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>將索引鍵字串與<see cref="T:System.Speech.Recognition.SemanticResultValue" />值關聯在一起，以定義<see cref="T:System.Speech.Recognition.SemanticValue" />物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 System.Speech 語意運算式的基本單位是<xref:System.Speech.Recognition.SemanticValue>，這是索引鍵/值組。  
  
 使用<xref:System.Speech.Recognition.SemanticResultKey>物件，您標記<xref:System.Speech.Recognition.SemanticResultValue>中所包含的執行個體<xref:System.Speech.Recognition.GrammarBuilder>物件和字串，因此值可能會輕易地存取從<xref:System.Speech.Recognition.SemanticValue>的辨識的執行個體。  
  
 您可以使用<xref:System.Speech.Recognition.SemanticResultValue>並<xref:System.Speech.Recognition.SemanticResultKey>物件，搭配<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件，來定義語音辨識文法的語意結構。 若要存取在辨識結果中語意的資訊，請取得的執行個體<xref:System.Speech.Recognition.SemanticValue>經由<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>屬性上的<xref:System.Speech.Recognition.RecognizedPhrase>。  
  
  
## Examples  
 下列範例會建立<xref:System.Speech.Recognition.Grammar>可辨識這些格式的密碼輸入 「 我的密碼是...」，其中的萬用字元比對實際的輸入。  
  
 萬用字元會標記為語意索引鍵，而<xref:System.Speech.Recognition.Grammar.SpeechRecognized>處理常式會檢查此標記，以確認密碼輸入發生的狀態。  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">使用 SemanticResultKey 擷取 SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建構<see cref="T:System.Speech.Recognition.SemanticResultKey" />的執行個體，並建立索引鍵與文法元件的關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構函式<xref:System.Speech.Recognition.SemanticResultKey>指定的文字標記 （語意索引鍵） 和一組將語音辨識文法的文法元件。  
  
 文法元件可以是指定的陣列<xref:System.Speech.Recognition.GrammarBuilder>物件，或為陣列<xref:System.String>執行個體。  
  
 如果用於辨識的文法元件，您可以傳回<xref:System.Speech.Recognition.SemanticValue>使用提供的建構函式的文字標記<xref:System.Speech.Recognition.SemanticResultKey>為語意索引鍵。 <xref:System.Speech.Recognition.SemanticValue.Value%2A>的屬性<xref:System.Speech.Recognition.SemanticValue>執行個體將會決定所使用的定義中的文法元件<xref:System.Speech.Recognition.SemanticResultKey>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">要當做語音索引鍵使用的標記會存取與 <paramref name="builders" /> 引數所指定之 <see cref="T:System.Speech.Recognition.SemanticValue" /> 物件相關聯的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 執行個體。</param>
        <param name="builders">會和<see cref="T:System.Speech.Recognition.SemanticValue" />物件（可使用<paramref name="semanticResultKey" />中所定義的標記來存取）相關聯的文法元件的陣列。</param>
        <summary>指派語意索引鍵給一或多個用來建立語音辨識文法的<see cref="T:System.Speech.Recognition.GrammarBuilder" />物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為隱含轉換，而`builders`引數支援<xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.Choices>，和<xref:System.String>物件。 如需有關隱含轉換的詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>。  
  
 執行辨識作業時<xref:System.Speech.Recognition.GrammarBuilder>中所提供的物件`builders`引數處理為循序。 例如，如果下列<xref:System.Speech.Recognition.SemanticResultValue>用來建構<xref:System.Speech.Recognition.Grammar>，辨識引擎的輸入必須包含單字"quick brown fox 」，可辨識的序列中。  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 `semanticResultKey`引數包含使用的標記來存取<xref:System.Speech.Recognition.SemanticValue>這可能會傳回。  
  
 <xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>取決<xref:System.Speech.Recognition.GrammarBuilder>提供的執行個體`builders`參數。  
  
 如果<xref:System.Speech.Recognition.GrammarBuilder>物件包含定義的執行個體<xref:System.Speech.Recognition.SemanticResultValue>，值<xref:System.Speech.Recognition.SemanticValue>是`null`。  
  
 如果<xref:System.Speech.Recognition.GrammarBuilder>中所提供的物件`builders`參數提供未標記 (不相關聯<xref:System.Speech.Recognition.SemanticResultKey>物件)<xref:System.Speech.Recognition.SemanticResultValue>辨識邏輯，該執行個體所用的執行個體<xref:System.Speech.Recognition.SemanticResultValue>會定義<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>所產生。  
  
 應該有一個項目，並僅有一個未標記<xref:System.Speech.Recognition.SemanticResultValue>執行個體中<xref:System.Speech.Recognition.GrammarBuilder>所指定的物件`builders`參數。 如果多個執行個體未標記<xref:System.Speech.Recognition.SemanticResultValue>相關聯<xref:System.Speech.Recognition.SemanticResultKey>，每個會嘗試將集合的值<xref:System.Speech.Recognition.SemanticValue>辨識結果中產生。 不允許此情形，並辨識器將會產生例外狀況，當它嘗試使用<xref:System.Speech.Recognition.Grammar>使用這類建立<xref:System.Speech.Recognition.SemanticResultKey>執行個體。  
  
 執行個體<xref:System.Speech.Recognition.SemanticResultValue>中包含<xref:System.Speech.Recognition.GrammarBuilder>所指定的物件`builders`參數，已與另一個相關聯<xref:System.Speech.Recognition.SemanticResultKey>不影響目前<xref:System.Speech.Recognition.SemanticResultKey>執行個體。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Speech.Recognition.Grammar>可辨識這些格式的密碼輸入 「 我的密碼是...」，其中的萬用字元比對實際的輸入。  
  
 萬用字元標記<xref:System.Speech.Recognition.SpeechRecognizer>其索引鍵的值為"Password"。 <xref:System.Speech.Recognition.Grammar.SpeechRecognized>處理常式會檢查此標記是否存在、 取得的音訊輸入的密碼，並確認密碼。  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">要使用的標記，存取與 <paramref name="phrases" /> 引數所指定之 <see cref="T:System.String" /> 物件建立關聯的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 執行個體。</param>
        <param name="phrases">一或多個 <see cref="T:System.String" /> 物件，其串連文字將會與 <see cref="T:System.Speech.Recognition.SemanticValue" /> 物件相關聯，而此物件可透過 <paramref name="semanticResultKey" /> 中所定義的標記進行存取。</param>
        <summary>指派語意索引鍵給一或多個用來建立語音辨識文法的<see cref="T:System.String" />執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行辨識作業時<xref:System.String>中所使用的物件`phrases`循序處理參數。 例如，如果下列<xref:System.Speech.Recognition.SemanticResultValue>用來建構<xref:System.Speech.Recognition.Grammar>，辨識引擎的輸入必須包含單字"quick brown fox 」，可辨識的序列中。  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 `semanticResultKey`引數會決定使用的金鑰來存取<xref:System.Speech.Recognition.SemanticValue>這可能會傳回。  
  
 如果您建構<xref:System.Speech.Recognition.Grammar>使用<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含陣列的字串物件的語意索引鍵<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>所產生的辨識作業將會辨識中使用的字串。 在上述範例中，這表示<xref:System.Speech.Recognition.SemanticValue.Value%2A>會是 「 quick brown fox 」。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Speech.Recognition.Grammar>從<xref:System.Speech.Recognition.GrammarBuilder>使用的物件<xref:System.Speech.Recognition.SemanticResultKey>，它定義的陣列<xref:System.String>物件。  
  
 辨識引擎使用<xref:System.Speech.Recognition.Grammar>建立會辨識片語 「 色彩紅色綠色的藍色零 」。 語意<xref:System.Speech.Recognition.RecognizedPhrase>所傳回包含辨識<xref:System.Speech.Recognition.SemanticValue>與<xref:System.Speech.Recognition.SemanticValue.Value%2A>的 「 藍色紅色綠色 」。 您可以存取<xref:System.Speech.Recognition.SemanticValue>使用 「 程式碼 」 標記。  
  
 由於`SemanticResultValue("zero", 5)`附加至<xref:System.Speech.Recognition.GrammarBuilder>，根<xref:System.Speech.Recognition.SemanticValue>物件中<xref:System.Speech.Recognition.RecognizedPhrase>會有 5 個值。  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回從目前 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 執行個體建構的 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 執行個體。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 善用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相當於使用<xref:System.Speech.Recognition.GrammarBuilder>的建構函式<xref:System.Speech.Recognition.SemanticResultKey>做為引數 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Speech.Recognition.Grammar>支援命令來變更背景色彩的物件。  
  
 A<xref:System.Speech.Recognition.Choices>物件 (`colorChoice`) 包含清單的背景色彩選項使用填滿<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>方法<xref:System.Speech.Recognition.GrammarBuilder>執行個體。 <xref:System.Speech.Recognition.GrammarBuilder>執行個體一貫<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>方法<xref:System.Speech.Recognition.SemanticResultValue>從色彩字串建立的物件。  
  
 A<xref:System.Speech.Recognition.GrammarBuilder>接著會取得藉由呼叫<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上<xref:System.Speech.Recognition.SemanticResultKey>執行個體，這將用來索引鍵中的語意選擇`colorChoice`。  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>