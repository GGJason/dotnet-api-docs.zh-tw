<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="510e5-101">提供方法來存取和管理處理中的語音辨識引擎。</span><span class="sxs-lookup"><span data-stu-id="510e5-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-102">您可以針對任何已安裝的語音辨識器中建立此類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="510e5-103">若要取得辨識器已安裝相關的資訊，請使用靜態<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-104">這個類別可用來執行語音辨識引擎同處理序，並提供語音辨識的各個層面的控制，如下所示：</span><span class="sxs-lookup"><span data-stu-id="510e5-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="510e5-105">若要建立同處理序語音辨識器，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="510e5-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="510e5-106">若要管理 語音辨識文法，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>方法，而<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="510e5-107">若要設定辨識器的輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>，或<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="510e5-108">若要執行語音辨識，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="510e5-109">若要修改辨識如何處理無回應或非預期的輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="510e5-110">若要變更辨識器傳回的替代項目數目，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="510e5-111">辨識器傳回辨識導致<xref:System.Speech.Recognition.RecognitionResult>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="510e5-112">若要變更同步至辨識器，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="510e5-113">辨識器會使用多個執行緒執行工作。</span><span class="sxs-lookup"><span data-stu-id="510e5-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="510e5-114">若要模擬的辨識器的輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-115"><xref:System.Speech.Recognition.SpeechRecognitionEngine>物件是唯一使用的物件具現化的程序。</span><span class="sxs-lookup"><span data-stu-id="510e5-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="510e5-116">相反地，<xref:System.Speech.Recognition.SpeechRecognizer>與想要使用它的任何應用程式共用單一的辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="510e5-117">請務必呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A>釋放語音辨識器您最後一個參考之前。</span><span class="sxs-lookup"><span data-stu-id="510e5-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="510e5-118">否則，它所使用的資源將不會釋放記憶體回收行程呼叫辨識器物件的直到`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-119">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-120">由於這個範例使用`Multiple`模式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法，它會執行辨識直到您關閉主控台視窗，或停止偵錯。</span><span class="sxs-lookup"><span data-stu-id="510e5-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-121">初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-122">您可以建構<xref:System.Speech.Recognition.SpeechRecognitionEngine>從下列任何一個執行個體：</span><span class="sxs-lookup"><span data-stu-id="510e5-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="510e5-123">系統預設語音辨識引擎</span><span class="sxs-lookup"><span data-stu-id="510e5-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="510e5-124">依名稱指定特定的語音辨識引擎</span><span class="sxs-lookup"><span data-stu-id="510e5-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="510e5-125">預設的語音辨識引擎，為您指定的地區設定</span><span class="sxs-lookup"><span data-stu-id="510e5-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="510e5-126">符合準則中所指定的特定的辨識引擎<xref:System.Speech.Recognition.RecognizerInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="510e5-127">語音辨識器開始辨識之前，您必須至少一個語音辨識文法載入及設定辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-128">若要載入的文法，呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-129">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-130">使用系統的預設語音辨識器，初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-131">語音辨識器開始語音辨識之前，您必須至少一個辨識文法載入及設定辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-132">若要載入的文法，呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-133">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="510e5-134">語音辨識器必須支援的地區設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="510e5-135">使用指定之地區設定的預設語音辨識器，初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-136">Microsoft Windows 和 System.Speech API 接受所有有效國家 （地區） 語言代碼。</span><span class="sxs-lookup"><span data-stu-id="510e5-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="510e5-137">若要執行使用中所指定語言的語音辨識`CultureInfo`引數，語音辨識引擎支援，必須安裝語言國家/地區的程式碼。</span><span class="sxs-lookup"><span data-stu-id="510e5-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="510e5-138">隨附於 Microsoft Windows 7 的語音辨識引擎會使用下列語言的國家/地區碼。</span><span class="sxs-lookup"><span data-stu-id="510e5-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="510e5-139">en GB。</span><span class="sxs-lookup"><span data-stu-id="510e5-139">en-GB.</span></span> <span data-ttu-id="510e5-140">英文 （英國）</span><span class="sxs-lookup"><span data-stu-id="510e5-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="510e5-141">EN-US。</span><span class="sxs-lookup"><span data-stu-id="510e5-141">en-US.</span></span> <span data-ttu-id="510e5-142">英文 （美國）</span><span class="sxs-lookup"><span data-stu-id="510e5-142">English (United States)</span></span>  
  
-   <span data-ttu-id="510e5-143">為 DE-DE。</span><span class="sxs-lookup"><span data-stu-id="510e5-143">de-DE.</span></span> <span data-ttu-id="510e5-144">德文 （德國）</span><span class="sxs-lookup"><span data-stu-id="510e5-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="510e5-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="510e5-145">es-ES.</span></span> <span data-ttu-id="510e5-146">西班牙文 （西班牙）</span><span class="sxs-lookup"><span data-stu-id="510e5-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="510e5-147">fr-fr。</span><span class="sxs-lookup"><span data-stu-id="510e5-147">fr-FR.</span></span> <span data-ttu-id="510e5-148">法文 （法國）</span><span class="sxs-lookup"><span data-stu-id="510e5-148">French (France)</span></span>  
  
-   <span data-ttu-id="510e5-149">若為 JA-JP。</span><span class="sxs-lookup"><span data-stu-id="510e5-149">ja-JP.</span></span> <span data-ttu-id="510e5-150">日文 （日本）</span><span class="sxs-lookup"><span data-stu-id="510e5-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="510e5-151">zh-chs 和 CN。</span><span class="sxs-lookup"><span data-stu-id="510e5-151">zh-CN.</span></span> <span data-ttu-id="510e5-152">中文 （中國）</span><span class="sxs-lookup"><span data-stu-id="510e5-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="510e5-153">zh-chs 和 TW。</span><span class="sxs-lookup"><span data-stu-id="510e5-153">zh-TW.</span></span> <span data-ttu-id="510e5-154">中文 （台灣）</span><span class="sxs-lookup"><span data-stu-id="510e5-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="510e5-155">兩個字母的語言代碼，例如"en"，"fr"，或也允許"es"。</span><span class="sxs-lookup"><span data-stu-id="510e5-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="510e5-156">語音辨識器開始辨識之前，您必須至少一個語音辨識文法載入及設定辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-157">若要載入的文法，呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-158">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-159">下列範例示範基本的語音辨識，並初始化 EN-US 地區設定語音辨識器的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="510e5-160">已安裝的語音辨識器都不支援所指定的地區設定，或者 <paramref name="culture" /> 是不因文化特性而異 (Invariant Culture)。</span><span class="sxs-lookup"><span data-stu-id="510e5-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-161"><paramref name="Culture" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="510e5-162">特定語音辨識器的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="510e5-163">使用 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件中的資訊指定要使用的辨識器，初始化 <see cref="T:System.Speech.Recognition.RecognizerInfo" /> 的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-164">您可以針對任何已安裝的語音辨識器中建立此類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="510e5-165">若要取得辨識器已安裝相關的資訊，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-166">語音辨識器開始辨識之前，您必須至少一個語音辨識文法載入及設定辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-167">若要載入的文法，呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-168">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-169">下列範例示範基本的語音辨識，並初始化語音辨識器支援英文語言的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="510e5-170">要使用語音辨識器的權杖名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="510e5-171">使用字串參數指定要使用的辨識器名稱，初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-172">辨識器的語彙基元名稱是值<xref:System.Speech.Recognition.RecognizerInfo.Id%2A>屬性<xref:System.Speech.Recognition.RecognizerInfo>所傳回物件<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>辨識器的屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="510e5-173">若要取得所有已安裝的辨識器的集合，使用靜態<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-174">語音辨識器開始辨識之前，您必須至少一個語音辨識文法載入及設定辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-175">若要載入的文法，呼叫<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-176">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-177">下列範例示範基本的語音辨識，並建立適用於 Windows 的 語音辨識器 8.0 的執行個體的主控台應用程式的一部分 (英文-美國)。</span><span class="sxs-lookup"><span data-stu-id="510e5-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="510e5-178">沒有安裝該語彙基元名稱的語音辨識器，或者 <paramref name="recognizerId" /> 是空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-179"><paramref name="recognizerId" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-180">取得 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 所接收的音訊格式。</span><span class="sxs-lookup"><span data-stu-id="510e5-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="510e5-181">輸入至 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 執行個體時的音訊格式，如果輸入未設定或設為 null 輸入則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-182">若要設定的音訊的輸入，請使用下列方法之一：</span><span class="sxs-lookup"><span data-stu-id="510e5-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-183">以下示例使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A>來獲取並顯示音頻格式數據。</span><span class="sxs-lookup"><span data-stu-id="510e5-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-184">取得 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 所接收的音訊層級。</span><span class="sxs-lookup"><span data-stu-id="510e5-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="510e5-185">語音辨識器的輸入音量，大小從 0 到 100。</span><span class="sxs-lookup"><span data-stu-id="510e5-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-186">值 0 代表無回應，而 100 表示最大輸入磁碟區。</span><span class="sxs-lookup"><span data-stu-id="510e5-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-187"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 報告其音訊輸入層級時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-188"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引發此事件每秒多次。</span><span class="sxs-lookup"><span data-stu-id="510e5-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="510e5-189">用來引發事件的頻率取決於應用程式執行所在的電腦。</span><span class="sxs-lookup"><span data-stu-id="510e5-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="510e5-190">若要取得的音訊的層級的事件時，使用<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A>屬性相關聯的<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="510e5-191">若要取得目前音訊的辨識器的輸入層級，使用的辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-192">當您建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> 委派 (Delegate) 時，就可以識別即將處理此事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-193">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-194">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-195">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-195">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-196">下列範例會加入處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>事件<xref:System.Speech.Recognition.SpeechRecognitionEngine>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="510e5-197">此處理常式會輸出到主控台的新音訊層級。</span><span class="sxs-lookup"><span data-stu-id="510e5-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-198">取得提供 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 輸入的裝置正在產生的音訊資料流中目前的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="510e5-199">輸入裝置所產生之音訊資料流中的目前位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-200"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>屬性會參考其產生的音訊資料流中的輸入的裝置的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="510e5-201">相反地，<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性會參考其音訊的輸入中的辨識器的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="510e5-202">這些位置可能會不同。</span><span class="sxs-lookup"><span data-stu-id="510e5-202">These positions can be different.</span></span> <span data-ttu-id="510e5-203">例如，如果辨識器已接收輸入它具有不尚未產生辨識結果，則值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性小於的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-204">在下列範例中，同處理序語音辨識器會使用聽寫文法，來比對語音輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="510e5-205">處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>事件寫入至主控台<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>當語音辨識器偵測到在其輸入的語音。</span><span class="sxs-lookup"><span data-stu-id="510e5-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-206">在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 偵測到音訊訊號問題時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-207">若要取得哪些問題發生，請使用<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A>屬性相關聯的<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="510e5-208">當您建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> 委派 (Delegate) 時，就可以識別即將處理此事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-209">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-210">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-211">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-211">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-212">下列範例會定義事件處理常式，收集的資訊關於<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-213">取得 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 所接收的音訊狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="510e5-214">語音辨識器之音訊輸入的狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-215"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>屬性代表音訊的成員狀態<xref:System.Speech.Recognition.AudioState>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-216">在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 所接收的音訊變更狀態時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-217">若要取得的音訊的狀態事件時，請使用<xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A>屬性相關聯的<xref:System.Speech.Recognition.AudioStateChangedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="510e5-218">若要取得辨識器的輸入音訊的目前狀態，請使用 辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="510e5-219">如需音訊狀態的詳細資訊，請參閱<xref:System.Speech.Recognition.AudioState>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="510e5-220">當您建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> 委派 (Delegate) 時，就可以識別即將處理此事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-221">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-222">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-223">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-223">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-224">下列範例會使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>事件来寫入辨識器的新<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>主控台每次變更時，使用的成員<xref:System.Speech.Recognition.AudioState>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-225">取得或設定完成辨識前 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 接受只包含背景雜訊之輸入的時間間隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="510e5-226">時間間隔的持續時間。</span><span class="sxs-lookup"><span data-stu-id="510e5-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-227">每個語音辨識器的演算法來區別無回應及語音。</span><span class="sxs-lookup"><span data-stu-id="510e5-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="510e5-228">辨識器將分類為任何非無回應輸入不符合任何的辨識器初始規則背景噪音載入，而且啟用語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="510e5-229">如果辨識器收到 babble 逾時間隔內時，只有背景噪音，無回應，辨識器完成該辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="510e5-230">辨識器引發非同步辨識作業<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，其中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType>屬性是`true`，而<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="510e5-231">若是同步辨識作業與模擬，辨識器傳回`null`，而不是有效的<xref:System.Speech.Recognition.RecognitionResult>。</span><span class="sxs-lookup"><span data-stu-id="510e5-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="510e5-232">辨識器 babble 逾時期限設為 0 時，不會執行 babble 逾時核取。</span><span class="sxs-lookup"><span data-stu-id="510e5-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="510e5-233">逾時間隔可以是任何非負數的值。</span><span class="sxs-lookup"><span data-stu-id="510e5-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="510e5-234">預設值為 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-235">下列範例示範如何設定基本的語音辨識的主控台應用程式的一部分<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionEngine>初始化語音辨識之前。</span><span class="sxs-lookup"><span data-stu-id="510e5-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="510e5-236">語音辨識器的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件輸出事件資訊至主控台，以示範如何<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionEngine>辨識作業的影響。</span><span class="sxs-lookup"><span data-stu-id="510e5-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="510e5-237">這個屬性設定為小於 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-238">處置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-239">處置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="510e5-240"><see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="510e5-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="510e5-241">處置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件，並釋放工作階段期間所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="510e5-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-242">在同步語音辨識中使用文字代替音訊，模擬對語音辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-243">這些方法略過輸入的系統音效，並提供至辨識器做為文字<xref:System.String>物件或陣列形式<xref:System.Speech.Recognition.RecognizedWordUnit>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="510e5-244">您正在測試或偵錯應用程式或文法時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="510e5-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="510e5-245">例如，您可以使用模擬來判斷文字是否在文法和辨識出這個字時，會傳回哪些語意。</span><span class="sxs-lookup"><span data-stu-id="510e5-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="510e5-246">使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>方法，以模擬作業期間停用語音辨識引擎的音訊輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="510e5-247">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="510e5-248">辨識器會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="510e5-249"><xref:System.Speech.Recognition.RecognitionResult>回應模擬輸入語音辨識器所產生的物件具有值為`null`針對其<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-250">若要模擬非同步辨識，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="510e5-251">辨識作業的輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-252">在共用的語音辨識器上模擬片語輸入，針對同步的語音辨識使用文字來代替音訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="510e5-253">辨識作業的結果，如果作業未成功或辨識器未啟用則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-254">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="510e5-255">隨附於 Vista 和 Windows 7 的辨識器忽略大小寫，並將文法規則套用至輸入的片語時，字元寬度。</span><span class="sxs-lookup"><span data-stu-id="510e5-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-256">如需這種類型的比較的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉值<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>和<xref:System.Globalization.CompareOptions.IgnoreWidth>。</span><span class="sxs-lookup"><span data-stu-id="510e5-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="510e5-257">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-258">下列程式碼範例是示範模擬的輸入、 相關聯的辨識結果，以及相關聯的事件引發的語音辨識器的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="510e5-259">這個範例會產生下列輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-260">辨識器沒有載入語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-261"><paramref name="inputText" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-262"><paramref name="inputText" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="510e5-263">文字單位陣列，包含辨識作業的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="510e5-264">列舉值的位元組合，描述要用於模擬辨識作業的比較類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-265">在語音辨識器上模擬特定單字輸入，針對同步的語音辨識使用文字取代音訊，並指定辨識器如何處理單字間的 Unicode 比較以及已載入的語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="510e5-266">辨識作業的結果，如果作業未成功或辨識器未啟用則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-267">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="510e5-268">使用辨識器`compareOptions`套用文法規則進行剖析的輸入句子。</span><span class="sxs-lookup"><span data-stu-id="510e5-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-269">隨附於 Vista 和 Windows 7 的辨識器會忽略大小寫，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值。</span><span class="sxs-lookup"><span data-stu-id="510e5-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="510e5-270">辨識器永遠會忽略字元寬度，並永遠不會忽略假名類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="510e5-271">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="510e5-272">如需全半形字元和假名類型的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-273">辨識器沒有載入語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-274"><paramref name="wordUnits" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-275"><paramref name="wordUnits" /> 包含一個或多個 <see langword="null" /> 項目。</span><span class="sxs-lookup"><span data-stu-id="510e5-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="510e5-276"><paramref name="compareOptions" /> 包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> 或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="510e5-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="510e5-277">辨識作業的輸入片語。</span><span class="sxs-lookup"><span data-stu-id="510e5-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="510e5-278">列舉值的位元組合，描述要用於模擬辨識作業的比較類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-279">在語音辨識器上模擬片語輸入，針對同步的語音辨識使用文字來代替音訊，並指定辨識器如何處理片語間的 Unicode 比較以及已載入的語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="510e5-280">辨識作業的結果，如果作業未成功或辨識器未啟用則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-281">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="510e5-282">使用辨識器`compareOptions`套用文法規則進行剖析的輸入句子。</span><span class="sxs-lookup"><span data-stu-id="510e5-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-283">隨附於 Vista 和 Windows 7 的辨識器會忽略大小寫，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值。</span><span class="sxs-lookup"><span data-stu-id="510e5-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="510e5-284">辨識器永遠會忽略字元寬度，並永遠不會忽略假名類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="510e5-285">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="510e5-286">如需全半形字元和假名類型的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-287">辨識器沒有載入語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-288"><paramref name="inputText" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-289"><paramref name="inputText" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="510e5-290"><paramref name="compareOptions" /> 包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> 或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="510e5-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-291">在非同步語音辨識中使用文字代替音訊，模擬對語音辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-292">這些方法略過輸入的系統音效，並提供至辨識器做為文字<xref:System.String>物件或陣列形式<xref:System.Speech.Recognition.RecognizedWordUnit>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="510e5-293">您正在測試或偵錯應用程式或文法時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="510e5-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="510e5-294">例如，您可以使用模擬來判斷文字是否在文法和辨識出這個字時，會傳回哪些語意。</span><span class="sxs-lookup"><span data-stu-id="510e5-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="510e5-295">使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>方法，以模擬作業期間停用語音辨識引擎的音訊輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="510e5-296">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="510e5-297">當辨識器完成非同步的辨識作業時，會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="510e5-298">辨識器會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="510e5-299"><xref:System.Speech.Recognition.RecognitionResult>回應模擬輸入語音辨識器所產生的物件具有值為`null`針對其<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-300">若要模擬同步辨識，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="510e5-301">辨識作業的輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-302">在語音辨識器上模擬片語輸入，針對非同步的語音辨識使用文字來代替音訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-303">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="510e5-304">當辨識器完成非同步的辨識作業時，會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="510e5-305">隨附於 Vista 和 Windows 7 的辨識器忽略大小寫，並將文法規則套用至輸入的片語時，字元寬度。</span><span class="sxs-lookup"><span data-stu-id="510e5-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-306">如需這種類型的比較的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉值<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>和<xref:System.Globalization.CompareOptions.IgnoreWidth>。</span><span class="sxs-lookup"><span data-stu-id="510e5-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="510e5-307">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-308">下列程式碼範例是示範非同步模擬的輸入、 相關聯的辨識結果，以及相關聯的事件引發的語音辨識器的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="510e5-309">這個範例會產生下列輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-310">辨識器沒有載入語音辨識文法，或辨識器有尚未完成的非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-311"><paramref name="inputText" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-312"><paramref name="inputText" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="510e5-313">文字單位陣列，包含辨識作業的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="510e5-314">列舉值的位元組合，描述要用於模擬辨識作業的比較類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-315">在語音辨識器上模擬特定單字輸入，針對非同步的語音辨識使用 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 物件陣列以取代音訊，並指定辨識器如何處理單字間的 Unicode 比較以及已載入的語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-316">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="510e5-317">當辨識器完成非同步的辨識作業時，會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="510e5-318">使用辨識器`compareOptions`套用文法規則進行剖析的輸入句子。</span><span class="sxs-lookup"><span data-stu-id="510e5-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-319">隨附於 Vista 和 Windows 7 的辨識器會忽略大小寫，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值。</span><span class="sxs-lookup"><span data-stu-id="510e5-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="510e5-320">辨識器一律忽略字元寬度，並永遠不會忽略假名類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="510e5-321">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="510e5-322">如需全半形字元和假名類型的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-323">辨識器沒有載入語音辨識文法，或辨識器有尚未完成的非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-324"><paramref name="wordUnits" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-325"><paramref name="wordUnits" /> 包含一個或多個 <see langword="null" /> 項目。</span><span class="sxs-lookup"><span data-stu-id="510e5-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="510e5-326"><paramref name="compareOptions" /> 包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> 或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="510e5-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="510e5-327">辨識作業的輸入片語。</span><span class="sxs-lookup"><span data-stu-id="510e5-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="510e5-328">列舉值的位元組合，描述要用於模擬辨識作業的比較類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="510e5-329">在語音辨識器上模擬片語輸入，針對非同步的語音辨識使用文字來代替音訊，並指定辨識器如何處理片語間的 Unicode 比較以及已載入的語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-330">語音辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件如同辨識作業不模擬。</span><span class="sxs-lookup"><span data-stu-id="510e5-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="510e5-331">當辨識器完成非同步的辨識作業時，會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="510e5-332">使用辨識器`compareOptions`套用文法規則進行剖析的輸入句子。</span><span class="sxs-lookup"><span data-stu-id="510e5-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="510e5-333">隨附於 Vista 和 Windows 7 的辨識器會忽略大小寫，如果<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>或<xref:System.Globalization.CompareOptions.IgnoreCase>值。</span><span class="sxs-lookup"><span data-stu-id="510e5-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="510e5-334">辨識器一律忽略字元寬度，並永遠不會忽略假名類型。</span><span class="sxs-lookup"><span data-stu-id="510e5-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="510e5-335">辨識器也會忽略新行和額外的空白字元和標點符號視為常值的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="510e5-336">如需全半形字元和假名類型的詳細資訊，請參閱<xref:System.Globalization.CompareOptions>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="510e5-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-337">辨識器沒有載入語音辨識文法，或辨識器有尚未完成的非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-338"><paramref name="inputText" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-339"><paramref name="inputText" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="510e5-340"><paramref name="compareOptions" /> 包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> 或 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="510e5-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-341"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成模擬輸入的非同步辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-342">每個<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法開始非同步的辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-343"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>時它結束非同步作業的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="510e5-344"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>作業可能會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="510e5-345"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件是最後一個這類辨識器引發對指定作業的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="510e5-346">如果模擬的辨識成功，您可以存取的辨識結果，使用下列其中一：</span><span class="sxs-lookup"><span data-stu-id="510e5-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="510e5-347"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>物件中的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="510e5-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> 中的屬性<xref:System.Speech.Recognition.SpeechRecognizedEventArgs>物件中的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="510e5-349">如果沒有成功，模擬的辨識<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>不會引發事件和<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>將會是 null。</span><span class="sxs-lookup"><span data-stu-id="510e5-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="510e5-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> 是衍生自 <xref:System.ComponentModel.AsyncCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="510e5-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> 是衍生自 <xref:System.Speech.Recognition.RecognitionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="510e5-352">當您建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> 委派 (Delegate) 時，就可以識別即將處理此事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-353">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-354">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-355">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-355">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-356">下列範例是主控台應用程式載入 語音辨識文法和示範非同步模擬的輸入、 相關聯的辨識結果，以及語音辨識器所引發的相關的事件的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-357">取得或設定靜默無聲間隔，<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 會在意義明確輸入的結尾接受這段間隔的無聲輸入，然後才完成辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="510e5-358">無回應間隔的持續時間。</span><span class="sxs-lookup"><span data-stu-id="510e5-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-359">語音辨識器辨識輸入模稜兩可時，會使用此逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="510e5-360">例如支援的其中一個辨識語音辨識文法 」 新遊戲請 」 或 「 新的遊戲，「 」 新遊戲請 」 是模稜兩可的輸入，而 「 新遊戲"模稜兩可的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="510e5-361">此屬性決定多久語音辨識引擎會等候對其他輸入正在辨識作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="510e5-362">逾時間隔可以是 10 秒，內含從 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="510e5-363">預設為 150 毫秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="510e5-364">若要設定的逾時間隔模稜兩可的輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="510e5-365">這個屬性已設定為小於 0 秒或大於 10 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-366">取得或設定靜默無聲間隔，<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 會在模稜兩可輸入的結尾接受這段間隔的無聲輸入，然後才完成辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="510e5-367">無回應間隔的持續時間。</span><span class="sxs-lookup"><span data-stu-id="510e5-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-368">辨識輸入模稜兩可時，語音辨識器就會使用此逾時間隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="510e5-369">例如支援的其中一個辨識語音辨識文法 」 新遊戲請 」 或 「 新的遊戲，「 」 新遊戲請 」 是模稜兩可的輸入，而 「 新遊戲"模稜兩可的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="510e5-370">此屬性決定多久語音辨識引擎會等候對其他輸入正在辨識作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="510e5-371">逾時間隔可以是 10 秒，內含從 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="510e5-372">預設值為 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="510e5-373">若要設定的逾時間隔模稜兩可的輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="510e5-374">這個屬性已設定為小於 0 秒或大於 10 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-375">取得在這個 <see cref="T:System.Speech.Recognition.Grammar" /> 執行個體中載入之 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件的集合。</span><span class="sxs-lookup"><span data-stu-id="510e5-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="510e5-376"><see cref="T:System.Speech.Recognition.Grammar" /> 物件的集合。</span><span class="sxs-lookup"><span data-stu-id="510e5-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="510e5-377">下列範例會輸出到主控台的每個目前已載入語音辨識器的語音辨識文法的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="510e5-378">將複製文法集合，以避免錯誤，如果這個方法會列舉集合項目時，會修改集合。</span><span class="sxs-lookup"><span data-stu-id="510e5-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-379">取得或設定完成辨識前 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 接受只包含靜音之輸入的時間間隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="510e5-380">無回應間隔的持續時間。</span><span class="sxs-lookup"><span data-stu-id="510e5-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-381">每個語音辨識器的演算法來區別無回應及語音。</span><span class="sxs-lookup"><span data-stu-id="510e5-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="510e5-382">如果辨識器輸入初始無回應逾時期間是無回應，辨識器完成該辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="510e5-383">非同步辨識作業和模擬，辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，其中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType>屬性是`true`，而<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="510e5-384">若是同步辨識作業與模擬，辨識器傳回`null`，而不是有效的<xref:System.Speech.Recognition.RecognitionResult>。</span><span class="sxs-lookup"><span data-stu-id="510e5-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="510e5-385">如果初始的無回應的逾時間隔設定為 0 時，辨識器不會執行初始無回應逾時核取。</span><span class="sxs-lookup"><span data-stu-id="510e5-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="510e5-386">逾時間隔可以是任何非負數的值。</span><span class="sxs-lookup"><span data-stu-id="510e5-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="510e5-387">預設值為 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-388">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-389">範例會設定<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionEngine>初始化語音辨識之前。</span><span class="sxs-lookup"><span data-stu-id="510e5-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="510e5-390">語音辨識器的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件輸出事件資訊至主控台，以示範如何<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionEngine>屬性辨識作業的影響。</span><span class="sxs-lookup"><span data-stu-id="510e5-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="510e5-391">這個屬性設定為小於 0 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-392">傳回目前的系統上所有已安裝的語音辨識器的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="510e5-393"><see cref="T:System.Speech.Recognition.RecognizerInfo" /> 物件的唯讀集合，這些物件會描述已安裝的辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-394">若要取得目前的辨識器的相關資訊，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-395">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-396">此範例會使用所傳回的集合<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法來尋找支援英文語言的語音辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="510e5-397">要載入的文法物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="510e5-398">同步載入 <see cref="T:System.Speech.Recognition.Grammar" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-399">如果辨識器擲回例外狀況<xref:System.Speech.Recognition.Grammar>物件已經載入，以非同步方式載入，或無法載入任何辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="510e5-400">您無法載入相同<xref:System.Speech.Recognition.Grammar>物件至多個執行個體<xref:System.Speech.Recognition.SpeechRecognitionEngine>。</span><span class="sxs-lookup"><span data-stu-id="510e5-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="510e5-401">請改為建立新<xref:System.Speech.Recognition.Grammar>物件給每個<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="510e5-402">如果辨識器正在執行，應用程式必須使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暫停之前載入、 卸載、 啟用，或停用文法的語音辨識引擎。</span><span class="sxs-lookup"><span data-stu-id="510e5-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="510e5-403">當您載入文法時，預設會啟用它。</span><span class="sxs-lookup"><span data-stu-id="510e5-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="510e5-404">若要停用已載入的文法，請使用<xref:System.Speech.Recognition.Grammar.Enabled%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-405">若要載入<xref:System.Speech.Recognition.Grammar>物件以非同步方式，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-406">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-407">此範例會建立<xref:System.Speech.Recognition.DictationGrammar>並將其載入至語音辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-408"><paramref name="Grammar" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="510e5-409"><paramref name="Grammar" /> 不是有效狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="510e5-410">要載入的語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="510e5-411">以非同步方式載入語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-412">辨識器完成載入時<xref:System.Speech.Recognition.Grammar>物件時，便會產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="510e5-413">如果辨識器擲回例外狀況<xref:System.Speech.Recognition.Grammar>物件已經載入，以非同步方式載入，或無法載入任何辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="510e5-414">您無法載入相同<xref:System.Speech.Recognition.Grammar>物件至多個執行個體<xref:System.Speech.Recognition.SpeechRecognitionEngine>。</span><span class="sxs-lookup"><span data-stu-id="510e5-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="510e5-415">請改為建立新<xref:System.Speech.Recognition.Grammar>物件給每個<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="510e5-416">如果辨識器正在執行，應用程式必須使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暫停之前載入、 卸載、 啟用，或停用文法的語音辨識引擎。</span><span class="sxs-lookup"><span data-stu-id="510e5-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="510e5-417">當您載入文法時，預設會啟用它。</span><span class="sxs-lookup"><span data-stu-id="510e5-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="510e5-418">若要停用已載入的文法，請使用<xref:System.Speech.Recognition.Grammar.Enabled%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-419">若要以同步方式載入語音辨識文法，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-420"><paramref name="Grammar" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="510e5-421"><paramref name="Grammar" /> 不是有效狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="510e5-422">非同步作業已取消。</span><span class="sxs-lookup"><span data-stu-id="510e5-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-423"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的非同步載入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-424">辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法啟始非同步作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="510e5-425"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引發這個事件時完成作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="510e5-426">若要取得<xref:System.Speech.Recognition.Grammar>辨識器載入的物件，請使用<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A>屬性相關聯的<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="510e5-427">若要取得目前<xref:System.Speech.Recognition.Grammar>辨識器載入之後，物件會使用的辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-428">如果辨識器正在執行，應用程式必須使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暫停之前載入、 卸載、 啟用，或停用文法的語音辨識引擎。</span><span class="sxs-lookup"><span data-stu-id="510e5-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="510e5-429">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-430">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-431">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-432">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-432">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-433">下列範例會建立同處理序語音辨識器，並接著會建立兩種類型的可辨識的特定文字和接受可用聽寫的文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="510e5-434">此範例會建構<xref:System.Speech.Recognition.Grammar>物件從每個已完成的語音辨識文法中，然後以非同步方式載入<xref:System.Speech.Recognition.Grammar>物件加入至<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="510e5-435">辨識器的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件都會寫入主控台的名稱<xref:System.Speech.Recognition.Grammar>物件，用於分別執行辨識和文字的辨識結果。</span><span class="sxs-lookup"><span data-stu-id="510e5-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-436">取得或設定 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 為每個辨識作業傳回之替代辨識結果的最大數目。</span><span class="sxs-lookup"><span data-stu-id="510e5-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="510e5-437">要傳回的替代結果數目。</span><span class="sxs-lookup"><span data-stu-id="510e5-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-438"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>屬性<xref:System.Speech.Recognition.RecognitionResult>類別包含的集合<xref:System.Speech.Recognition.RecognizedPhrase>代表可能的解譯，輸入的物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="510e5-439">預設值為<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>為 10。</span><span class="sxs-lookup"><span data-stu-id="510e5-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="510e5-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> 設定為小於 0 的值。</span><span class="sxs-lookup"><span data-stu-id="510e5-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="510e5-441">要傳回之設定的名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="510e5-442">傳回辨識器的設定值。</span><span class="sxs-lookup"><span data-stu-id="510e5-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="510e5-443">設定的值。</span><span class="sxs-lookup"><span data-stu-id="510e5-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-444">辨識器設定可以包含字串、 64 位元整數或記憶體位址資料。</span><span class="sxs-lookup"><span data-stu-id="510e5-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="510e5-445">下表描述會定義 Microsoft 語音 API (SAPI) 的設定為相容的辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="510e5-446">下列設定的支援設定每個辨識器必須在相同的範圍。</span><span class="sxs-lookup"><span data-stu-id="510e5-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="510e5-447">SAPI 相容的辨識器不需要支援這些設定，而且可支援其他設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="510e5-448">名稱</span><span class="sxs-lookup"><span data-stu-id="510e5-448">Name</span></span>|<span data-ttu-id="510e5-449">描述</span><span class="sxs-lookup"><span data-stu-id="510e5-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="510e5-450">指定的辨識器 CPU 耗用量。</span><span class="sxs-lookup"><span data-stu-id="510e5-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="510e5-451">範圍是從 0 到 100 之間。</span><span class="sxs-lookup"><span data-stu-id="510e5-451">The range is from 0 to 100.</span></span> <span data-ttu-id="510e5-452">預設值為 50。</span><span class="sxs-lookup"><span data-stu-id="510e5-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="510e5-453">語音辨識器完成辨識作業之前，請指出無回應的模稜兩可的輸入結尾的長度。</span><span class="sxs-lookup"><span data-stu-id="510e5-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="510e5-454">範圍是從 0 到 10000 毫秒 (ms)。</span><span class="sxs-lookup"><span data-stu-id="510e5-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="510e5-455">此設定會對應至辨識器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="510e5-456">預設值 = 150ms年。</span><span class="sxs-lookup"><span data-stu-id="510e5-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="510e5-457">語音辨識器完成辨識作業之前，請指出無回應的模稜兩可的輸入結尾的長度。</span><span class="sxs-lookup"><span data-stu-id="510e5-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="510e5-458">範圍是從 0 至 10,000。</span><span class="sxs-lookup"><span data-stu-id="510e5-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="510e5-459">此設定會對應至辨識器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="510e5-460">預設值 = 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="510e5-461">指出的柔和式模型適應是否為 ON (值 = `1`) 或 OFF (值 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="510e5-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="510e5-462">預設值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="510e5-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="510e5-463">指出背景適應是否為 ON (值 = `1`) 或 OFF (值 = `0`)，並將保存在登錄中的設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="510e5-464">預設值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="510e5-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="510e5-465">若要更新的辨識器的設定，請使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-466">下列範例是針對支援 EN-US 地區設定，辨識器定義的設定數目的值輸出的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="510e5-467">這個範例會產生下列輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-468"><paramref name="settingName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-469"><paramref name="settingName" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="510e5-470">辨識器沒有該名稱的設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-471">啟動同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-472">這些方法會執行單一、 同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="510e5-473">辨識器會執行這項作業對其載入且已啟用語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="510e5-474">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-476">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-478">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-480">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="510e5-481">辨識器不會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件時使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-482"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法會傳回<xref:System.Speech.Recognition.RecognitionResult>物件，或`null`如果作業未順利完成，或未啟用辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="510e5-483">同步辨識作業可能會失敗，原因如下：</span><span class="sxs-lookup"><span data-stu-id="510e5-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="510e5-484">逾時間隔到期的前未偵測到語音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性，或如`initialSilenceTimeout`參數<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="510e5-485">偵測到語音辨識引擎，但沒有找到配對中它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="510e5-486">若要修改的辨識器如何處理語音或相對於辨識無回應的時間，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="510e5-487"><xref:System.Speech.Recognition.SpeechRecognitionEngine>必須至少一個<xref:System.Speech.Recognition.Grammar>之前執行辨識載入的物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="510e5-488">若要載入語音辨識文法，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-489">若要執行非同步的辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-490">執行同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="510e5-491">輸入的辨識結果，如果作業未成功或辨識器未啟用則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-492">這個方法會執行單一辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="510e5-493">辨識器會執行這項作業對其載入且已啟用語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="510e5-494">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-496">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-498">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-500">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="510e5-501">辨識器不會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件時使用此方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="510e5-502"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>方法會傳回<xref:System.Speech.Recognition.RecognitionResult>物件，或`null`如果不成功的作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="510e5-503">同步辨識作業可能會失敗，原因如下：</span><span class="sxs-lookup"><span data-stu-id="510e5-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="510e5-504">逾時間隔到期的前未偵測到語音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="510e5-505">偵測到語音辨識引擎，但沒有找到配對中它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="510e5-506">若要執行非同步的辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-507">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-508">此範例會建立<xref:System.Speech.Recognition.DictationGrammar>、 將其載入至同處理序語音辨識器，並執行一項辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="510e5-509">語音辨識器在完成辨識前接受僅含靜默無聲之輸入的時間間隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="510e5-510">使用指定的初始靜音逾時期限，執行同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="510e5-511">輸入的辨識結果，如果作業未成功或辨識器未啟用則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-512">如果語音辨識引擎會偵測到語音所指定的時間間隔內`initialSilenceTimeout`引數，<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29>執行單一辨識運算，然後再終止作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="510e5-513">`initialSilenceTimeout`參數取代的辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="510e5-514">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-516">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-518">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-520">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="510e5-521">辨識器不會引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件時使用此方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="510e5-522"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>方法會傳回<xref:System.Speech.Recognition.RecognitionResult>物件，或`null`如果不成功的作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="510e5-523">同步辨識作業可能會失敗，原因如下：</span><span class="sxs-lookup"><span data-stu-id="510e5-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="510e5-524">逾時間隔到期的前未偵測到語音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或`initialSilenceTimeout`參數。</span><span class="sxs-lookup"><span data-stu-id="510e5-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="510e5-525">偵測到語音辨識引擎，但沒有找到配對中它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="510e5-526">若要執行非同步的辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-527">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-528">此範例會建立<xref:System.Speech.Recognition.DictationGrammar>、 將其載入至同處理序語音辨識器，並執行一項辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-529">啟動非同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-530">這些方法會執行一個或多個非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="510e5-531">辨識器會執行其已載入及啟用語音辨識文法針對每個作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="510e5-532">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-534">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-536">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-538">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="510e5-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="510e5-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="510e5-540">引發的時機<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="510e5-541">若要擷取非同步辨識作業的結果，將事件處理常式附加至辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-542">辨識器引發此事件時成功完成同步或非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-543">如果沒有成功，辨識<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>物件，您可以存取的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，將在`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="510e5-544">非同步辨識作業可能會失敗，原因如下：</span><span class="sxs-lookup"><span data-stu-id="510e5-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="510e5-545">逾時間隔到期的前未偵測到語音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="510e5-546">偵測到語音辨識引擎，但沒有找到配對中它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="510e5-547"><xref:System.Speech.Recognition.SpeechRecognitionEngine>必須至少一個<xref:System.Speech.Recognition.Grammar>之前執行辨識載入的物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="510e5-548">若要載入語音辨識文法，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="510e5-549">若要修改的辨識器如何處理語音或相對於辨識無回應的時間，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="510e5-550">若要執行同步辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-551">執行單一、非同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-552">這個方法會執行辨識單一、 非同步作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-553">辨識器來執行其已載入及啟用語音辨識文法對作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="510e5-554">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-556">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-558">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-560">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="510e5-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="510e5-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="510e5-562">引發的時機<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="510e5-563">若要擷取非同步辨識作業的結果，將事件處理常式附加至辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-564">辨識器引發此事件時成功完成同步或非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-565">如果沒有成功，辨識<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>物件，您可以存取的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，將在`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="510e5-566">若要執行同步辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-567">下列範例示範基本的非同步語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="510e5-568">此範例會建立<xref:System.Speech.Recognition.DictationGrammar>、 將其載入至同處理序語音辨識器，並執行一項非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-569">事件處理常式的以示範辨識器會在作業期間引發的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="510e5-570">指出是否要執行一或多個辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="510e5-571">執行一項或多項非同步語音辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-572">如果`mode`是<xref:System.Speech.Recognition.RecognizeMode.Multiple>，辨識器會繼續執行直到非同步辨識作業<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="510e5-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="510e5-573">期間呼叫這個方法時，辨識器可能會引發下列事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="510e5-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="510e5-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="510e5-575">辨識器偵測到它可以將它識別為語音輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="510e5-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="510e5-577">輸入與一個使用中的文法建立模稜兩可的符合項目時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="510e5-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="510e5-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="510e5-579">辨識器終結辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="510e5-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="510e5-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="510e5-581">引發的時機<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="510e5-582">若要擷取非同步辨識作業的結果，將事件處理常式附加至辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-583">辨識器引發此事件時成功完成同步或非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-584">如果沒有成功，辨識<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>物件，您可以存取的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，將在`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="510e5-585">非同步辨識作業可能會失敗，原因如下：</span><span class="sxs-lookup"><span data-stu-id="510e5-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="510e5-586">逾時間隔到期的前未偵測到語音<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="510e5-587">偵測到語音辨識引擎，但沒有找到配對中它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="510e5-588">若要執行同步辨識，使用其中一種<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-589">下列範例示範基本的非同步語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="510e5-590">此範例會建立<xref:System.Speech.Recognition.DictationGrammar>、 將其載入至同處理序語音辨識器和執行多個非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="510e5-591">在 30 秒後，並取消非同步作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="510e5-592">事件處理常式的以示範辨識器會在作業期間引發的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-593">結束非同步辨識，而不等待目前辨識作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-594">這個方法會立即完成非同步的辨識。</span><span class="sxs-lookup"><span data-stu-id="510e5-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="510e5-595">如果目前的非同步辨識作業會接收輸入，輸入會截斷，並在作業完成的現有輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="510e5-596">辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件時的非同步作業已取消，並設定<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>至`true`。</span><span class="sxs-lookup"><span data-stu-id="510e5-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="510e5-597">這個方法會取消非同步作業所起始<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-598">若要停止非同步辨識，而不截斷輸入，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-599">下列範例會示範如何使用主控台應用程式的一部分<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="510e5-600">此範例會建立並載入 語音辨識文法、 啟始繼續非同步辨識作業，，然後暫停其取消作業之前的 2 秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="510e5-601">辨識器從檔案中，接收輸入 c:\temp\audioinput\sample.wav。</span><span class="sxs-lookup"><span data-stu-id="510e5-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="510e5-602">事件處理常式的以示範辨識器會在作業期間引發的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-603">在目前的辨識作業完成後，停止非同步辨識。</span><span class="sxs-lookup"><span data-stu-id="510e5-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-604">這個方法不截斷輸入完成非同步的辨識。</span><span class="sxs-lookup"><span data-stu-id="510e5-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="510e5-605">如果目前的非同步辨識作業接收輸入，辨識器會繼續接受輸入，直到目前的辨識作業完成。</span><span class="sxs-lookup"><span data-stu-id="510e5-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="510e5-606">辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>事件時的非同步作業已停止，並設定<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>至`true`。</span><span class="sxs-lookup"><span data-stu-id="510e5-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="510e5-607">這個方法會停止非同步作業所起始<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-608">若要立即取消非同步辨識與現有的輸入，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-609">下列範例會示範如何使用主控台應用程式的一部分<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="510e5-610">此範例會建立並載入 語音辨識文法、 啟始繼續非同步辨識作業，，然後暫停 2 秒之前它會停止作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="510e5-611">辨識器從檔案中，接收輸入 c:\temp\audioinput\sample.wav。</span><span class="sxs-lookup"><span data-stu-id="510e5-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="510e5-612">事件處理常式的以示範辨識器會在作業期間引發的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-613"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 完成非同步辨識作業時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-614"><xref:System.Speech.Recognition.SpeechRecognitionEngine>物件的<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法啟始非同步辨識作業。</span><span class="sxs-lookup"><span data-stu-id="510e5-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="510e5-615">當辨識器結束非同步作業時，會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="510e5-616">使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，您可以存取<xref:System.Speech.Recognition.RecognitionResult>中<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="510e5-617">如果沒有成功，辨識<xref:System.Speech.Recognition.RecognitionResult>將`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="510e5-618">若要判斷逾時或音訊輸入中斷造成失敗的辨識，您可以存取的屬性<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>，或<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>。</span><span class="sxs-lookup"><span data-stu-id="510e5-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="510e5-619">如需詳細資訊，請參閱 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> 類別。</span><span class="sxs-lookup"><span data-stu-id="510e5-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="510e5-620">若要取得最佳的拒絕的辨識候選項的詳細資訊，請將附加的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="510e5-621">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-622">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-623">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-624">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-624">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-625">下列範例會辨識片語這類 「 爵士類別目錄中顯示演出者清單 」 或 「 顯示專輯 gospel 」。</span><span class="sxs-lookup"><span data-stu-id="510e5-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="510e5-626">此範例會使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件，以在主控台中顯示的辨識結果的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-627">取得 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 正在處理的音訊輸入的目前位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="510e5-628">辨識器在其所處理之音訊輸入中的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-629">音訊位置會因每個語音辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="510e5-630">啟用時，會建立輸入資料流的零值。</span><span class="sxs-lookup"><span data-stu-id="510e5-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="510e5-631"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性參考<xref:System.Speech.Recognition.SpeechRecognitionEngine>其音訊的輸入中的物件的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="510e5-632">相反地，<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>屬性會參考其產生的音訊資料流中的輸入的裝置的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="510e5-633">這些位置可能會不同。</span><span class="sxs-lookup"><span data-stu-id="510e5-633">These positions can be different.</span></span> <span data-ttu-id="510e5-634">例如，如果辨識器已接收輸入它具有不尚未產生辨識結果，則值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性小於的值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-635">取得關於目前 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 執行個體的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="510e5-636">目前語音辨識器的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-637">若要取得目前系統的所有已安裝的語音辨識器的相關資訊，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-638">下列範例會取得資料目前的處理程序中的語音辨識引擎的部分清單。</span><span class="sxs-lookup"><span data-stu-id="510e5-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="510e5-639">如需詳細資訊，請參閱<xref:System.Speech.Recognition.RecognizerInfo>。</span><span class="sxs-lookup"><span data-stu-id="510e5-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-640">當執行中的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 暫停以接受修改時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-641">應用程式必須使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暫停的執行個體<xref:System.Speech.Recognition.SpeechRecognitionEngine>之前修改其設定或其<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="510e5-642"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引發這個事件時就準備好接受修改。</span><span class="sxs-lookup"><span data-stu-id="510e5-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="510e5-643">例如，雖然<xref:System.Speech.Recognition.SpeechRecognitionEngine>會暫停，您可以載入、 卸載、 啟用和停用<xref:System.Speech.Recognition.Grammar>物件，並修改值<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="510e5-644">如需詳細資訊，請參閱 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-645">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-646">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-647">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-648">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-648">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-649">下列範例示範的主控台應用程式載入和卸載<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="510e5-650">應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>要求暫停，讓它可以接收更新的語音辨識引擎的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="510e5-651">應用程式，然後載入或卸載<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="510e5-652">在每一個更新處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件寫入目前載入的狀態與名稱<xref:System.Speech.Recognition.Grammar>物件至主控台。</span><span class="sxs-lookup"><span data-stu-id="510e5-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="510e5-653">載入及卸載文法時，應用程式第一次可辨識的伺服器陣列動物名稱 動物伺服陣列的名稱和的水果，名稱然後水果的名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-654">要求辨識器暫停以更新其狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-655">若要變更同步至辨識器中使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="510e5-656">例如，如果您載入或卸載語音辨識文法辨識器正在處理的輸入時，使用這個方法和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>辨識器的狀態與同步處理您的應用程式行為的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="510e5-657">辨識器呼叫這個方法時，暫停或完成非同步作業，並產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="510e5-658">A<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件處理常式可以修改辨識作業之間的辨識器的狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="510e5-659">當處理<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，辨識器暫停，直到傳回事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="510e5-660">如果辨識器的輸入變更辨識器引發之前<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>會捨棄該要求的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="510e5-661">當呼叫此方法：</span><span class="sxs-lookup"><span data-stu-id="510e5-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="510e5-662">如果辨識器未處理的輸入，辨識器立即產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="510e5-663">如果辨識器正在處理無回應或背景噪音所組成的輸入時，辨識器暫停辨識作業，並產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="510e5-664">如果辨識器正在處理不含無回應或背景噪音的輸入時，辨識器完成辨識作業，並接著會產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="510e5-665">辨識器正在處理時<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件：</span><span class="sxs-lookup"><span data-stu-id="510e5-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="510e5-666">辨識器不會處理輸入，以及值<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性維持不變。</span><span class="sxs-lookup"><span data-stu-id="510e5-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="510e5-667">辨識器會繼續收集輸入，以及值<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>屬性可變更。</span><span class="sxs-lookup"><span data-stu-id="510e5-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-668">要求辨識器暫停以更新其狀態。</span><span class="sxs-lookup"><span data-stu-id="510e5-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-669">當辨識器產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>屬性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>是`null`。</span><span class="sxs-lookup"><span data-stu-id="510e5-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="510e5-670">若要提供使用者語彙基元，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="510e5-671">若要指定的音訊位置的位移，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-672">下列範例示範的主控台應用程式載入和卸載<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="510e5-673">應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>要求暫停，讓它可以接收更新的語音辨識引擎的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="510e5-674">應用程式，然後載入或卸載<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="510e5-675">在每一個更新處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件寫入目前載入的狀態與名稱<xref:System.Speech.Recognition.Grammar>物件至主控台。</span><span class="sxs-lookup"><span data-stu-id="510e5-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="510e5-676">載入及卸載文法時，應用程式第一次可辨識的伺服器陣列動物名稱 動物伺服陣列的名稱和的水果，名稱然後水果的名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="510e5-677">使用者定義的資訊，包含該作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="510e5-678">要求辨識器暫停以更新其狀態，並提供相關聯事件的使用者語彙基元。</span><span class="sxs-lookup"><span data-stu-id="510e5-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-679">當辨識器產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>屬性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>包含值的`userToken`參數。</span><span class="sxs-lookup"><span data-stu-id="510e5-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="510e5-680">若要指定的音訊位置的位移，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="510e5-681">使用者定義的資訊，包含該作業的資訊。</span><span class="sxs-lookup"><span data-stu-id="510e5-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="510e5-682">從目前的 <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> 起將要求延遲的位移。</span><span class="sxs-lookup"><span data-stu-id="510e5-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="510e5-683">要求辨識器暫停以更新其狀態，並提供相關聯事件的位移和使用者語彙基元。</span><span class="sxs-lookup"><span data-stu-id="510e5-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-684">辨識器不會啟動辨識器更新要求，直到辨識器<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>等於目前<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>加上`audioPositionAheadToRaiseUpdate`。</span><span class="sxs-lookup"><span data-stu-id="510e5-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="510e5-685">當辨識器產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>事件，<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>屬性<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>包含值的`userToken`參數。</span><span class="sxs-lookup"><span data-stu-id="510e5-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="510e5-686">音訊輸入資料流。</span><span class="sxs-lookup"><span data-stu-id="510e5-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="510e5-687">音訊輸入的格式。</span><span class="sxs-lookup"><span data-stu-id="510e5-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="510e5-688">設定<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />物件，以接收來自音訊資料流的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-689">如果辨識器到達輸入資料流結尾辨識作業期間，辨識作業完成與可用的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="510e5-690">任何後續的辨識作業會產生例外狀況，除非您更新辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-691">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-692">此範例使用的音訊檔案 example.wav 包含片語，從輸入 」 測試測試一個兩個三個"和"先生 cooper 」，以暫停分隔。</span><span class="sxs-lookup"><span data-stu-id="510e5-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="510e5-693">這個範例會產生下列輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-694">設定<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />物件，以接收來自預設音訊裝置的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="510e5-695">下列範例示範基本的語音辨識的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="510e5-696">此範例會使用預設音訊裝置的輸出時，會執行多個非同步辨識作業並結束時使用者 utters 例句"exit"。</span><span class="sxs-lookup"><span data-stu-id="510e5-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-697">停用語音辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-698">設定<xref:System.Speech.Recognition.SpeechRecognitionEngine>物件使用時沒有輸入<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法，或取得辨識引擎暫時離線時。</span><span class="sxs-lookup"><span data-stu-id="510e5-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="510e5-699">要做為輸入使用的檔案路徑。</span><span class="sxs-lookup"><span data-stu-id="510e5-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="510e5-700">設定<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />物件，以接收來自波形音訊格式 (.wav) 檔案的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-701">如果辨識器到達輸入的檔案結尾辨識作業期間，辨識作業完成與可用的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="510e5-702">任何後續的辨識作業會產生例外狀況，除非您更新辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-703">下列範例會辨識執行.wav 檔案中的音效，並將已辨識的文字寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="510e5-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="510e5-704">包含音訊資料的資料流。</span><span class="sxs-lookup"><span data-stu-id="510e5-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="510e5-705">設定<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />物件，以接收來自包含波形音訊格式 (.wav) 資料的資料流的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-706">如果辨識器到達輸入資料流結尾辨識作業期間，辨識作業完成與可用的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="510e5-707">任何後續的辨識作業會產生例外狀況，除非您更新辨識器的輸入。</span><span class="sxs-lookup"><span data-stu-id="510e5-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-708">當 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 偵測到可辨識為語音的輸入時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-709">每個語音辨識器的演算法來區別無回應及語音。</span><span class="sxs-lookup"><span data-stu-id="510e5-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="510e5-710">當<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行語音辨識作業，便會產生<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>當其演算法識別為語音輸入時引發事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="510e5-711"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A>屬性相關聯的<xref:System.Speech.Recognition.SpeechDetectedEventArgs>物件可指出辨識器偵測到語音輸入資料流中的位置。</span><span class="sxs-lookup"><span data-stu-id="510e5-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="510e5-712"><xref:System.Speech.Recognition.SpeechRecognitionEngine>引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>事件才會產生任何<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>，或<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="510e5-713">如需詳細資訊，請參閱<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-714">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-715">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-716">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-717">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-717">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-718">下列範例是主控台應用程式選擇來源和目的地城市班機的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="510e5-719">應用程式可辨識片語，例如 「 我想要從邁阿密飛對芝加哥 」。</span><span class="sxs-lookup"><span data-stu-id="510e5-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="510e5-720">此範例會使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>事件報告<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>偵測到每個時間語音。</span><span class="sxs-lookup"><span data-stu-id="510e5-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-721">在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 已辨識的文字可能是文法中多個完整片語的元件時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-722"><xref:System.Speech.Recognition.SpeechRecognitionEngine>會產生許多<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件，因為它會嘗試識別輸入的片語。</span><span class="sxs-lookup"><span data-stu-id="510e5-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="510e5-723">您可以存取的部分已辨識片語中的文字<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.SpeechHypothesizedEventArgs>物件中的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="510e5-724">一般而言，處理這些事件是只用於偵錯。</span><span class="sxs-lookup"><span data-stu-id="510e5-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="510e5-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> 是衍生自 <xref:System.Speech.Recognition.RecognitionEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="510e5-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="510e5-726">如需詳細資訊，請參閱<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性和<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="510e5-727">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-728">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-729">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-730">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-730">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-731">下列範例會辨識片語，例如 「 顯示演出者爵士類別目錄中的清單 」。</span><span class="sxs-lookup"><span data-stu-id="510e5-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="510e5-732">此範例會使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>事件，因為它們會辨識為在主控台顯示不完整的片語片段。</span><span class="sxs-lookup"><span data-stu-id="510e5-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-733">在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 收到的輸入不符合任何其已載入且已啟用 <see cref="T:System.Speech.Recognition.Grammar" /> 物件時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-734">辨識器引發這個事件，如果它決定輸入不符合足夠放心地它的所有載入及啟用<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="510e5-735"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>包含拒絕<xref:System.Speech.Recognition.RecognitionResult>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="510e5-736">您可以使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>事件，以擷取辨識<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>而遭到拒絕，且其<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>分數。</span><span class="sxs-lookup"><span data-stu-id="510e5-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="510e5-737">如果您的應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體，您可以修改信心層級上的語音，輸入已接受或拒絕使用其中一個<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="510e5-738">您可以修改非語音輸入使用語音辨識的回應方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="510e5-739">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-740">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-741">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-742">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-742">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-743">下列範例會辨識片語這類 「 爵士類別目錄中顯示演出者清單 」 或 「 顯示專輯 gospel 」。</span><span class="sxs-lookup"><span data-stu-id="510e5-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="510e5-744">此範例會使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>語音輸入無法對應到具有足夠的文法的內容時，主控台中顯示通知的事件<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>產生成功辨識。</span><span class="sxs-lookup"><span data-stu-id="510e5-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="510e5-745">此處理常式也會顯示辨識結果<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>，遭到拒絕因為低信心分數。</span><span class="sxs-lookup"><span data-stu-id="510e5-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="510e5-746">在 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 收到的輸入符合任何其已載入且已啟用 <see cref="T:System.Speech.Recognition.Grammar" /> 物件時引發。</span><span class="sxs-lookup"><span data-stu-id="510e5-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-747">您可以使用其中一個辨識作業來起始<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="510e5-748">辨識器引發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件，如果它決定輸入符合其載入其中一個<xref:System.Speech.Recognition.Grammar>足夠構成辨識信心層級的物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="510e5-749"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>屬性<xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>包含接受<xref:System.Speech.Recognition.RecognitionResult>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="510e5-750">處理常式的<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件可以取得已辨識的片語，以及一份辨識<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>使用較低的信心分數。</span><span class="sxs-lookup"><span data-stu-id="510e5-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="510e5-751">如果您的應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體，您可以修改信心層級上的語音，輸入已接受或拒絕使用其中一個<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="510e5-752">您可以修改非語音輸入使用語音辨識的回應方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="510e5-753">當辨識器收到符合文法中，輸入<xref:System.Speech.Recognition.Grammar>物件可以引發其<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-754"><xref:System.Speech.Recognition.Grammar>物件的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>語音辨識器之前，會引發事件<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-755">任何特定的文法特定的工作應該一律執行的處理常式所<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="510e5-756">建立 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> 委派時，必須識別處理事件的方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="510e5-757">若要使事件與您的事件處理常式產生關聯，請將委派的執行個體 (Instance) 加入至事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="510e5-758">除非您移除委派，否則每當事件發生時就會呼叫事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="510e5-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="510e5-759">如需事件處理常式委派的詳細資訊，請參閱[事件和委派](http://go.microsoft.com/fwlink/?LinkId=162418)。</span><span class="sxs-lookup"><span data-stu-id="510e5-759">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-760">下列範例會建立 語音辨識文法，建構的主控台應用程式的一部分<xref:System.Speech.Recognition.Grammar>物件，並將資料載入<xref:System.Speech.Recognition.SpeechRecognitionEngine>進行辨識。</span><span class="sxs-lookup"><span data-stu-id="510e5-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="510e5-761">此範例示範的語音輸入<xref:System.Speech.Recognition.SpeechRecognitionEngine>，相關聯的辨識結果，以及相關聯的語音辨識器所引發的事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="510e5-762">例如 「 我想要從芝加哥飛到邁阿密 」 將會觸發的語音輸入<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="510e5-763">說片語 「 飛分享從休斯頓對芝加哥 」 不會觸發<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件。</span><span class="sxs-lookup"><span data-stu-id="510e5-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="510e5-764">此範例會使用的處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件 以顯示成功辨識片語以及它們包含在主控台中的語意。</span><span class="sxs-lookup"><span data-stu-id="510e5-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="510e5-765">從辨識器卸載所有 <see cref="T:System.Speech.Recognition.Grammar" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-766">如果辨識器目前正在載入<xref:System.Speech.Recognition.Grammar>以非同步的方式，這個方法會等到<xref:System.Speech.Recognition.Grammar>載入時之前它會卸載所有,<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體。</span><span class="sxs-lookup"><span data-stu-id="510e5-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="510e5-767">若要卸除特定文法，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-768">下列範例示範同步的載入和卸載的語音辨識文法的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="510e5-769">要卸載的文法物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="510e5-770">從 <see cref="T:System.Speech.Recognition.Grammar" /> 執行個體卸載指定的 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-771">如果辨識器正在執行，應用程式必須使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>暫停<xref:System.Speech.Recognition.SpeechRecognitionEngine>前載入、 卸載、 啟用，或停用執行個體<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="510e5-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="510e5-772">若要卸載所有<xref:System.Speech.Recognition.Grammar>物件，使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-773">下列範例示範同步的載入和卸載的語音辨識文法的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-774"><paramref name="Grammar" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="510e5-775">這個辨識器未將文法載入，或這個辨識器正在以非同步方式載入文法。</span><span class="sxs-lookup"><span data-stu-id="510e5-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="510e5-776">更新辨識器的設定值。</span><span class="sxs-lookup"><span data-stu-id="510e5-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-777">辨識器設定可以包含字串、 64 位元整數或記憶體位址資料。</span><span class="sxs-lookup"><span data-stu-id="510e5-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="510e5-778">下表描述會定義 Microsoft 語音 API (SAPI) 的設定為相容的辨識器。</span><span class="sxs-lookup"><span data-stu-id="510e5-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="510e5-779">下列設定的支援設定每個辨識器必須在相同的範圍。</span><span class="sxs-lookup"><span data-stu-id="510e5-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="510e5-780">SAPI 相容的辨識器不需要支援這些設定，而且可支援其他設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="510e5-781">名稱</span><span class="sxs-lookup"><span data-stu-id="510e5-781">Name</span></span>|<span data-ttu-id="510e5-782">描述</span><span class="sxs-lookup"><span data-stu-id="510e5-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="510e5-783">指定的辨識器 CPU 耗用量。</span><span class="sxs-lookup"><span data-stu-id="510e5-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="510e5-784">範圍是從 0 到 100 之間。</span><span class="sxs-lookup"><span data-stu-id="510e5-784">The range is from 0 to 100.</span></span> <span data-ttu-id="510e5-785">預設值為 50。</span><span class="sxs-lookup"><span data-stu-id="510e5-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="510e5-786">語音辨識器完成辨識作業之前，請指出無回應的模稜兩可的輸入結尾的長度。</span><span class="sxs-lookup"><span data-stu-id="510e5-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="510e5-787">範圍是從 0 到 10000 毫秒 (ms)。</span><span class="sxs-lookup"><span data-stu-id="510e5-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="510e5-788">此設定會對應至辨識器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="510e5-789">預設值 = 150ms年。</span><span class="sxs-lookup"><span data-stu-id="510e5-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="510e5-790">語音辨識器完成辨識作業之前，請模稜兩可的輸入結尾指出無回應，以毫秒為單位 （毫秒） 的長度。</span><span class="sxs-lookup"><span data-stu-id="510e5-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="510e5-791">範圍是從 0 至 10,000。</span><span class="sxs-lookup"><span data-stu-id="510e5-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="510e5-792">此設定會對應至辨識器的<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="510e5-793">預設值 = 500 毫秒。</span><span class="sxs-lookup"><span data-stu-id="510e5-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="510e5-794">指出的柔和式模型適應是否為 ON (值 = `1`) 或 OFF (值 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="510e5-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="510e5-795">預設值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="510e5-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="510e5-796">指出背景適應是否為 ON (值 = `1`) 或 OFF (值 = `0`)，並將保存在登錄中的設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="510e5-797">預設值是`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="510e5-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="510e5-798">若要傳回其中一個辨識器的設定，請使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="510e5-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="510e5-799">除了`PersistedBackgroundAdaptation`，使用設定的屬性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法僅適用於目前的執行個體仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之後將它們還原為其預設設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="510e5-800">您可以修改非語音輸入使用語音辨識的回應方式<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="510e5-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="510e5-801">要更新之設定的名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="510e5-802">設定的新值。</span><span class="sxs-lookup"><span data-stu-id="510e5-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="510e5-803">以指定的整數值更新 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 的指定設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-804">除了`PersistedBackgroundAdaptation`，使用設定的屬性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法僅適用於目前的執行個體仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之後將它們還原為其預設設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="510e5-805">請參閱<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>如需支援設定的描述。</span><span class="sxs-lookup"><span data-stu-id="510e5-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="510e5-806">下列範例是針對支援 EN-US 地區設定，辨識器定義的設定數目的值輸出的主控台應用程式的一部分。</span><span class="sxs-lookup"><span data-stu-id="510e5-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="510e5-807">範例會更新信心層級設定，並接著會查詢辨識器檢查更新的值。</span><span class="sxs-lookup"><span data-stu-id="510e5-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="510e5-808">這個範例會產生下列輸出。</span><span class="sxs-lookup"><span data-stu-id="510e5-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-809"><paramref name="settingName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-810"><paramref name="settingName" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="510e5-811">辨識器沒有該名稱的設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="510e5-812">要更新之設定的名稱。</span><span class="sxs-lookup"><span data-stu-id="510e5-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="510e5-813">設定的新值。</span><span class="sxs-lookup"><span data-stu-id="510e5-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="510e5-814">以指定的字串值來更新指定的語音辨識引擎設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="510e5-815">除了`PersistedBackgroundAdaptation`，使用設定的屬性值<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法僅適用於目前的執行個體仍然有效<xref:System.Speech.Recognition.SpeechRecognitionEngine>之後將它們還原為其預設設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="510e5-816">請參閱<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>如需支援設定的描述。</span><span class="sxs-lookup"><span data-stu-id="510e5-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="510e5-817"><paramref name="settingName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="510e5-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="510e5-818"><paramref name="settingName" /> 為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="510e5-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="510e5-819">辨識器沒有該名稱的設定。</span><span class="sxs-lookup"><span data-stu-id="510e5-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>