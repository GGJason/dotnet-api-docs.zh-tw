<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0590aacd1e6d847c085bb5c1a57748b1e452d7fa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>執行階段物件，會參考應用程式可用來定義語音辨識條件約束的語音辨識文法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語音辨識文法是一組規則或定義 語音辨識引擎可以辨識做為輸入有意義的條件約束。 如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)，[建立文法中使用 XML](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1)，[建立文法使用 GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)，和[建立使用 SrgsGrammar 文法](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906)。  
  
 撰寫文法之後，您必須建置到<xref:System.Speech.Recognition.Grammar>物件可以載入 語音辨識引擎，並讓您的應用程式可以在執行階段用來管理 語音辨識。 您可以使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式建立<xref:System.Speech.Recognition.Grammar>的執行個體<xref:System.Speech.Recognition.GrammarBuilder>或<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>物件，或從檔案或<xref:System.IO.Stream>，包含描述的文法支援的格式。 支援的格式如下：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 文法建構函式接受其引數中的 XML 格式文法檔案編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 文法。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 應用程式的語音辨識引擎，為受管理的<xref:System.Speech.Recognition.SpeechRecognizer>或<xref:System.Speech.Recognition.SpeechRecognitionEngine>物件時，可以載入多個語音辨識文法。 應用程式可以個別啟用或停用個別的文法設定<xref:System.Speech.Recognition.Grammar.Enabled%2A>屬性，並修改透過辨識行為<xref:System.Speech.Recognition.Grammar>屬性，例如<xref:System.Speech.Recognition.Grammar.Priority%2A>和<xref:System.Speech.Recognition.Grammar.Weight%2A>屬性。  
  
 文法<xref:System.Speech.Recognition.Grammar.SpeechRecognized>輸入符合經由文法的路徑時引發事件。  
  
> [!NOTE]
>  若要驗證的任何 URI 或 DLL 用來建置安全的最佳作法是<xref:System.Speech.Recognition.Grammar>物件。  
>   
>  Windows 和語音平台提供建構應用程式的安全性<xref:System.Speech.Recognition.Grammar>從 DLL 或文法支援指令碼的執行個體。  
>   
>  在指令碼<xref:System.Speech.Recognition.Grammar>物件一律會執行，如同網頁中從下載`Internet Zone`。 Common Language Runtime (CLR) 會隔離任何可取得文法定義載入的 DLL。  
  
   
  
## Examples  
 下列範例會建構<xref:System.Speech.Recognition.Grammar>從語音辨識文法的 XML 檔案 (cities.xml) 中定義的物件。 Cities.xml 檔案的內容會出現在下列 XML 範例。  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式建立<xref:System.Speech.Recognition.Grammar>的執行個體<xref:System.Speech.Recognition.GrammarBuilder>或<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>物件，或從檔案或<xref:System.IO.Stream>，包含描述的文法支援的格式。 支援的格式如下：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 文法建構函式接受其引數中的 XML 格式文法檔案編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 文法。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 語音辨識文法可以定義根規則。 若要建立<xref:System.Speech.Recognition.Grammar>物件，指定要做為其根規則，哪一個規則使用的建構函式可接受`ruleName`參數。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>指定的基底 URI 來解析相對規則參考的物件使用的建構函式`baseUri`參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">資料流，會以支援的格式描述語音辨識文法。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，並描述不應定義需要的引數初始化處理常式。  
  
 這個建構函式可以建立<xref:System.Speech.Recognition.Grammar>從下列格式的執行個體：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 這個建構函式會編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 格式文法檔案。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 SRGS 文法可以定義根規則。 若要建立<xref:System.Speech.Recognition.Grammar>從資料流物件，指定根規則，請使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>或<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>物件從資料流，並指定要用來解析相對規則參考的基底 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列範例會從本機 SRGS 檔案 (cities.xml) 使用檔案資料流建立語音辨識文法。 Cities.xml 檔案的內容會出現下列 C# 範例。  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> 描述不包含根規則的文法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">資料流未包含有效的文法描述，或其描述的文法包含無法解析的規則參考。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <see cref="T:System.Speech.Recognition.GrammarBuilder" />的執行個體，其中包含語音辨識文法的條件約束。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 物件初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關使用<xref:System.Speech.Recognition.GrammarBuilder>類別來定義文法，請參閱[建立文法使用 GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。  
  
   
  
## Examples  
 下列範例會建立語音辨識文法使用<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件。 <xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.GrammarBuilder>物件。  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">語音辨識文法的條件約束。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 物件初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，而<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不應包含需要的引數初始化處理常式。  
  
 A<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>可以有根規則。 若要建立<xref:System.Speech.Recognition.Grammar>物件，指定根規則，使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>或<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
 若要建立語音辨識<xref:System.Speech.Recognition.Grammar>從<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>並指定要用來解析相對規則參考的基底 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列範例會建立在語音辨識文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>執行個體，然後用來建構<xref:System.Speech.Recognition.Grammar>物件。  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> 不包含根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> 包含無法解析的規則參考。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">以支援格式描述語音辨識文法之檔案的路徑。</param>
        <summary>從檔案初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，並描述不應定義需要的引數初始化處理常式。  
  
 這個建構函式可以建立<xref:System.Speech.Recognition.Grammar>從下列格式的執行個體：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 這個建構函式會編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 格式文法檔案。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 SRGS 文法可以定義根規則。 若要建立<xref:System.Speech.Recognition.Grammar>從字串物件，指定根規則，請使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>物件，指定要用來解析相對規則參考的基底 URI 檔案中開啟檔案資料流並使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType>建構函式。  
  
   
  
## Examples  
 下列範例會從本機 SRGS 檔案建置載入語音辨識文法<xref:System.Speech.Recognition.Grammar>物件。 Cities.xml 檔案的內容會出現在下列 C# 範例 XML 範例。  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 包含空字串 ("")，或者該檔案描述不包含根規則的文法。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">檔案未包含有效的描述，或其描述的文法包含無法解析的規則參考。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">資料流，會以支援的格式描述語音辨識文法。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體並指定根規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，並描述不應定義需要的引數初始化處理常式。  
  
 這個建構函式可以建立<xref:System.Speech.Recognition.Grammar>從下列格式的執行個體：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 這個建構函式會編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 格式文法檔案。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>從資料流，並指定要用來解析相對規則參考的基底 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列範例會從檔案資料流載入本機 SRGS 檔案 (cities.xml)，並指定要做為根文法的規則。 Cities.xml 檔案的內容會出現在下列 C# 範例 XML 範例。  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> 無法解析或不是公用，或者 <paramref name="ruleName" /> 是 <see langword="null" />，而且文法描述未定義根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">資料流未包含有效的描述，或其描述的文法包含無法解析的規則參考。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">語音辨識文法的條件約束。</param>
        <param name="ruleName">要當做語音辨識文法進入點的識別項，若要使用 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的預設根規則則為 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 物件初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 類別的新執行個體並指定根規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，而<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不應包含需要的引數初始化處理常式。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>並指定要用來解析相對規則參考的基底 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列範例會建立在語音辨識文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>執行個體，並指定要做為根規則文法的規則。 此範例會建構<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>執行個體，並將其載入至語音辨識引擎。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> 無法解析或不是公用，或者 <paramref name="ruleName" /> 是 <see langword="null" />，而且 <paramref name="srgsDocument" /> 不包含根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> 包含無法解析的規則參考。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">以支援格式描述語音辨識文法之檔案的路徑。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <summary>從檔案初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體並指定根規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，並描述不應定義需要的引數初始化處理常式。  
  
 這個建構函式可以建立<xref:System.Speech.Recognition.Grammar>從下列格式的執行個體：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 這個建構函式會編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 格式文法檔案。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 若要建立<xref:System.Speech.Recognition.Grammar>，指定要用來解析相對規則參考、 開啟檔案的檔案資料流和使用的基底 URI<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列範例會從檔案載入本機 SRGS 檔案 (cities.xml)，並指定要做為根文法的規則。 Cities.xml 檔案的內容會出現在下列 C# 範例 XML 範例。  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> 無法解析或不是公用，<paramref name="path" /> 是空字串 ("")，或者 <paramref name="ruleName" /> 是 <see langword="null" />，而且文法描述未定義根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">檔案未包含有效的描述，或其描述的文法包含無法解析的規則參考。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">連接到輸入/輸出物件 (包括檔案、 VisualStudio 資源和 Dll) 的 <see cref="T:System.IO.Stream" />，其中包含文法規格。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="parameters">要傳遞給初始化處理常式的參數，這個處理常式是即將建立之 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> 的進入點或根規則的 <see cref="T:System.Speech.Recognition.Grammar" /> 屬性所指定。 這個參數可以是 null。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體並指定根規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也可以指定初始設定處理常式的參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> 已連接至文法：  
  
-   不包含 <paramref name="ruleName" /> 指定的規則。  
  
-   需要不同於 <paramref name="parameters" /> 中指定的初始化參數  
  
-   包含相對規則參考，該參考無法經由文法的預設基底 <see cref="T:System.Uri" /> 規則來解析。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">資料流，會以支援的格式描述語音辨識文法。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="baseUri">在文法描述中用來解析任何相對規則參考的基底 URI，或 <see langword="null" />。</param>
        <summary>從資料流初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體，指定根規則，並定義基底統一資源識別元 (URI) 來解析相對的規則參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，並描述不應定義需要的引數初始化處理常式。  
  
 這個建構函式可以建立<xref:System.Speech.Recognition.Grammar>從下列格式的執行個體：  
  
-   符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   檔案副檔名為.cfg 換為二進位檔案的已編譯的文法  
  
 這個建構函式會編譯成二進位格式，來最佳化它們的載入和使用語音辨識引擎的 XML 格式文法檔案。 您可以減少建構所需的時間量<xref:System.Speech.Recognition.Grammar>物件從編譯的文法事先使用其中一種 XML 格式文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。  
  
 這個建構函式不會驗證`baseUri`。 不過，`LoadGrammar`方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognizer>物件擲回例外狀況，若無法解析的所有文法描述中的規則參考。 如果`baseUri`不`null`、`LoadGrammar`方法使用 URI 來解析任何規則參考，否則無法解析。 如果`baseUri`代表檔案，然後在`LoadGrammar`嘗試解析相對規則參考時，使用指定的檔案和檔案的目錄。  
  
   
  
## Examples  
 下列範例會從檔案資料流載入本機 SRGS 檔案 (shuttle.xml)。 檔案包含相對規則參考 cities.xml 檔案中的規則，指定要用來解析規則參考的基底 URI。 Shuttle.xml 和 cities.xml 檔案的內容會出現在 XML 範例，請依照下列 C# 範例。  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> 無法解析或不是公用，或者 <paramref name="ruleName" /> 是 <see langword="null" />，而且文法描述未定義根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">資料流未包含有效的描述，或其描述的文法包含無法解析的規則參考。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">
          <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />的執行個體，其中包含語音辨識文法的條件約束。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="parameters">要傳遞給初始化處理常式的參數，這個處理常式是即將建立之 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> 的進入點或根規則的 <see cref="T:System.Speech.Recognition.Grammar" /> 屬性所指定。 這個參數可以是 null。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 執行個體初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 類別的新執行個體，並指定要成為文法進入點的規則名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也可以指定初始設定處理常式的參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   包含無效值的任何參數。  
  
-   <paramref name="srgsDocument" /> 指定的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 不包含 <paramref name="ruleName" /> 所指定的規則。  
  
-   陣列參數的內容不符合任何規則之初始設定處理常式的引數。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">語音辨識文法的條件約束。</param>
        <param name="ruleName">要當做語音辨識文法進入點的識別項，若要使用 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的預設根規則則為 <see langword="null" />。</param>
        <param name="baseUri">在 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 中要用來解析任何相對規則參考的基底 URI，或 <see langword="null" />。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 物件初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 類別的新執行個體，指定根規則，並定義基底統一資源識別元 (URI) 來解析相對的規則參考。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不會讓通過任何參數的初始化處理常式，而<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不應包含需要的引數初始化處理常式。  
  
 這個建構函式不會驗證`baseUri`。 不過，`LoadGrammar`方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognizer>物件擲回例外狀況，若無法解析的所有文法描述中的規則參考。 如果`baseUri`不`null`、`LoadGrammar`方法使用 URI 來解析任何規則參考，否則無法解析。 如果`baseUri`代表檔案，然後在`LoadGrammar`方法會使用指定的檔案和檔案的目錄時，它會嘗試解析相對規則參考。  
  
   
  
## Examples  
 下列範例會建立在語音辨識文法<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>包含相對規則參考到 cities.xml 檔案，而且指定要用來解析的規則參照的 URI。 Cities.xml 檔案的內容會出現在下列 C# 範例 XML 範例。  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> 無法解析或不是公用，或者 <paramref name="ruleName" /> 是 <see langword="null" />，而且 <paramref name="srgsDocument" /> 不包含根規則。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> 包含無法解析的規則參考。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">包含文法規格之檔案 (包括 DLL) 的路徑。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="parameters">要傳遞給初始化處理常式的參數，這個處理常式是即將建立之 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> 的進入點或根規則的 <see cref="T:System.Speech.Recognition.Grammar" /> 屬性所指定。 這個參數可以是 null。</param>
        <summary>從包含文法定義的檔案中，初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體，並指定要成為文法進入點的規則名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也可以指定初始設定處理常式的參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   包含無效值的任何參數。  
  
-   <paramref name="path" /> 所指定的檔案不包含有效的文法或 <paramref name="ruleName" /> 中指定的規則。  
  
-   陣列參數的內容不符合任何規則之初始設定處理常式的引數。  
  
-   文法含有文法的預設基底 <see cref="T:System.Uri" /> 規則無法解析的相對規則參考。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">連接到輸入/輸出物件 (包括檔案、 VisualStudio 資源和 Dll) 的 <see cref="T:System.IO.Stream" />，其中包含文法規格。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="baseUri">在文法描述中用來解析任何相對規則參考的基底 URI，或 <see langword="null" />。</param>
        <param name="parameters">要傳遞給初始化處理常式的參數，這個處理常式是即將建立之 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> 的進入點或根規則的 <see cref="T:System.Speech.Recognition.Grammar" /> 屬性所指定。 這個參數可以是 null。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.Grammar" /> 類別的新執行個體 <see cref="T:System.IO.Stream" />，並指定根規則和解析相對參考的基底 URI。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也可以指定初始設定處理常式的參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   包含無效值的任何參數。  
  
-   <paramref name="stream" /> 已連接到沒有包含 <paramref name="ruleName" /> 所指定規則的文法。  
  
-   陣列參數的內容不符合任何規則之初始設定處理常式的引數。  
  
-   文法包含文法的預設基底 <see cref="T:System.Uri" /> 規則或 <paramref name="baseUri" /> 提供的 URI 所無法解析的相對規則參考。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">
          <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />的執行個體，其中包含語音辨識文法的條件約束。</param>
        <param name="ruleName">要當做語音辨識文法進入點之規則的識別項，若要使用文法描述的預設根規則則為 <see langword="null" />。</param>
        <param name="baseUri">在文法描述中用來解析任何相對規則參考的基底 URI，或 <see langword="null" />。</param>
        <param name="parameters">參數，要傳遞至 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> 屬性為即將建立的 <see cref="T:System.Speech.Recognition.Grammar" /> 進入點或根規則所指定的初始化處理常式。這個參數可能是 null。</param>
        <summary>從 <see cref="T:System.Speech.Recognition.Grammar" /> 執行個體初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 類別的新執行個體，並指定要成為文法進入點的規則名稱和解析相對參考的基底 URI。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 也可以指定初始設定處理常式的參數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   包含無效值的任何參數。  
  
-   <paramref name="srgsDocument" /> 指定的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 不包含 <paramref name="ruleName" /> 所指定的規則。  
  
-   陣列參數的內容不符合任何規則之初始設定處理常式的引數。  
  
-   文法含有文法的預設基底 <see cref="T:System.Uri" /> 規則或 <paramref name="baseUri" /> 提供的 URI 所無法解析的相對規則參考。</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值控制語音辨識器是否可以使用 <see cref="T:System.Speech.Recognition.Grammar" /> 來執行辨識。</summary>
        <value>如果語音辨識器可以使用語音辨識文法執行辨識則 <see langword="Enabled" /> 屬性會傳回 <see langword="true" />，否則這個屬性會傳回 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行個體<xref:System.Speech.Recognition.Grammar>可能必須啟用還是停用獨立於正在載入的語音辨識引擎。  
  
   
  
## Examples  
 下列範例會將資訊寫入有關<xref:System.Speech.Recognition.Grammar>物件[主控台](http://go.microsoft.com/fwlink/?LinkId=159613)。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得文法是否為強型別。</summary>
        <value>如果文法為強型別，則 <see langword="IsStg" /> 屬性會傳回 <see langword="true" />，否則屬性會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 強型別<xref:System.Speech.Recognition.Grammar>物件 (`IsStg`等於`true`) 可傳回強型別結果 （物件，而非原始文字） 用戶端應用程式。 例如，可能會傳回強型別文法<xref:System.DateTime>物件而不是可辨識的原始輸入。  
  
 您可以將程式碼附加到文法的規則實作強型別文法。 辨識引擎會處理任何指定的規則，函式做為輸入目前的部分結果、 執行相關聯的程式碼和文字資訊會變成豐富的型別物件。 這可讓用戶端若要更輕鬆地使用增強的語意檢查，支援多個文化特性中，與內部文法邏輯。  
  
 執行個體的強型別<xref:System.Speech.Recognition.Grammar>物件通常做為組件中的資源取得<xref:System.Type>的 Common Language Runtime (CLR)。 用來支援不同語言的當地語系化的類型是這類的範例<xref:System.Speech.Recognition.Grammar>物件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>強型別繼承自文法<see cref="T:System.Speech.Recognition.Grammar" />需要覆寫的預設行為<see langword="IsStg" />，這是要傳回<see langword="false" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得語音辨識器是否已經載入 <see cref="T:System.Speech.Recognition.Grammar" />。</summary>
        <value>如果參考的語音辨識文法目前已在語音辨識器中載入則 <see langword="Loaded" /> 屬性會傳回 <see langword="true" />，否則這個屬性會傳回 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次<xref:System.Speech.Recognition.Grammar>已載入，值<xref:System.Speech.Recognition.Grammar.Weight%2A>，和<xref:System.Speech.Recognition.Grammar.Priority%2A>無法變更。  
  
   
  
## Examples  
 下列範例會將資訊寫入有關<xref:System.Speech.Recognition.Grammar>物件[主控台](http://go.microsoft.com/fwlink/?LinkId=159613)。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">在組件中，為依據 <see cref="T:System.Type" /> 之物件的 <see cref="T:System.Speech.Recognition.Grammar" />。</param>
        <param name="onInitParameters">根據 <see cref="T:System.Speech.Recognition.Grammar" />，要傳遞至當地語系化物件的初始化方法的參數。 這個參數可以是 null。</param>
        <summary>
          <see langword="LoadLocalizedGrammarFromType" /> 方法會傳回衍生自 <see cref="T:System.Speech.Recognition.Grammar" /> 之 <see cref="T:System.Type" /> 物件的當地語系化執行個體。</summary>
        <returns>
          <see langword="LoadLocalizedGrammarFromType" /> 方法會根據 <see cref="T:System.Speech.Recognition.Grammar" /> 傳回有效的物件，如果發生錯誤則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當地語系化使用取得的文法`LoadLocalizedGrammarFromType`是通常強型別 (請參閱<xref:System.Speech.Recognition.Grammar.IsStg%2A>如需有關強型別文法)。 如果`onInitParameters`為 null 參考 (在 Visual Basic 中 Nothing) 的當地語系化文法應該有初始設定方法或不接受引數的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的名稱。</summary>
        <value>
          <see langword="Name" /> 屬性會傳回 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的名稱。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立兩個<xref:System.Speech.Recognition.Grammar>物件、 一個數字，一個用於分數。 指派名稱和相對加權，並且優先權，並載入同處理序語音辨識器的文法物件。 `CreateDigitsGrammar`， `CreateFractionsGrammar`，和`recognizer_SpeechRecognized`方法不如下所示。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的優先權值。</summary>
        <value>
          <see langword="Priority" /> 屬性會傳回整數值，表示特定 <see cref="T:System.Speech.Recognition.Grammar" /> 的相對優先權。 範圍介於 -128 到 127 (含)。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Priority`屬性用來選取文法，當一個以上的文法，都會產生相同的辨識結果。 如果語音辨識器有多個語音辨識文法載入並啟用符合輸入，而且比對會辨識器，從獲得最佳的結果則辨識器會使用具有最高的文法`Priority`。 文法中產生相同的辨識結果也有相同`Priority`值，則會使用辨識器的文法是未定義。  
  
   
  
## Examples  
 下列範例會建立兩個<xref:System.Speech.Recognition.Grammar>物件、 一個數字，一個用於分數。 <xref:System.Speech.Recognition.Grammar>物件指派名稱和相對加權，並且優先權，並載入同處理序語音辨識器。 `CreateDigitsGrammar`， `CreateFractionsGrammar`，和`recognizer_SpeechRecognized`方法不如下所示。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值包含已用來載入目前 <see cref="T:System.Speech.Recognition.Grammar" /> 的二進位資源的名稱。</summary>
        <value>
          <see langword="ResourceName" /> 屬性會傳回載入 <see cref="T:System.Speech.Recognition.Grammar" /> 所使用強型別文法之二進位資源的名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的根規則或進入點名稱。</summary>
        <value>
          <see langword="RuleName" /> 屬性會傳回參考語音辨識文法根規則的識別項。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構<xref:System.Speech.Recognition.Grammar>物件和設定其根規則的名稱，請使用其中一個<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式採用`ruleName`參數。  
  
 如果根規則<xref:System.Speech.Recognition.Grammar>有沒有名稱，則屬性會傳回`null`。  
  
 根規則<xref:System.Speech.Recognition.Grammar>從執行個體建構<xref:System.Speech.Recognition.GrammarBuilder>物件通常會有沒有名稱，因此<xref:System.Speech.Recognition.Grammar.RuleName%2A>傳回`null`。  
  
   
  
## Examples  
 下列範例會將資訊寫入有關<xref:System.Speech.Recognition.Grammar>物件[主控台](http://go.microsoft.com/fwlink/?LinkId=159613)。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當語音辨識器使用 <see cref="T:System.Speech.Recognition.Grammar" /> 物件執行辨識時引發。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語音辨識器也會引發`SpeechRecognized`時它會辨識輸入的事件。 <xref:System.Speech.Recognition.Grammar>物件的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>語音辨識器之前，會引發事件`SpeechRecognized`事件。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件。  
  
 任何特定的文法特定的工作永遠應該由處理常式<xref:System.Speech.Recognition.Grammar>物件的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。  
  
   
  
## Examples  
 下列範例示範如何使用事件處理常式<xref:System.Speech.Recognition.Grammar>物件的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>事件。 它將辨識結果輸出至[主控台](http://go.microsoft.com/fwlink/?LinkId=159613)。  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">要傳遞以初始化強型別文法的參數。這個參數可能是 null。</param>
        <summary>
          <see langword="StgInit" /> 方法會初始化強型別文法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 強型別<xref:System.Speech.Recognition.Grammar>物件 (`IsStg`等於`true`) 可傳回強型別結果 （物件，而非原始文字） 用戶端應用程式。 例如，可能會傳回強型別文法<xref:System.DateTime>物件而不是可辨識的原始輸入。  
  
 您可以將程式碼附加到文法的規則實作強型別文法。 辨識引擎會處理任何指定的規則，函式做為輸入目前的部分結果、 執行相關聯的程式碼和文字資訊會變成豐富的型別物件。 這可讓用戶端若要更輕鬆地使用增強的語意檢查，支援多個文化特性中，與內部文法邏輯。  
  
 執行個體的強型別<xref:System.Speech.Recognition.Grammar>物件通常做為組件中的資源取得<xref:System.Type>的 Common Language Runtime (CLR)。 用來支援不同語言的當地語系化的類型是這類的範例<xref:System.Speech.Recognition.Grammar>物件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果強型別文法需要初始化、<see langword="StgInit" />應該在建構函式或初始設定方法呼叫。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Speech.Recognition.Grammar" /> 物件的加權值。</summary>
        <value>
          <see langword="Weight" /> 屬性會傳回浮點數值，表示處理語音輸入時辨識引擎執行個體應指派給文法的相對權數。 範圍是介於 0.0 到 1.0 （含)。 預設值為 1.0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由於辨識引擎的使用複雜性**加權**，它對特定文法的效能影響不是直接的<xref:System.Speech.Recognition.Grammar.Priority%2A>。  
  
 語音辨識為加權的系統。 它會評估文法的加權、 替代文法中定義的加權和語音模型所定義之機率的組合為基礎的所有可能的辨識路徑。 語音辨識引擎會使用這些加權和機率來排名可能的替代 recognitions 組合。 文法與更高的加權會影響多個等級的辨識替代項目，比使用較低的加權的文法。  
  
 效果<xref:System.Speech.Recognition.Grammar.Weight%2A>語音辨識器上的屬性是辨識器的實作而定。 雖然<xref:System.Speech.Recognition.Grammar.Weight%2A>屬性可用來微調應用程式的語音辨識的精確度，則應僅之後控制特定的辨識環境並辨識引擎的完整資訊的診斷研究在使用。  
  
   
  
## Examples  
 下列範例會建立兩個<xref:System.Speech.Recognition.Grammar>物件、 一個數字，一個用於分數。 <xref:System.Speech.Recognition.Grammar>物件指派名稱和相對加權，並且優先權，並載入同處理序語音辨識器。 `CreateDigitsGrammar`， `CreateFractionsGrammar`，和`recognizer_SpeechRecognized`方法不如下所示。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>