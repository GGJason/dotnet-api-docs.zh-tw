<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="451bf9dafb2e50595cabe66bb83ee0cb52efc4c5" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59743320" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示語音辨識文法條件約束中的一組替代項。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Speech.Recognition.Choices>物件代表可以有數個值的其中一個片語的元件。 使用這個類別，建立從語音辨識文法時<xref:System.Speech.Recognition.GrammarBuilder>物件。  
  
 比方說，<xref:System.Speech.Recognition.Choices>物件可以代表元件*colorChoice*片語中, 」 變更色彩，以*colorChoice*"，其中可以接受的值*colorChoice* 「 紅色 」 或 「 綠色 」 或 「 藍色 」。  
  
> [!NOTE]
>  若要使用<xref:System.Speech.Recognition.Choices>物件為片語中的選擇性元件，請建立<xref:System.Speech.Recognition.Choices>物件，並將它加入至<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>物件`minRepeat`和`maxRepeat`分別設定為 0 和 1。 在說出的選擇性元件，可辨識片語包含選用元件。  
  
 <xref:System.Speech.Recognition.Choices>類別可做為相同的函式`one-of`所定義的 XML 項目[語音辨識文法規格 (SRGS) Version 1.0](https://www.w3.org/TR/speech-grammar/)類似<xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>類別<xref:System.Speech.Recognition.SrgsGrammar>命名空間。  
  
 如需有關如何定義語音辨識文法的詳細資訊，請參閱 <<c0> [ 語音辨識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))並[建立 GrammarBuilder 文法](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。  
  
   
  
## Examples  
 下列範例會建立語音辨識文法的片語，「 若要設定背景*colorChoice*"，其中*colorChoice*可以是其中一個已定義的色彩。 <xref:System.Speech.Recognition.GrammarBuilder>用來定義文法的條件約束。  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">語音辨識文法規格 (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.Choices" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以建構<xref:System.Speech.Recognition.Choices>物件使用的預設建構函式 （它會傳回空的物件），從一組<xref:System.String>物件，或從一組<xref:System.Speech.Recognition.GrammarBuilder>物件。  
  
 因為<xref:System.Speech.Recognition.GrammarBuilder>物件支援隱含轉換<xref:System.Speech.Recognition.SemanticResultValue>並<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.Choices>可以從使用轉換這些物件的陣列建構。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Speech.Recognition.Choices>物件，以建立兩個替代項目清單。  
  
 第一個<xref:System.Speech.Recognition.Choices>物件從陣列建構<xref:System.String>物件。 另<xref:System.Speech.Recognition.Choices>物件從陣列建構<xref:System.Speech.Recognition.GrammarBuilder>物件隱含轉換的轉換。  
  
 此範例會使用<xref:System.Speech.Recognition.GrammarBuilder>物件來組合片語時，使用<xref:System.Speech.Recognition.Choices>物件和兩個其他字串，可用來辨識語音形式所輸入的 「 呼叫 [contactlList] [phoneType] 電話 」，例如"在行動電話上的呼叫 Jane"。  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化包含空的替代項目集合之 <see cref="T:System.Speech.Recognition.Choices" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式傳回的替代項目有效，空集合。 您可以加入其他使用任一<xref:System.Speech.Recognition.Choices.Add%2A>方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，以建立可用來辨識語音輸入，例如 「 她的儲存格上的呼叫 Anne"和"呼叫 James 在他的公司電話"片語。 此範例會使用隱含的轉換，從<xref:System.Speech.Recognition.Choices>並<xref:System.String>至<xref:System.Speech.Recognition.GrammarBuilder>。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">包含選項組合的陣列。</param>
        <summary>從包含一或多個 <see cref="T:System.Speech.Recognition.Choices" /> 物件的陣列，初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個<xref:System.Speech.Recognition.GrammarBuilder>在`alternateChoices`定義有一個替代方法。 如果`alternateChoices`是空的陣列，建構函式會傳回空集合的替代項目。 您可以加入其他使用任一<xref:System.Speech.Recognition.Choices.Add%2A>方法。  
  
 建構函式會擲回<xref:System.ArgumentNullException>時`alternateChoices`是`null`或任何陣列項目時`null`。  
  
 因為<xref:System.Speech.Recognition.GrammarBuilder>類別會提供支援的隱含轉換<xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultValue>，和<xref:System.Speech.Recognition.SemanticResultKey>物件新增至<xref:System.Speech.Recognition.GrammarBuilder>執行個體，藉由正確使用轉換 （cast），這個建構函式也可用來建立<xref:System.Speech.Recognition.Choices>從清單中的任何組合，這些物件的物件。  
  
   
  
## Examples  
 下列範例會使用`Choices`並<xref:System.Speech.Recognition.GrammarBuilder>物件，以建立<xref:System.Speech.Recognition.Grammar>等，」 她的儲存格上的呼叫 Anne""在他的公司電話上呼叫 James"片語。 此範例會使用隱含的轉換，從`Choices`並<xref:System.String>至<xref:System.Speech.Recognition.GrammarBuilder>。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">包含選項組合的陣列。</param>
        <summary>從包含一或多個 <see cref="T:System.Speech.Recognition.Choices" /> 物件的陣列，初始化 <see cref="T:System.String" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個<xref:System.String>在`phrases`定義有一個替代方法。 語音辨識引擎可以使用字串陣列中任何一個項目，來比對語音輸入。 如果`phrases`是空的陣列，建構函式會傳回空集合的替代項目。 您可以加入其他使用任一<xref:System.Speech.Recognition.Choices.Add%2A>方法。  
  
 建構函式會擲回<xref:System.ArgumentNullException>時`phrases`是`null`或任何陣列元素為`null`。 建構函式會擲回<xref:System.ArgumentException>陣列中的任何項目是否為空字串 ("")。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Speech.Recognition.Choices>並<xref:System.Speech.Recognition.GrammarBuilder>物件，以建立<xref:System.Speech.Recognition.Grammar>等，」 她的儲存格上的呼叫 Anne""在他的公司電話上呼叫 James"片語。 此範例會使用隱含的轉換，從`Choices`並<xref:System.String>至<xref:System.Speech.Recognition.GrammarBuilder>。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將項目加入至選項組合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">要加入至這個 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件的 <see cref="T:System.Speech.Recognition.Choices" /> 物件。</param>
        <summary>將陣列（其中包含一或多個<see cref="T:System.Speech.Recognition.GrammarBuilder" />物件）加入至選項組合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為隱含轉換的支援<xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>，並<xref:System.Speech.Recognition.SemanticResultValue>物件新增至<xref:System.Speech.Recognition.GrammarBuilder>，這三個類別可能會加入<xref:System.Speech.Recognition.Choices>執行個體。  
  
 如果`alternateChoices`是空的陣列，這個方法不會更新組替代項目。  
  
 應用程式可以同時使用<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29>並<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>新增的替代方案<xref:System.Speech.Recognition.Choices>物件。  
  
 這個方法會擲回<xref:System.ArgumentNullException>時`alternateChoices`是`null`或任何陣列元素為`null`。  
  
   
  
## Examples  
 下列範例會建立語音辨識文法，例如 「 她的儲存格上的呼叫 Anne"和"呼叫 James 在他的公司電話"片語。 此範例會使用這兩個多載<xref:System.Speech.Recognition.Choices.Add%2A>方法來建置文法。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">要加入至這個 <see cref="T:System.Speech.Recognition.Choices" /> 物件的字串。</param>
        <summary>將陣列（其中包含一或多個<see cref="T:System.String" />物件）加入至選項組合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式可以同時使用<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29>並<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>新增的替代方案<xref:System.Speech.Recognition.Choices>物件。  
  
 如果`phrases`是空的陣列，這個方法不會更新的替代項目集合。  
  
 這個方法會擲回<xref:System.ArgumentNullException>時`phrases`是`null`或任何陣列元素為`null`。 這個方法會擲回<xref:System.ArgumentException>陣列中的任何項目是否為空字串 ("")。  
  
   
  
## Examples  
 下列範例會建立類似於 「 她的儲存格上的呼叫 Anne"和"呼叫 James 在他的公司電話"片語的語音辨識文法。 此範例會使用這兩個多載<xref:System.Speech.Recognition.Choices.Add%2A>方法來建置文法。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從這個 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件傳回 <see cref="T:System.Speech.Recognition.Choices" /> 物件。</summary>
        <returns>符合這個 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件的 <see cref="T:System.Speech.Recognition.Choices" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder>傳回由這個方法相當於一個傳回下列其中一項。  
  
-   呼叫<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>與這個物件做為參數的建構函式。  
  
-   這個物件使用隱含或明確轉換<xref:System.Speech.Recognition.GrammarBuilder>。  
  
   
  
## Examples  
 下列範例會建立變更的背景色彩的語音辨識文法。  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>