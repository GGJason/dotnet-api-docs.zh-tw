<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ebc01-101">提供以程式設計的方式建置語音辨識文法條件約束的機制。</span><span class="sxs-lookup"><span data-stu-id="ebc01-101">Provides a mechanism for programmatically building the constraints for a speech recognition grammar.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-102">中所定義的 XML 格式通常編寫的語音辨識文法[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-102">Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761).</span></span> <span data-ttu-id="ebc01-103">如果您熟悉 SRGS 但想要以程式設計方式產生文法，您可以使用<xref:System.Speech.Recognition.SrgsGrammar>命名空間，其成員緊密地對應至的元素和 SRGS 所定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-103">If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS.</span></span> <span data-ttu-id="ebc01-104">如果您不熟悉 SRGS，或您想要撰寫的文法與您可以有效率地完成許多常見的案例; 的輕量型、 程式設計的方式您可以使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>類別。</span><span class="sxs-lookup"><span data-stu-id="ebc01-104">If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> classes.</span></span>  
  
 <span data-ttu-id="ebc01-105">使用<xref:System.Speech.Recognition.GrammarBuilder>物件來建立階層式樹狀結構所組成<xref:System.Speech.Recognition.Choices>回包含替代片語穿插前序編碼和後置 amble 片語，每個節點，並具有可傳達意義的語意值植入的物件應用程式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-105">Use <xref:System.Speech.Recognition.GrammarBuilder> objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.</span></span>  
  
 <span data-ttu-id="ebc01-106">若要使用<xref:System.Speech.Recognition.GrammarBuilder>建立<xref:System.Speech.Recognition.Grammar>物件，請使用下列步驟。</span><span class="sxs-lookup"><span data-stu-id="ebc01-106">To use a <xref:System.Speech.Recognition.GrammarBuilder> to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.</span></span>  
  
1.  <span data-ttu-id="ebc01-107">建立 <xref:System.Speech.Recognition.GrammarBuilder> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-107">Create a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
2.  <span data-ttu-id="ebc01-108">新增條件約束，以<xref:System.Speech.Recognition.GrammarBuilder>，例如<xref:System.String>物件<xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.DictationGrammar>，和其他<xref:System.Speech.Recognition.GrammarBuilder>定義文法的條件約束的物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-108">Append constraints to the <xref:System.Speech.Recognition.GrammarBuilder>, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other <xref:System.Speech.Recognition.GrammarBuilder> objects that define the constraints for the grammar.</span></span>  
  
3.  <span data-ttu-id="ebc01-109">使用其中一種<xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式來建立<xref:System.Speech.Recognition.Grammar>物件從已完成<xref:System.Speech.Recognition.GrammarBuilder>文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-109">Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder> grammar.</span></span>  
  
 <span data-ttu-id="ebc01-110">撰寫<xref:System.Speech.Recognition.GrammarBuilder>最適用於清單或可能是清單的清單，其中包含的單一規則的文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-110">Authoring with <xref:System.Speech.Recognition.GrammarBuilder> is best suited to grammars that have a single rule containing lists, or perhaps lists of lists.</span></span> <span data-ttu-id="ebc01-111">若要以程式設計方式建置包含多個規則，或需要的內部規則參考的文法，使用的類別<xref:System.Speech.Recognition.SrgsGrammar>命名空間。</span><span class="sxs-lookup"><span data-stu-id="ebc01-111">To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.</span></span>  
  
 <span data-ttu-id="ebc01-112">執行個體<xref:System.Speech.Recognition.GrammarBuilder>也由某些其他類別的隱含地轉換或合併來取得<xref:System.Speech.Recognition.GrammarBuilder>與第二個物件，其中包含條件約束的文法...</span><span class="sxs-lookup"><span data-stu-id="ebc01-112">Instances of <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained by implicit conversions from certain other classes or by combining a  <xref:System.Speech.Recognition.GrammarBuilder> with a second object that contains constraints for a grammar..</span></span> <span data-ttu-id="ebc01-113">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子和<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-113">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.</span></span>  
  
 <span data-ttu-id="ebc01-114">若要將規則加入至現有<xref:System.Speech.Recognition.GrammarBuilder>，使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-114">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-115">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-115">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-116">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-116">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-117">若要協助偵錯，<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>屬性會傳回目前的狀態<xref:System.Speech.Recognition.GrammarBuilder>做為字串。</span><span class="sxs-lookup"><span data-stu-id="ebc01-117">To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the <xref:System.Speech.Recognition.GrammarBuilder> as a string.</span></span>  
  
 <span data-ttu-id="ebc01-118">如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-118">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-119">下列範例會使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件來建構可辨識其中兩個句子，文法 」 讓背景*colorChoice*」 或 「 設背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="ebc01-119">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="ebc01-120">此範例會使用<xref:System.Speech.Recognition.Choices>物件以建立一份可接受的值*colorChoice*陣列<xref:System.String>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-120">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="ebc01-121">A<xref:System.Speech.Recognition.Choices>物件相當於`one-of`SRGS 規格中的項目與包含一組替代的片語，任何一項都可以時的語音辨識。</span><span class="sxs-lookup"><span data-stu-id="ebc01-121">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="ebc01-122">此範例也會使用<xref:System.Speech.Recognition.Choices>物件來群組兩個陣列<xref:System.Speech.Recognition.GrammarBuilder>物件到一組的替代結果文法可辨識的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-122">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="ebc01-123">另一個單字或片語是大部分的文法的元件和<xref:System.Speech.Recognition.Choices>物件會提供這項功能的文法建構<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-123">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="ebc01-124">此範例會最後建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.GrammarBuilder>從建構<xref:System.Speech.Recognition.Choices>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-124">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-125">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-125">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-126">這個類別的執行個體也可以取得自其他類別的隱含轉換或合併<xref:System.Speech.Recognition.GrammarBuilder>從新的第二個物件具有物件<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-126">Instances of this class can also be obtained by implicit conversions from other classes or by combining a <xref:System.Speech.Recognition.GrammarBuilder> object with a second object to from a new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-127">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-127">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods.</span></span>  
  
 <span data-ttu-id="ebc01-128">若要加入至現有的條件約束<xref:System.Speech.Recognition.GrammarBuilder>，使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法，而<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-128">To add constraints to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-129">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-129">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-130">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-130">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-131">如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-131">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebc01-132">初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新的空執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-132">Initializes a new, empty instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-133">若要將規則加入至現有<xref:System.Speech.Recognition.GrammarBuilder>物件，請使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法，而<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-133">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-134">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-134">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-135">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-135">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-136">下列範例會使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件來建構可辨識其中兩個句子，文法 」 讓背景*colorChoice*」 或 「 設背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="ebc01-136">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="ebc01-137">此範例會使用<xref:System.Speech.Recognition.Choices>物件以建立一份可接受的值*colorChoice*陣列<xref:System.String>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-137">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="ebc01-138">A<xref:System.Speech.Recognition.Choices>物件相當於`one-of`SRGS 規格中的項目和包含替代的片語，其中任何可以辨識時說出一組。</span><span class="sxs-lookup"><span data-stu-id="ebc01-138">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken.</span></span> <span data-ttu-id="ebc01-139">此範例也會使用<xref:System.Speech.Recognition.Choices>物件來群組兩個陣列<xref:System.Speech.Recognition.GrammarBuilder>物件到一組的替代結果文法可辨識的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-139">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="ebc01-140">另一個單字或片語是大部分的文法的元件和<xref:System.Speech.Recognition.Choices>物件會提供這項功能的文法建構<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-140">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="ebc01-141">此範例會最後建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.GrammarBuilder>從建構<xref:System.Speech.Recognition.Choices>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-141">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="ebc01-142">替代方式的集合。</span><span class="sxs-lookup"><span data-stu-id="ebc01-142">The set of alternatives.</span></span></param>
        <summary><span data-ttu-id="ebc01-143">從一組替代項目初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-143">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a set of alternatives.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-144">如需建置包含替代項目語音辨識文法的詳細資訊，請參閱[使用選項來建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-144">For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-145">下列範例會使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件來建構可辨識其中兩個句子，文法 」 讓背景*colorChoice*」 或 「 設背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="ebc01-145">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="ebc01-146">此範例會使用<xref:System.Speech.Recognition.Choices>物件以建立一份可接受的值*colorChoice*陣列<xref:System.String>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-146">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="ebc01-147">A<xref:System.Speech.Recognition.Choices>物件相當於`one-of`SRGS 規格中的項目與包含一組替代的片語，任何一項都可以時的語音辨識。</span><span class="sxs-lookup"><span data-stu-id="ebc01-147">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="ebc01-148">此範例也會使用<xref:System.Speech.Recognition.Choices>物件來群組兩個陣列<xref:System.Speech.Recognition.GrammarBuilder>物件到一組的替代結果文法可辨識的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-148">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="ebc01-149">另一個單字或片語是大部分的文法的元件和<xref:System.Speech.Recognition.Choices>物件會提供這項功能的文法建構<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-149">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="ebc01-150">此範例會最後建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.GrammarBuilder>從建構<xref:System.Speech.Recognition.Choices>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-150">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ebc01-151">語意索引鍵。</span><span class="sxs-lookup"><span data-stu-id="ebc01-151">The semantic key.</span></span></param>
        <summary><span data-ttu-id="ebc01-152">從語意索引鍵初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-152">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-153">當您建立<xref:System.Speech.Recognition.GrammarBuilder>的執行個體<xref:System.Speech.Recognition.SemanticResultValue>物件，可以辨識結果中傳回的文法中加入的語意資訊。</span><span class="sxs-lookup"><span data-stu-id="ebc01-153">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="ebc01-154">您可以存取辨識使用結果中的語意資訊<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>，它位在的處理常式`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-154">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="ebc01-155">如果<xref:System.Speech.Recognition.GrammarBuilder>定義<xref:System.Speech.Recognition.SemanticResultKey>，這可以用來擷取索引鍵相關聯的辨識結果中語意資訊。</span><span class="sxs-lookup"><span data-stu-id="ebc01-155">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="ebc01-156">請參閱範例的<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，並參閱<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-156">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-157">當您建構<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-157">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-158">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-158">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-159">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-159">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-160">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*colorChoice*」 和 「 設背景*colorChoice*"，其中*colorChoice*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-160">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-161">文法可讓使用者說出任何的數個色彩的名稱，並可辨識的色彩名稱的語意資訊傳回給應用程式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-161">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="ebc01-162">此範例會使用單一<xref:System.Speech.Recognition.SemanticResultKey>與您可以擷取<xref:System.Speech.Recognition.SemanticValue>，是由使用者說出的色彩與相關聯。</span><span class="sxs-lookup"><span data-stu-id="ebc01-162">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="ebc01-163">例如，如果輸入包含片語，「 設定背景為紅色，」 辨識結果包含"#FF0000 」，您可以擷取使用的處理常式的語意值`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-163">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="ebc01-164">此範例會使用<xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和<xref:System.Speech.Recognition.GrammarBuilder>物件來建立包含過去的條件約束<xref:System.Speech.Recognition.GrammarBuilder>物件`bothPhrases`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-164">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="ebc01-165">最後，此範例會建構<xref:System.Speech.Recognition.Grammar>物件從已完成<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-165">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ebc01-166">語意值或名稱/值組。</span><span class="sxs-lookup"><span data-stu-id="ebc01-166">The semantic value or name/value pair.</span></span></param>
        <summary><span data-ttu-id="ebc01-167">從語意值初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-167">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-168">當您建立<xref:System.Speech.Recognition.GrammarBuilder>的執行個體<xref:System.Speech.Recognition.SemanticResultValue>物件，可以辨識結果中傳回的文法中加入的語意資訊。</span><span class="sxs-lookup"><span data-stu-id="ebc01-168">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="ebc01-169">您可以存取辨識使用結果中的語意資訊<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>，它位在的處理常式`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-169">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="ebc01-170">如果<xref:System.Speech.Recognition.GrammarBuilder>定義<xref:System.Speech.Recognition.SemanticResultKey>，這可以用來擷取索引鍵相關聯的辨識結果中語意資訊。</span><span class="sxs-lookup"><span data-stu-id="ebc01-170">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="ebc01-171">請參閱範例的<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，並參閱<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-171">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-172">當您建構<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-172">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-173">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-173">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-174">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-174">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-175">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*colorChoice*」 和 「 設背景*colorChoice*"，其中*colorChoice*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-175">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-176">文法可讓使用者說出任何的數個色彩的名稱，並可辨識的色彩名稱的語意資訊傳回給應用程式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-176">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="ebc01-177">此範例會使用單一<xref:System.Speech.Recognition.SemanticResultKey>與您可以擷取<xref:System.Speech.Recognition.SemanticValue>，是由使用者說出的色彩與相關聯。</span><span class="sxs-lookup"><span data-stu-id="ebc01-177">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="ebc01-178">例如，如果輸入包含片語，「 設定背景為紅色，」 辨識結果包含"#FF0000 」，您可以擷取使用的處理常式的語意值`SpeechRecognized`事件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-178">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="ebc01-179">此範例會使用<xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和<xref:System.Speech.Recognition.GrammarBuilder>物件來建立包含過去的條件約束<xref:System.Speech.Recognition.GrammarBuilder>物件`bothPhrases`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-179">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="ebc01-180">最後，此範例會建構<xref:System.Speech.Recognition.Grammar>物件從已完成<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-180">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-181">單字序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-181">The sequence of words.</span></span></param>
        <summary><span data-ttu-id="ebc01-182">從單字序列初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-182">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-183">片語表示完全相符的語音的片語可辨識語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-183">The phrase represents an exact spoken phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="ebc01-184">如需建置包含字串的語音辨識文法的詳細資訊，請參閱[使用字串來建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-184">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-185">下列範例會使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件來建構可辨識其中兩個句子，文法 」 讓背景*colorChoice*」 或 「 設背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="ebc01-185">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="ebc01-186">建立一份可接受的值之後*colorChoice*使用<xref:System.Speech.Recognition.Choices>物件，此範例會初始化兩個<xref:System.Speech.Recognition.GrammarBuilder>物件`makePhrase`和`setPhrase`，使用字串做為引數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-186">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.</span></span>  
  
 <span data-ttu-id="ebc01-187">此範例會最後建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.Choices>物件轉型成<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-187">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-188">單字序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-188">The sequence of words.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="ebc01-189">語音辨識文法用來辨識片語的比對模式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-189">The matching mode the speech recognition grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="ebc01-190">針對單字序列的子集，初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-190">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class for a subset of a sequence of words.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-191">`phrase`參數所代表的語音辨識文法可辨識的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-191">The `phrase` parameter represents the phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="ebc01-192">`subsetMatchingMode`參數會指定可以播放達到整個片語的成功辨識片語的子集。</span><span class="sxs-lookup"><span data-stu-id="ebc01-192">The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase.</span></span> <span data-ttu-id="ebc01-193">您可以使用此文法建立的項目具有長名稱，而不需要使用者能夠暢所欲言整個符合項目名稱的清單。</span><span class="sxs-lookup"><span data-stu-id="ebc01-193">You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.</span></span>  
  
 <span data-ttu-id="ebc01-194">如需比對模式的詳細資訊，請參閱<xref:System.Speech.Recognition.SubsetMatchingMode>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-194">For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>.</span></span> <span data-ttu-id="ebc01-195">如需建置包含字串的語音辨識文法的詳細資訊，請參閱[使用字串來建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-195">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-196">下列範例會建立每個語音辨識文法<xref:System.Speech.Recognition.SubsetMatchingMode>值和比對的模式文法之間選擇的文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-196">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars.</span></span> <span data-ttu-id="ebc01-197">如果的值`phrase`是"一個兩個三個四個五個六個七個"，然後序列文法會辨識輸入"兩個三個四個"，但不是輸入"一個三個五個"。</span><span class="sxs-lookup"><span data-stu-id="ebc01-197">If the value of `phrase` is "one two three four five six seven", then the Subsequence grammar recognizes the input "two three four", but not the input "one three five".</span></span> <span data-ttu-id="ebc01-198">但是，排序子集文法辨認這兩個這些輸入。</span><span class="sxs-lookup"><span data-stu-id="ebc01-198">However, the Ordered Subset grammar recognizes both of these inputs.</span></span>  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-199">重複的項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-199">The repeated element.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="ebc01-200">為構成相符項目，輸入必須和 <c>builder</c> 所定義的項目比對相符的最少次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-200">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="ebc01-201">為構成相符項目，輸入可以和 <c>builder</c> 所定義的項目比對相符的最大次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-201">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="ebc01-202">從重複的項目初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-202">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a repeated element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-203">如果值`minRepeat`是 0，則新<xref:System.Speech.Recognition.GrammarBuilder>表示選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-203">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="ebc01-204">值`minRepeat`必須大於或等於 0 且小於或等於值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-204">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-205">當您指定的重複<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立具有相同索引鍵的名稱或多個語意的項目可以重複修改語意的重複項目<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-205">When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-206">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-206">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-207">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-207">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-208">下列範例會建立訂購披薩語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-208">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="ebc01-209">它會與選擇性、 開啟的片語，後面接著一到四個配料啟動，並關閉 「 披薩"這個字。</span><span class="sxs-lookup"><span data-stu-id="ebc01-209">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-210">單字的重複序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-210">The repeated sequence of words.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="ebc01-211">為構成相符項目，輸入必須和片語比對相符的最少次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-211">The minimum number of times that input matching the phrase must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="ebc01-212">為構成相符項目，輸入可以和片語比對相符的最大次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-212">The maximum number of times that input matching the phrase can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="ebc01-213">從 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 中的單字序列，初始化 <see cref="T:System.String" /> 類別的新執行個體，並指定 <see cref="T:System.String" /> 可重複次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-213">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from the sequence of words in a <see cref="T:System.String" /> and specifies how many times the <see cref="T:System.String" /> can be repeated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-214">如果值`minRepeat`是 0，則新<xref:System.Speech.Recognition.GrammarBuilder>表示選擇性的項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-214">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="ebc01-215">值`minRepeat`必須大於或等於 0 且小於或等於值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-215">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span> <span data-ttu-id="ebc01-216">如需建置包含字串的語音辨識文法的詳細資訊，請參閱[使用字串來建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-216">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-217">下列範例會建立訂購披薩語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-217">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="ebc01-218">它會與選擇性、 開啟的片語，後面接著一到四個配料啟動，並關閉 「 披薩"這個字。</span><span class="sxs-lookup"><span data-stu-id="ebc01-218">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-219">建立新的<see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含兩個文法項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-219">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-220">靜態<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法提供您可以結合各種類型建立多樣性和以建置彈性在文法中的另一個機制<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-220">The static <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods provide another mechanism by which you can combine various types to create diversity and flexibility in grammars built with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-221">這些方法會對應至靜態<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>方法，也會定義於<xref:System.Speech.Recognition.GrammarBuilder>類別。</span><span class="sxs-lookup"><span data-stu-id="ebc01-221">These methods correspond to the static <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods, which are also defined on the <xref:System.Speech.Recognition.GrammarBuilder> class.</span></span> <span data-ttu-id="ebc01-222">參數的順序會決定項目的順序，在新<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-222">The order of the parameters determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="ebc01-223">A<xref:System.Speech.Recognition.GrammarBuilder>也可從取得<xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>，和[字串](http://go.microsoft.com/fwlink/?LinkId=159733)物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-223">A <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and [String](http://go.microsoft.com/fwlink/?LinkId=159733) objects.</span></span> <span data-ttu-id="ebc01-224">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-224">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-225">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-225">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-226">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-226">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-227">如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-227">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="ebc01-228">第一個文法項目，代表一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-228">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="ebc01-229">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-229">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-230">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含 <see cref="T:System.Speech.Recognition.Choices" /> 物件，後面緊接著 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-230">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-231"><see cref="T:System.Speech.Recognition.GrammarBuilder" />，適用於 <paramref name="choices" /> 項目後面緊接著 <paramref name="builder" /> 項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-231">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-232"><xref:System.Speech.Recognition.GrammarBuilder> 支援隱含轉換，從下列類別：</span><span class="sxs-lookup"><span data-stu-id="ebc01-232"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-233">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-233">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="ebc01-234">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-234">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-235">當您結合<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-235">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-236">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-236">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-237">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[新增語意 GrammarBuilder 文法](https://msdn.microsoft.com/library/hh361581.aspx)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-237">For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-238">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-238">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="ebc01-239">第二個文法項目，這表示一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-239">The second grammar element, which represents a set of alternatives.</span></span></param>
        <summary><span data-ttu-id="ebc01-240">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件，後面緊接著 <see cref="T:System.Speech.Recognition.Choices" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-240">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-241"><see cref="T:System.Speech.Recognition.GrammarBuilder" />，適用於 <paramref name="builder" /> 項目後面緊接著 <paramref name="choices" /> 項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-241">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="choices" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-242"><xref:System.Speech.Recognition.GrammarBuilder> 支援隱含轉換，從下列類別：</span><span class="sxs-lookup"><span data-stu-id="ebc01-242"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-243">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-243">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="ebc01-244">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-244">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-245">當您結合<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體與其他文法項目，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目無法重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-245">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-246">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-246">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-247">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-247">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-248">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-248">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-249">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-249">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="ebc01-250">呼叫中的明確轉換運算子<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>是選擇性的方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-250">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="ebc01-251">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-251">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="ebc01-252">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-252">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-253">建立新的<see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含兩個 <see cref="T:System.Speech.Recognition.GrammarBuilder" />物件的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-253">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="ebc01-254"><see cref="T:System.Speech.Recognition.GrammarBuilder" />，適用於 <paramref name="builder1" /> 項目後面緊接著 <paramref name="builder2" /> 項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-254">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> element followed by the <paramref name="builder2" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-255"><xref:System.Speech.Recognition.GrammarBuilder> 支援隱含轉換，從下列類別：</span><span class="sxs-lookup"><span data-stu-id="ebc01-255"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-256">這個方法會接受針對上列物件`builder1`或`builder2`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-256">This method accepts the objects listed above for the `builder1` or `builder2` parameter.</span></span>  
  
 <span data-ttu-id="ebc01-257">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-257">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-258">當您結合<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體與其他文法項目，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目無法重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-258">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-259">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-259">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-260">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-260">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-261">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-261">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-262">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-262">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="ebc01-263">呼叫中的明確轉換運算子<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>是選擇性的方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-263">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-264">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-264">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="ebc01-265">第二個文法項目，這表示文字的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-265">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="ebc01-266">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含後面接著片語的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-266">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="ebc01-267"><see cref="T:System.Speech.Recognition.GrammarBuilder" />，適用於 <paramref name="builder" /> 項目後面緊接著 <paramref name="phrase" /> 項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-267">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="phrase" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-268"><xref:System.Speech.Recognition.GrammarBuilder> 支援隱含轉換，從下列類別：</span><span class="sxs-lookup"><span data-stu-id="ebc01-268"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-269">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-269">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="ebc01-270">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-270">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-271">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-271">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-272">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-272">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="ebc01-273">呼叫中的明確轉換運算子<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>是選擇性的方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-273">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-274">第一個文法項目，這表示文字的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-274">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="ebc01-275">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-275">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-276">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含後面接著 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-276">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-277"><see cref="T:System.Speech.Recognition.GrammarBuilder" />，適用於 <paramref name="phrase" /> 項目後面緊接著 <paramref name="builder" /> 項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-277">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> element followed by the <paramref name="builder" /> element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-278"><xref:System.Speech.Recognition.GrammarBuilder> 支援隱含轉換，從下列類別：</span><span class="sxs-lookup"><span data-stu-id="ebc01-278"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-279">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-279">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="ebc01-280">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-280">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-281">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-281">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-282">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-282">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="ebc01-283">呼叫中的明確轉換運算子<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>是選擇性的方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-283">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-284">將文法項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-284">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-285">使用這些方法來將文法項目附加至現有<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-285">Use these methods to append grammar elements to an existing <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-286">當您建立文法項目，您可以將它們附加至現有的產生器來漸進開發 語音辨識文法的條件約束。</span><span class="sxs-lookup"><span data-stu-id="ebc01-286">As you create grammar elements, you can append them to the existing builder to progressively develop the constraints for a speech recognition grammar.</span></span> <span data-ttu-id="ebc01-287">每個項目會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-287">Each element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="ebc01-288">這個方法有多載，以便附加<xref:System.Speech.Recognition.GrammarBuilder>， <xref:System.String>， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>，和<xref:System.Speech.Recognition.SemanticResultValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-288">This method has overloads for appending <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-289">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-289">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-290">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-290">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-291">如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-291">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices"><span data-ttu-id="ebc01-292">要附加的一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-292">The set of alternatives to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-293">將一組替代項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-293">Appends a set of alternatives to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-294">`alternateChoices` 會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-294">`alternateChoices` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-295">當您附加<xref:System.Speech.Recognition.Choices>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體來<xref:System.Speech.Recognition.GrammarBuilder>物件，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個可能重複的語意元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-295">When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-296">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-296">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-297">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-297">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-298">下列範例會建立片語，例如"呼叫 James 工作 」 和 「 呼叫 Anne 在其行動電話上的，「 語音辨識文法 「 電話 」 這個字是選擇性的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-298">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="ebc01-299">此範例強調使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-299">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-300">要附加的文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-300">The grammar element to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-301">將文法項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-301">Appends a grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-302">`builder` 會加入至目前的文法項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-302">`builder` is added to the end of the current sequence of grammar elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ebc01-303">當您附加<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體來<xref:System.Speech.Recognition.GrammarBuilder>物件，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個可能重複的語意元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-303">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-304">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-304">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-305">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-305">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-306">下列範例會建立片語，例如"呼叫 James 工作 」 和 「 呼叫 Anne 在其行動電話上的，「 語音辨識文法 「 電話 」 這個字是選擇性的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-306">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="ebc01-307"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>物件用來建構文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-307"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="ebc01-308">此範例強調使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-308">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ebc01-309">要附加的語意索引鍵。</span><span class="sxs-lookup"><span data-stu-id="ebc01-309">The semantic key to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-310">將語意索引鍵附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-310">Appends a semantic key to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-311">`key` 會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-311">`key` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-312">當您附加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體來<xref:System.Speech.Recognition.GrammarBuilder>物件，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-312">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-313">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-313">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-314">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-314">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-315">下列範例是主控台應用程式選擇來源和目的地城市班機的一部分。</span><span class="sxs-lookup"><span data-stu-id="ebc01-315">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="ebc01-316">應用程式可辨識片語，例如 「 我想要從邁阿密飛對芝加哥 」。</span><span class="sxs-lookup"><span data-stu-id="ebc01-316">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="ebc01-317">處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件使用<xref:System.Speech.Recognition.SemanticResultKey>擷取機場程式碼中指定<xref:System.Speech.Recognition.SemanticResultValue>的來源和目的地的城市。</span><span class="sxs-lookup"><span data-stu-id="ebc01-317">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ebc01-318">要附加的語意值。</span><span class="sxs-lookup"><span data-stu-id="ebc01-318">The semantic value to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-319">將語意值附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-319">Appends a semantic value to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-320">`value` 會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-320">`value` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-321">當您附加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體來<xref:System.Speech.Recognition.GrammarBuilder>物件，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-321">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-322">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-322">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-323">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-323">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-324">下列範例是主控台應用程式選擇來源和目的地城市班機的一部分。</span><span class="sxs-lookup"><span data-stu-id="ebc01-324">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="ebc01-325">應用程式可辨識片語，例如 「 我想要從邁阿密飛對芝加哥 」。</span><span class="sxs-lookup"><span data-stu-id="ebc01-325">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="ebc01-326">處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件使用<xref:System.Speech.Recognition.SemanticResultKey>擷取機場程式碼中指定<xref:System.Speech.Recognition.SemanticResultValue>的來源和目的地的城市。</span><span class="sxs-lookup"><span data-stu-id="ebc01-326">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-327">要附加的單字序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-327">The sequence of words to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-328">將片語附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-328">Appends a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-329">`phrase` 會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-329">`phrase` is added to the end of the current sequence of elements.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-330">要附加的單字序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-330">The sequence of words to append.</span></span></param>
        <param name="subsetMatchingCriteria"><span data-ttu-id="ebc01-331">文法用來辨識片語的比對模式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-331">The matching mode the grammar uses to recognize the phrase.</span></span></param>
        <summary><span data-ttu-id="ebc01-332">將片語子集的項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-332">Appends an element for a subset of a phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-333">子集合的項目會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-333">The subset element is added to the end of the current sequence of elements.</span></span> <span data-ttu-id="ebc01-334">如需有關如何建置使用字串的語音辨識文法的詳細資訊，請參閱[使用字串來建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-334">For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
 <span data-ttu-id="ebc01-335">詳細的使用模式比對的子集合的詳細資訊，請參閱<xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-335">For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-336">下列範例會建立每個語音辨識文法<xref:System.Speech.Recognition.SubsetMatchingMode>值。</span><span class="sxs-lookup"><span data-stu-id="ebc01-336">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value.</span></span> <span data-ttu-id="ebc01-337">比方說，產生的文法`OrderedSubset`辨識片語，"三個四個五個"和"一個三個五個 」，和文法`Subsequence`辨識片語"三個四個五個"，但不是片語，"一個三個五個 」。</span><span class="sxs-lookup"><span data-stu-id="ebc01-337">For example, the generated grammar `OrderedSubset` recognizes the phrases, "three four five" and "one three five", and the grammar `Subsequence` recognizes the phrase "three four five", but not the phrase, "one three five".</span></span>  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-338">要附加的重複文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-338">The repeated grammar element to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="ebc01-339">為構成相符項目，輸入必須和 <c>builder</c> 所定義的項目比對相符的最少次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-339">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="ebc01-340">為構成相符項目，輸入可以和 <c>builder</c> 所定義的項目比對相符的最大次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-340">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="ebc01-341">將重複的文法項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-341">Appends a repeated grammar element to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-342">值`minRepeat`必須大於或等於 0 且小於或等於值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-342">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-343">當您附加<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體來<xref:System.Speech.Recognition.GrammarBuilder>物件，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個可能重複的語意元素修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-343">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-344">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-344">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-345">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-345">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-346">下列範例會建立片語，例如"呼叫 James 工作 」 和 「 呼叫 Anne 在其行動電話上的，「 語音辨識文法 「 電話 」 這個字是選擇性的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-346">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="ebc01-347"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>物件用來建構文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-347"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="ebc01-348">此範例強調使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-348">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-349">要附加的單字重複序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-349">The repeated sequence of words to append.</span></span></param>
        <param name="minRepeat"><span data-ttu-id="ebc01-350">為構成相符項目，輸入必須和 <c>phrase</c> 比對相符的最少次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-350">The minimum number of times that input matching <c>phrase</c> must occur to constitute a match.</span></span></param>
        <param name="maxRepeat"><span data-ttu-id="ebc01-351">為構成相符項目，輸入可以和 <c>phrase</c> 比對相符的最大次數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-351">The maximum number of times that input matching <c>phrase</c> can occur to constitute a match.</span></span></param>
        <summary><span data-ttu-id="ebc01-352">將重複的片語附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-352">Appends a repeated phrase to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-353">值`minRepeat`必須大於或等於 0 且小於或等於值`maxRepeat`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-353">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-354">下列範例會建立片語，例如"呼叫 James 工作 」 和 「 呼叫 Anne 在其行動電話上的，「 語音辨識文法 「 電話 」 這個字是選擇性的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-354">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="ebc01-355"><xref:System.Speech.Recognition.GrammarBuilder> 和<xref:System.Speech.Recognition.Choices>物件用來建構文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-355"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="ebc01-356">此範例強調使用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-356">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-357">將聽寫文法附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-357">Appends a dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-358"><xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>方法可讓您附加聽寫文法規則是以<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-358">The <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> methods allow you to append a dictation grammar as a rule to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="ebc01-359">如需有關聽寫文法的詳細資訊，請參閱<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-359">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebc01-360">將預設聽寫文法附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-360">Appends the default dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-361">如需有關聽寫文法的詳細資訊，請參閱<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-361">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-362">下列範例會建立合併聽寫語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-362">The following example creates a speech recognition grammar that incorporates dictation.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category"><span data-ttu-id="ebc01-363">要附加之聽寫文法的分類。</span><span class="sxs-lookup"><span data-stu-id="ebc01-363">The category of the dictation grammar to append.</span></span></param>
        <summary><span data-ttu-id="ebc01-364">將指定的聽寫文法附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-364">Appends the specified dictation grammar to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-365">若要使用拼字檢查聽寫文法，`category`至`spelling`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-365">To use the spelling dictation grammar, set `category` to `spelling`.</span></span>  
  
 <span data-ttu-id="ebc01-366">如需有關聽寫文法的詳細資訊，請參閱<xref:System.Speech.Recognition.DictationGrammar>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-366">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-367">下列範例會建立合併的拼字聽寫文法規則進行語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-367">The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-368">將文法檔案或文法規則附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-368">Appends a grammar file or a grammar rule to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-369"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>文法檔案的文法規則，可以將附加的方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-369">The <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> methods can append a grammar file or a grammar rule from a file.</span></span> <span data-ttu-id="ebc01-370">這些方法可讓應用程式，將使用的預先部署或公開可用的文法規則進行剖析。</span><span class="sxs-lookup"><span data-stu-id="ebc01-370">These methods allow applications to make use of pre-deployed or publicly available grammar rules.</span></span> <span data-ttu-id="ebc01-371">應用程式必須具有讀取權限，以指定的文法檔案的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-371">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="ebc01-372">這些方法可以從下列格式讀取語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-372">These methods can read a speech recognition grammar from the following formats.</span></span>  
  
-   <span data-ttu-id="ebc01-373">符合 W3C XML 格式檔[語音辨識文法規格 (SRGS) 1.0 版](http://go.microsoft.com/fwlink/?LinkId=201761)</span><span class="sxs-lookup"><span data-stu-id="ebc01-373">XML-format files that conform to the W3C [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)</span></span>  
  
-   <span data-ttu-id="ebc01-374">符合 Microsoft 語音辨識文法二進位格式 （.cfg 換檔案副檔名） 的二進位檔</span><span class="sxs-lookup"><span data-stu-id="ebc01-374">Binary files that conform to the Microsoft Speech Recognition Grammar Binary Format (.cfg file extension)</span></span>  
  
 <span data-ttu-id="ebc01-375">編譯的 XML 格式 SRGS 文法檔案副檔名為.cfg 換二進位文法檔案可以縮短的時間由搜尋相符項目，特別是當文法需要大量的單字和片語的辨識。</span><span class="sxs-lookup"><span data-stu-id="ebc01-375">Compiling an XML-format SRGS grammar file to a binary grammar file with the .cfg extension can reduce the time consumed by searches for a match, especially if the grammar requires recognition of a large number of words and phrases.</span></span> <span data-ttu-id="ebc01-376">如需編譯 SRGS 文法 CFG 二進位格式資訊，請參閱<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-376">For information about compiling SRGS grammars to the CFG binary format, see <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="ebc01-377">檔案的路徑或通用資源識別項 (URI)，這個檔案以支援的格式來描述語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-377">The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <summary><span data-ttu-id="ebc01-378">將文法定義檔附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-378">Appends a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-379">所提供的 URI`path`引數可以是本機或遠端。</span><span class="sxs-lookup"><span data-stu-id="ebc01-379">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="ebc01-380">應用程式必須具有讀取權限，以指定的文法檔案的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-380">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="ebc01-381">W3C 語音辨識文法規格 (SRGS) 表示法，可以定義根規則。</span><span class="sxs-lookup"><span data-stu-id="ebc01-381">A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule.</span></span> <span data-ttu-id="ebc01-382">這個方法會附加文法中，從其根規則，目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-382">This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements.</span></span> <span data-ttu-id="ebc01-383">若要將附加特定文法規則，請使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-383">To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-384">下列 C# 範例會建立名為的規則會使用語音辨識文法`Cities`在本機的 SRGS 檔案中，cities.grxml。</span><span class="sxs-lookup"><span data-stu-id="ebc01-384">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="ebc01-385">Cities.grxml 檔案的內容會出現下列 C# 程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="ebc01-385">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="ebc01-386">檔案的檔案路徑或通用資源識別項 (URI)，這個檔案以支援的格式來描述語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-386">The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span></span></param>
        <param name="rule"><span data-ttu-id="ebc01-387">要附加之規則的識別項，若要附加文法檔案的預設根規則則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ebc01-387">The identifier of the rule to append, or <see langword="null" /> to append the default root rule of the grammar file.</span></span></param>
        <summary><span data-ttu-id="ebc01-388">將指定的文法定義檔規則附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-388">Appends the specified rule of a grammar definition file to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-389">所提供的 URI`path`引數可以是本機或遠端。</span><span class="sxs-lookup"><span data-stu-id="ebc01-389">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="ebc01-390">應用程式必須具有讀取權限，以指定的文法檔案的位置。</span><span class="sxs-lookup"><span data-stu-id="ebc01-390">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="ebc01-391">您可以使用使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法，將附加文法檔案開頭的其根規則。</span><span class="sxs-lookup"><span data-stu-id="ebc01-391">You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-392">下列 C# 範例會建立名為的規則會使用語音辨識文法`Cities`在本機的 SRGS 檔案中，cities.grxml。</span><span class="sxs-lookup"><span data-stu-id="ebc01-392">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="ebc01-393">Cities.grxml 檔案的內容會出現下列 C# 程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="ebc01-393">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebc01-394">將符合任何輸入的辨識文法項目附加至目前的文法項目序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-394">Appends a recognition grammar element that matches any input to the current sequence of grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-395">萬用字元項目會加入至目前的項目序列的結尾。</span><span class="sxs-lookup"><span data-stu-id="ebc01-395">The wildcard element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="ebc01-396">萬用字元項目比對任何口語的文字。</span><span class="sxs-lookup"><span data-stu-id="ebc01-396">The wildcard element matches any spoken word.</span></span> <span data-ttu-id="ebc01-397">它不符合背景噪音或無回應。</span><span class="sxs-lookup"><span data-stu-id="ebc01-397">It does not match background noise or silence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-398">下列範例會建立接受萬用字元的密碼輸入的文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-398">The following example creates a grammar that accepts password input as a wildcard.</span></span> <span data-ttu-id="ebc01-399">此範例會將附加<xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType>事件處理常式，會驗證密碼輸入的文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-399">The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event handler to the grammar that validates the password input.</span></span>  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ebc01-400">取得或設定語音辨識文法的文化特性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-400">Gets or sets the culture of the speech recognition grammar.</span></span></summary>
        <value><span data-ttu-id="ebc01-401"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的文化特性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-401">The culture of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span> <span data-ttu-id="ebc01-402">預設為執行中執行緒的 <see cref="P:System.Threading.Thread.CurrentUICulture" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-402">The default is the executing thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-403"><xref:System.Speech.Recognition.Grammar.%23ctor%2A>建構函式建立<xref:System.Speech.Recognition.Grammar>可由語音辨識器對應的文化特性的物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-403">The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture.</span></span> <span data-ttu-id="ebc01-404">只有<xref:System.Speech.Recognition.GrammarBuilder.Culture%2A>屬性<xref:System.Speech.Recognition.GrammarBuilder>提供 as 文法建構函式的參數用來設定產生的語音辨識文法的文化特性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-404">Only the <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.</span></span>  
  
 <span data-ttu-id="ebc01-405">Microsoft Windows 和 System.Speech API 接受所有有效國家 （地區） 語言代碼。</span><span class="sxs-lookup"><span data-stu-id="ebc01-405">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="ebc01-406">若要執行使用中所指定語言的語音辨識`Culture`屬性，語音辨識引擎支援，必須安裝語言國家/地區的程式碼。</span><span class="sxs-lookup"><span data-stu-id="ebc01-406">To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="ebc01-407">隨附於 Microsoft Windows 7 的語音辨識引擎會使用下列語言的國家/地區碼。</span><span class="sxs-lookup"><span data-stu-id="ebc01-407">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="ebc01-408">en GB。</span><span class="sxs-lookup"><span data-stu-id="ebc01-408">en-GB.</span></span> <span data-ttu-id="ebc01-409">英文 （英國）</span><span class="sxs-lookup"><span data-stu-id="ebc01-409">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="ebc01-410">EN-US。</span><span class="sxs-lookup"><span data-stu-id="ebc01-410">en-US.</span></span> <span data-ttu-id="ebc01-411">英文 （美國）</span><span class="sxs-lookup"><span data-stu-id="ebc01-411">English (United States)</span></span>  
  
-   <span data-ttu-id="ebc01-412">為 DE-DE。</span><span class="sxs-lookup"><span data-stu-id="ebc01-412">de-DE.</span></span> <span data-ttu-id="ebc01-413">德文 （德國）</span><span class="sxs-lookup"><span data-stu-id="ebc01-413">German (Germany)</span></span>  
  
-   <span data-ttu-id="ebc01-414">es-ES.</span><span class="sxs-lookup"><span data-stu-id="ebc01-414">es-ES.</span></span> <span data-ttu-id="ebc01-415">西班牙文 （西班牙）</span><span class="sxs-lookup"><span data-stu-id="ebc01-415">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="ebc01-416">fr-fr。</span><span class="sxs-lookup"><span data-stu-id="ebc01-416">fr-FR.</span></span> <span data-ttu-id="ebc01-417">法文 （法國）</span><span class="sxs-lookup"><span data-stu-id="ebc01-417">French (France)</span></span>  
  
-   <span data-ttu-id="ebc01-418">若為 JA-JP。</span><span class="sxs-lookup"><span data-stu-id="ebc01-418">ja-JP.</span></span> <span data-ttu-id="ebc01-419">日文 （日本）</span><span class="sxs-lookup"><span data-stu-id="ebc01-419">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="ebc01-420">zh-chs 和 CN。</span><span class="sxs-lookup"><span data-stu-id="ebc01-420">zh-CN.</span></span> <span data-ttu-id="ebc01-421">中文 （中國）</span><span class="sxs-lookup"><span data-stu-id="ebc01-421">Chinese (China)</span></span>  
  
-   <span data-ttu-id="ebc01-422">zh-chs 和 TW。</span><span class="sxs-lookup"><span data-stu-id="ebc01-422">zh-TW.</span></span> <span data-ttu-id="ebc01-423">中文 （台灣）</span><span class="sxs-lookup"><span data-stu-id="ebc01-423">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="ebc01-424">兩個字母的語言代碼，例如"en"，"fr"，或也允許"es"。</span><span class="sxs-lookup"><span data-stu-id="ebc01-424">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ebc01-425">下列範例會建立順序與最多四個配料披薩語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-425">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="ebc01-426">它特別設定<xref:System.Speech.Recognition.GrammarBuilder>英文 （美國） 物件的文化特性。</span><span class="sxs-lookup"><span data-stu-id="ebc01-426">It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ebc01-427">取得顯示 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 所含文法之內容及結構的字串。</span><span class="sxs-lookup"><span data-stu-id="ebc01-427">Gets a string that shows the contents and structure of the grammar contained by the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <value><span data-ttu-id="ebc01-428"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的目前內容和結構。</span><span class="sxs-lookup"><span data-stu-id="ebc01-428">The current content and structure of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ebc01-429">下列範例會建立順序與最多四個配料披薩語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-429">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="ebc01-430">它會寫入的狀態<xref:System.Speech.Recognition.GrammarBuilder>之前建立文法主控台。</span><span class="sxs-lookup"><span data-stu-id="ebc01-430">It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar.</span></span> <span data-ttu-id="ebc01-431">這個方法會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="ebc01-431">This method generates the following output:</span></span>  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-432">建立新的<see cref="T:System.Speech.Recognition.GrammarBuilder" />，其對應至兩個文法項目的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-432">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that corresponds to a sequence of two grammar elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-433">運算元的順序決定項目的順序，在新<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-433">The order of the operands determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-434">注意： 建議您合併時<xref:System.Speech.Recognition.Choices>或<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>與其他文法項目執行個體。</span><span class="sxs-lookup"><span data-stu-id="ebc01-434">Caution is recommended when combining <xref:System.Speech.Recognition.Choices> or <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements.</span></span> <span data-ttu-id="ebc01-435">使用 語音辨識文法包含相同的索引鍵名稱重複的語意項目或多個語意的項目可以重複修改相同的語意項目的值時，語音辨識器可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-435">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="ebc01-436">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[使用 SemanticResultKey 和 SemanticResultValue 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-436">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-437">如需有關建立和使用語音辨識文法的詳細資訊，請參閱[語音辨識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[建立 GrammarBuilder 文法](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-437">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="ebc01-438">第一個文法項目，代表一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-438">The first grammar element, which represents a set of alternatives.</span></span></param>
        <param name="builder"><span data-ttu-id="ebc01-439">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-439">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-440">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含 <see cref="T:System.Speech.Recognition.Choices" /> 物件，後面緊接著 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-440">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-441">傳回 <paramref name="choices" /> 參數序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，後面接著 <paramref name="builder" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-441">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-442"><xref:System.Speech.Recognition.GrammarBuilder> 支援從下列類別的轉換。</span><span class="sxs-lookup"><span data-stu-id="ebc01-442"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-443">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-443">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="ebc01-444">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-444">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-445">當您結合<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-445">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-446">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-446">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-447">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-447">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-448">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-448">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-449">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-449">The first grammar element.</span></span></param>
        <param name="choices"><span data-ttu-id="ebc01-450">第二個文法項目，這表示一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-450">The second grammar element, which represents a set of alternative elements.</span></span></param>
        <summary><span data-ttu-id="ebc01-451">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含後面接著 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的 <see cref="T:System.Speech.Recognition.Choices" />。</span><span class="sxs-lookup"><span data-stu-id="ebc01-451">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a <see cref="T:System.Speech.Recognition.Choices" />.</span></span></summary>
        <returns><span data-ttu-id="ebc01-452">傳回 <paramref name="builder" /> 參數序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，後面接著 <paramref name="choices" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-452">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="choices" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-453"><xref:System.Speech.Recognition.GrammarBuilder> 支援從下列類別的轉換：</span><span class="sxs-lookup"><span data-stu-id="ebc01-453"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-454">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-454">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="ebc01-455">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-455">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-456">當您結合<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-456">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-457">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-457">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-458">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-458">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-459">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-459">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-460">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-460">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-461">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-461">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1"><span data-ttu-id="ebc01-462">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-462">The first grammar element.</span></span></param>
        <param name="builder2"><span data-ttu-id="ebc01-463">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-463">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-464">建立新的<see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含兩個 <see cref="T:System.Speech.Recognition.GrammarBuilder" />物件的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-464">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span></span></summary>
        <returns><span data-ttu-id="ebc01-465">傳回 <paramref name="builder1" /> 參數序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，後面接著 <paramref name="builder2" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-465">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> parameter followed by the <paramref name="builder2" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-466"><xref:System.Speech.Recognition.GrammarBuilder> 支援從下列類別的轉換。</span><span class="sxs-lookup"><span data-stu-id="ebc01-466"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-467">這個方法會接受針對上列物件`builder1`和`builder2`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-467">This method accepts the objects listed above for the `builder1` and `builder2` parameters.</span></span> <span data-ttu-id="ebc01-468">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-468">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ebc01-469">當您結合<xref:System.Speech.Recognition.GrammarBuilder>物件，其中包含<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>執行個體，請確定您有避免建立重複的語意項目具有相同索引鍵的名稱或多個語意的項目可以重複修改<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-469">When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="ebc01-470">語音辨識器在遇到下列情況下，可以擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ebc01-470">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="ebc01-471">如需建置包含語意資訊的語音辨識文法的詳細資訊，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。</span><span class="sxs-lookup"><span data-stu-id="ebc01-471">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="ebc01-472">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-472">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder"><span data-ttu-id="ebc01-473">第一個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-473">The first grammar element.</span></span></param>
        <param name="phrase"><span data-ttu-id="ebc01-474">第二個文法項目，這表示文字的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-474">The second grammar element, which represents a sequence of words.</span></span></param>
        <summary><span data-ttu-id="ebc01-475">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含後面接著片語的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="ebc01-475">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a phrase.</span></span></summary>
        <returns><span data-ttu-id="ebc01-476">傳回 <paramref name="builder" /> 參數序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，後面接著 <paramref name="phrase" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-476">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="phrase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-477"><xref:System.Speech.Recognition.GrammarBuilder> 支援從下列類別的轉換。</span><span class="sxs-lookup"><span data-stu-id="ebc01-477"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-478">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-478">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="ebc01-479">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-479">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="ebc01-480">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-480">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-481">第一個文法項目，這表示文字的序列。</span><span class="sxs-lookup"><span data-stu-id="ebc01-481">The first grammar element, which represents a sequence of words.</span></span></param>
        <param name="builder"><span data-ttu-id="ebc01-482">第二個文法項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-482">The second grammar element.</span></span></param>
        <summary><span data-ttu-id="ebc01-483">建立新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，其中包含後面接著 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的片語。</span><span class="sxs-lookup"><span data-stu-id="ebc01-483">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <returns><span data-ttu-id="ebc01-484">傳回 <paramref name="phrase" /> 參數序列的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />，後面接著 <paramref name="builder" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-484">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> parameter followed by the <paramref name="builder" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-485"><xref:System.Speech.Recognition.GrammarBuilder> 支援從下列類別的轉換。</span><span class="sxs-lookup"><span data-stu-id="ebc01-485"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-486">這個方法會接受針對上列物件`builder`參數。</span><span class="sxs-lookup"><span data-stu-id="ebc01-486">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="ebc01-487">如需詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>運算子。</span><span class="sxs-lookup"><span data-stu-id="ebc01-487">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="ebc01-488">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-488">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-489">下列範例會建立可辨識兩個句子，語音辨識文法 」 讓背景*色彩*」 和 「 設背景*色彩*"，其中*色彩*選取從一組色彩。</span><span class="sxs-lookup"><span data-stu-id="ebc01-489">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="ebc01-490">各種類型用來建立最終文法中，例如[字串](http://go.microsoft.com/fwlink/?LinkId=159733)， <xref:System.Speech.Recognition.Choices>，和<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-490">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebc01-491">將其他型別轉換成 <see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="ebc01-491">Converts another type to a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-492">隱含轉換建立的新執行個體<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-492">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-493">您也可以將每個下列類別，以轉換<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-493">You can cast each of the following classes to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="ebc01-494">每個隱含轉型就相當於呼叫建構函式。</span><span class="sxs-lookup"><span data-stu-id="ebc01-494">Each of the implicit casts is equivalent to calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices"><span data-ttu-id="ebc01-495">要轉換的一組替代項目。</span><span class="sxs-lookup"><span data-stu-id="ebc01-495">The set of alternatives to convert.</span></span></param>
        <summary><span data-ttu-id="ebc01-496">將 <see cref="T:System.Speech.Recognition.Choices" /> 物件轉換成 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-496">Converts a <see cref="T:System.Speech.Recognition.Choices" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-497">轉換的 <see cref="T:System.Speech.Recognition.Choices" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-497">The converted <see cref="T:System.Speech.Recognition.Choices" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-498">隱含轉換建立的新執行個體<xref:System.Speech.Recognition.GrammarBuilder>。此轉換運算子就相當於呼叫<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>並指定`choices`如`alternateChoices`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-498">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `choices` for the `alternateChoices`.</span></span>  
  
 <span data-ttu-id="ebc01-499">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-499">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-500">下列範例會建立可辨識的回應"yes"或"no"問題語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-500">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="ebc01-501">隱含轉換運算子用來建構的<xref:System.Speech.Recognition.SemanticResultValue>物件從<xref:System.Speech.Recognition.Choices>物件，在建構<xref:System.Speech.Recognition.Choices>來自兩個物件<xref:System.Speech.Recognition.SemanticResultValue>物件，並在建構<xref:System.Speech.Recognition.Grammar>物件<xref:System.Speech.Recognition.SemanticResultKey>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-501">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey"><span data-ttu-id="ebc01-502">要轉換的語意索引鍵。</span><span class="sxs-lookup"><span data-stu-id="ebc01-502">The semantic key to convert.</span></span></param>
        <summary><span data-ttu-id="ebc01-503">將 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 物件轉換成 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-503">Converts a <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-504">轉換的 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-504">The converted <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-505">隱含轉換建立的新執行個體<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-505">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-506">此轉換運算子就相當於呼叫<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>並指定`semanticKey`如`key`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-506">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticKey` for the `key`.</span></span>  
  
 <span data-ttu-id="ebc01-507">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-507">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-508">下列範例會建立可辨識的回應"yes"或"no"問題語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-508">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="ebc01-509">隱含轉換運算子用來建構的<xref:System.Speech.Recognition.SemanticResultValue>物件從<xref:System.Speech.Recognition.Choices>物件，在建構<xref:System.Speech.Recognition.Choices>來自兩個物件<xref:System.Speech.Recognition.SemanticResultValue>物件，並在建構<xref:System.Speech.Recognition.Grammar>物件<xref:System.Speech.Recognition.SemanticResultKey>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-509">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue"><span data-ttu-id="ebc01-510">要進行轉換的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-510">The <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to convert.</span></span></param>
        <summary><span data-ttu-id="ebc01-511">將 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 物件轉換成 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-511">Converts a <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-512">轉換的 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-512">The converted <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-513">隱含轉換建立的新執行個體<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-513">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-514">此轉換運算子就相當於呼叫<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>並指定`semanticValue`如`value`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-514">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticValue` for the `value`.</span></span>  
  
 <span data-ttu-id="ebc01-515">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-515">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-516">下列範例會建立可辨識的回應"yes"或"no"問題語音辨識文法。</span><span class="sxs-lookup"><span data-stu-id="ebc01-516">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="ebc01-517">隱含轉換運算子用來建構的<xref:System.Speech.Recognition.SemanticResultValue>物件從<xref:System.Speech.Recognition.Choices>物件，在建構<xref:System.Speech.Recognition.Choices>來自兩個物件<xref:System.Speech.Recognition.SemanticResultValue>物件，並在建構<xref:System.Speech.Recognition.Grammar>物件<xref:System.Speech.Recognition.SemanticResultKey>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-517">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices>object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase"><span data-ttu-id="ebc01-518">要轉換的字串。</span><span class="sxs-lookup"><span data-stu-id="ebc01-518">The string to convert.</span></span></param>
        <summary><span data-ttu-id="ebc01-519">將字串轉換成 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-519">Converts a string to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="ebc01-520">轉換的字串。</span><span class="sxs-lookup"><span data-stu-id="ebc01-520">The converted string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebc01-521">隱含轉換建立的新執行個體<xref:System.Speech.Recognition.GrammarBuilder>。</span><span class="sxs-lookup"><span data-stu-id="ebc01-521">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="ebc01-522">此轉換運算子就相當於呼叫<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>並指定相同`phrase`。</span><span class="sxs-lookup"><span data-stu-id="ebc01-522">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying the same `phrase`.</span></span>  
  
 <span data-ttu-id="ebc01-523">這個運算子的對等方法是 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ebc01-523">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="ebc01-524">下列範例會使用<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件來建構可辨識其中兩個句子，文法 」 讓背景*colorChoice*」 或 「 設背景*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="ebc01-524">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="ebc01-525">建立一份可接受的值之後*colorChoice*使用<xref:System.Speech.Recognition.Choices>物件，此範例會初始化兩個<xref:System.Speech.Recognition.GrammarBuilder>物件`makePhrase`和`setPhrase`，使用字串隱含轉換物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-525">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using implicit conversion from string objects.</span></span>  
  
 <span data-ttu-id="ebc01-526">此範例會最後建立<xref:System.Speech.Recognition.Grammar>物件從<xref:System.Speech.Recognition.Choices>物件轉型成<xref:System.Speech.Recognition.GrammarBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="ebc01-526">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>