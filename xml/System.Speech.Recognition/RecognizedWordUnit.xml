<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f52412e8d631d8da24af54bf1fab76a8bf4d7163" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52379774" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bf293-101">提供辨識語音的不可部分完成的單位。</span><span class="sxs-lookup"><span data-stu-id="bf293-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-102">辨識引擎所傳回的所有結果都建構的<xref:System.Speech.Recognition.RecognizedWordUnit>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="bf293-103">陣列<xref:System.Speech.Recognition.RecognizedWordUnit>物件是透過任何辨識作業都能存取<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性上的<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="bf293-104">除了提供辨識的確定性的量值 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體會提供：</span><span class="sxs-lookup"><span data-stu-id="bf293-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="bf293-105">辨識之單字的標準化，並確切 （或語彙） 的文字表示法。</span><span class="sxs-lookup"><span data-stu-id="bf293-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="bf293-106">如需詳細資訊，請參閱<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。</span><span class="sxs-lookup"><span data-stu-id="bf293-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="bf293-107">使用中支援的語音字母，例如，國際音標 (IPA) 或通用拼音集 (UPS) 個字元的發音資訊。</span><span class="sxs-lookup"><span data-stu-id="bf293-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="bf293-108">如需詳細資訊，請參閱<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。</span><span class="sxs-lookup"><span data-stu-id="bf293-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="bf293-109">格式化進行列印。</span><span class="sxs-lookup"><span data-stu-id="bf293-109">Formatting for printing.</span></span> <span data-ttu-id="bf293-110">如需詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>類別和其<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="bf293-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-111">下列範例顯示公用程式常式 (`stringFromWordArray`)，會產生字串。</span><span class="sxs-lookup"><span data-stu-id="bf293-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="bf293-112">這些字串會包含語彙輸出 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)，正規化的文字 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或語音字元從國際音標 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="bf293-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="bf293-113">使用格式化字串<xref:System.Speech.Recognition.DisplayAttributes>物件將會取自<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性從<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="bf293-114"><xref:System.Speech.Recognition.RecognizedWordUnit>物件會取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性上的<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="bf293-115">所辨識之話語的標準文字。</span><span class="sxs-lookup"><span data-stu-id="bf293-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="bf293-116">這個值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="bf293-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="bf293-117">範圍為 0.0 到 1.0 的<see langword="float" />值，表示字詞辨識的確定性。</span><span class="sxs-lookup"><span data-stu-id="bf293-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="bf293-118">已辨識之單字的注音標示拼字。</span><span class="sxs-lookup"><span data-stu-id="bf293-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="bf293-119">這個值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="bf293-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="bf293-120">所辨識之單字的未標準化文字。</span><span class="sxs-lookup"><span data-stu-id="bf293-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="bf293-121">這個引數是必要項而且不可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="bf293-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="bf293-122">定義使用空白字元顯示辨識的字的方式。</span><span class="sxs-lookup"><span data-stu-id="bf293-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="bf293-123">所辨識之字詞在音訊輸入資料流中的位置。</span><span class="sxs-lookup"><span data-stu-id="bf293-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="bf293-124">這個值可以是 <see cref="F:System.TimeSpan.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="bf293-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="bf293-125">對應至所辨認之字詞的音訊輸入長度。</span><span class="sxs-lookup"><span data-stu-id="bf293-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="bf293-126">這個值可以是 <see cref="F:System.TimeSpan.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="bf293-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="bf293-127">初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="bf293-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-128">如果`text`或`pronunciation`會`null`，""，或<xref:System.String.Empty>而<xref:System.Speech.Recognition.RecognizedWordUnit>會使用在辨識作業中，辨識引擎將會產生任何輸出中的適當值<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體。</span><span class="sxs-lookup"><span data-stu-id="bf293-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="bf293-129">直接建構<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體通常用於模擬辨識作業使用時，只<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>或是<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>類別和<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognizer>類別。</span><span class="sxs-lookup"><span data-stu-id="bf293-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="bf293-130">對於實際的應用程式，請勿直接建構<xref:System.Speech.Recognition.RecognizedWordUnit>，而不是取得透過<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性上的<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-131">下列範例是模擬的有點造作的測試，讓從輸入產生和傳遞至模擬器，並再驗證新的文字。</span><span class="sxs-lookup"><span data-stu-id="bf293-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="bf293-132">國際音標</span><span class="sxs-lookup"><span data-stu-id="bf293-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf293-133">取得指派給辨識器的值，這個值表示所辨識的字符合指定之輸入的可能性。</span><span class="sxs-lookup"><span data-stu-id="bf293-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="bf293-134">正確辨識單字的確定性的相對量值。</span><span class="sxs-lookup"><span data-stu-id="bf293-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="bf293-135">此值介於 0.0 到 1.0，分別表示低度到高度的信賴值。</span><span class="sxs-lookup"><span data-stu-id="bf293-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-136">信心分數並不表示絕對正確辨識單字的可能性。</span><span class="sxs-lookup"><span data-stu-id="bf293-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="bf293-137">相反地，信心分數會提供一種機制，來比較多的辨識替代項目針對指定輸入的準確度。</span><span class="sxs-lookup"><span data-stu-id="bf293-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="bf293-138">這有助於最精確的辨識結果傳回。</span><span class="sxs-lookup"><span data-stu-id="bf293-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="bf293-139">例如，如果辨識之單字的信心分數為 0.8，這不表示這個字有 80%可能是輸入正確的相符項目。</span><span class="sxs-lookup"><span data-stu-id="bf293-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="bf293-140">這表示該單字會更有可能是其他有信心的結果比輸入正確的相符項目率小於 0.8。</span><span class="sxs-lookup"><span data-stu-id="bf293-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="bf293-141">信心分數本身不具意義，除非您有要比較，從相同的辨識作業，或是從相同的輸入的前一項辨識替代結果。</span><span class="sxs-lookup"><span data-stu-id="bf293-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="bf293-142">所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>相對與唯一要在每個辨識引擎。</span><span class="sxs-lookup"><span data-stu-id="bf293-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="bf293-143">沒有任何定義的兩個不同的辨識引擎之間的信賴值比較的方式，和如何<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>的個別<xref:System.Speech.Recognition.RecognizedWordUnit>物件會定義<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的<xref:System.Speech.Recognition.RecognizedPhrase>。</span><span class="sxs-lookup"><span data-stu-id="bf293-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="bf293-144">語音辨識引擎可能會將低的信心分數指派給語音輸入，基於各種原因，包括背景干擾、 inarticulate 語音或非預期的字或文字序列。</span><span class="sxs-lookup"><span data-stu-id="bf293-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="bf293-145">如果您的應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體，您可以修改在哪一個語音輸入接受或拒絕使用其中一個的信賴等級<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="bf293-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="bf293-146">共用辨識器所管理的信賴度臨界值<xref:System.Speech.Recognition.SpeechRecognizer>是使用者設定檔相關聯，儲存在 Windows 登錄中。</span><span class="sxs-lookup"><span data-stu-id="bf293-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="bf293-147">應用程式不應該寫入登錄中的共用辨識器的屬性變更。</span><span class="sxs-lookup"><span data-stu-id="bf293-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf293-148">取得格式化資訊，這項資訊會用來從目前的 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 執行個體建立文字輸出。</span><span class="sxs-lookup"><span data-stu-id="bf293-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="bf293-149">指定 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 物件內容中要顯示的空白區的用法。</span><span class="sxs-lookup"><span data-stu-id="bf293-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-150"><xref:System.Speech.Recognition.DisplayAttributes>所傳回的物件<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性會指定前置和尾端空格，以搭配指定的文字，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="bf293-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="bf293-151">如需如何使用此格式資訊的詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="bf293-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-152">下列範例顯示公用程式常式 (`stringFromWordArray`)，產生的字串格式化在三種方式之一： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或次序 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="bf293-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="bf293-153">文字輸出取自<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>上的屬性<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件，這取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf293-154">取得所辨識之單字的未標準化文字。</span><span class="sxs-lookup"><span data-stu-id="bf293-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="bf293-155">傳回 <see cref="T:System.String" />，包含所辨識之單字的文字，不含任何正常化。</span><span class="sxs-lookup"><span data-stu-id="bf293-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-156">在大部分情況下，所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>完全相同。</span><span class="sxs-lookup"><span data-stu-id="bf293-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="bf293-157">不過，辨識引擎可能會使用以傳回更方便使用或 colloquial 文字表示法的音訊輸入的語音正規化。</span><span class="sxs-lookup"><span data-stu-id="bf293-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="bf293-158">語音正規化是使用特殊的建構或符號來表示以書面的語音。</span><span class="sxs-lookup"><span data-stu-id="bf293-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="bf293-159">比方說，正規化可以使用"$1.16"輸出文字取代 「 的貨幣和十六個分 」 說出口的的話。</span><span class="sxs-lookup"><span data-stu-id="bf293-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-160">下列範例示範三種格式之一產生文字的公用程式常式： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，以及拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="bf293-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="bf293-161">文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件，這取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf293-162">取得所辨識之單字的語音拼法。</span><span class="sxs-lookup"><span data-stu-id="bf293-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="bf293-163">使用支援的語音字母（例如，國際音標 (IPA) 或通用拼音集 (UPS)）的字元字串。</span><span class="sxs-lookup"><span data-stu-id="bf293-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-164">內容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>表示的發音的語音辨識引擎用來比對語音輸入，以其載入其中一個項目<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="bf293-165">中的語音辨識引擎內部字典，字典文件中載入的辨識文法從連結中可能會定義發音<xref:System.Speech.Recognition.Grammar>物件，或是內嵌於載入辨識文法<xref:System.Speech.Recognition.Grammar>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="bf293-166">語音辨識引擎也可以建立常見單字字典或語音辨識引擎目前有權存取的文法中未定義其發音的發音。</span><span class="sxs-lookup"><span data-stu-id="bf293-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="bf293-167">許多 Windows 為基礎的 Unicode 字型，例如 Courier New，支援 IPA 字串的顯示。</span><span class="sxs-lookup"><span data-stu-id="bf293-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="bf293-168">如需詳細資訊，請參閱 <<c0> [ 國際音標](https://go.microsoft.com/fwlink/?LinkId=58363)。</span><span class="sxs-lookup"><span data-stu-id="bf293-168">For more information, see [International Phonetic Alphabet](https://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-169">下列範例顯示產生的其中三個可能的格式字串的公用程式常式： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，以及拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="bf293-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="bf293-170">文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件，這取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="bf293-171">國際音標</span><span class="sxs-lookup"><span data-stu-id="bf293-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bf293-172">取得所辨識之單字的標準化文字。</span><span class="sxs-lookup"><span data-stu-id="bf293-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="bf293-173">字串，包含指定輸入單字的標準化文字輸出。</span><span class="sxs-lookup"><span data-stu-id="bf293-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf293-174">在大部分情況下，所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>完全相同。</span><span class="sxs-lookup"><span data-stu-id="bf293-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="bf293-175">不過，辨識引擎可能會使用以傳回更方便使用或 colloquial 文字表示法的音訊輸入的語音正規化。</span><span class="sxs-lookup"><span data-stu-id="bf293-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="bf293-176">語音正規化是使用特殊的建構或符號來表示以書面的語音。</span><span class="sxs-lookup"><span data-stu-id="bf293-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="bf293-177">比方說，正規化可以使用"$1.16"輸出文字取代 「 的貨幣和十六個分 」 說出口的的話。</span><span class="sxs-lookup"><span data-stu-id="bf293-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf293-178">下列範例示範三種格式之一產生字串的公用程式常式： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，以及拼音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。</span><span class="sxs-lookup"><span data-stu-id="bf293-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="bf293-179">文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件，這取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>上的屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</span><span class="sxs-lookup"><span data-stu-id="bf293-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>