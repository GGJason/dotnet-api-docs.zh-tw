<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db8bbe70a61c7c005c717610d08e20178651bffc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529822" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供辨識語音的不可部分完成的單位。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 辨識引擎所傳回的所有結果都建構的<xref:System.Speech.Recognition.RecognizedWordUnit>物件。  
  
 陣列<xref:System.Speech.Recognition.RecognizedWordUnit>物件是透過任何辨識作業存取<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
 除了提供辨識確定程度的量值 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體會提供：  
  
-   可辨識的文字正規化和完全符合 （或語彙） 的文字表示。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。  
  
-   使用支援的注音字母，例如國際音標 (IPA) 或萬用電話設定 (UPS) 中的字元發音資訊。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。  
  
-   格式進行列印。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>類別和其<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性。  
  
   
  
## Examples  
 下列範例顯示公用程式常式 (`stringFromWordArray`)，會產生字串。 字串包含語彙輸出 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)，正規化的文字 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或從國際音標發音的字元 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 使用格式化字串<xref:System.Speech.Recognition.DisplayAttributes>物件取自<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性從<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件。 <xref:System.Speech.Recognition.RecognizedWordUnit>物件取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">所辨識之話語的標準文字。  
  
 這個值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="confidence">範圍為 0.0 到 1.0 的<see langword="float" />值，表示字詞辨識的確定性。</param>
        <param name="pronunciation">已辨識之單字的注音標示拼字。  
  
 這個值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="lexicalForm">所辨識之單字的未標準化文字。  
  
 這個引數是必要項而且不可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</param>
        <param name="displayAttributes">定義使用空白字元顯示辨識的字的方式。</param>
        <param name="audioPosition">所辨識之字詞在音訊輸入資料流中的位置。  
  
 這個值可以是 <see cref="F:System.TimeSpan.Zero" />。</param>
        <param name="audioDuration">對應至所辨認之字詞的音訊輸入長度。  
  
 這個值可以是 <see cref="F:System.TimeSpan.Zero" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`或`pronunciation`是`null`，""，或<xref:System.String.Empty>和<xref:System.Speech.Recognition.RecognizedWordUnit>用在辨識作業中，辨識引擎將會產生任何輸出中的適當值<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體。  
  
 直接建構<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體通常只有在模擬使用的辨識作業時，才使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>類別和<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法<xref:System.Speech.Recognition.SpeechRecognizer>類別。  
  
 實際的應用程式，請不要直接建構<xref:System.Speech.Recognition.RecognizedWordUnit>，而不是取得其傳遞<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
   
  
## Examples  
 下列範例是模擬的稍微疏失的測試，讓輸入產生和傳遞至模擬器中，並驗證新文字。  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指派給辨識器的值，這個值表示所辨識的字符合指定之輸入的可能性。</summary>
        <value>正確辨識單字的確定性的相對量值。 此值介於 0.0 到 1.0，分別表示低度到高度的信賴值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 信心分數並不表示絕對 word 已正確辨識的可能性。 相反地，信心分數會提供機制來比較多個的辨識替代項目為給定的輸入的準確度。 這有助於傳回最精確的辨識結果。 例如，如果辨識的字 0.8 的信心分數，這不表示 word 已輸入正確的比對的 80%的機率。  表示這個字是較有可能比其他結果，確保輸入正確的符合分數小於 0.8。  
  
 信心分數本身沒有任何意義，除非您有要比較，從相同的辨識作業，或是從先前 recognitions 相同輸入的替代結果。  
  
 所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>相對且唯一的每個辨識引擎。 沒有定義如何比較兩個不同辨識引擎之間的信賴值，或如何<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>個別的<xref:System.Speech.Recognition.RecognizedWordUnit>物件定義<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的<xref:System.Speech.Recognition.RecognizedPhrase>。  
  
 語音辨識引擎可能會基於各種原因，包括背景干擾、 inarticulate 語音，或非預期的單字或單字順序，以指派給語音輸入低信心分數。 如果您的應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體，您可以修改信心層級上的語音，輸入已接受或拒絕使用其中一個<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。 共用辨識器所管理的信賴閾值<xref:System.Speech.Recognition.SpeechRecognizer>、 相關聯的使用者設定檔和儲存在 Windows 登錄中。 應用程式應該不會寫入登錄的共用辨識器的屬性變更。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得格式化資訊，這項資訊會用來從目前的 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 執行個體建立文字輸出。</summary>
        <value>指定 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 物件內容中要顯示的空白區的用法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.DisplayAttributes>所傳回物件<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性會指定用於給定的字詞，開頭和尾端空白，如果有的話。  
  
 如需如何使用這些資訊的詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>列舉型別。  
  
   
  
## Examples  
 下列範例顯示公用程式常式 (`stringFromWordArray`) 中有三種，產生的格式字串： 以語彙方式 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，或次序 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 文字輸出取自<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得所辨識之單字的未標準化文字。</summary>
        <value>傳回 <see cref="T:System.String" />，包含所辨識之單字的文字，不含任何正常化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>完全相同。 不過，辨識引擎可能會使用語音正規化，以傳回更方便使用或 colloquial 的文字表示法音訊輸入。  
  
 語音正規化是使用特殊建構或符號來表示語音撰寫。 例如，正規化可以取代口語 「 貨幣和 16 個美分 」"$1.16"輸出文字中。  
  
   
  
## Examples  
 下列範例示範三種格式之一產生文字的公用程式常式： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和語音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得所辨識之單字的語音拼法。</summary>
        <value>使用支援的語音字母（例如，國際音標 (IPA) 或通用拼音集 (UPS)）的字元字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 內容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>表示語音辨識引擎用來比對其載入其中一個動作的語音輸入哪些發音<xref:System.Speech.Recognition.Grammar>物件。 中的語音辨識引擎內部詞素連結從辨識文法中載入 lexicon 文件中可能會定義發音<xref:System.Speech.Recognition.Grammar>物件，或是內嵌於辨識文法中載入<xref:System.Speech.Recognition.Grammar>物件。 語音辨識引擎也可能會建立常見字詞詞素或語音辨識引擎目前擁有的存取權的文法中未定義其發音的發音。  
  
 許多 windows Unicode 字型，例如： Courier New，支援 IPA 字串的顯示。 如需詳細資訊，請參閱[國際音標](http://go.microsoft.com/fwlink/?LinkId=58363)。  
  
   
  
## Examples  
 下列範例顯示公用程式常式，會產生具有三個可能的格式的其中一個的字串： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和語音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得所辨識之單字的標準化文字。</summary>
        <value>字串，包含指定輸入單字的標準化文字輸出。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>會完全相同。 不過，辨識引擎可能會使用語音正規化，以傳回更方便使用或 colloquial 的文字表示法音訊輸入。  
  
 語音正規化是使用特殊建構或符號來表示語音撰寫。 例如，正規化可以取代口語 「 貨幣和 16 個美分 」"$1.16"輸出文字中。  
  
   
  
## Examples  
 下列範例顯示公用程式常式，會產生一個字串，其中三種格式： 語彙 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、 標準化 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)，和語音 (使用<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 文字輸出取自<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>的<xref:System.Speech.Recognition.RecognizedWordUnit>物件取自<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>