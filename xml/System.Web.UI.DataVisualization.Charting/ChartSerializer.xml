<Type Name="ChartSerializer" FullName="System.Web.UI.DataVisualization.Charting.ChartSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1db05f255789a6637448b3b1199ea42457afdc5c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChartSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChartSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.ChartSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class ChartSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChartSerializer" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Format")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>讓 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控制項能夠序列化。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會公開為<xref:System.Web.UI.DataVisualization.Charting.Chart.Serializer%2A>屬性的根<xref:System.Web.UI.DataVisualization.Charting.Chart>類別。  
  
 序列化儲存圖表的狀態，而且也提供序列化的資料載入至圖表的選項。 可以保存所有圖表屬性，包括圖表的資料。 此外，可以重設所有的圖表內容標示為進行序列化。  
  
 管理使用者定義的檢視狀態時，可以選擇性地使用這個類別。 其中一個其`Load`方法可以用來載入檢視狀態，以及其中一個`Save`設定檢視狀態時，就可以使用方法。  
  
 XML 或二進位格式可用來序列化存放區資料。 依預設，會使用 XML，但是您可以變更與格式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性。  
  
 圖表屬性會儲存並載入使用`Save`和`Load`方法，分別。 請注意，只有具有非預設值的屬性就會儲存。 資料可以儲存和/或使用檔案、 載入資料流<xref:System.IO.TextWriter>， <xref:System.IO.TextReader>，<xref:System.Xml.XmlWriter>和<xref:System.Xml.XmlReader>物件。 當儲存及/或載入資料，使用物件衍生自<xref:System.IO.TextReader>， <xref:System.IO.TextWriter>，<xref:System.Xml.XmlReader>或<xref:System.Xml.XmlWriter>類別，資料的格式必須是 XML。  
  
 下列清單說明三種技術，從基本進階，用來定義可序列化的資料。 請注意，它也可以定義非可序列化的資料。 這項技術是下一個段落中所述。  
  
-   序列化<xref:System.Web.UI.DataVisualization.Charting.Chart>使用`Save`和`Load`方法，而不指定任何可序列化的屬性。 將序列化具有非預設值，其中包括圖表的資料，所有的圖表內容。  
  
-   序列化所指定的圖表內容<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性群組的圖表內容序列化至類別，例如資料、 外觀，以及其他等等。 請注意，名稱<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>物件都會自動序列化; 序列化的資料會套用到現有的圖表區域，數列載入時。  
  
> [!IMPORTANT]
>  <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性在內部實作<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項作為<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性  
  
-   圖表屬性所指定的序列化<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性。 這是可序列化的所有圖表屬性的逗號分隔清單。 這個屬性設為明確的值之後，它負責的開發人員指定要儲存的所有屬性。 也就是說，不同於<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性，數列的圖表區域名稱不會自動保存。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性也可以用於搭配使用。 不過，請確定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>是與其自身串連，正在設定，否則圖表屬性時所指定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性將會覆寫。  
  
 若要禁止特定屬性進行序列化，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。 當一個屬性會設定為可序列化，不可序列化的這是常見萬用字元使用時，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性擁有優先權。 不過，優先順序也取決於多少萬用字元時，使用了指定的屬性。  
  
 根據預設，可序列化的屬性會設為預設值重設，在載入之前。 此行為可以使用變更<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset%2A>方法也可用來明確圖表屬性重設為其預設值。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationContents Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationContents Content" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberSignature Language="VB.NET" Value="Public Property Content As SerializationContents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationContents Content { System::Web::UI::DataVisualization::Charting::SerializationContents get(); void set(System::Web::UI::DataVisualization::Charting::SerializationContents value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationContents), "Default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationContents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要序列化之圖表內容的類型。</summary>
        <value>
          <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationContents" /> 列舉值，表示將在載入、儲存或重設作業期間序列化的圖表內容。 根據預設，所有的非預設圖表屬性都會保存，包括資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，所有的圖表屬性將序列化時的任何`Save`和`Load`呼叫的方法。 若要提供更多控制序列化透過功能，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性。 請注意，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性也可用連同<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性。  
  
 **重要**<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性會決定圖表特性，例如 「 外觀 」，要序列化的型別，實際上為內部實作<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性。 這表示該設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性，然後設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性將會導致<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性值所覆寫時，除非<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>串連。 請參閱下面這個程序的範例，範例程式碼。  
  
 如果您設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性，所有<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>將自動序列化的物件名稱，這表示，與圖表區域和系列的序列化的資料將會套用到現有的物件載入時。  
  
 設定此屬性會影響所有的負載，儲存及重設作業。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.SerializationFormat Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.SerializationFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::SerializationFormat Format { System::Web::UI::DataVisualization::Charting::SerializationFormat get(); void set(System::Web::UI::DataVisualization::Charting::SerializationFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.DataVisualization.Charting.SerializationFormat), "Xml")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定序列化圖表時使用的格式。</summary>
        <value>
          <see cref="T:System.Web.UI.DataVisualization.Charting.SerializationFormat" /> 列舉值，表示序列化資料的格式。 預設值為 XML。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以 XML 或二進位格式序列化資料。 二進位格式壓縮，並採用比 XML 儲存體較少。 XML，不過，是人類看得懂的文字格式。  
  
 當您儲存或載入序列化的資料時，格式必須是 XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentString">
      <MemberSignature Language="C#" Value="protected string GetContentString (System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetContentString(valuetype System.Web.UI.DataVisualization.Charting.SerializationContents content, bool serializable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.GetContentString(System.Web.UI.DataVisualization.Charting.SerializationContents,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetContentString (content As SerializationContents, serializable As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetContentString(System::Web::UI::DataVisualization::Charting::SerializationContents content, bool serializable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Web.UI.DataVisualization.Charting.SerializationContents" />
        <Parameter Name="serializable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="content">可序列化的內容。</param>
        <param name="serializable">
          <see langword="True" /> 表示要取得可序列化的字串，<see langword="false" /> 則表示要取得不可序列化的字串。</param>
        <summary>根據特定的旗標值，傳回可序列化或不可序列化的類別和 (或) 屬性名稱。</summary>
        <returns>
          <see langword="string" /> 值，表示可序列化或不可序列化的類別和 (或) 屬性名稱。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResetWhenLoading">
      <MemberSignature Language="C#" Value="public bool IsResetWhenLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResetWhenLoading" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberSignature Language="VB.NET" Value="Public Property IsResetWhenLoading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResetWhenLoading { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定旗標，這個旗標表示物件屬性是否會在載入之前重設為預設值。</summary>
        <value>
          如果物件屬性會在載入之前重設為預設值則為 <see langword="True" />，否則為 <see langword="False" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemplateMode">
      <MemberSignature Language="C#" Value="public bool IsTemplateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemplateMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTemplateMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemplateMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定旗標，這個旗標表示圖表序列化程式是否在範本建立模式中運作。</summary>
        <value>
          如果圖表序列化程式在範本建立模式中運作則為 <see langword="True" />，否則為 <see langword="False" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknownAttributeIgnored">
      <MemberSignature Language="C#" Value="public bool IsUnknownAttributeIgnored { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknownAttributeIgnored" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUnknownAttributeIgnored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknownAttributeIgnored { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定旗標，這個旗標表示是否會忽略未知的 XML 屬性和項目，而不擲回例外狀況。</summary>
        <value>
          如果會忽略未知的 XML 屬性和項目而不擲回例外狀況，則為 <see langword="True" />，否則為 <see langword="False" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將序列化資料載入 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控制項中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">衍生自 <see cref="T:System.IO.Stream" /> 類別的物件，例如 <see cref="T:System.IO.MemoryStream" /> 物件。</param>
        <summary>從衍生自 <see cref="T:System.IO.Stream" /> 類別的物件，將序列化資料載入控制項中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法以載入序列化的資料<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項。  
  
 載入作業發生時，可序列化屬性，根據預設，第一次重設為其預設值之前，它們會設定為保存的值，如果儲存。 若要變更此行為，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性。  
  
 根據預設，將會載入序列化的圖表的所有屬性。 若要載入特定的序列化的屬性，設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>載入資料之前的內容。  
  
 請注意，當資料會儲存使用`Save`實際上會序列化方法，只有在具有非預設值的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::TextReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">衍生自 <see cref="T:System.IO.StringReader" /> 抽象類別的讀取器，例如 <see cref="T:System.IO.TextReader" />。</param>
        <summary>從衍生自 <see cref="T:System.IO.TextReader" /> 類別的讀取器物件，將序列化資料載入控制項中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法以載入序列化的資料<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項。  
  
 載入作業發生時，根據預設可序列化的屬性會先重設為其預設值之前它們會設定為保存的值，如果儲存。 若要變更此行為，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性。  
  
 根據預設，將會載入序列化的圖表的所有屬性。 藉由設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>可以載入內容，一組特定的屬性。  
  
 如果您使用這個定義，請注意，使用的格式，這是由<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性，必須是 XML。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>屬性<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項用來保存狀態，這個方法可以用來載入序列化由用戶端張貼的資料送回<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用於儲存序列化資料之檔案的相對或絕對路徑。 如果指定相對路徑，此路徑將相對於目前的目錄。</param>
        <summary>將已儲存至磁碟的序列化資料載入 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 控制項中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法以載入序列化的資料<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項。  
  
 載入作業發生時，可序列化屬性，根據預設，第一次重設為其預設值之前，它們會設定為保存的值，如果儲存。 若要變更此行為，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性。  
  
 根據預設，將會載入序列化的圖表的所有屬性。 若要載入特定的序列化的屬性，設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>載入資料之前的內容。  
  
 請注意，當資料會儲存使用`Save`實際上會序列化方法，只有在具有非預設值的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">要從中讀取保存資料的物件。 這個物件衍生自 <see cref="T:System.Xml.XmlReader" /> 類別，而且可以是 .NET Framework 物件或使用者定義的物件。</param>
        <summary>從衍生自 <see cref="T:System.Xml.XmlReader" /> 類別的物件，將序列化資料載入控制項中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法以載入序列化的資料<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項。  
  
 載入作業發生時，預設序列化屬性會第一次重設為其預設值之前它們會設定為保存的值，如果儲存。 若要變更此行為，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性。  
  
 根據預設，將會載入序列化的圖表的所有屬性。 如果您設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>或<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>可以載入內容，一組特定的屬性。  
  
 當您使用這個定義時，格式必須是 XML。以進行變更<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性。  
  
 當您使用 XML 格式的文字檔案，為了簡單起見使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Load%2A>方法改為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonSerializableContent">
      <MemberSignature Language="C#" Value="public string NonSerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NonSerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property NonSerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NonSerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定不會序列化的圖表屬性。</summary>
        <value>以逗號分隔的 <see langword="string" /> 運算式，表示不會序列化的圖表屬性。 語法為 "Class.Property[,Class.Property]"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設所有圖表屬性都會序列化時`Save`和`Load`呼叫的方法。 您可以使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性限制圖表的特性，可序列化，以及與<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性。  
  
 此屬性會決定哪一個圖表特性不會序列化。 可以在字串運算式中，使用萬用字元，以相同方式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性。 例如，若要排除所有圖表`BackColor`屬性從序列化，將此屬性設定為"*。背景色彩 」。  
  
 某些情況下，屬性可以設序列化與未序列化，使用萬用字元時，這很常見。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>運算式具有較低的優先權，相較於<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>運算式。 不過請注意較少的加權可以使用萬用字元的字串運算式。 例如，如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性設定為"*。背景色彩 」 和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性設定為<xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A>，所有 B`ackColor`以外的屬性<xref:System.Web.UI.DataVisualization.Charting.ChartArea>要序列化的物件。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性已設定，優先順序取決於用於多少萬用字元<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>運算式。 例如，設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性<xref:System.Web.UI.DataVisualization.Charting.SerializationContents.Appearance>會導致<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性包含"*。回\*"運算式。 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性設定為"\*。回\*"，則所有`Back*`圖表屬性，例如`BackColor`， `BackGradient`，依此類推，仍會序列化。 這是因為<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性值具有更高的優先權，相較於<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 所有儲存時，此屬性會影響載入及重設作業。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重設所有標記為即將序列化的圖表屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，這個方法會重設圖表的所有屬性為其預設值。  
  
 若要限制圖表屬性重設為其預設值，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 請注意，這個方法也稱為自動當`Load`使用方法和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A>屬性設定為`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>儲存具有非預設值的圖表屬性。 所有圖表屬性都能序列化，包括資料。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">衍生自 <see cref="T:System.IO.Stream" /> 類別且用來儲存圖表屬性的物件，例如 <see cref="T:System.IO.MemoryStream" />。</param>
        <summary>將具有非預設值的圖表資料和屬性儲存至衍生自 <see cref="T:System.IO.Stream" /> 類別的物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，所有的圖表內容具有非預設值，其中包含資料點，將序列化時呼叫這個方法。 若要控制圖表的特性，可序列化，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 如果這個方法用來儲存成範本的外觀屬性，請確定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A>屬性<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer>物件第一次設定為`true`之前呼叫這個方法。  
  
 序列化的圖表做為範本，就會發生以不同的方式從非範本序列化;範本序列化專注於外觀屬性。  
  
 當範本經過序列化之後時，<xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A>方法可以用來載入範本，以提供圖表的外觀屬性。  
  
 範本可以用來模擬自訂調色盤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">衍生自 <see cref="T:System.IO.TextWriter" /> 類別且用來儲存圖表屬性的物件，例如 <see cref="T:System.IO.StringWriter" />。</param>
        <summary>將具有非預設值的圖表資料和屬性儲存至衍生自 <see cref="T:System.IO.TextWriter" /> 類別的指定物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，所有的圖表內容具有非預設值，其中包含資料點，將序列化時呼叫這個方法。 若要控制序列化的圖表特性是，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 當您使用這個定義時，格式必須是 XML。可以透過設定格式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>屬性<xref:System.Web.UI.DataVisualization.Charting.Chart>控制項用來保存狀態，這個方法可用來將序列化的資料儲存到衍生自物件<xref:System.IO.TextWriter>，然後用來將資料寫入<xref:System.Web.UI.DataVisualization.Charting.Chart.ViewStateData%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">用於儲存序列化資料之檔案的相對或絕對路徑。 請注意，如果指定相對路徑，此路徑將相對於目前的目錄。</param>
        <summary>將具有非預設值的圖表資料和屬性儲存至指定的檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設所有圖表內容具有非預設值，其中包含資料點，將都序列化時呼叫這個方法。 若要控制圖表的特性是序列化使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 依預設是以 XML 格式儲存資料。 若要以二進位格式儲存資料，請使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性。  
  
 請注意，必須啟用檔案會儲存的目錄的寫入權限。 根據預設，這是應用程式的 Bin 資料夾。  
  
 如果此方法用於儲存成範本的外觀屬性，請確定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A>屬性第一次設`true`之前呼叫這個方法。  
  
 序列化的圖表做為範本就會繼續以不同的方式從非範本序列化，主要是因為範本序列化專注於外觀屬性。  
  
 當範本經過序列化之後時，<xref:System.Web.UI.DataVisualization.Charting.Chart.LoadTemplate%2A>方法可以用來載入範本，以提供圖表的外觀屬性。  
  
 範本可以用來模擬自訂調色盤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">衍生自 <see cref="T:System.Xml.XmlWriter" /> 且用來儲存 <see cref="T:System.Web.UI.DataVisualization.Charting.Chart" /> 屬性的物件。</param>
        <summary>將具有非預設值的圖表資料和屬性儲存至衍生自 <see cref="T:System.Xml.XmlWriter" /> 類別的指定物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，所有的圖表內容具有非預設值，其中包含資料點，將序列化時呼叫這個方法。 若要控制序列化的圖表特性是，使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。  
  
 當您使用這個定義時，格式必須是 XML。格式可以變更與<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Format%2A>屬性。  
  
 當您使用 XML 格式的文字檔案，為了簡單起見使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Save%2A>方法改為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializableContent">
      <MemberSignature Language="C#" Value="public string SerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定可以序列化的圖表屬性。</summary>
        <value>以逗號分隔的 <see langword="string" /> 運算式，表示要序列化的圖表屬性。 語法為 "Class.Property[,Class.Property]"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設所有圖表屬性都會序列化時`Save`和`Load`呼叫的方法。 您可以使用<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性限制圖表的特性，可序列化，以及與<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性。  
  
 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性會決定要序列化的哪一個圖表的特性。 可以在字串運算式中，使用萬用字元，以相同方式<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性。 例如，要序列化所有圖表`BackColor`屬性，將此屬性設定為"*。背景色彩 」。  
  
 如果<xref:System.Web.UI.DataVisualization.Charting.ChartArea>及/或<xref:System.Web.UI.DataVisualization.Charting.Series>子指定屬性，然後所有名稱<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>以啟用要套用至現有的保存的資料必須也指定物件<xref:System.Web.UI.DataVisualization.Charting.ChartArea>和<xref:System.Web.UI.DataVisualization.Charting.Series>物件;也就是說，您必須指定"Series.Name"和"ChartArea.Name 」 運算式。 請參閱下面這個程序的範例，範例程式碼。 同樣地，如果使用多個圖表區域，<xref:System.Web.UI.DataVisualization.Charting.Series.ChartArea%2A>屬性的所有繪製<xref:System.Web.UI.DataVisualization.Charting.Series>也必須先儲存。  
  
 某些情況下，屬性可以設序列化與未序列化，使用萬用字元時，這很常見。 <xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>運算式具有較低的優先權，相較於<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>運算式。 不過請注意較少的加權可以使用萬用字元的字串運算式。 例如，如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性設定為"*。背景色彩 」 和<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A>屬性設定為<xref:System.Web.UI.DataVisualization.Charting.ChartArea.BackColor%2A>，所有 B`ackColor`以外的屬性<xref:System.Web.UI.DataVisualization.Charting.ChartArea>要序列化的物件。  
  
 如果您設定<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性，<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性會在內部設定。 如果<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.Content%2A>屬性已設定，但另一個屬性必須可序列化，請務必串連<xref:System.Web.UI.DataVisualization.Charting.ChartSerializer.SerializableContent%2A>屬性指定該額外的屬性時。 請參閱下面這個程序的範例，範例程式碼。  
  
 所有儲存時，此屬性會影響載入及重設作業。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>