<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e5abbbb4127a70618dec57bc5d4a3c801c8ebc84" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370372" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>擷取符合指定之 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 物件的匯出。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />  中的匯出變更時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當提供的匯出變更時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得指定的匯出。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`1" /> 物件的型別參數。 合約名稱也是從這個型別參數衍生。</typeparam>
        <summary>傳回具有從指定型別參數中衍生之合約名稱的匯出。 如果沒有任何項目完全符合匯出結果，則擲回例外狀況。</summary>
        <returns>具有從指定型別參數中衍生之合約名稱的匯出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的 <see cref="T:System.Lazy`1" /> 物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的 <see cref="T:System.Lazy`1" /> 物件衍生自  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`1" /> 物件的型別參數。</typeparam>
        <param name="contractName">要傳回的 <see cref="T:System.Lazy`1" /> 物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>傳回具有指定合約名稱的匯出。 如果沒有任何項目完全符合匯出結果，則擲回例外狀況。</summary>
        <returns>具有指定合約名稱的匯出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的 <see cref="T:System.Lazy`1" /> 物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的 <see cref="T:System.Lazy`1" /> 物件衍生自  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`2" /> 物件的型別參數。 合約名稱也是從這個型別參數衍生。</typeparam>
        <typeparam name="TMetadataView">要傳回的 <see cref="T:System.Lazy`2" /> 物件中繼資料檢視的型別。</typeparam>
        <summary>傳回具有從指定型別參數中衍生之合約名稱的匯出。 如果沒有任何項目完全符合匯出結果，則擲回例外狀況。</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的 <see cref="T:System.Lazy`2" /> 物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的 <see cref="T:System.Lazy`2" /> 物件衍生自  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> 不是有效的中繼資料檢視型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`2" /> 物件的型別參數。</typeparam>
        <typeparam name="TMetadataView">要傳回的 <see cref="T:System.Lazy`2" /> 物件中繼資料檢視的型別。</typeparam>
        <param name="contractName">要傳回的 <see cref="T:System.Lazy`2" /> 物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>傳回具有指定合約名稱的匯出。 如果沒有任何項目完全符合匯出結果，則擲回例外狀況。</summary>
        <returns>具有指定合約名稱的匯出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的 <see cref="T:System.Lazy`2" /> 物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的 <see cref="T:System.Lazy`2" /> 物件衍生自  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件中的 <paramref name="T" />。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> 不是有效的中繼資料檢視型別。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得匯出的物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。 合約名稱也是從這個型別參數衍生。</typeparam>
        <summary>傳回具有從指定型別參數中衍生之合約名稱的匯出物件。 如果沒有一個完全相符的匯出物件，則會擲回例外狀況。</summary>
        <returns>具有從指定型別參數中衍生之合約名稱的匯出物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的匯出物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的匯出物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" />  。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基礎的匯出物件無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。</typeparam>
        <param name="contractName">要傳回的匯出物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>傳回具有指定合約名稱的匯出物件。 如果沒有一個完全相符的匯出物件，則會擲回例外狀況。</summary>
        <returns>具有指定合約名稱的匯出物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">沒有任何具有合約名稱的匯出物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" />。  
  
 -或-  
  
 有一個以上具有合約名稱的匯出物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" />  。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基礎的匯出物件無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得指定匯出物件或預設值 (如果有的話)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。 合約名稱也是從這個型別參數衍生。</typeparam>
        <summary>取得具有從指定型別參數或指定型別的預設值衍生之合約名稱的匯出物件，或者如果有一個以上相符的匯出物件，則擲回例外狀況。</summary>
        <returns>具有從 <paramref name="T" /> 衍生之合約名稱的匯出物件 (如果找到的話)，否則，為預設值 <paramref name="T" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到匯出的物件，這個方法會傳回適當的預設值`T`; 例如，整數類型零`false`針對布林類型，和`null`參考類型。  
  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">有一個以上具有合約名稱的匯出物件衍生自 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中的 <paramref name="T" />  。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基礎的匯出物件無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。</typeparam>
        <param name="contractName">要傳回的匯出物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>取得具有指定合約名稱或指定型別預設值的匯出物件，或者如果有一個以上相符的匯出物件，則擲回例外狀況。</summary>
        <returns>具有指定合約名稱的匯出物件 (如果找到的話)，否則，為預設值 <paramref name="T" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到匯出的物件，這個方法會傳回適當的預設值`T`; 例如，整數類型零`false`針對布林類型，和`null`參考類型。  
  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 中有一個以上具有指定之合約名稱的匯出物件。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">基礎的匯出物件無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得一或多個匯出物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。 合約名稱也是從這個型別參數衍生。</typeparam>
        <summary>取得具有從指定型別參數中衍生之合約名稱的匯出物件。</summary>
        <returns>具有從指定型別參數衍生之合約名稱的匯出物件 (如果找到的話)，否則，為空白 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">一個或多個基礎的匯出物件無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之已匯出的物件型別。</typeparam>
        <param name="contractName">要傳回的匯出物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>取得具有指定合約名稱的所有匯出物件。</summary>
        <returns>則為具有指定合約名稱的匯出物件 (如果找到的話)，否則，為空白 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">一個或多個基礎匯出的值無法轉換成 <paramref name="T" />。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">在撰寫期間發生錯誤。 <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 將包含發生之錯誤的集合。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得符合指定條件的所有匯出。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">物件，此物件會定義要取得之 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件的條件。</param>
        <summary>取得符合指定之匯入定義條件的所有匯出。</summary>
        <returns>一個集合，包含符合 <paramref name="definition" /> 指定條件的所有 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 為 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，而且沒有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件符合指定之 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件。  
  
 -或-  
  
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 為 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，而且有一個以上的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件符合指定之 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">物件，此物件會定義要取得之 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件的條件。</param>
        <param name="atomicComposition">用於撰寫的異動容器。</param>
        <summary>取得符合指定匯入定義和撰寫條件的所有匯出。</summary>
        <returns>一個集合，包含符合 <paramref name="definition" /> 和 <paramref name="atomicComposition" /> 指定條件的所有 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 為 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，而且沒有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件符合指定之 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件。  
  
 -或-  
  
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 為 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />，而且有一個以上的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件符合指定之 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> 為 <see langword="null" />。  
  
 -或-  
  
 <paramref name="atomicComposition" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">要傳回之 <see cref="T:System.Lazy`2" /> 物件的型別參數。</param>
        <param name="metadataViewType">要傳回的 <see cref="T:System.Lazy`2" /> 物件中繼資料檢視的型別。</param>
        <param name="contractName">要傳回的 <see cref="T:System.Lazy`2" /> 物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>取得具有指定之合約名稱的所有匯出結果。</summary>
        <returns>一個集合，包含符合 <paramref name="contractName" /> 之合約的所有 <see cref="T:System.Lazy`2" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`type`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="metadataViewType" /> 不是有效的中繼資料檢視型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`1" /> 物件的型別參數。 合約名稱也是從這個型別參數衍生。</typeparam>
        <summary>取得具有從指定型別參數衍生之合約名稱的所有匯出。</summary>
        <returns>則為具有從 <paramref name="T" /> 衍生之合約名稱的 <see cref="T:System.Lazy`1" /> 物件 (如果找到的話)，否則，為空白  <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`1" /> 物件的型別參數。</typeparam>
        <param name="contractName">要傳回的 <see cref="T:System.Lazy`1" /> 物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>取得具有指定之合約名稱的所有匯出結果。</summary>
        <returns>則為具有指定合約名稱的 <see cref="T:System.Lazy`1" /> 物件 (如果找到的話)，否則，為空白 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`2" /> 物件的型別參數。 合約名稱也是從這個型別參數衍生。</typeparam>
        <typeparam name="TMetadataView">要傳回的 <see cref="T:System.Lazy`2" /> 物件中繼資料檢視的型別。</typeparam>
        <summary>取得具有從指定型別參數衍生之合約名稱的所有匯出。</summary>
        <returns>則為具有從 <paramref name="T" /> 衍生之合約名稱的 <see cref="T:System.Lazy`2" /> 物件 (如果找到的話)，否則，為空白  <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> 不是有效的中繼資料檢視型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">要傳回之 <see cref="T:System.Lazy`2" /> 物件的型別參數。 合約名稱也是從這個型別參數衍生。</typeparam>
        <typeparam name="TMetadataView">要傳回的 <see cref="T:System.Lazy`2" /> 物件中繼資料檢視的型別。</typeparam>
        <param name="contractName">要傳回的 <see cref="T:System.Lazy`2" /> 物件的合約名稱，或者是 <see langword="null" />，或者是要使用預設合約名稱的空字串 ("")。</param>
        <summary>取得具有指定之合約名稱的所有匯出結果。</summary>
        <returns>具有指定合約名稱的 <see cref="T:System.Lazy`2" /> 物件 (如果找到的話)，否則，為空白 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的合約名稱是呼叫<xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A>方法`T`。  
  
 合約名稱使用比較<xref:System.StringComparer.Ordinal%2A>執行區分大小寫且非語言比較的屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 物件已經處置。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> 不是有效的中繼資料檢視型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">一個物件，該物件定義要傳回的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件的條件。</param>
        <param name="atomicComposition">用於撰寫的異動容器。</param>
        <summary>取得符合指定定義所定義限制的所有匯出。</summary>
        <returns>集合，包含符合指定之條件的所有匯出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 覆寫這個方法不應該將基數相關不符視為錯誤，並不應該擲回例外狀況的情況。 例如，如果<xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A>是<xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne>及沒有零<xref:System.ComponentModel.Composition.Primitives.Export>符合指定條件的物件<xref:System.ComponentModel.Composition.Primitives.ImportDefinition>，空<xref:System.Collections.Generic.IEnumerable%601>應該傳回的集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。</param>
        <summary>引發 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。</param>
        <summary>引發 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">物件，此物件會定義要取得之 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件的條件。</param>
        <param name="atomicComposition">用於撰寫的異動容器。</param>
        <param name="exports">當此方法傳回時，包含符合 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 定義條件的  <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 物件集合 (如果有找到的話)，否則，則為空的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>取得符合指定之匯入條件的所有匯出。</summary>
        <returns>
          若 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> 且有零個 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 物件符合指定 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件，則為 <see langword="true" />；若 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> 且有剛好一個 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 符合指定 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 的條件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>