<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73821694b44de6d89969923dba3f331aa67d31f0" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51903108" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供強型別資源的支援。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，資源會將程式碼分開的應用程式內的內容。 建立及使用這些資源可讓您更輕鬆地開發可當地語系化的應用程式。 在.NET Framework 中，耗用的資源通常使用<xref:System.Resources.ResourceManager>類別，其中包含在執行階段提供特定文化特性資源的存取權的方法。 如需有關建立及使用資源的詳細資訊，請參閱 < [Resources in Desktop Apps](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)。  
  
 強類型的資源的支援是編譯時期功能封裝資源的存取權，藉由建立類別，其中包含一組靜態、 唯讀 (`get`) 屬性。 這樣會耗用資源，而不是呼叫的替代方法<xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType>和<xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType>方法。  
  
 強類型的資源支援的基本功能由<xref:System.Resources.Tools.StronglyTypedResourceBuilder>類別 (以及`/str`中的命令列選項[Resgen.exe （資源檔產生器）](~/docs/framework/tools/resgen-exe-resource-file-generator.md))。 輸出<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法是包含與輸入參數中所參考之資源相符的強型別的屬性的類別。 這個類別會提供唯讀資源的存取權，可處理檔案中。  
  
   
  
## Examples  
 下列範例會產生類別，名為`DemoResources`，以 C# 或 Visual Basic （取決於此範例的原始程式碼）。 這個類別是在`DemoApp`命名空間，且傳回的標誌點陣圖和應用程式名稱的屬性。 此範例會呼叫`CreateResourceFile`方法用來建立必要的.resw 檔案，而且需要名為 Logo.bmp 的點陣圖檔案位於此範例目前的目錄。 在程式碼範例會使用名為 demo.resx 下列資源檔：  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 應用程式程式碼接著可用的類別，如下所示：  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>產生類別檔案，其中包含與輸入參數中指定之資源相符的強型別屬性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> 集合，其中每個字典項目成對的索引鍵/值組，是資源的名稱與資源的值。</param>
        <param name="baseName">要產生的類別名稱。</param>
        <param name="generatedCodeNamespace">要產生的類別命名空間。</param>
        <param name="codeProvider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 類別，提供將產生之類別的語言。</param>
        <param name="internalClass">若要產生內部類別為 <see langword="true" />；若要產生公用類別則為 <see langword="false" />。</param>
        <param name="unmatchable">陣列，其包含無法產生屬性的每個資源名稱。 一般而言，因為資源名稱不是有效的識別碼，所以無法產生屬性。</param>
        <summary>產生一個類別檔案，而其包含符合指定集合中所參考之資源的強型別屬性。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法來產生類別，可提供存取的資源中所包含的強型別、 唯讀包裝函式`resourceList`參數。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>類別會忽略任何資源名稱開頭的字元"$"或">> 」。 資源名稱"Culture"和"ResourceManager"是無效的識別項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">資源節點名稱與 <paramref name="resourceList" /> 中的其索引鍵不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">當做輸入的 .resx 檔案名稱。</param>
        <param name="baseName">要產生的類別名稱。</param>
        <param name="generatedCodeNamespace">要產生的類別命名空間。</param>
        <param name="codeProvider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 類別，提供將產生之類別的語言。</param>
        <param name="internalClass">若要產生內部類別為 <see langword="true" />；若要產生公用類別則為 <see langword="false" />。</param>
        <param name="unmatchable">
          <see cref="T:System.String" /> 陣列，其包含無法產生屬性的每個資源名稱。 一般而言，因為資源名稱不是有效的識別碼，所以無法產生屬性。</param>
        <summary>產生類別檔案，其中包含與指定 .resx 檔案中之資源相符的強型別屬性。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法來產生類別，可提供強型別、 唯讀存取的資源中包含`resxFile`參數。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>類別會忽略任何資源名稱開頭的字元"$"或">> 」。 資源名稱"Culture"和"ResourceManager"是無效的識別項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">
          <see cref="T:System.Collections.IDictionary" /> 集合，其中每個字典項目成對的索引鍵/值組，是資源的名稱與資源的值。</param>
        <param name="baseName">要產生的類別名稱。</param>
        <param name="generatedCodeNamespace">要產生的類別命名空間。</param>
        <param name="resourcesNamespace">要產生的資源命名空間。</param>
        <param name="codeProvider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 物件，提供將產生之類別的語言。</param>
        <param name="internalClass">若要產生內部類別為 <see langword="true" />；若要產生公用類別則為 <see langword="false" />。</param>
        <param name="unmatchable">
          <see cref="T:System.String" /> 陣列，其包含無法產生屬性的每個資源名稱。 一般而言，因為資源名稱不是有效的識別碼，所以無法產生屬性。</param>
        <summary>產生一個類別檔案，而其包含符合指定集合中所參考之資源的強型別屬性。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載可讓您使用`resourcesNamespace`參數來指定產生的資源的命名空間。 在此情況下，產生的程式碼看起來像這樣：  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 在大部分情況下，您不需要從您的應用程式程式碼呼叫此方法。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>類別會忽略任何資源名稱開頭的字元"$"或">> 」。 資源名稱"Culture"和"ResourceManager"是無效的識別項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 是 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">資源節點名稱與 <paramref name="resourceList" /> 中的其索引鍵不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">當做輸入的 .resx 檔案名稱。</param>
        <param name="baseName">要產生的類別名稱。</param>
        <param name="generatedCodeNamespace">要產生的類別命名空間。</param>
        <param name="resourcesNamespace">要產生的資源命名空間。</param>
        <param name="codeProvider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 類別，提供將產生之類別的語言。</param>
        <param name="internalClass">若要產生內部類別為 <see langword="true" />；若要產生公用類別則為 <see langword="false" />。</param>
        <param name="unmatchable">
          <see cref="T:System.String" /> 陣列，其包含無法產生屬性的每個資源名稱。 一般而言，因為資源名稱不是有效的識別碼，所以無法產生屬性。</param>
        <summary>產生類別檔案，其中包含與指定 .resx 檔案中之資源相符的強型別屬性。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> 容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>方法來產生類別，可提供強型別、 唯讀存取的資源中包含`resxFile`參數。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>類別會忽略任何資源名稱開頭的字元"$"或">> 」。 資源名稱"Culture"和"ResourceManager"是無效的識別項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> 或 <paramref name="codeProvider" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">要驗證的字串，並且在必要時，轉換為有效的資源名稱。</param>
        <param name="provider">
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 物件，其指定要使用的目標語言。</param>
        <summary>根據指定的輸入字串和程式碼提供者，產生有效的資源字串。</summary>
        <returns>衍生自 <paramref name="key" /> 參數的有效資源名稱。 任何有效的資源名稱都會以底線 (_) 字元取代，但如果根據 <paramref name="provider" /> 參數指定的語言，衍生的字串仍包含無效的字元，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`key`參數有效的字元字串，該字串會傳回。 如果`key`參數是無效的字串或包含無效的字元字串<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法會嘗試產生有效的字串，根據`key`和`provider`參數。 如果是有效的字串，可以產生，，則會傳回字串;否則，`null`會傳回。  
  
 如果`key`參數為空字串 ("")，會傳回一個底線字元 (_) 所組成的字串。 如果`key`參數不是空字串，<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法會比較每個字元字串中無效的語彙基元所指定的語言為基礎的一組要`provider`參數。 在字串中任何無效的字元取代底線字元。 將會以底線取代的字元如下所示：  
  
 '' （空格）、 U + 00A0 （不分行空格） '。 '（句點），'、' （逗號），';'（分號），'&#124;'，' ~'，' @'，'#'、 '%'、 '^'，'&'、' *'，'+'、 '-'，'/'、 '\\'、'\<'，' > '、'？ '，' ['，']'，'（'，'）'、' {'，'}'，'"' （引號），' '（縮寫符號）':'，和 ' ！ '。  
  
> [!NOTE]
>  強型別的資源不允許使用語言關鍵字 (例如`if`，`for`等等) 作為資源的索引鍵名稱。 不過，<xref:System.CodeDom>設計模式可讓使用語言關鍵字前面加上底線字元的關鍵字。 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>方法呼叫<xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A>來強制執行這項設計的方法。 例如，如果您使用的資源名稱的是同為語言關鍵字，例如`for`，名稱會顯示為`_for`產生強類型的資源類別中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>