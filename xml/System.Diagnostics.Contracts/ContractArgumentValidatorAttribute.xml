<Type Name="ContractArgumentValidatorAttribute" FullName="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1cb1413fd21fcf82c4b83c8c37a7173dfd606243" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30397012" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ContractArgumentValidatorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContractArgumentValidatorAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContractArgumentValidatorAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContractArgumentValidatorAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.Conditional("CONTRACTS_FULL")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="23f68-101">可讓您將舊版 <see langword="if-then-throw" /> 程式碼分成不同的方法以供重複使用，並讓您完整控制擲回的例外狀況和引數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="23f68-101">Enables the factoring of legacy <see langword="if-then-throw" /> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23f68-102">如果您的程式碼會使用明確`if-then-throw`驗證參數的程式碼，您可能會採用 helper 方法，執行檢查，並擲回特定的例外狀況，如果失敗，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="23f68-102">If your code uses explicit `if-then-throw` code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow1.cs#1)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow1.vb#1)]  
  
 <span data-ttu-id="23f68-103">在此範例中，`Execute`有指定參數值不應該選用的先決條件`null`。</span><span class="sxs-lookup"><span data-stu-id="23f68-103">In this example, `Execute` has an elective precondition specifying that the parameter value should not be `null`.</span></span> <span data-ttu-id="23f68-104">若要啟用合約工具，您可辨識的呼叫`ValidationHelper.NotNull`合約表示，您可以將標記所呼叫的方法與<xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="23f68-104">To enable the contract tools to recognize that the call to `ValidationHelper.NotNull` represents a contract, you can mark the called method with the  <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute> attribute.</span></span> <span data-ttu-id="23f68-105"><xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType>方法呼叫應該用來啟用工具來擷取正確的規格產生文件 」 和 「 靜態檢查，如下所示。</span><span class="sxs-lookup"><span data-stu-id="23f68-105">The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow2.cs#2)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow2.vb#2)]  
  
 <span data-ttu-id="23f68-106">除了`if-then-throw`陳述式中，合約驗證方法的合約區段可能包含其他合約的驗證方法的呼叫。</span><span class="sxs-lookup"><span data-stu-id="23f68-106">In addition to `if-then-throw` statements, the contract section of contract validator methods may contain calls to other contract validator methods.</span></span> <span data-ttu-id="23f68-107">不過，任何其他合約 (例如<xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>，或<xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) 允許。</span><span class="sxs-lookup"><span data-stu-id="23f68-107">However, no other contracts (such as <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>, or <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) are allowed.</span></span> <span data-ttu-id="23f68-108">下列程式碼<xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType>所有合約工具會都忽略呼叫。</span><span class="sxs-lookup"><span data-stu-id="23f68-108">Code that follows the <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> call is ignored by all contract tools.</span></span>  
  
 <span data-ttu-id="23f68-109">下列範例顯示範圍引數的驗證程式，根據現有寫入`NotNull`驗證方法。</span><span class="sxs-lookup"><span data-stu-id="23f68-109">The following example shows a range argument validator written in terms of an existing `NotNull` validator method.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow3.cs#3)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow3.vb#3)]  
  
 <span data-ttu-id="23f68-110">從規格觀點來看，`Execute`方法具有下列三個合約：</span><span class="sxs-lookup"><span data-stu-id="23f68-110">From a specification point of view, the `Execute` method has the following three contracts:</span></span>  
  
```  
Contract.Requires<ArgumentNullException>(data != null);  
Contract.Requires<ArgumentOutOfRangeException>(position >= 0);  
Contract.Requires<ArgumentOutOfRangeException>(position < data.Length);  
  
```  
  
 <span data-ttu-id="23f68-111">在標準的方法中，合約驗證方法的呼叫可以自由地混合與其他合約例如<xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="23f68-111">In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType> or <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContractArgumentValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContractArgumentValidatorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="23f68-112">初始化 <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="23f68-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>