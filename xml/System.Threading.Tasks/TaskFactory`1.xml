<Type Name="TaskFactory&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskFactory&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90cfd93df290ec5dd7f07f30a3e84f70694db8dd" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52230624" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="430e5-101">此類別的方法所建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 物件的傳回值。</span><span class="sxs-lookup"><span data-stu-id="430e5-101">The return value of the <see cref="T:System.Threading.Tasks.Task`1" /> objects that the methods of this class create.</span></span></typeparam>
    <summary><span data-ttu-id="430e5-102">提供建立和排程 <see cref="T:System.Threading.Tasks.Task`1" /> 物件的支援。</span><span class="sxs-lookup"><span data-stu-id="430e5-102">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-103">.NET Framework 會提供建立和排程工作的兩個處理站：</span><span class="sxs-lookup"><span data-stu-id="430e5-103">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="430e5-104"><xref:System.Threading.Tasks.TaskFactory>類別，這會建立<xref:System.Threading.Tasks.Task>和<xref:System.Threading.Tasks.Task%601>物件。</span><span class="sxs-lookup"><span data-stu-id="430e5-104">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
-   <span data-ttu-id="430e5-105"><xref:System.Threading.Tasks.TaskFactory%601>類別，這會建立<xref:System.Threading.Tasks.Task%601>物件。</span><span class="sxs-lookup"><span data-stu-id="430e5-105">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="430e5-106"><xref:System.Threading.Tasks.TaskFactory%601>類別可讓您執行下列動作：</span><span class="sxs-lookup"><span data-stu-id="430e5-106">The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="430e5-107">建立工作並立即開始藉由呼叫<xref:System.Threading.Tasks.TaskFactory.StartNew%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-107">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="430e5-108">您可以呼叫此方法來建立和執行的工作需要非預設引數的多載。</span><span class="sxs-lookup"><span data-stu-id="430e5-108">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="430e5-109">開頭[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType>方法提供最簡單的方式，使用預設組態值建立工作並立即加以啟動。</span><span class="sxs-lookup"><span data-stu-id="430e5-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="430e5-110">建立工作，藉由呼叫其中一個陣列中的工作完成時，會啟動<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A>或<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="430e5-111">建立時在陣列中的所有工作都完成藉由呼叫啟動工作<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A>或<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="430e5-112">靜態<xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType>屬性會傳回預設值<xref:System.Threading.Tasks.TaskFactory%601>物件。</span><span class="sxs-lookup"><span data-stu-id="430e5-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="430e5-113">您也可以呼叫其中一個<xref:System.Threading.Tasks.TaskFactory%601>類別建構函式來設定<xref:System.Threading.Tasks.Task%601>物件<xref:System.Threading.Tasks.TaskFactory%601>類別會建立。</span><span class="sxs-lookup"><span data-stu-id="430e5-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates.</span></span> <span data-ttu-id="430e5-114">下列範例會設定新<xref:System.Threading.Tasks.TaskFactory%601>物件來建立具有指定的取消語彙基元、 工作建立選項、 接續選項和自訂的工作排程器工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]
 [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  
  
 <span data-ttu-id="430e5-115">在大部分情況下，您就不必具現化新<xref:System.Threading.Tasks.TaskFactory%601>執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance.</span></span> <span data-ttu-id="430e5-116">相反地，您可以使用靜態<xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType>屬性，會傳回 factory 物件，會使用預設值。</span><span class="sxs-lookup"><span data-stu-id="430e5-116">Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="430e5-117">然後，您可以呼叫其方法來啟動新的工作，或定義工作接續。</span><span class="sxs-lookup"><span data-stu-id="430e5-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="430e5-118">如需圖例，請參閱範例。</span><span class="sxs-lookup"><span data-stu-id="430e5-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="430e5-119">下列範例會使用靜態<xref:System.Threading.Tasks.Task%601.Factory%2A>屬性，以便在兩個呼叫<xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-119">The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="430e5-120">第一項工作會傳回字串陣列，而第二個則會傳回字串陣列，其中會填入使用者的 MyDocuments 目錄之子目錄的名稱填入使用者的 MyDocuments 目錄中的檔案名稱。</span><span class="sxs-lookup"><span data-stu-id="430e5-120">The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="430e5-121">然後它會呼叫<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType>方法，這個對話方塊會顯示兩個工作完成執行之後傳回的陣列數目的檔案和目錄的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="430e5-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="430e5-122">所有 public 和 protected 成員<see cref="T:System.Threading.Tasks.TaskFactory`1" />是安全執行緒，且可能會從多個執行緒同時使用。</span><span class="sxs-lookup"><span data-stu-id="430e5-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-123">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-123">Task Parallel Library (TPL)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="430e5-124">初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-124">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-125">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-125">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="430e5-126">使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-126">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-127">這個建構函式會建立<xref:System.Threading.Tasks.TaskFactory%601>以預設組態的執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-127">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="430e5-128"><xref:System.Threading.Tasks.TaskCreationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskCreationOptions.None>，則<xref:System.Threading.Tasks.TaskContinuationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskContinuationOptions.None>，而<xref:System.Threading.Tasks.TaskScheduler>屬性會初始化為目前的排程器 (請參閱<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="430e5-128">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-129">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-129">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="430e5-130">除非呼叫處理站方法時明確指定另一個取消語彙基元，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-130">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="430e5-131">使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-131">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-132">這個建構函式會建立<xref:System.Threading.Tasks.TaskFactory%601>以預設組態的執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-132">This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration.</span></span> <span data-ttu-id="430e5-133"><xref:System.Threading.Tasks.TaskCreationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskCreationOptions.None>，則<xref:System.Threading.Tasks.TaskContinuationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskContinuationOptions.None>，而<xref:System.Threading.Tasks.TaskScheduler>屬性會初始化為目前的排程器 (請參閱<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="430e5-133">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-134">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-134">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="430e5-135">排程器，用來排定任何使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 所建立的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-135">The scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="430e5-136">null 值表示應該使用目前的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-136">A null value indicates that the current <see cref="T:System.Threading.Tasks.TaskScheduler" /> should be used.</span></span></param>
        <summary><span data-ttu-id="430e5-137">使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-137">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-138">使用這個建構函式，<xref:System.Threading.Tasks.TaskCreationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskCreationOptions.None>，則<xref:System.Threading.Tasks.TaskContinuationOptions>屬性會初始化為<xref:System.Threading.Tasks.TaskContinuationOptions.None>，和<xref:System.Threading.Tasks.TaskScheduler>屬性會初始化為`scheduler`，除非它有`null`中這種情況下的屬性會初始化為目前的排程器 (請參閱<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="430e5-138">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-139">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-139">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-140">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-140">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-141">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-141">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="430e5-142">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立工作時要採用的預設選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-142">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-143">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立接續工作時要採用的預設選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-143">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <summary><span data-ttu-id="430e5-144">使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-144">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-145">使用這個建構函式，<xref:System.Threading.Tasks.TaskCreationOptions>屬性會初始化為`creationOptions`，則<xref:System.Threading.Tasks.TaskContinuationOptions>屬性會初始化為`continuationOptions`，而<xref:System.Threading.Tasks.TaskScheduler>屬性會初始化為目前的排程器 (請參閱<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="430e5-145">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-146"><paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了無效值。</span><span class="sxs-lookup"><span data-stu-id="430e5-146"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-147">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-147">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-148">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-148">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-149">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-149">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskFactory&lt;'Result&gt; (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="430e5-150">除非呼叫處理站方法時明確指定另一個取消語彙基元，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-150">The default cancellation token that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another cancellation token is explicitly specified when calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-151">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立工作時要採用的預設選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-151">The default options to use when creating tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-152">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立接續工作時要採用的預設選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-152">The default options to use when creating continuation tasks with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-153">預設排程器，用來排定任何使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 所建立的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-153">The default scheduler to use to schedule any tasks created with this <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</span></span> <span data-ttu-id="430e5-154">null 值表示應該使用 <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-154">A null value indicates that <see cref="P:System.Threading.Tasks.TaskScheduler.Current" /> should be used.</span></span></param>
        <summary><span data-ttu-id="430e5-155">使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-155">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory`1" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-156">使用這個建構函式，<xref:System.Threading.Tasks.TaskCreationOptions>屬性會初始化為`creationOptions`，則<xref:System.Threading.Tasks.TaskContinuationOptions>屬性會初始化為`continuationOptions`，和<xref:System.Threading.Tasks.TaskScheduler>屬性會初始化為`scheduler`，除非它有`null`中這種情況下的屬性會初始化為目前的排程器 (請參閱<xref:System.Threading.Tasks.TaskScheduler.Current%2A>)。</span><span class="sxs-lookup"><span data-stu-id="430e5-156">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-157"><paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了無效值。</span><span class="sxs-lookup"><span data-stu-id="430e5-157"><paramref name="creationOptions" /> or <paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-158">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-158">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-159">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-159">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-160">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-160">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="430e5-161">取得這個工作 Factory 的預設取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-161">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="430e5-162">這個工作 Factory 的預設取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-162">The default cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-163">這個屬性會傳回預設取消語彙基元，會指派給除非工作 factory 方法的呼叫期間明確指定另一個取消語彙基元的值，這個處理站所建立的所有工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-163">This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-164">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-165">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-165">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="430e5-166">取得這個工作 Factory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 列舉值。</span><span class="sxs-lookup"><span data-stu-id="430e5-166">Gets the <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="430e5-167">其中一個列舉值，這個值會指定這個工作 Factory 的預設接續選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-167">One of the enumeration values that specifies the default continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-168">這個屬性傳回的預設接續選項，此處理站。</span><span class="sxs-lookup"><span data-stu-id="430e5-168">This property returns the default continuation options for this factory.</span></span> <span data-ttu-id="430e5-169">它們將用來建立所有的接續工作，除非這個處理站方法呼叫期間明確指定其他選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-169">They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-170">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-170">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-171">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-171">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="430e5-172">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-172">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-173">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-173">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-174">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-174">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-175">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-175">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-176">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-176">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-177">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-177">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="430e5-178">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-178">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-179">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-179">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-180">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-180">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-181"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-181">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-182"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-182"><paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-183">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-183">-or-</span></span> 
<span data-ttu-id="430e5-184"><paramref name="continuationFunction" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-184">The <paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-185"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-185">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-186">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-186">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-187">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-187">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-188">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-188">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-189">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-189">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-190">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-190">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-191">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-191">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-192">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-192">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-193">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-193">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-194">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-194">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-195"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-195">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-196">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-196">-or-</span></span> 
<span data-ttu-id="430e5-197">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-197">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-198"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-198">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-199">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-199">-or-</span></span> 
 <span data-ttu-id="430e5-200"><paramref name="continuationFunction" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-200"><paramref name="continuationFunction" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-201"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-201">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-202">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-202">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-203">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-203">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-204">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-204">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-205">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-205">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-206">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-206">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-207">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-207">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-208">NotOn\* 或 OnlyOn\* 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-208">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="430e5-209">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-209">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-210">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-210">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-211">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-211">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-212"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-212">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-213"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-213">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-214">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-214">-or-</span></span> 
<span data-ttu-id="430e5-215"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-215">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-216"><paramref name="continuationOptions" /> 引數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-216">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-217"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-217">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-218">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-218">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-219">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-219">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-220">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-220">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-221">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-221">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-222">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-222">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-223">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-223">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-224">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-224">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-225">NotOn\* 或 OnlyOn\* 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-225">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-226">用來排定所建立之接續工作的排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-226">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-227">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-227">Creates a continuation task that will be started upon the completion of a set of provided Tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-228">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-228">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-229">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-229">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-230"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-230">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-231">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-231">-or-</span></span> 
<span data-ttu-id="430e5-232"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-232">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-233">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-233">-or-</span></span> 
<span data-ttu-id="430e5-234"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-234">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-235"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-235">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-236"><paramref name="continuationOptions" /> 指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-236"><paramref name="continuationOptions" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-237"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-237">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-238">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-238">-or-</span></span> 
<span data-ttu-id="430e5-239">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-239">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-240">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-240">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-241">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-241">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-242">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-242">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-243">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-243">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-244">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-244">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-245">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-245">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="430e5-246">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-246">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-247">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-247">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-248">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-248">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-249"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-249">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-250"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-250">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-251">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-251">-or-</span></span> 
<span data-ttu-id="430e5-252"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-252">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-253"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-253">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-254">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-254">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-255">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-255">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-256">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-256">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-257">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-257">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-258">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-258">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-259">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-259">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-260">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-260">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-261">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-261">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-262">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-262">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-263">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-263">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-264"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-264">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-265">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-265">-or-</span></span> 
<span data-ttu-id="430e5-266">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-267"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-268">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-268">-or-</span></span> 
<span data-ttu-id="430e5-269"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-269">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-270"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-270">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-271">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-272">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-273">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-274">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-275">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-276">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-276">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-277">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-277">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-278">NotOn\* 或 OnlyOn\* 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-278">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <summary><span data-ttu-id="430e5-279">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-279">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-280">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-280">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-281">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-281">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-282"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-282">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-283"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-283">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-284">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-284">-or-</span></span> 
<span data-ttu-id="430e5-285"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-285">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-286"><paramref name="continuationOptions" /> 引數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-286">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-287"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-287">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-288">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-288">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-289">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-289">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-290">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-290">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-291">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-291">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-292">要接續之工作的所在陣列。</span><span class="sxs-lookup"><span data-stu-id="430e5-292">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-293">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-293">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-294">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-294">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-295">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-295">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-296">NotOn\* 或 OnlyOn\* 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-296">The NotOn\* or OnlyOn\* values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-297">用來排定所建立之接續工作的排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-297">The scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-298">建立會在提供的一組工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-298">Creates a continuation task that will be started upon the completion of a set of provided tasks.</span></span></summary>
        <returns><span data-ttu-id="430e5-299">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-299">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-300">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-300">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-301"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-301">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-302">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-302">-or-</span></span> 
<span data-ttu-id="430e5-303"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-303">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-304">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-304">-or-</span></span> 
<span data-ttu-id="430e5-305"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-305">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-306"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-306">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-307"><paramref name="continuationOptions" /> 引數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-307">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-308"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-308">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-309">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-309">-or-</span></span> 
<span data-ttu-id="430e5-310">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-310">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-311">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-311">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-312">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-312">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-313">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-313">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="430e5-314">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-314">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-315">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-315">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-316">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-316">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-317">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-317">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-318">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-318">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-319">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-319">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="430e5-320">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-320">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-321">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-321">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-322">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-322">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-323"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-323">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-324"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-324">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-325">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-325">-or-</span></span> 
<span data-ttu-id="430e5-326"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-326">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-327"><paramref name="tasks" /> 陣列包含 null 值或為空白。</span><span class="sxs-lookup"><span data-stu-id="430e5-327">The <paramref name="tasks" /> array contains a null value or is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-328">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-328">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-329">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-329">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-330">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-330">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-331">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-331">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-332">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-332">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-333">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-333">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-334">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-334">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-335">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-335">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-336">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-336">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-337"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-337">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-338">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-338">-or-</span></span> 
<span data-ttu-id="430e5-339">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-339">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-340"><paramref name="tasks" /> 陣列為 null。</span><span class="sxs-lookup"><span data-stu-id="430e5-340">The <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="430e5-341">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-341">-or-</span></span> 
<span data-ttu-id="430e5-342"><paramref name="continuationFunction" /> 引數為 null。</span><span class="sxs-lookup"><span data-stu-id="430e5-342">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-343"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-343">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-344">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-344">-or-</span></span> 
<span data-ttu-id="430e5-345"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-345">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-346">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-346">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-347">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-347">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-348">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-348">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-349">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-349">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-350">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-350">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-351">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-351">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-352"><see langword="NotOn*" /> 或 <see langword="OnlyOn*" /> 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-352">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="430e5-353">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-353">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-354">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-354">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-355">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-355">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-356"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-356">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-357"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-357">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-358">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-358">-or-</span></span> 
<span data-ttu-id="430e5-359"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-359">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-360"><paramref name="continuationOptions" /> 引數指定了無效的列舉值。</span><span class="sxs-lookup"><span data-stu-id="430e5-360">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-361"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-361">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-362">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-362">-or-</span></span> 
<span data-ttu-id="430e5-363"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-363">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-364">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-364">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-365">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-365">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-366">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-366">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="430e5-367">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-367">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-368">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-368">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-369">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-369">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-370">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-370">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-371"><see langword="NotOn*" /> 或 <see langword="OnlyOn*" /> 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-371">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-372">用來排定所建立之接續工作的工作排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-372">The task scheduler that is used to schedule the created continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-373">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-373">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-374">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-374">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-375">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-375">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-376"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-376">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-377">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-377">-or-</span></span> 
<span data-ttu-id="430e5-378"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-378">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-379">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-379">-or-</span></span> 
<span data-ttu-id="430e5-380"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-380">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-381"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-381">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-382">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-382">-or-</span></span> 
<span data-ttu-id="430e5-383"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-383">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-384"><paramref name="continuationOptions" /> 引數指定了無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-384">The <paramref name="continuationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-385"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-385">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-386">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-386">-or-</span></span> 
<span data-ttu-id="430e5-387">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-387">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-388">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-388">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-389">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-389">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-390">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-390">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-391">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-391">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-392">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-392">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-393">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-393">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="430e5-394">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-394">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-395">新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-395">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-396">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-396">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-397"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-397">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-398"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-398">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-399">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-399">-or-</span></span> 
<span data-ttu-id="430e5-400"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-400">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-401"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-401">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-402">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-402">-or-</span></span> 
<span data-ttu-id="430e5-403"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-403">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-404">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-404">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-405">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-405">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-406">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-406">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-407">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-407">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-408">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-408">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-409">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-409">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-410">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-410">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="430e5-411">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-411">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-412">新的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-412">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-413">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-413">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-414"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-414">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-415">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-415">-or-</span></span> 
<span data-ttu-id="430e5-416">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-416">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-417"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-417">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-418">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-418">-or-</span></span> 
<span data-ttu-id="430e5-419"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-419">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-420"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-420">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-421">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-421">-or-</span></span> 
<span data-ttu-id="430e5-422"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-422">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-423">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-423">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-424">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-424">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-425">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-425">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-426">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-426">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-427">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-427">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-428">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-428">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-429">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-429">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-430"><see langword="NotOn*" /> 或 <see langword="OnlyOn*" /> 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-430">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <summary><span data-ttu-id="430e5-431">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-431">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-432">新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-432">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-433">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-433">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-434"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-434">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-435"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-435">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-436">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-436">-or-</span></span> 
<span data-ttu-id="430e5-437"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-438"><paramref name="continuationOptions" /> 引數指定了無效的列舉值。</span><span class="sxs-lookup"><span data-stu-id="430e5-438">The <paramref name="continuationOptions" /> argument specifies an invalid enumeration value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-439"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-439">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-440">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-440">-or-</span></span> 
<span data-ttu-id="430e5-441"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-441">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-442">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-443">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-444">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-444">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="430e5-445">前項 <paramref name="tasks" /> 的結果類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-445">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="430e5-446">工作的陣列，當其中一個工作完成時，會接續另一個工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="430e5-447">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-447">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-448">要指派給新接續工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-448">The cancellation token that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="430e5-449">其中一個列舉值，這些值會控制已建立之接續工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-449">One of the enumeration values that controls the behavior of the created continuation task.</span></span> <span data-ttu-id="430e5-450"><see langword="NotOn*" /> 或 <see langword="OnlyOn*" /> 值無效。</span><span class="sxs-lookup"><span data-stu-id="430e5-450">The <see langword="NotOn*" /> or <see langword="OnlyOn*" /> values are not valid.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-451"><see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-451">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="430e5-452">建立會在提供的任何一項工作完成時啟動的接續工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-452">Creates a continuation task that will be started upon the completion of any task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="430e5-453">新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-453">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-454">完成之後，工作是在其中一種狀態： <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>， <xref:System.Threading.Tasks.TaskStatus.Faulted>，或<xref:System.Threading.Tasks.TaskStatus.Canceled>狀態。</span><span class="sxs-lookup"><span data-stu-id="430e5-454">After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-455"><paramref name="tasks" /> 陣列為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-455">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-456">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-456">-or-</span></span> 
<span data-ttu-id="430e5-457"><paramref name="continuationFunction" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-457">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-458">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-458">-or-</span></span> 
<span data-ttu-id="430e5-459"><paramref name="scheduler" /> 引數為 null。</span><span class="sxs-lookup"><span data-stu-id="430e5-459">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="430e5-460"><paramref name="tasks" /> 陣列包含 null 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-460">The <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="430e5-461">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-461">-or-</span></span> 
<span data-ttu-id="430e5-462"><paramref name="tasks" /> 陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="430e5-462">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-463"><paramref name="continuationOptions" /> 引數指定了無效的 TaskContinuationOptions 值。</span><span class="sxs-lookup"><span data-stu-id="430e5-463">The <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-464"><paramref name="tasks" />陣列中的其中一個項目已經過處置。</span><span class="sxs-lookup"><span data-stu-id="430e5-464">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="430e5-465">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-465">-or-</span></span> 
<span data-ttu-id="430e5-466">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-466">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-467">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-467">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="430e5-468">使用接續工作鏈結工作</span><span class="sxs-lookup"><span data-stu-id="430e5-468">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="430e5-469">工作取消</span><span class="sxs-lookup"><span data-stu-id="430e5-469">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="430e5-470">取得這個工作 Factory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 列舉值。</span><span class="sxs-lookup"><span data-stu-id="430e5-470">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> enumeration value for this task factory.</span></span></summary>
        <value><span data-ttu-id="430e5-471">其中一個列舉值，這個值會指定這個工作 Factory 的預設建立選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-471">One of the enumeration values that specifies the default creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-472">這個屬性會傳回預設值為此 factory 的建立選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-472">This property returns the default creation options for this factory.</span></span> <span data-ttu-id="430e5-473">它們將用來建立所有的工作，除非這個處理站方法呼叫期間明確指定其他選項。</span><span class="sxs-lookup"><span data-stu-id="430e5-473">They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-474">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-474">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-475">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-475">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="430e5-476">建立新的工作執行個體。</span><span class="sxs-lookup"><span data-stu-id="430e5-476">Creates a task instance.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-477">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-477">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-478">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-478">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="430e5-479"><see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-479">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-480">函式委派，會處理已完成的 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-480">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="430e5-481">建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</span><span class="sxs-lookup"><span data-stu-id="430e5-481">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="430e5-482">表示非同步作業的 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-482">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-483"><paramref name="asyncResult" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-483">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-484">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-484">-or-</span></span> 
<span data-ttu-id="430e5-485"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-485">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-486">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-486">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-487">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-487">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="430e5-488">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-488">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-489">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-489">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-490">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-490">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="430e5-491">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-491">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-492">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-492">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-493">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-493">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-494">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-494">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-495"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-495">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-496">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-496">-or-</span></span> 
<span data-ttu-id="430e5-497"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-497">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-498">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-498">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-499">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-499">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="430e5-500"><see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-500">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-501">函式委派，會處理已完成的 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-501">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-502">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-502">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-503">建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</span><span class="sxs-lookup"><span data-stu-id="430e5-503">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="430e5-504">代表非同步作業的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-504">A task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-505"><paramref name="asyncResult" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-505">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-506">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-506">-or-</span></span> 
<span data-ttu-id="430e5-507"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-507">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-508"><paramref name="creationOptions" /> 引數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-508">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-509">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-509">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-510">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-510">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="430e5-511">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-511">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-512">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-512">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-513">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-513">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-514">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-514">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-515">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-515">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-516">建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-516">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-517">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-517">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-518">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-518">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-519"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-519">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-520">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-520">-or-</span></span> 
<span data-ttu-id="430e5-521"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-521">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-522"><paramref name="creationOptions" /> 引數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-522">The <paramref name="creationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-523">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-523">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-524">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-524">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="430e5-525"><see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-525">The <see cref="T:System.IAsyncResult" /> whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-526">函式委派，會處理已完成的 <paramref name="asyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-526">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-527">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-527">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-528">工作排程器，用來排程可執行結束方法的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-528">The task scheduler that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="430e5-529">建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</span><span class="sxs-lookup"><span data-stu-id="430e5-529">Creates a task that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="430e5-530">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-530">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-531"><paramref name="asyncResult" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-531">The <paramref name="asyncResult" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-532">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-532">-or-</span></span> 
<span data-ttu-id="430e5-533"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-533">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-534">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-534">-or-</span></span> 
<span data-ttu-id="430e5-535"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-535">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-536"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-536">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-537">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-537">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-538">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-538">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-539">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-539">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-540">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-540">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-541">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-541">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-542">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-542">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-543">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-543">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="430e5-544">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-544">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-545">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-545">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-546">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-546">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-547">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-547">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-548"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-548">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-549">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-549">-or-</span></span> 
<span data-ttu-id="430e5-550"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-550">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-551">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-551">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-552">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-552">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-553">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-553">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-554">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-554">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-555">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-555">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-556">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-556">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-557">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-557">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-558">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-558">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-559">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-559">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-560">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-560">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-561">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-561">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-562">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-562">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-563"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-563">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-564">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-564">-or-</span></span> 
<span data-ttu-id="430e5-565"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-565">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-566"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-566">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-567">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-567">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-568">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-568">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-569">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-569">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="430e5-570">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-570">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-571">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-571">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-572">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-572">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-573">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-573">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="430e5-574">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-574">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-575">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-575">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="430e5-576">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-576">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-577">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-577">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-578">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-578">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-579">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-579">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-580"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-580">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-581">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-581">-or-</span></span> 
<span data-ttu-id="430e5-582"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-582">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-583">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-583">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-584">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-584">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-585">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-585">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="430e5-586">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-586">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-587">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-587">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-588">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-588">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-589">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-589">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="430e5-590">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-590">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-591">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-591">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-592">控制所建立 <see cref="T:System.Threading.Tasks.Task`1" /> 之行為的物件。</span><span class="sxs-lookup"><span data-stu-id="430e5-592">An object that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="430e5-593">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-593">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-594">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-594">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-595">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-595">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-596">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-596">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-597"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-597">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-598">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-598">-or-</span></span> 
<span data-ttu-id="430e5-599"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-599">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-600"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-600">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-601">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-601">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-602">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-602">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-603">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-603">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="430e5-604">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-604">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="430e5-605">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-605">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-606">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-606">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-607">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-607">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-608">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-608">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="430e5-609">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-609">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="430e5-610">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-610">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-611">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-611">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="430e5-612">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-612">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-613">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-613">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-614">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-614">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-615">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-615">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-616"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-616">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-617">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-617">-or-</span></span> 
<span data-ttu-id="430e5-618"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-618">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-619">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-619">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-620">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-620">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="430e5-621">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-621">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="430e5-622">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-622">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="430e5-623">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</span><span class="sxs-lookup"><span data-stu-id="430e5-623">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="430e5-624">開始非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-624">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="430e5-625">結束非同步作業的委派。</span><span class="sxs-lookup"><span data-stu-id="430e5-625">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="430e5-626">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-626">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="430e5-627">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-627">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="430e5-628">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</span><span class="sxs-lookup"><span data-stu-id="430e5-628">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-629">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-629">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-630">控制所建立工作之行為的物件。</span><span class="sxs-lookup"><span data-stu-id="430e5-630">An object that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-631">建立工作，這個項目代表一組符合「非同步程式設計模型」模式的開始和結束方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-631">Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="430e5-632">建立的工作，代表非同步作業。</span><span class="sxs-lookup"><span data-stu-id="430e5-632">The created task that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-633">這個方法會擲回任何例外狀況擲回`beginMethod`。</span><span class="sxs-lookup"><span data-stu-id="430e5-633">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="430e5-634">例外狀況`endmethod`傳回的工作在等候時，會擲回。</span><span class="sxs-lookup"><span data-stu-id="430e5-634">Exceptions for `endmethod` are thrown when waiting on the returned task.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-635"><paramref name="beginMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-635">The <paramref name="beginMethod" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-636">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-636">-or-</span></span> 
<span data-ttu-id="430e5-637"><paramref name="endMethod" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-637">The <paramref name="endMethod" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-638"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-638">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-639">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-639">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-640">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-640">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory`1.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory&lt;'Result&gt;.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="430e5-641">取得這個工作 Factory 的工作排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-641">Gets the task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="430e5-642">這個工作 Factory 的工作排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-642">The task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-643">這個屬性會傳回此 factory 的預設排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-643">This property returns the default scheduler for this factory.</span></span> <span data-ttu-id="430e5-644">它會用來排程所有的工作，除非這個處理站方法呼叫期間明確指定另一個排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-644">It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="430e5-645">如果這個屬性會傳回`null`，<xref:System.Threading.Tasks.TaskScheduler.Current%2A>將使用。</span><span class="sxs-lookup"><span data-stu-id="430e5-645">If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-646">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-646">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-647">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-647">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="430e5-648">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-648">Creates and starts a task.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-649">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-649">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-650">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-650">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-651">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-651">A function delegate that returns the future result to be available through the task.</span></span></param>
        <summary><span data-ttu-id="430e5-652">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-652">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-653">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-653">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-654">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-654">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-655">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-655">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-656"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-656">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-657">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-657">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-658">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-658">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-659">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-659">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-660">物件，包含 <paramref name="function" /> 委派所要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-660">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="430e5-661">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-661">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-662">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-662">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-663">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-663">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-664">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-664">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-665"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-665">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-666">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-666">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-667">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-667">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-668">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-668">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-669">要指派給新工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-669">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="430e5-670">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-670">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-671">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-671">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-672">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-672">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-673">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-673">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-674">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</span><span class="sxs-lookup"><span data-stu-id="430e5-674">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-675"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-675">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-676">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-676">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-677">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-677">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-678">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-678">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-679">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-679">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-680">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-680">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-681">啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-681">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-682">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-682">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-683">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-683">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-684"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-684">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-685"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-685">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-686">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-686">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-687">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-687">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-688">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-688">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-689">物件，包含 <paramref name="function" /> 委派所要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-689">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-690">要指派給新工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-690">The cancellation token that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="430e5-691">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-691">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-692">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-692">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-693">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-693">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-694">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-694">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-695">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</span><span class="sxs-lookup"><span data-stu-id="430e5-695">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-696"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-696">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-697">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-697">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-698">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-698">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-699">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-699">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-700">物件，包含 <paramref name="function" /> 委派所要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-700">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-701">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-701">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-702">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-702">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-703">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-703">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-704">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-704">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-705">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-705">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-706"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-706">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-707"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-707">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-708">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-708">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-709">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-709">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`1&lt;!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-710">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-710">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-711">要指派給新工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-711">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-712">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-712">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-713">用來排定所建立之工作的工作排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-713">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-714">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-714">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-715">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-715">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-716">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-716">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-717">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-717">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-718">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</span><span class="sxs-lookup"><span data-stu-id="430e5-718">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-719"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-719">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-720">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-720">-or-</span></span> 
<span data-ttu-id="430e5-721"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-721">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-722"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-722">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-723">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-723">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-724">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-724">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; StartNew(class System.Func`2&lt;object, !TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="430e5-725">函式委派，會傳回將可透過工作使用的未來結果。</span><span class="sxs-lookup"><span data-stu-id="430e5-725">A function delegate that returns the future result to be available through the task.</span></span></param>
        <param name="state"><span data-ttu-id="430e5-726">物件，包含 <paramref name="function" /> 委派所要使用的資料。</span><span class="sxs-lookup"><span data-stu-id="430e5-726">An object that contains data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="430e5-727">要指派給新工作的取消語彙基元。</span><span class="sxs-lookup"><span data-stu-id="430e5-727">The cancellation token that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="430e5-728">其中一個列舉值，這些值會控制已建立之工作的行為。</span><span class="sxs-lookup"><span data-stu-id="430e5-728">One of the enumeration values that controls the behavior of the created task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="430e5-729">用來排定所建立之工作的工作排程器。</span><span class="sxs-lookup"><span data-stu-id="430e5-729">The task scheduler that is used to schedule the created task.</span></span></param>
        <summary><span data-ttu-id="430e5-730">建立並啟動工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-730">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="430e5-731">已開始的工作。</span><span class="sxs-lookup"><span data-stu-id="430e5-731">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="430e5-732">呼叫`StartNew`相當於使用其中一種建立工作<xref:System.Threading.Tasks.Task%601>建構函式，然後呼叫<xref:System.Threading.Tasks.Task.Start%2A>排程執行的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-732">Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="430e5-733">不過，除非您建立和排程必須分隔，`StartNew`是為了簡化和效能的建議的方法。</span><span class="sxs-lookup"><span data-stu-id="430e5-733">However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="430e5-734">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</span><span class="sxs-lookup"><span data-stu-id="430e5-734">The cancellation token source that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="430e5-735"><paramref name="function" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-735">The <paramref name="function" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="430e5-736">-或-</span><span class="sxs-lookup"><span data-stu-id="430e5-736">-or-</span></span> 
<span data-ttu-id="430e5-737"><paramref name="scheduler" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="430e5-737">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="430e5-738"><paramref name="creationOptions" /> 參數指定了無效的值。</span><span class="sxs-lookup"><span data-stu-id="430e5-738">The <paramref name="creationOptions" /> parameter specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="430e5-739">工作平行程式庫 (TPL)</span><span class="sxs-lookup"><span data-stu-id="430e5-739">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="430e5-740">使用具有其他非同步模式的 TPL</span><span class="sxs-lookup"><span data-stu-id="430e5-740">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>