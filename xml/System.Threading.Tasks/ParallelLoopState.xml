<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParallelLoopState.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53e4244160069333f5d930b81c7b54173c2ad6d6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4244160069333f5d930b81c7b54173c2ad6d6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Enables iterations of parallel loops to interact with other iterations.</source>
          <target state="translated">讓平行迴圈的反覆項目與其他反覆項目互動。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>An instance of this class is provided by the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> class to each loop; you can not create instances in your code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> 類別會在每個迴圈中提供這個類別的執行個體，您不能在自己的程式碼中建立執行個體。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Note that you cannot instantiate an instance of this class.</source>
          <target state="translated">請注意，您無法具現化這個類別的執行個體。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is automatically generated by the compiler as an argument in a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">它自動產生由編譯器所呼叫的引數為<ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The example provides an illustration.</source>
          <target state="translated">這個範例將提供說明。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Constructs such as <ph id="ph1">`for`</ph> and <ph id="ph2">`foreach`</ph> (in C#) and <ph id="ph3">`For`</ph> and <ph id="ph4">`For Each`</ph> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</source>
          <target state="translated">這類建構<ph id="ph1">`for`</ph>和<ph id="ph2">`foreach`</ph>（C# 中） 和<ph id="ph3">`For`</ph>和<ph id="ph4">`For Each`</ph>（在 Visual Basic 中) 執行以循序方式從最低到最高的索引，或從集合中的第一個物件的最後一個。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> methods do not.</source>
          <target state="translated">相反地，<ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph>方法則否。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because individual iterations of the loop run in parallel, they can begin and end in any order.</source>
          <target state="translated">因為平行執行迴圈的個別反覆項目，可以開始與結束任何順序。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows individual iterations of parallel loops to interact with one another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph>類別可讓平行迴圈彼此互動的個別反覆項目。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows you to:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph>類別可讓您：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit the current iteration and prevent any additional iterations from starting by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">結束目前的反覆項目，並防止啟動藉由呼叫任何其他反覆項目<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">這不會影響已經開始執行的反覆項目。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Prevent any iterations with an index greater than the current index from executing by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">防止索引大於目前的索引與任何反覆項目執行藉由呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">這不會影響已經開始執行的反覆項目。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> property.</source>
          <target state="translated">判斷例外狀況是否發生任何迴圈反覆項目中所擷取的值<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method by retrieving the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property.</source>
          <target state="translated">判斷是否已呼叫任何反覆項目迴圈的<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法所擷取的值<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>You can use this property to return from iterations of the loop that started before the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method but are still executing.</source>
          <target state="translated">您可以使用這個屬性傳回的呼叫之前開始迴圈的反覆項目從<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法，但仍在執行。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method or has thrown an exception by retrieving the value of the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property.</source>
          <target state="translated">判斷是否已呼叫任何反覆項目迴圈的<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法所擷取的值已擲回例外狀況或<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property.</source>
          <target state="translated">從執行長時間執行的反覆查看其索引大於反覆項目所擷取的值中斷已呼叫所在的索引結束<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">做為範例所示，其索引大於任何反覆項目從輸出<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>呼叫之後開始屬性值<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">因為迴圈的反覆項目仍可能在執行時<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>呼叫方法時，每個反覆項目呼叫<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性來檢查是否已呼叫另一個反覆項目<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">如果屬性值為<ph id="ph1">`true`</ph>，反覆項目值檢查<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance is meant to be used only within the body of the loop to which an instance was provided.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph>執行個體是只在迴圈執行個體所提供的主體內使用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is not safe to use a provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</source>
          <target state="translated">不是安全使用提供<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph>執行個體相關聯的迴圈後結束，也不會明確它遞交給其他的執行緒安全且擁有這些隨時存取它的執行緒。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A different <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance will be provided to each thread involved in a loop.</source>
          <target state="translated">不同<ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph>會提供在迴圈中所涉及的每個執行緒的執行個體。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</source>
          <target state="translated">傳達 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> 迴圈應該在過了目前的反覆項目之後，依系統的方便盡早停止執行反覆項目。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> indicates that no iterations after the current iteration should be run.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> 表示應該執行任何反覆項目在目前的反覆項目。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">它會有效地取消迴圈中的任何其他反覆項目。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">不過，它不會停止已經開始執行任何反覆項目。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For example, if <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>平行迴圈，逐一查看從 0 到 1000，所有的反覆項目小於 100 應該仍然會執行，但的反覆項目從透過 101 到 1000，尚未啟動未執行的第 100 反覆項目會從呼叫。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For long-running iterations that may already be executing, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property to the current iteration's index if the current index is less than the current value of <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</source>
          <target state="translated">長時間執行反覆項目可能已經在執行，<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>設定<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性目前反覆項目索引，如果目前的索引是目前的值小於<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">若要停止其索引大於競爭執行從最低的中斷反覆項目反覆項目，您應該執行下列作業：</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">檢查是否<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">如果其索引大於結束反覆項目從<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The example provides an illustration.</source>
          <target state="translated">這個範例將提供說明。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is typically employed in search-based algorithms where an ordering is present in the data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> 通常會採用以搜尋為基礎的演算法，是在資料來源中的順序。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">做為範例所示，其索引大於任何反覆項目從輸出<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>呼叫之後開始屬性值<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">因為迴圈的反覆項目仍可能在執行時<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>呼叫方法時，每個反覆項目呼叫<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性來檢查是否已呼叫另一個反覆項目<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">如果屬性值為<ph id="ph1">`true`</ph>，反覆項目值檢查<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method was previously called.</source>
          <target state="translated">先前已呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> 可能無法由相同迴圈的反覆項目搭配使用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</source>
          <target state="translated">取得迴圈中是否有任何反覆項目已擲回該反覆項目未處理的例外狀況。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an unhandled exception was thrown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果擲回未處理的例外狀況，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Gets whether any iteration of the loop has called the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method.</source>
          <target state="translated">取得迴圈中是否有任何反覆項目已呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any iteration has stopped the loop by calling the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果有任何反覆項目藉由呼叫 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> 方法而停止迴圈，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>For long-running iterations of the loop, you can retrieve the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether any iterations of the loop that began execution before the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method are still executing.</source>
          <target state="translated">反覆項目長時間執行的迴圈中，您可以擷取的值<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>屬性來判斷是否在迴圈的任何反覆項目，開始執行的呼叫之前<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法仍在執行。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>You can then use the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether they should return immediately or execute normally.</source>
          <target state="translated">然後，您可以使用的值<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>屬性來判斷是否應該立即傳回或正常執行。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 10,000 個反覆項目。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, the lambda expression calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">因為迴圈的反覆項目仍可能在執行時<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>呼叫方法時，lambda 運算式呼叫<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>方法來檢查是否已呼叫另一個反覆項目<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">如果它傳回<ph id="ph1">`true`</ph>，會立即傳回在反覆項目。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Gets the lowest iteration of the loop from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">取得迴圈中呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> 的最低反覆項目。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The lowest iteration from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">呼叫 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> 的最低反覆項目。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In the case of a <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> loop, the value is based on an internally-generated index.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> 迴圈的案例中，值是根據內部產生的索引。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>It is possible for multiple iterations of a parallel loop to call the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">可能的平行迴圈來呼叫多個反覆項目<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If they do, this value is the smallest index of an iteration that called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</source>
          <target state="translated">如果沒有的話，這個值會是最小的反覆項目呼叫索引<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If no iteration of the loop called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果任何反覆項目迴圈的不呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>，這個屬性會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that the property value is unaffected by calls to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">請注意，屬性值並不會受到呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In long-running iterations in which all iterations after the iteration that calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method need not run, the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property is used to terminate iterations that began execution before the call to the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">在呼叫的反覆項目之後的所有反覆項目中的長時間執行反覆項目<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法不需要再執行，<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性用來終止反覆項目，開始執行的呼叫之前<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">若要停止其索引大於競爭執行從最低的中斷反覆項目反覆項目，您應該執行下列作業：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">檢查是否<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">如果其索引大於結束反覆項目從<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性值。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The example provides an illustration.</source>
          <target state="translated">這個範例將提供說明。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">這可防止反覆項目，其索引大於<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性值從呼叫之後開始<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法，但它不會影響已經開始執行任何反覆項目。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">若要避免這些無法完成，每個反覆項目呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>方法來檢查是否已呼叫另一個反覆項目<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">因此，在反覆項目會檢查的值如果<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</source>
          <target state="translated">請注意，因為<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>值超出範圍平行迴圈外，您必須將它指派給此變數會是可見的迴圈外，如果您想要保留其值。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</source>
          <target state="translated">取得是否應該根據迴圈中目前這個或其他反覆項目的要求，來結束目前這個反覆項目。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iteration should exit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果目前的反覆項目應該結束，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>屬性設定為<ph id="ph2">`true`</ph>任何下列情況：</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop calls <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</source>
          <target state="translated">迴圈呼叫的反覆項目<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop throws an exception.</source>
          <target state="translated">迴圈的反覆項目會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The loop is canceled.</source>
          <target state="translated">迴圈會取消。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>When this property is <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</source>
          <target state="translated">當這個屬性是<ph id="ph1">`true`</ph>、<ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph>類別主動將嘗試開始執行時，禁止其他迴圈反覆項目。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>However, there may be cases where it is unable to prevent additional iterations from starting.</source>
          <target state="translated">不過，可能無法防止其他反覆項目，使其無法啟動時的情況。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>It may also be the case that a long-running iteration has already begun execution.</source>
          <target state="translated">它也可能是長時間執行的反覆項目已經開始執行的情況。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>In such cases, iterations may explicitly check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property and cease execution if the property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">在這種情況下，反覆項目可能會明確檢查<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>如果屬性傳回的屬性和終止執行<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">這可防止反覆項目，其索引大於<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性值從呼叫之後開始<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法，但它不會影響已經開始執行任何反覆項目。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">若要避免這些無法完成，每個反覆項目呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph>方法來檢查是否已呼叫另一個反覆項目<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">因此，在反覆項目會檢查的值如果<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution at the system's earliest convenience.</source>
          <target state="translated">傳達 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> 迴圈應該依系統的方便盡早停止執行。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method indicates that any iterations of the loop that have not yet started need not be run.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法表示不需要執行迴圈的任何尚未開始的反覆運算。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">它會有效地取消迴圈中的任何其他反覆項目。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">不過，它不會停止已經開始執行任何反覆項目。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method causes the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to return <ph id="ph3">`true`</ph> for any iteration of the loop that is still executing.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法會使<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>屬性，以傳回<ph id="ph3">`true`</ph>仍在執行迴圈的任何反覆項目。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>This is particularly useful for long-running iterations, which can check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property and exit early if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">這特別適用於長時間執行反覆項目，可以檢查<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>屬性並結束早期如果其值為<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> 通常會採用以搜尋為基礎的演算法，結果就是一旦找到，其他反覆項目需要執行所在。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">下列範例會以平行方式執行迴圈的最多 10,000 個反覆項目。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">隨機產生的值會決定迴圈的反覆項目上<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>As the output from the example shows, no iterations execute after the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">範例輸出所示，任何反覆項目執行的呼叫後方<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">因為迴圈的反覆項目仍可能在執行時<ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>呼叫方法時，每個反覆項目呼叫<ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph>方法來檢查是否已呼叫另一個反覆項目<ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">如果它傳回<ph id="ph1">`true`</ph>，會立即傳回在反覆項目。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> method was called previously.</source>
          <target state="translated">之前呼叫過 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> 可能無法由相同迴圈的反覆項目搭配使用。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>