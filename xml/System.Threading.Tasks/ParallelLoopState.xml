<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce5700b68f4a6ba69f5224dd0dd9b977cbfc8288" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407486" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e5c1f-101">讓平行迴圈的反覆項目與其他反覆項目互動。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5c1f-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="e5c1f-102">
        <see cref="T:System.Threading.Tasks.Parallel" /> 類別會在每個迴圈中提供這個類別的執行個體，您不能在自己的程式碼中建立執行個體。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5c1f-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-103">請注意，您無法具現化這個類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="e5c1f-104">它自動產生由編譯器所呼叫的引數為<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>或<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e5c1f-105">這個範例將提供說明。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="e5c1f-106">這類建構`for`和`foreach`（C# 中） 和`For`和`For Each`（在 Visual Basic 中) 執行以循序方式從最低到最高的索引，或從集合中的第一個物件的最後一個。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="e5c1f-107">相反地，<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>和<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法則否。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="e5c1f-108">因為平行執行迴圈的個別反覆項目，可以開始與結束任何順序。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="e5c1f-109"><xref:System.Threading.Tasks.ParallelLoopState>類別可讓平行迴圈彼此互動的個別反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="e5c1f-110"><xref:System.Threading.Tasks.ParallelLoopState>類別可讓您：</span><span class="sxs-lookup"><span data-stu-id="e5c1f-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="e5c1f-111">結束目前的反覆項目，並防止啟動藉由呼叫任何其他反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e5c1f-112">這不會影響已經開始執行的反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="e5c1f-113">防止索引大於目前的索引與任何反覆項目執行藉由呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-114">這不會影響已經開始執行的反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="e5c1f-115">判斷例外狀況是否發生任何迴圈反覆項目中所擷取的值<xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="e5c1f-116">判斷是否已呼叫任何反覆項目迴圈的<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法所擷取的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="e5c1f-117">您可以使用這個屬性傳回的呼叫之前開始迴圈的反覆項目從<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法，但仍在執行。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="e5c1f-118">判斷是否已呼叫任何反覆項目迴圈的<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法所擷取的值已擲回例外狀況或<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="e5c1f-119">從執行長時間執行的反覆查看其索引大於反覆項目所擷取的值中斷已呼叫所在的索引結束<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-120">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-121">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-122">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e5c1f-123">做為範例所示，其索引大於任何反覆項目從輸出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>呼叫之後開始屬性值<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e5c1f-124">因為迴圈的反覆項目仍可能在執行時<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼叫方法時，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-125">如果屬性值為`true`，反覆項目值檢查<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e5c1f-126">A<see cref="T:System.Threading.Tasks.ParallelLoopState" />執行個體是只在迴圈執行個體所提供的主體內使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5c1f-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="e5c1f-127">不是安全使用提供<see cref="T:System.Threading.Tasks.ParallelLoopState" />執行個體相關聯的迴圈後結束，也不會明確它遞交給其他的執行緒安全且擁有這些隨時存取它的執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5c1f-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="e5c1f-128">不同<see cref="T:System.Threading.Tasks.ParallelLoopState" />會提供在迴圈中所涉及的每個執行緒的執行個體。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e5c1f-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-129">傳達 <see cref="T:System.Threading.Tasks.Parallel" /> 迴圈應該在過了目前的反覆項目之後，依系統的方便盡早停止執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 表示應該執行任何反覆項目在目前的反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="e5c1f-131">它會有效地取消迴圈中的任何其他反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="e5c1f-132">不過，它不會停止已經開始執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="e5c1f-133">例如，如果<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>平行迴圈，逐一查看從 0 到 1000，所有的反覆項目小於 100 應該仍然會執行，但的反覆項目從透過 101 到 1000，尚未啟動未執行的第 100 反覆項目會從呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="e5c1f-134">長時間執行反覆項目可能已經在執行，<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>設定<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性目前反覆項目索引，如果目前的索引是目前的值小於<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="e5c1f-135">若要停止其索引大於競爭執行從最低的中斷反覆項目反覆項目，您應該執行下列作業：</span><span class="sxs-lookup"><span data-stu-id="e5c1f-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="e5c1f-136">檢查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="e5c1f-137">如果其索引大於結束反覆項目從<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="e5c1f-138">這個範例將提供說明。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="e5c1f-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 通常會採用以搜尋為基礎的演算法，是在資料來源中的順序。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-140">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-141">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-142">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e5c1f-143">做為範例所示，其索引大於任何反覆項目從輸出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>呼叫之後開始屬性值<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e5c1f-144">因為迴圈的反覆項目仍可能在執行時<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼叫方法時，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-145">如果屬性值為`true`，反覆項目值檢查<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5c1f-146">先前已呼叫 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="e5c1f-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 可能無法由相同迴圈的反覆項目搭配使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-148">取得迴圈中是否有任何反覆項目已擲回該反覆項目未處理的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e5c1f-149">如果擲回未處理的例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-150">取得迴圈中是否有任何反覆項目已呼叫 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e5c1f-151">如果有任何反覆項目藉由呼叫 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 方法而停止迴圈，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-152">反覆項目長時間執行的迴圈中，您可以擷取的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>屬性來判斷是否在迴圈的任何反覆項目，開始執行的呼叫之前<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法仍在執行。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="e5c1f-153">然後，您可以使用的值<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>屬性來判斷是否應該立即傳回或正常執行。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-154">下列範例會以平行方式執行迴圈的最多 10,000 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-155">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-156">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="e5c1f-157">因為迴圈的反覆項目仍可能在執行時<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼叫方法時，lambda 運算式呼叫<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e5c1f-158">如果它傳回`true`，會立即傳回在反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-159">取得迴圈中呼叫 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e5c1f-160">呼叫 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 的最低反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="e5c1f-161">在 <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 迴圈的案例中，值是根據內部產生的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-162">可能的平行迴圈來呼叫多個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-163">如果沒有的話，這個值會是最小的反覆項目呼叫索引<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="e5c1f-164">如果任何反覆項目迴圈的不呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="e5c1f-165">請注意，屬性值並不會受到呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="e5c1f-166">在呼叫的反覆項目之後的所有反覆項目中的長時間執行反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法不需要再執行，<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性用來終止反覆項目，開始執行的呼叫之前<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-167">若要停止其索引大於競爭執行從最低的中斷反覆項目反覆項目，您應該執行下列作業：</span><span class="sxs-lookup"><span data-stu-id="e5c1f-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="e5c1f-168">檢查是否<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="e5c1f-169">如果其索引大於結束反覆項目從<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="e5c1f-170">這個範例將提供說明。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-171">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-172">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-173">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e5c1f-174">這可防止反覆項目，其索引大於<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性值從呼叫之後開始<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不會影響已經開始執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="e5c1f-175">若要避免這些無法完成，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-176">因此，在反覆項目會檢查的值如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="e5c1f-177">請注意，因為<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>值超出範圍平行迴圈外，您必須將它指派給此變數會是可見的迴圈外，如果您想要保留其值。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-178">取得是否應該根據迴圈中目前這個或其他反覆項目的要求，來結束目前這個反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e5c1f-179">如果目前的反覆項目應該結束，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-180"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>屬性設定為`true`任何下列情況：</span><span class="sxs-lookup"><span data-stu-id="e5c1f-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="e5c1f-181">迴圈呼叫的反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>或<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="e5c1f-182">迴圈的反覆項目會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="e5c1f-183">迴圈會取消。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="e5c1f-184">當這個屬性是`true`、<xref:System.Threading.Tasks.Parallel>類別主動將嘗試開始執行時，禁止其他迴圈反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="e5c1f-185">不過，可能無法防止其他反覆項目，使其無法啟動時的情況。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="e5c1f-186">它也可能是長時間執行的反覆項目已經開始執行的情況。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="e5c1f-187">在這種情況下，反覆項目可能會明確檢查<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>如果屬性傳回的屬性和終止執行`true`。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-188">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-189">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-190">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="e5c1f-191">這可防止反覆項目，其索引大於<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性值從呼叫之後開始<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法，但它不會影響已經開始執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="e5c1f-192">若要避免這些無法完成，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A>方法來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="e5c1f-193">因此，在反覆項目會檢查的值如果<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e5c1f-194">傳達 <see cref="T:System.Threading.Tasks.Parallel" /> 迴圈應該依系統的方便盡早停止執行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5c1f-195">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法表示不需要執行迴圈的任何尚未開始的反覆運算。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="e5c1f-196">它會有效地取消迴圈中的任何其他反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="e5c1f-197">不過，它不會停止已經開始執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="e5c1f-198">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法會使<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>屬性，以傳回`true`仍在執行迴圈的任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="e5c1f-199">這特別適用於長時間執行反覆項目，可以檢查<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>屬性並結束早期如果其值為`true`。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="e5c1f-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 通常會採用以搜尋為基礎的演算法，結果就是一旦找到，其他反覆項目需要執行所在。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5c1f-201">下列範例會以平行方式執行迴圈的最多 10,000 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="e5c1f-202">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="e5c1f-203">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="e5c1f-204">範例輸出所示，任何反覆項目執行的呼叫後方<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="e5c1f-205">因為迴圈的反覆項目仍可能在執行時<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>呼叫方法時，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A>方法來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="e5c1f-206">如果它傳回`true`，會立即傳回在反覆項目。</span><span class="sxs-lookup"><span data-stu-id="e5c1f-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e5c1f-207">之前呼叫過 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="e5c1f-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 和 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 可能無法由相同迴圈的反覆項目搭配使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e5c1f-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>