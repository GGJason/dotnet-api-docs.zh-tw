<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ccd8e8796d91623d453ef299472d90582525e77" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407707" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="257aa-101">提供平行迴圈和區域的支援。</span>
      <span class="sxs-lookup">
        <span data-stu-id="257aa-101">Provides support for parallel loops and regions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-102"><xref:System.Threading.Tasks.Parallel>類別提供一般作業，例如迴圈，針對每個迴圈，和一組陳述式執行的程式庫為基礎的資料平行取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-103">此範例會示範數種方法來實作平行迴圈使用多個語言建構。</span><span class="sxs-lookup"><span data-stu-id="257aa-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="257aa-104">所有的 public 和 protected 成員的<see cref="T:System.Threading.Tasks.Parallel" />是安全執行緒，且可能會從多個執行緒同時使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="257aa-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="257aa-105">執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-105">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-106">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-106">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-107">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-107">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-108">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-108">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-109">執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-109">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-110">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-110">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-111">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-111">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-112">隨附兩個引數：</span><span class="sxs-lookup"><span data-stu-id="257aa-112">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="257aa-113"><xref:System.Int32>代表反覆項目計數的值。</span><span class="sxs-lookup"><span data-stu-id="257aa-113">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="257aa-114">A<xref:System.Threading.Tasks.ParallelLoopState>可用來提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-114">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="257aa-115"><xref:System.Threading.Tasks.ParallelLoopState>由編譯器所建立物件; 無法在使用者程式碼中執行個體化。</span><span class="sxs-lookup"><span data-stu-id="257aa-115">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="257aa-116">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法會通知`for`之後目前的反覆項目沒有要執行的作業。</span><span class="sxs-lookup"><span data-stu-id="257aa-116">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="257aa-117">不過，目前的所有反覆項目的其中一個將仍然必須如果它們還沒有這麼做會執行。</span><span class="sxs-lookup"><span data-stu-id="257aa-117">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="257aa-118">因此，呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>類似於使用符號內的作業傳統`for`迴圈語言如 C# 中，但不是完美的替代： 例如，並反覆項目目前之後絕對不會不保證執行。</span><span class="sxs-lookup"><span data-stu-id="257aa-118">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="257aa-119">如果目前的一不需要先執行所有反覆項目，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法，而不要使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="257aa-119">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="257aa-120">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知`for`迴圈它可能會放棄所有剩餘反覆項目，不論是否是之前或之後的目前反覆項目，因為所有必要的工作將會被已完成。</span><span class="sxs-lookup"><span data-stu-id="257aa-120">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="257aa-121">不過，如同與<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他反覆項目將不會執行任何保證。</span><span class="sxs-lookup"><span data-stu-id="257aa-121">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="257aa-122">如果提前結束，結束迴圈<xref:System.Threading.Tasks.ParallelLoopResult>傳回的結構將會包含在迴圈完成的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="257aa-122">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="257aa-123">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-123">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-124">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-124">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="257aa-125">從 1 到 1000 毫秒的隨機間隔暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-125">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="257aa-126">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="257aa-126">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="257aa-127">做為範例所示，其索引大於任何反覆項目從輸出<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>呼叫之後開始屬性值<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="257aa-127">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="257aa-128">因為迴圈的反覆項目仍可能在執行時<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>呼叫方法時，每個反覆項目呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType>屬性來檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="257aa-128">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="257aa-129">如果屬性值為`true`，反覆項目值檢查<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>屬性，如果大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="257aa-129">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-130">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-130">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-131">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-131">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-132">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-132">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-133">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-133">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-134">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-134">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-135">執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-135">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-136">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-136">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-137">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-137">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-138">隨附的反覆項目計數 (<xref:System.Int32>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="257aa-138">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="257aa-139">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-139">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-140">下列範例會使用<xref:System.Threading.Tasks.Parallel.For%2A>值 100 引動過程，會產生隨機位元組之委派的方法，並計算其總和。</span><span class="sxs-lookup"><span data-stu-id="257aa-140">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-141">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-141">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-142">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-142">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-143">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-143">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-144">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-144">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-145">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-145">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-146">使用 64 位元索引執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-146">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-147">
            <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 結構，包含迴圈已完成部分的相關資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-147">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-148">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-148">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-149">提供具備下列參數： 反覆項目計數 (<xref:System.Int64>)，和<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-149">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="257aa-150">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法會通知`for`之後目前的反覆項目不必執行，但所有的反覆項目的目前之前執行的作業。</span><span class="sxs-lookup"><span data-stu-id="257aa-150">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="257aa-151">因此，呼叫中斷，類似於使用符號內的作業傳統`for`迴圈語言如 C# 中，但不是完美的替代： 例如，並不保證該反覆項目之後目前絕對不會執行。</span><span class="sxs-lookup"><span data-stu-id="257aa-151">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="257aa-152">如果目前的一不需要先執行所有反覆項目，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法，而不要使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="257aa-152">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="257aa-153">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>通知`for`迴圈它可能會放棄所有剩餘反覆項目，不論是否是之前或之後的目前反覆項目，因為所有必要的工作將會被已完成。</span><span class="sxs-lookup"><span data-stu-id="257aa-153">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="257aa-154">不過，如同與<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他反覆項目將不會執行任何保證。</span><span class="sxs-lookup"><span data-stu-id="257aa-154">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="257aa-155">如果提前結束，結束迴圈<xref:System.Threading.Tasks.ParallelLoopResult>傳回的結構將會包含在迴圈完成的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="257aa-155">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="257aa-156">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-156">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-157">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-157">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-158">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-158">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-159">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-159">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-160">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-160">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-161">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-161">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-162">使用 64 位元索引執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-162">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-163">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-163">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-164">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-164">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-165">隨附的反覆項目計數 (<xref:System.Int64>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="257aa-165">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="257aa-166">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-166">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-167">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-167">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-168">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-168">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-169">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-169">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-170">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-170">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-171">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-171">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-172">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-172">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-173">執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-173">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-174">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-174">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-175">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-175">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-176">提供具備下列參數： 反覆項目計數 (<xref:System.Int32>)，和<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-176">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="257aa-177">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-177">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-178">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-178">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-179">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-179">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-180">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-180">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-181">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-181">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-182">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-182">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-183">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-183">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-184">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-184">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-185">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-185">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-186">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-186">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-187">執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以設定迴圈選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-187">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-188">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-188">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-189">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-189">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-190">隨附的反覆項目計數 (<xref:System.Int32>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="257aa-190">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="257aa-191">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-191">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-192">下列範例會示範如何取消平行迴圈：</span><span class="sxs-lookup"><span data-stu-id="257aa-192">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-193">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-193">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-194">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-194">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-195">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-195">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-196">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-196">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-197">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-197">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-198">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-198">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-199">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-199">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-200">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-200">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-201">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-201">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-202">使用 64 位元索引執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-202">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-203">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-203">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-204">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-204">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-205">提供具備下列參數： 反覆項目計數 (<xref:System.Int64>)，和<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-205">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="257aa-206">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-206">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-207">下列範例示範如何使用<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法<xref:System.Threading.Tasks.ParallelOptions>物件：</span><span class="sxs-lookup"><span data-stu-id="257aa-207">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-208">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-208">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-209">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-209">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-210">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-210">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-211">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-211">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-212">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-212">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-213">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-213">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-214">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-214">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-215">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-215">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-216">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-216">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-217">使用 64 位元索引執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以設定迴圈選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-217">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-218">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-218">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-219">支援 64 位元索引。</span><span class="sxs-lookup"><span data-stu-id="257aa-219">Supports 64-bit indexes.</span></span> <span data-ttu-id="257aa-220">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-220">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-221">隨附的反覆項目計數 (<xref:System.Int64>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="257aa-221">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="257aa-222">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-222">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-223">下列範例示範如何使用<xref:System.Threading.Tasks.ParallelOptions>來指定自訂工作排程器：</span><span class="sxs-lookup"><span data-stu-id="257aa-223">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-224">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-224">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-225">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-225">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-226">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-226">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-227">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-227">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-228">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-228">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-229">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-229">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-230">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-230">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-231">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-231">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-232">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-232">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-233">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-233">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-234">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-234">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-235">使用執行緒區域資料執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-235">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-236">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-236">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-237">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-237">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-238">提供具備下列參數： 反覆項目計數 (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-238">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-239">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-239">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-240">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-240">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-241">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-241">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-242">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-242">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-243">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-243">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-244">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-244">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-245"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-245">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-246">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-246">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="257aa-247">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-247">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="257aa-248">如需使用這個方法的範例，請參閱[How to： 撰寫含有執行緒區域變數的 Parallel.For 迴圈](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-248">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-249">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-249">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-250">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-250">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-251">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-251">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-252">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-252">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-253">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-253">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-254">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-254">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-255">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-255">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-256">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-256">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-257">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-257">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-258">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-258">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-259">使用 64 位元索引和執行緒區域資料執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-259">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-260">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-260">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-261">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-261">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-262">提供具備下列參數： 反覆項目計數 (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同工作執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-262">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="257aa-263">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-263">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-264">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-264">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-265">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-265">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-266">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-266">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-267">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-267">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-268">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-268">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-269"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-269">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-270">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-270">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="257aa-271">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-271">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="257aa-272">如需使用這個方法的範例，請參閱[How to： 撰寫含有執行緒區域變數的 Parallel.For 迴圈](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-272">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-273">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-273">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-274">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-274">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-275">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-275">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-276">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-276">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-277">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-277">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-278">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-278">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-279">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-279">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-280">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-280">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-281">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-281">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-282">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-282">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-283">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-283">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-284">使用執行緒區域資料執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-284">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-285">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-285">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-286">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-286">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-287">提供具備下列參數： 反覆項目計數 (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同工作執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-287">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="257aa-288">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-288">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-289">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-289">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-290">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-290">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-291">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-291">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-292">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-292">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-293">此委派可能同時叫用在多個執行緒。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-293">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-294"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-294">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-295">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-295">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="257aa-296">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-296">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-297">下列範例會使用執行緒區域變數，以計算許多長時間作業的結果。</span><span class="sxs-lookup"><span data-stu-id="257aa-297">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="257aa-298">這個範例會限制為 4 的平行處理原則程度。</span><span class="sxs-lookup"><span data-stu-id="257aa-298">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-299">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-299">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-300">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-300">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-301">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-301">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-302">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-302">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-303">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-303">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-304">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-304">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-305">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-305">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-306">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-306">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="257aa-307">起始索引 (含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-307">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="257aa-308">結束索引 (不含)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-308">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-309">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-309">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-310">函式委派，會針對每個執行緒傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-310">The function delegate that returns the initial state of the local data for each thread.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-311">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-311">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-312">委派，會針對每個執行緒的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-312">The delegate that performs a final action on the local state of each thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-313">使用 64 位元索引和執行緒區域資料執行 <see langword="for" /> (在 Visual Basic 中為 <see langword="For" />) 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-313">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-314">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-314">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-315">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="257aa-315">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="257aa-316">提供具備下列參數： 反覆項目計數 (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-316">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-317">`localInit`叫用委派一次針對每個參與迴圈的執行，且這些執行緒的每個傳回的初始的本機狀態的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-317">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="257aa-318">這些初始狀態會傳遞至第一個`body`引動過程，在每個執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-318">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="257aa-319">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-319">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-320">最後，在每個執行緒的最後一個主體引動過程傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-320">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-321">`localFinally`叫用委派一次每個執行緒上每個執行緒的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-321">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="257aa-322">此委派可能同時叫用在多個執行緒。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-322">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-323"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-323">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-324">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-324">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="257aa-325">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-325">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-326">
            <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-326">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-327">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-327">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-328">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-328">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-329">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-329">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-330">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-330">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-331">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-331">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-332">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-332">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="257aa-333">執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each " />) 運算，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-333">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-334">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-334">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-335">包含原始資料來源的可排序 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-335">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-336">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-336">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-337">在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-337">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-338">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-338">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-339">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-339">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-340">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-340">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-341"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-341">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-342">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-342">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-343">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-343">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-344">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-344">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-345">
            <paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-345">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-346">-或-  來源可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 屬性傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-346">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-347">-或-  來源可排序 Partitioner 中的任何方法都傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-347">-or-  Any methods in the source orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-348">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-348">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-349">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-349">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-350">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-350">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-351">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-351">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-352">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-352">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-353">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-353">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-354">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-354">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-355"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-355">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-356">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-356">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-357">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-357">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-358">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-358">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-359">
            <paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-359">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-360">-或-  <paramref name="source" /> Partitioner 中的方法傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-360">-or-  A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-361">-或-  <paramref name="source" /> Partitioner 中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未傳回正確的分割數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-361">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-362">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-362">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-363">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-363">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-364">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-364">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-365">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-366">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-366">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-367">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-368">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-370">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-371">下列範例示範如何實作用於範圍 partitioner <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="257aa-371">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-372">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-372">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-373">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-373">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-374">
            <paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-375">-或-  <paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-375">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-376">-或-  <paramref name="source" /> Partitioner 中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未傳回正確的分割數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-376">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-377">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-377">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-378">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-378">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-379">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-379">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-380">使用 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-380">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-381">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-381">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-382">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-382">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-383">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體與目前項目的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="257aa-383">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-384">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-384">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-385">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-385">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-386">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-386">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-387">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-387">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-388">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-388">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-389">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-389">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-390">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-390">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-391">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-391">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-392">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-392">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-393">提供具備下列參數： 目前的項目，和<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-393">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-394">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-394">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-395">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-395">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-396">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-396">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-397">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-397">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-398">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-398">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-399">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-399">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-400">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-400">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-401">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-401">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-402">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-402">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-403">它是做為參數提供目前的項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-403">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-404">下列範例會使用<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29>方法來計算的母音和文字檔案中的非空格字元數。</span><span class="sxs-lookup"><span data-stu-id="257aa-404">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-whitespace characters in a text file.</span></span> <span data-ttu-id="257aa-405">在此情況下，<xref:System.Threading.Tasks.ParallelLoopResult>方法所傳回的值會被忽略。</span><span class="sxs-lookup"><span data-stu-id="257aa-405">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="257aa-406">請注意，由於作業可以平行執行，您必須確定表示遞增的計數器變數不可部分完成的作業，而多個執行緒請勿嘗試同時存取計數器變數。</span><span class="sxs-lookup"><span data-stu-id="257aa-406">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="257aa-407">基於此目的，此範例會使用`lock`陳述式 （C# 中） 和`SyncLock`（在 Visual Basic) 陳述式。</span><span class="sxs-lookup"><span data-stu-id="257aa-407">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-408">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-408">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-409">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-409">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-410">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-410">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-411">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-411">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-412">包含原始資料來源的可排序 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-412">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-413">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-413">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-414">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-414">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-415">在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-415">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-416">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-416">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-417">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-417">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-418">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-418">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-419"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-419">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-420">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-420">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-421">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-421">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-422">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-422">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-423">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-423">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-424">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-424">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-425">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-425">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-426">
            <paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-426">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-427">-或-  <paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 屬性傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-427">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-428">-或-  <paramref name="source" /> 可排列 Partitioner 中的任何方法傳回 <see langword="null" /> 時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-428">-or-  The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-429">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-429">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-430">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-430">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-431">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-431">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-432">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-432">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-433">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-433">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-434">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-434">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-435">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-435">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-436">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-436">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-437"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-437">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-438">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-438">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-439">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-439">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-440">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-440">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-441">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-441">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-442">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-442">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-443">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-443">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-444">
            <paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-444">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-445">-或-  <paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-445">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-446">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-446">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-447">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-447">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-448">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-448">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-449">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-449">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-450">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以設定迴圈選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-450">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-451">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-451">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-452">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-452">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-453">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-453">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-454"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-454">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-455">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-455">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-456">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-456">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-457">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-457">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-458">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-458">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-459">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-459">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-460">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-460">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-461">
            <paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-461">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="257aa-462">-或-  <paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-462">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-463">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-463">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-464">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-464">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-465">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-465">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-466">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-466">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-467">使用 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-467">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-468">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-468">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-469">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-469">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-470">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體與目前項目的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="257aa-470">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-471">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-471">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-472">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-472">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-473">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-473">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-474">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-474">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-475">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-475">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-476">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-476">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-477">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-477">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-478">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-478">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-479">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-479">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-480">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-480">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-481">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-481">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-482">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-482">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-483">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-483">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-484">提供具備下列參數： 目前的項目，和<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="257aa-484">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-485">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-485">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-486">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-486">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-487">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-487">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-488">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-488">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-489">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-489">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-490">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-490">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-491">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-491">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-492">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-492">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-493">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-493">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-494">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-494">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-495">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以設定迴圈選項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-495">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-496">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-496">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-497">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-497">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-498">它是做為參數提供目前的項目。</span><span class="sxs-lookup"><span data-stu-id="257aa-498">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-499">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-499">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-500">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-500">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-501">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-501">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-502">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-502">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-503">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-503">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-504">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-504">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-505">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-505">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-506">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-506">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-507">包含原始資料來源的可排序 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-507">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-508">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-508">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-509">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-509">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-510">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-510">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-511">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-511">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-512">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-512">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-513">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-513">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-514">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-514">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-515"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-515">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-516">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-516">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="257aa-517">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-517">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-518">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-518">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-519">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-519">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-520">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-520">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-521">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-521">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-522">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-522">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-523"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-523">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-524">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-524">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-525">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-525">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-526">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-526">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-527">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-527">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-528">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-528">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-529">
            <paramref name="source" />
            <see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-529">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-530">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-530">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-531">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-531">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-532">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-532">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-533">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-533">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-534">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-534">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-535">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-535">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-536">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-536">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-537">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-537">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-538">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-538">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-539">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-539">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-540">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-540">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-541"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-541">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-542">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-542">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="257aa-543">`localInit`委派之每個參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態的執行緒呼叫一次。</span><span class="sxs-lookup"><span data-stu-id="257aa-543">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-544">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-544">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-545">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-545">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-546">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-546">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-547">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-547">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-548">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-548">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-549"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-549">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-550">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-550">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-551">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-551">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-552">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-552">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-553">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-553">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-554">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-554">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-555">
            <paramref name="source" />
            <see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-555">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-556">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-556">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-557">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-557">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-558">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-558">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-559">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-559">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-560">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-560">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-561">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-561">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-562">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-562">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-563">使用執行緒區域資料在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-563">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-564">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-564">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-565">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-565">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-566">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體、 目前的項目索引 (<xref:System.Int64>)，並可能在執行的反覆項目之間共用某些區域狀態在同一執行緒中。</span><span class="sxs-lookup"><span data-stu-id="257aa-566">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-567">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-567">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-568">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-568">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-569">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-569">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-570">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-570">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-571">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-571">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="257aa-572">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-572">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-573"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-573">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-574">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-574">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-575">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-575">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-576">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-576">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-577">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-577">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-578">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-578">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-579">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-579">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-580">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-580">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-581">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-581">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-582">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-582">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-583">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-583">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-584">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-584">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-585">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-585">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-586">使用執行緒區域資料在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-586">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-587">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-587">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-588">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-588">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-589">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-589">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-590">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-590">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-591">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-591">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-592">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-592">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-593">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-593">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-594">`localFinally`叫用委派一次每個執行緒，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-594">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="257aa-595">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-595">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-596"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-596">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-597">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-597">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-598">下列範例示範如何使用<xref:System.Threading.Tasks.Parallel.ForEach%2A>與本機狀態的方法：</span><span class="sxs-lookup"><span data-stu-id="257aa-598">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-599">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-599">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-600">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-600">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-601">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-601">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-602">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-602">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-603">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-603">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-604">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-604">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-605">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-605">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-606">包含原始資料來源的可排序 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-606">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-607">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-607">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-608">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-608">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-609">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-609">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-610">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-610">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-611">使用 64 位元索引和執行緒區域資料在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-611">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-612">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-612">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-613">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-613">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-614">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-614">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-615"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-615">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-616">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-616">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="257aa-617">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-617">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-618">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-618">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-619">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-619">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-620">最後，在每個執行緒的最後一個主體引動過程傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-620">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-621">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-621">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="257aa-622">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-622">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-623"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-623">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-624">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-624">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-625">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-625">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-626">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-626">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-627">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-627">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-628">-或-  <paramref name="localInit" /> 或 <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-628">-or-  The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-629">
            <paramref name="source" />
            <see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-629">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-630">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-630">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-631">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-631">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-632">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-632">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-633">中的項目類型<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-633">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-634">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-634">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-635">包含原始資料來源的 Partitioner。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-635">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-636">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-636">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-637">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-637">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-638">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-638">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-639">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-639">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-640">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-640">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-641">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-641">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-642">這個多載被提供給您要覆寫預設的資料分割配置的案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-642">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="257aa-643">例如，小型迴圈主體可能會受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="257aa-643">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="257aa-644"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="257aa-644">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="257aa-645">這個多載供小型迴圈主體可能受益靜態定界資料分割案例。</span><span class="sxs-lookup"><span data-stu-id="257aa-645">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="257aa-646">Partitioner 必須支援動態分割。</span><span class="sxs-lookup"><span data-stu-id="257aa-646">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="257aa-647">如需詳細資訊，請參閱[PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to： 實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-647">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="257aa-648">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-648">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-649">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-649">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-650">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-650">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-651">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-651">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-652">`localFinally`叫用委派一次每項工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-652">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="257aa-653">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-653">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-654"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-654">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-655">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-655">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-656">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-656">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-657">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-657">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-658">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-658">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-659">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-659">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-660">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-660">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="257aa-661">
            <paramref name="source" />
            <see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-661">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-662">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-662">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-663">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-663">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-664">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-664">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-665">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-665">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-666">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-666">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-667">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-667">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-668">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-668">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-669">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-669">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-670">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-670">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-671">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-671">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-672">使用執行緒區域資料和 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-672">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-673">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-673">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-674">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-674">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-675">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前脫離迴圈的執行個體、 目前的項目索引 (<xref:System.Int64>)，並可能在執行的反覆項目之間共用某些區域狀態在同一執行緒中。</span><span class="sxs-lookup"><span data-stu-id="257aa-675">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-676">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-676">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-677">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-677">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-678">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-678">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-679">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-679">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-680">`localFinally`叫用委派一次每個執行緒，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-680">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="257aa-681">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-681">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-682"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-682">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-683">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-683">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-684">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-684">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-685">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-685">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-686">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-686">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-687">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-687">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-688">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-688">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-689">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-689">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-690">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-690">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-691">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-691">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="257aa-692">來源中的資料類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-692">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="257aa-693">執行緒區域資料的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-693">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="257aa-694">可列舉的資料來源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-694">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-695">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-695">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="257aa-696">函式委派，會針對每項工作傳回本機資料的初始狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-696">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="257aa-697">每個反覆項目都會叫用一次的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-697">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="257aa-698">委派，會針對每項工作的本機狀態執行最終動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-698">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-699">使用執行緒區域資料在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-699">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="257aa-700">包含迴圈已完成部分之相關資訊的的結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-700">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-701">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="257aa-701">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="257aa-702">提供具備下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可能用於提前，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="257aa-702">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="257aa-703">`localInit`叫用委派一次的參與迴圈的執行，而這些工作的每個傳回的初始的本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-703">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="257aa-704">這些初始狀態會傳遞至第一個`body`引動過程上每項工作。</span><span class="sxs-lookup"><span data-stu-id="257aa-704">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="257aa-705">然後，每個後續的主體引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="257aa-705">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="257aa-706">最後，每個工作上上次的主體引動過程傳回狀態值，傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="257aa-706">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="257aa-707">`localFinally`叫用委派一次每個執行緒，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="257aa-707">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="257aa-708">此委派可能同時叫用多個工作。因此，您必須同步處理任何共用的變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="257aa-708">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="257aa-709"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作比執行緒存留時間內執行，做為現有的工作完成和由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="257aa-709">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="257aa-710">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="257aa-710">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-711">
            <paramref name="source" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-711">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-712">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-712">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-713">-或-  <paramref name="body" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-713">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-714">-或-  <paramref name="localInit" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-714">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-715">-或-  <paramref name="localFinally" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-715">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-716">
            <paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-716">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-717">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-717">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-718">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-718">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="257aa-719">執行每個提供的動作 (可能會平行執行)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-719">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">
          <span data-ttu-id="257aa-720">要執行的 <see cref="T:System.Action" /> 陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-720">An array of <see cref="T:System.Action" /> to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-721">執行每個提供的動作 (可能會平行執行)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-721">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-722">這個方法可用來平行執行一組作業，可能會使用。</span><span class="sxs-lookup"><span data-stu-id="257aa-722">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="257aa-723">不保證執行作業，或它們是否以平行執行中的順序。</span><span class="sxs-lookup"><span data-stu-id="257aa-723">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="257aa-724">這個方法不會傳回每個提供的作業完成為止，不論是否完成是發生因為一般的或異常終止。</span><span class="sxs-lookup"><span data-stu-id="257aa-724">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="257aa-725">如需詳細資訊，請參閱[如何：使用 Parallel.Invoke 來執行平行作業](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-725">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="257aa-726">這個範例示範如何使用<xref:System.Threading.Tasks.Parallel.Invoke%2A>方法與其他的方法、 匿名的委派和 lambda 運算式。</span><span class="sxs-lookup"><span data-stu-id="257aa-726">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-727">
            <paramref name="actions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-727">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-728">當 <paramref name="actions" /> 陣列中的任何動作擲回例外狀況時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-728">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="257aa-729">
            <paramref name="actions" /> 陣列包含 <see langword="null" /> 項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-729">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">
          <span data-ttu-id="257aa-730">物件，設定這個作業的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-730">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="actions">
          <span data-ttu-id="257aa-731">要執行的動作陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-731">An array of actions to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="257aa-732">除非使用者取消作業，否則執行每個提供的動作 (可能會平行執行)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-732">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="257aa-733">這個方法可用來平行執行一組作業，可能會使用。</span><span class="sxs-lookup"><span data-stu-id="257aa-733">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="257aa-734">取消語彙基元傳遞入<xref:System.Threading.Tasks.ParallelOptions>結構可讓呼叫端若要取消整個作業。</span><span class="sxs-lookup"><span data-stu-id="257aa-734">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="257aa-735">如需詳細資訊，請參閱[受控執行緒中的取消作業](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-735">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="257aa-736">不保證執行作業，或它們是否以平行執行中的順序。</span><span class="sxs-lookup"><span data-stu-id="257aa-736">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="257aa-737">這個方法不會傳回每個提供的作業完成為止，不論是否完成是發生因為一般的或異常終止。</span><span class="sxs-lookup"><span data-stu-id="257aa-737">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="257aa-738">如需詳細資訊，請參閱[如何：使用 Parallel.Invoke 來執行平行作業](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="257aa-738">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="257aa-739">
            <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationToken" /> 已設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-739">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="257aa-740">
            <paramref name="actions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-740">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="257aa-741">-或-  <paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-741">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="257aa-742">當 <paramref name="actions" /> 陣列中的任何動作擲回例外狀況時，所擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-742">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="257aa-743">
            <paramref name="actions" /> 陣列包含 <see langword="null" /> 項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-743">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="257aa-744">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="257aa-744">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>