<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6caf939ebdc8ec314d0fb3089516e2cac677b839" /><Meta Name="ms.sourcegitcommit" Value="d2dc7b29150110865ef8f199ee7463d9568fc696" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/25/2019" /><Meta Name="ms.locfileid" Value="58414238" /></Metadata><TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b65de-101">提供平行迴圈和區域的支援。</span><span class="sxs-lookup"><span data-stu-id="b65de-101">Provides support for parallel loops and regions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-102"><xref:System.Threading.Tasks.Parallel>類別提供一般作業，例如迴圈，針對每個迴圈，和一組陳述式執行的程式庫為基礎的資料平行取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-103">此範例示範數種方法來實作平行迴圈使用多個語言建構。</span><span class="sxs-lookup"><span data-stu-id="b65de-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b65de-104">所有 public 和 protected 成員<see cref="T:System.Threading.Tasks.Parallel" />是安全執行緒，且可能會從多個執行緒同時使用。</span><span class="sxs-lookup"><span data-stu-id="b65de-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="b65de-105">資料平行處理原則 (工作平行程式庫)</span><span class="sxs-lookup"><span data-stu-id="b65de-105">Data Parallelism (Task Parallel Library)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="b65de-106">使用.NET Framework 進行平行程式設計的範例</span><span class="sxs-lookup"><span data-stu-id="b65de-106">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b65de-107">執行可平行執行反覆項目的 <see langword="for" /> 迴圈。</span><span class="sxs-lookup"><span data-stu-id="b65de-107">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-108">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-108">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-109">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-109">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-110">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-110">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-111">執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-111">Executes a <see langword="for" /> loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-112">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-112">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-113">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-114">這會提供兩個引數：</span><span class="sxs-lookup"><span data-stu-id="b65de-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="b65de-115"><xref:System.Int32>表示反覆項目計數的值。</span><span class="sxs-lookup"><span data-stu-id="b65de-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="b65de-116">A<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="b65de-117"><xref:System.Threading.Tasks.ParallelLoopState>編譯器所建立物件; 無法在使用者程式碼中執行個體化。</span><span class="sxs-lookup"><span data-stu-id="b65de-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="b65de-118">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法會通知`for`之後目前的反覆項目沒有要執行的作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="b65de-119">但目前所有的反覆項目將仍然有一個要執行，如果它們還沒有這麼做。</span><span class="sxs-lookup"><span data-stu-id="b65de-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="b65de-120">因此，呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>類似於使用符號內的作業傳統`for`等語言中的迴圈C#，但它不是完美的替代：比方說，則無法保證該反覆項目之後目前絕對不會執行。</span><span class="sxs-lookup"><span data-stu-id="b65de-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="b65de-121">如果目前不需要之前，請執行所有的反覆項目，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法，而不是使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="b65de-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="b65de-122">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>會通知`for`迴圈，它可能會放棄所有剩餘反覆項目，不論它們位之前或之後的目前反覆項目，因為所有所需的工作將已經完成。</span><span class="sxs-lookup"><span data-stu-id="b65de-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="b65de-123">不過，隨著使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他反覆項目將不會執行任何保證。</span><span class="sxs-lookup"><span data-stu-id="b65de-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="b65de-124">如果迴圈已提前結束，<xref:System.Threading.Tasks.ParallelLoopResult>傳回的結構將會包含迴圈的完成的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="b65de-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="b65de-125">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-126">下列範例會以平行方式執行迴圈的最多 100 個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="b65de-127">從 1 到 1000 毫秒之間的隨機間隔就會暫停每個反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="b65de-128">隨機產生的值會決定迴圈的反覆項目上<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="b65de-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="b65de-129">如輸出所範例所示，其索引大於任何反覆項目<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>呼叫後面的屬性值開始<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b65de-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="b65de-130">因為迴圈的反覆項目仍可能同時執行的時機<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>呼叫方法，每個反覆項目會呼叫<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType>屬性，以檢查是否已呼叫另一個反覆項目<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="b65de-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b65de-131">屬性值是否`true`，在反覆項目值檢查<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType>屬性以及其是否大於目前的反覆項目的索引值，會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="b65de-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-132"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-132">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-133">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-133">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-134">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-134">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-135">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-135">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-136">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-136">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-137">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-137">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-138">執行可平行執行反覆項目的 <see langword="for" /> 迴圈。</span><span class="sxs-lookup"><span data-stu-id="b65de-138">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="b65de-139">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-139">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-140">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-141">它隨附的反覆項目計數 (<xref:System.Int32>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="b65de-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="b65de-142">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-143">下列範例會使用<xref:System.Threading.Tasks.Parallel.For%2A>值 100 的引動過程，會產生隨機位元組之委派的方法，並計算其總和。</span><span class="sxs-lookup"><span data-stu-id="b65de-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-144"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-144">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-145">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-145">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-146">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-146">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-147">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-147">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-148">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-148">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-149">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-149">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-150">使用 64 位元索引執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-150">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-151"><see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 結構，其中包含迴圈已完成部分的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="b65de-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-152">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-153">這提供下列參數： 反覆項目計數 (<xref:System.Int64>)，和<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="b65de-154">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>方法會通知`for`之後目前的反覆項目不必執行，但所有的反覆項目之前目前執行的作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="b65de-155">因此，呼叫中斷，類似於使用符號內的作業傳統`for`等語言中的迴圈C#，但它不是完美的替代：比方說，則無法保證該反覆項目之後目前絕對不會執行。</span><span class="sxs-lookup"><span data-stu-id="b65de-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="b65de-156">如果目前不需要之前，請執行所有的反覆項目，使用<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>方法，而不是使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>。</span><span class="sxs-lookup"><span data-stu-id="b65de-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="b65de-157">呼叫<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>會通知`for`迴圈，它可能會放棄所有剩餘反覆項目，不論它們位之前或之後的目前反覆項目，因為所有所需的工作將已經完成。</span><span class="sxs-lookup"><span data-stu-id="b65de-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="b65de-158">不過，隨著使用<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>，不有哪些其他反覆項目將不會執行任何保證。</span><span class="sxs-lookup"><span data-stu-id="b65de-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="b65de-159">如果迴圈已提前結束，<xref:System.Threading.Tasks.ParallelLoopResult>傳回的結構將會包含迴圈的完成的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="b65de-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="b65de-160">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-161"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-161">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-162">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-162">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-163">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-163">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-164">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-164">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-165">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-165">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-166">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-166">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-167">使用 64 位元索引執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-167">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="b65de-168">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-168">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-169">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-170">它隨附的反覆項目計數 (<xref:System.Int64>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="b65de-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="b65de-171">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-172"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-172">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-173">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-173">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-174">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-174">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-175">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-175">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-176">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-176">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-177">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-177">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-178">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-178">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-179">執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-179">Executes a <see langword="for" /> loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-180">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-180">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-181">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-182">這提供下列參數： 反覆項目計數 (<xref:System.Int32>)，和<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="b65de-183">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-184"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-185"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-185">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-186">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-186">-or-</span></span> 
<span data-ttu-id="b65de-187"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-188">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-188">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-189">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-190">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-190">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-191">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-191">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-192">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-192">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-193">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-193">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-194">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-194">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-195">執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以設定迴圈選項。</span><span class="sxs-lookup"><span data-stu-id="b65de-195">Executes a <see langword="for" /> loop in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="b65de-196">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-196">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-197">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-198">它隨附的反覆項目計數 (<xref:System.Int32>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="b65de-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="b65de-199">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-200">下列範例示範如何取消平行迴圈：</span><span class="sxs-lookup"><span data-stu-id="b65de-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-201"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-202"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-202">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-203">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-203">-or-</span></span> 
<span data-ttu-id="b65de-204"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-205">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-205">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-206">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-207">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-207">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-208">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-208">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-209">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-209">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-210">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-210">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-211">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-211">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-212">使用 64 位元索引執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-212">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-213">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-213">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-214">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-215">這提供下列參數： 反覆項目計數 (<xref:System.Int64>)，和<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="b65de-216">如果`fromInclusive`大於或等於`toExclusive`，方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-217">下列範例示範如何使用<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法使用<xref:System.Threading.Tasks.ParallelOptions>物件：</span><span class="sxs-lookup"><span data-stu-id="b65de-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-218"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-219"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-219">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-220">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-220">-or-</span></span> 
<span data-ttu-id="b65de-221"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-222">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-222">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-223">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-224">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-224">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="b65de-225">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-225">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-226">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-226">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-227">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-227">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-228">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-228">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-229">使用 64 位元索引執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以設定迴圈選項。</span><span class="sxs-lookup"><span data-stu-id="b65de-229">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="b65de-230">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-230">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-231">支援 64 位元索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="b65de-232">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-233">它隨附的反覆項目計數 (<xref:System.Int64>) 做為參數。</span><span class="sxs-lookup"><span data-stu-id="b65de-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="b65de-234">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-235">下列範例示範如何使用<xref:System.Threading.Tasks.ParallelOptions>來指定自訂的工作排程器：</span><span class="sxs-lookup"><span data-stu-id="b65de-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-236"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-237"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-237">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-238">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-238">-or-</span></span> 
<span data-ttu-id="b65de-239"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-240">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-240">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-241">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-242">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-242">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="b65de-243">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-243">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="b65de-244">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-244">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-245">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-245">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-246">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-246">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-247">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-247">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-248">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-248">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-249">使用執行緒區域資料執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-249">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-250">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-250">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-251">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-252">這提供下列參數： 反覆項目計數 (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-253">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-254">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-255">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-256">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-257">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-258">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-259"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-260">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="b65de-261">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="b65de-262">如需使用這個方法的範例，請參閱[How to:撰寫含有執行緒區域變數的 Parallel.For 迴圈](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-263"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-263">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-264">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-264">-or-</span></span> 
<span data-ttu-id="b65de-265"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-266">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-266">-or-</span></span> 
<span data-ttu-id="b65de-267"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-268">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-268">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-269">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-269">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="b65de-270">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-270">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="b65de-271">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-271">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-272">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-272">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-273">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-273">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-274">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-274">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-275">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-275">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-276">使用 64 位元索引和執行緒區域資料執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-276">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-277">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-277">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-278">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-279">這提供下列參數： 反覆項目計數 (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同工作執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="b65de-280">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-281">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-282">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-283">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-284">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-285">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-286"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-287">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="b65de-288">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="b65de-289">如需使用這個方法的範例，請參閱[How to:撰寫含有執行緒區域變數的 Parallel.For 迴圈](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-290"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-290">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-291">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-291">-or-</span></span> 
<span data-ttu-id="b65de-292"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-293">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-293">-or-</span></span> 
<span data-ttu-id="b65de-294"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-295">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-295">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-296">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-296">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="b65de-297">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-297">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="b65de-298">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-298">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-299">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-299">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-300">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-300">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-301">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-301">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-302">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-302">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-303">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-303">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-304">使用執行緒區域資料執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-304">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-305">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-305">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-306">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-307">這提供下列參數： 反覆項目計數 (<xref:System.Int32>)、<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同工作執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="b65de-308">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-309">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-310">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-311">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-312">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-313">這個委派可能會同時叫用上多個執行緒;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-314"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-315">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="b65de-316">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-317">下列範例會使用執行緒區域變數，以計算許多長時間作業的結果的總和。</span><span class="sxs-lookup"><span data-stu-id="b65de-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="b65de-318">此範例中會限制為 4 的平行處理原則程度。</span><span class="sxs-lookup"><span data-stu-id="b65de-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-319"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-319">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-320">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-320">-or-</span></span> 
<span data-ttu-id="b65de-321"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-322">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-322">-or-</span></span> 
<span data-ttu-id="b65de-323"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-324">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-324">-or-</span></span> 
<span data-ttu-id="b65de-325"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-326"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-327">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-328">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-328">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-329">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-329">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="b65de-330">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-330">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="b65de-331">起始索引 (含)。</span><span class="sxs-lookup"><span data-stu-id="b65de-331">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="b65de-332">要排除的結束索引。</span><span class="sxs-lookup"><span data-stu-id="b65de-332">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-333">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-333">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-334">函式委派，會針對每個執行緒的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-334">The function delegate that returns the initial state of the local data for each thread.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-335">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-335">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-336">委派，會針對每個執行緒的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-336">The delegate that performs a final action on the local state of each thread.</span></span></param>
        <summary><span data-ttu-id="b65de-337">使用 64 位元索引和執行緒區域資料執行 <see langword="for" /> 迴圈，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-337">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-338">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-338">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-339">`body`叫用委派一次反覆項目範圍中每個值 (`fromInclusive`， `toExclusive`)。</span><span class="sxs-lookup"><span data-stu-id="b65de-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="b65de-340">這提供下列參數： 反覆項目計數 (<xref:System.Int64>)、<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-341">`localInit`叫用委派一次的每個執行緒都參與迴圈的執行，並傳回每個執行緒的初始本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="b65de-342">這些初始狀態會傳遞至第一個`body`引動過程上每個執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="b65de-343">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-344">最後，在每個執行緒上的最後一個主體引動過程會傳回狀態的值傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-345">`localFinally`叫用委派一次每個執行緒上每個執行緒的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="b65de-346">這個委派可能會同時叫用上多個執行緒;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-347"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-348">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="b65de-349">如果`fromInclusive`大於或等於`toExclusive`，則方法會立即傳回而不執行任何反覆項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-350"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-350">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-351">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-351">-or-</span></span> 
<span data-ttu-id="b65de-352"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-353">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-353">-or-</span></span> 
<span data-ttu-id="b65de-354"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-355">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-355">-or-</span></span> 
<span data-ttu-id="b65de-356"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-357"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-358">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-359">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-359">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-360">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-360">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b65de-361">執行可平行執行反覆項目的 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each " />) 作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-362"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-362">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-363">包含原始資料來源的可排序 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-363">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-364">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-364">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-365">在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-366">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-366">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-367">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-368">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-370">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-371"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-371">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-372">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-372">-or-</span></span> 
<span data-ttu-id="b65de-373"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-373">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-374"><paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-375">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-375">-or-</span></span> 
<span data-ttu-id="b65de-376">來源可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-377">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-377">-or-</span></span> 
<span data-ttu-id="b65de-378">在來源可排序的 Partitioner 中的任何方法都會傳回<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-378">Any methods in the source orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-379">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-379">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-380"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-380">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-381">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-381">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-382">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-382">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-383">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-383">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-384">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-384">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-385">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-385">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-386">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-386">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-387"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-387">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-388">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-388">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-389"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-389">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-390">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-390">-or-</span></span> 
<span data-ttu-id="b65de-391"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-391">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-392"><paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-392">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-393">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-393">-or-</span></span> 
<span data-ttu-id="b65de-394"><paramref name="source" /> Partitioner 中的方法會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-394">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-395">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-395">-or-</span></span> 
<span data-ttu-id="b65de-396"><paramref name="source" /> Partitioner 中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未傳回正確的分割數目。</span><span class="sxs-lookup"><span data-stu-id="b65de-396">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-397">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-397">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-398"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-398">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-399">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-399">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-400">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-400">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-401">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行可平行執行反覆項目的 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-401">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="b65de-402">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-402">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-403">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-403">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-404">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-404">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-405"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-405">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-406">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-406">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-407">下列範例示範如何實作與搭配使用的範圍 partitioner 來得快<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="b65de-407">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-408"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-408">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-409">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-409">-or-</span></span> 
<span data-ttu-id="b65de-410"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-410">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-411"><paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-411">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-412">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-412">-or-</span></span> 
<span data-ttu-id="b65de-413"><paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-413">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-414">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-414">-or-</span></span> 
<span data-ttu-id="b65de-415"><paramref name="source" /> Partitioner 中的 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 方法未傳回正確的分割數目。</span><span class="sxs-lookup"><span data-stu-id="b65de-415">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-416">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-416">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-417">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-417">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-418">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-418">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-419">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-419">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-420">使用 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-420">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-421">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-421">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-422">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-422">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-423">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體與目前項目的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="b65de-423">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-424"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-424">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-425">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-425">-or-</span></span> 
<span data-ttu-id="b65de-426"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-426">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-427">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-427">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-428">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-428">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-429">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-429">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-430">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-430">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-431">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-431">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-432">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-432">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-433">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-433">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-434">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-434">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-435">這提供下列參數： 目前的項目，和<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-435">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-436"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-436">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-437">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-437">-or-</span></span> 
<span data-ttu-id="b65de-438"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-438">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-439">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-439">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-440">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-440">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-441">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-441">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-442">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-442">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-443">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-443">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-444">在 <see cref="T:System.Collections.IEnumerable" /> 上執行可平行執行反覆項目的 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-444">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="b65de-445">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-445">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-446">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-446">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-447">這是做為參數提供目前的項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-447">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-448">下列範例會使用<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29>方法來計算的母音和文字檔案中的非空格字元數。</span><span class="sxs-lookup"><span data-stu-id="b65de-448">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="b65de-449">在此情況下，<xref:System.Threading.Tasks.ParallelLoopResult>方法所傳回的值會被忽略。</span><span class="sxs-lookup"><span data-stu-id="b65de-449">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="b65de-450">請注意，由於作業可以平行執行，您必須確定，遞增的計數器變數是不可部分完成的作業，而且多個執行緒請勿嘗試同時存取計數器變數。</span><span class="sxs-lookup"><span data-stu-id="b65de-450">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="b65de-451">基於此目的，此範例會使用`lock`（在 C# 中) 的陳述式和`SyncLock`（在 Visual Basic) 陳述式。</span><span class="sxs-lookup"><span data-stu-id="b65de-451">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-452"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-452">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-453">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-453">-or-</span></span> 
<span data-ttu-id="b65de-454"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-454">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-455">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-455">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-456">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-456">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-457"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-457">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-458">包含原始資料來源的可排序 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-458">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-459">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-459">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-460">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-460">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-461">在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-461">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-462">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-462">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-463">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-463">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-464">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-464">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-465"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-465">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-466">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-466">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-467"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span><span class="sxs-lookup"><span data-stu-id="b65de-467">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-468"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-468">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-469">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-469">-or-</span></span> 
<span data-ttu-id="b65de-470"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-470">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-471">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-471">-or-</span></span> 
<span data-ttu-id="b65de-472"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-472">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-473">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-473">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-474"><paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-474">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-475">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-475">-or-</span></span> 
<span data-ttu-id="b65de-476"><paramref name="source" /> 可排序 Partitioner 中的 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-476">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-477">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-477">-or-</span></span> 
<span data-ttu-id="b65de-478"><paramref name="source" /> 可排列 Partitioner 中的任何方法傳回 <see langword="null" /> 時，擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-478">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-479">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-479">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-480"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-480">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-481">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-481">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-482">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-482">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-483">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-483">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-484">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-484">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-485">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-485">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-486">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-486">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-487">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-487">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-488"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-488">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-489">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-489">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-490"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-490">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-491">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-491">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-492"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-492">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-493">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-493">-or-</span></span> 
<span data-ttu-id="b65de-494"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-494">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-495">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-495">-or-</span></span> 
<span data-ttu-id="b65de-496"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-496">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-497"><paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-497">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-498">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-498">-or-</span></span> 
<span data-ttu-id="b65de-499"><paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-499">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-500">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-500">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-501"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-501">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-502">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-502">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-503">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-503">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-504">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-504">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-505">在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以設定迴圈選項。</span><span class="sxs-lookup"><span data-stu-id="b65de-505">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="b65de-506">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-506">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-507">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-507">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-508">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-508">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-509"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-509">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-510">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-510">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-511"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-511">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-512">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-512">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-513"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-513">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-514">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-514">-or-</span></span> 
<span data-ttu-id="b65de-515"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-515">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-516">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-516">-or-</span></span> 
<span data-ttu-id="b65de-517"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-517">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-518"><paramref name="source" /> Partitioner 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-518">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="b65de-519">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-519">-or-</span></span> 
<span data-ttu-id="b65de-520"><paramref name="source" /> Partitioner 中的任何方法傳回 <see langword="null" /> 時，擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-520">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-521">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-521">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-522">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-522">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-523">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-523">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-524">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-524">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-525">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-525">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-526">使用 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-526">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-527">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-527">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-528">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-528">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-529">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體與目前項目的索引 (<xref:System.Int64>)。</span><span class="sxs-lookup"><span data-stu-id="b65de-529">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-530"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span><span class="sxs-lookup"><span data-stu-id="b65de-530">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-531"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-531">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-532">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-532">-or-</span></span> 
<span data-ttu-id="b65de-533"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-533">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-534">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-534">-or-</span></span> 
<span data-ttu-id="b65de-535"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-535">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-536">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-536">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-537">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-537">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-538">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-538">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-539">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-539">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-540">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-540">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-541">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-541">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-542">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-542">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-543">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-543">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-544">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-544">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-545">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-545">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-546">這提供下列參數： 目前的項目，和<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b65de-546">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-547"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span><span class="sxs-lookup"><span data-stu-id="b65de-547">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-548"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-548">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-549">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-549">-or-</span></span> 
<span data-ttu-id="b65de-550"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-550">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-551">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-551">-or-</span></span> 
<span data-ttu-id="b65de-552"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-552">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-553">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-553">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-554">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-554">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-555">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-555">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-556">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-556">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-557">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-557">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-558">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-558">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-559">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-559">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="b65de-560">在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以設定迴圈選項。</span><span class="sxs-lookup"><span data-stu-id="b65de-560">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="b65de-561">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-561">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-562">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-562">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-563">這是做為參數提供目前的項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-563">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-564"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消</span><span class="sxs-lookup"><span data-stu-id="b65de-564">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-565"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-565">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-566">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-566">-or-</span></span> 
<span data-ttu-id="b65de-567"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-567">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-568">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-568">-or-</span></span> 
<span data-ttu-id="b65de-569"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-569">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-570">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-570">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-571">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-571">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-572">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-572">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-573"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-573">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-574">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-574">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-575">包含原始資料來源的可排序 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-575">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-576">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-576">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-577">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-577">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-578">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-578">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-579">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-579">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-580">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-580">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-581">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-581">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-582">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-582">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-583"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-583">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-584">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-584">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="b65de-585">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-585">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-586">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-586">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-587">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-587">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-588">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-588">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-589">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-589">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-590">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-590">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-591"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-591">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-592">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-592">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-593"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-593">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-594">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-594">-or-</span></span> 
<span data-ttu-id="b65de-595"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-595">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-596">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-596">-or-</span></span> 
<span data-ttu-id="b65de-597"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-597">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-598">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-598">-or-</span></span> 
<span data-ttu-id="b65de-599"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-599">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-600"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span><span class="sxs-lookup"><span data-stu-id="b65de-600">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-601">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-601">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-602">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-602">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-603"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-603">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-604">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-604">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-605">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-605">The partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-606">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-606">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-607">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-607">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-608">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-608">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-609">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-609">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-610">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-610">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-611">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-611">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-612">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-612">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-613"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-613">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-614">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-614">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="b65de-615">`localInit`叫用委派一次的每個執行緒都參與迴圈的執行，並傳回每個這些工作的初始本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-615">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-616">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-616">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-617">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-617">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-618">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-618">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-619">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-619">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-620">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-620">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-621"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-621">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-622">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-622">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-623"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-623">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-624">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-624">-or-</span></span> 
<span data-ttu-id="b65de-625"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-625">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-626">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-626">-or-</span></span> 
<span data-ttu-id="b65de-627"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-627">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-628">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-628">-or-</span></span> 
<span data-ttu-id="b65de-629"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-629">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-630"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span><span class="sxs-lookup"><span data-stu-id="b65de-630">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-631">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-631">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-632">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-632">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-633">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-633">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-634">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-634">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-635">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-635">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-636">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-636">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-637">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-637">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-638">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-638">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-639">使用執行緒區域資料在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-639">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-640">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-640">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-641">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-641">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-642">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體]、 [目前項目的索引 (<xref:System.Int64>)，和一些可能會在執行的反覆項目之間共用的本機狀態在同一執行緒中。</span><span class="sxs-lookup"><span data-stu-id="b65de-642">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-643">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-643">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-644">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-644">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-645">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-645">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-646">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-646">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-647">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-647">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-648">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-648">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-649"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-649">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-650">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-650">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-651"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-651">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-652">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-652">-or-</span></span> 
<span data-ttu-id="b65de-653"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-653">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-654">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-654">-or-</span></span> 
<span data-ttu-id="b65de-655"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-655">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-656">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-656">-or-</span></span> 
<span data-ttu-id="b65de-657"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-657">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-658">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-658">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-659">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-659">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-660">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-660">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-661">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-661">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-662">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-662">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-663">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-663">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-664">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-664">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-665">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-665">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-666">使用執行緒區域資料在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-666">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-667">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-667">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-668">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-668">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-669">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-669">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-670">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-670">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-671">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-671">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-672">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-672">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-673">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-673">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-674">`localFinally`叫用委派一次每個執行緒上每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-674">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-675">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-675">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-676"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-676">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-677">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-677">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-678">下列範例示範如何使用<xref:System.Threading.Tasks.Parallel.ForEach%2A>與本機狀態的方法：</span><span class="sxs-lookup"><span data-stu-id="b65de-678">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-679"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-679">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-680">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-680">-or-</span></span> 
<span data-ttu-id="b65de-681"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-681">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-682">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-682">-or-</span></span> 
<span data-ttu-id="b65de-683"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-683">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-684">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-684">-or-</span></span> 
<span data-ttu-id="b65de-685"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-685">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-686">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-686">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-687">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-687">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-688"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-688">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-689">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-689">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-690">包含原始資料來源的可排序 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-690">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-691">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-691">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-692">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-692">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-693">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-693">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-694">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-694">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-695">使用 64 位元索引和執行緒區域資料在 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-695">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-696">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-696">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-697">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-697">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-698">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-698">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-699"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-699">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-700">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-700">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="b65de-701">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-701">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-702">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-702">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-703">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-703">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-704">最後，在每個執行緒上的最後一個主體引動過程會傳回狀態的值傳遞至`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-704">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-705">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-705">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-706">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-706">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-707"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-707">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-708">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-708">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-709"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-709">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-710">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-710">-or-</span></span> 
<span data-ttu-id="b65de-711"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-711">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-712">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-712">-or-</span></span> 
<span data-ttu-id="b65de-713"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-713">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-714">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-714">-or-</span></span> 
<span data-ttu-id="b65de-715"><paramref name="localInit" /> 或 <paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-715">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-716"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span><span class="sxs-lookup"><span data-stu-id="b65de-716">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-717">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-717">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-718"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-718">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-719">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-719">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-720">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-720">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-721"><paramref name="source" /> 中的項目類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-721">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-722">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-722">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-723">包含原始資料來源的 Partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-723">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-724">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-724">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-725">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-725">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-726">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-726">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-727">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-727">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-728">使用執行緒區域資料在 <see cref="T:System.Collections.Concurrent.Partitioner" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-728">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-729">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-729">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-730">提供此多載的情況下，您要覆寫預設的資料分割配置。</span><span class="sxs-lookup"><span data-stu-id="b65de-730">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="b65de-731">例如，小型迴圈主體可能受益於資料分割的範圍。</span><span class="sxs-lookup"><span data-stu-id="b65de-731">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="b65de-732"><xref:System.Threading.Tasks.Parallel.ForEach%2A>方法必須要有支援動態磁碟分割的自訂 partitioner。</span><span class="sxs-lookup"><span data-stu-id="b65de-732">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="b65de-733">這個多載可供使用小型迴圈主體可能受益靜態定界分割案例。</span><span class="sxs-lookup"><span data-stu-id="b65de-733">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="b65de-734">Partitioner 必須支援動態分割區。</span><span class="sxs-lookup"><span data-stu-id="b65de-734">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="b65de-735">如需詳細資訊，請參閱 < [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)和[How to:實作動態分割](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-735">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="b65de-736">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-736">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-737">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-737">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-738">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-738">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-739">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-739">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-740">`localFinally`叫用委派一次每個工作，每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-740">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-741">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-741">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-742"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-742">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-743">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-743">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-744"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-744">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-745">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-745">-or-</span></span> 
<span data-ttu-id="b65de-746"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-746">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-747">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-747">-or-</span></span> 
<span data-ttu-id="b65de-748"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-748">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-749">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-749">-or-</span></span> 
<span data-ttu-id="b65de-750"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-750">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-751">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-751">-or-</span></span> 
<span data-ttu-id="b65de-752"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-752">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b65de-753"><paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> 中的 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 屬性會傳回 <see langword="false" />，或者 Partitioner 會傳回 <see langword="null" /> 分割。</span><span class="sxs-lookup"><span data-stu-id="b65de-753">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-754">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-754">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-755"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-755">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-756">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-756">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-757">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-757">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-758">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-758">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-759">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-759">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-760">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-760">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-761">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-761">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-762">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-762">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-763">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-763">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-764">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-764">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-765">使用執行緒區域資料和 64 位元索引在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (在 Visual Basic 中為 <see langword="For Each" />) 運算，其中可以平行執行反覆項目、可以設定迴圈選項，還可以監控和操作迴圈的狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-765">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-766">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-766">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-767">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-767">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-768">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提早脫離迴圈的執行個體]、 [目前項目的索引 (<xref:System.Int64>)，和一些可能會在執行的反覆項目之間共用的本機狀態在同一執行緒中。</span><span class="sxs-lookup"><span data-stu-id="b65de-768">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-769">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-769">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-770">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-770">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-771">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-771">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-772">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-772">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-773">`localFinally`叫用委派一次每個執行緒上每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-773">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-774">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-774">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-775"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-775">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-776">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-776">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-777"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-777">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-778">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-778">-or-</span></span> 
<span data-ttu-id="b65de-779"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-779">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-780">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-780">-or-</span></span> 
<span data-ttu-id="b65de-781"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-781">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-782">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-782">-or-</span></span> 
<span data-ttu-id="b65de-783"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-783">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-784">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-784">-or-</span></span> 
<span data-ttu-id="b65de-785"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-785">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-786"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-786">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-787">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-787">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-788">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-788">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-789">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-789">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="b65de-790">來源中的資料類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-790">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="b65de-791">執行緒區域資料的類型。</span><span class="sxs-lookup"><span data-stu-id="b65de-791">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="b65de-792">可列舉的資料來源。</span><span class="sxs-lookup"><span data-stu-id="b65de-792">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="b65de-793">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-793">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="b65de-794">函式委派，會針對每個工作的本機資料執行起始狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-794">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="b65de-795">每個反覆項目都會叫用一次的委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-795">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="b65de-796">委派，會針對每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-796">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="b65de-797">使用執行緒區域資料，在 <see cref="T:System.Collections.IEnumerable" /> 上執行 <see langword="foreach" /> (Visual Basic 中的 <see langword="For Each" />) 作業，其中可以平行執行反覆運算、可設定迴圈選項，且可以監視和操作迴圈狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-797">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="b65de-798">包含迴圈已完成部分之相關資訊的的結構。</span><span class="sxs-lookup"><span data-stu-id="b65de-798">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-799">`body`叫用委派一次中每個元素`source`可列舉。</span><span class="sxs-lookup"><span data-stu-id="b65de-799">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="b65de-800">這提供下列參數： 目前的項目，<xref:System.Threading.Tasks.ParallelLoopState>可用來提前結束，脫離迴圈的執行個體，且可能在相同執行緒執行的反覆項目之間共用某些本機狀態。</span><span class="sxs-lookup"><span data-stu-id="b65de-800">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="b65de-801">`localInit`叫用委派一次參與迴圈的執行，並傳回每個這些工作的初始本機狀態每項工作。</span><span class="sxs-lookup"><span data-stu-id="b65de-801">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="b65de-802">這些初始狀態會傳遞至第一個`body`上每個工作引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-802">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="b65de-803">然後，每個後續的內文引動過程傳回可能已修改的狀態值傳遞至下一個主體引動過程。</span><span class="sxs-lookup"><span data-stu-id="b65de-803">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="b65de-804">最後，每個工作上上次的主體引動過程會傳回傳遞至狀態值`localFinally`委派。</span><span class="sxs-lookup"><span data-stu-id="b65de-804">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="b65de-805">`localFinally`叫用委派一次每個執行緒上每個工作的本機狀態執行最終動作。</span><span class="sxs-lookup"><span data-stu-id="b65de-805">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="b65de-806">這個委派可能會同時叫用多個工作;因此，您必須同步處理任何共用變數的存取權。</span><span class="sxs-lookup"><span data-stu-id="b65de-806">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="b65de-807"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>方法可能會使用更多的工作，比執行緒存留時間內執行，為現有的工作完成，並由新的工作所取代。</span><span class="sxs-lookup"><span data-stu-id="b65de-807">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="b65de-808">這可讓基礎<xref:System.Threading.Tasks.TaskScheduler>物件有機會新增、 變更或移除服務迴圈的執行緒。</span><span class="sxs-lookup"><span data-stu-id="b65de-808">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-809"><paramref name="source" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-809">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-810">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-810">-or-</span></span> 
<span data-ttu-id="b65de-811"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-811">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-812">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-812">-or-</span></span> 
<span data-ttu-id="b65de-813"><paramref name="body" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-813">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-814">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-814">-or-</span></span> 
<span data-ttu-id="b65de-815"><paramref name="localInit" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-815">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-816">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-816">-or-</span></span> 
<span data-ttu-id="b65de-817"><paramref name="localFinally" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-817">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-818"><paramref name="parallelOptions" /> 引數中的 <see cref="T:System.Threading.CancellationToken" /> 已取消。</span><span class="sxs-lookup"><span data-stu-id="b65de-818">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-819">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-819">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-820">在所有執行緒擲回包含所有個別例外狀況的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-820">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="b65de-821">平行迴圈</span><span class="sxs-lookup"><span data-stu-id="b65de-821">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b65de-822">執行每個提供的動作 (可能會平行執行)。</span><span class="sxs-lookup"><span data-stu-id="b65de-822">Executes each of the provided actions, possibly in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions"><span data-ttu-id="b65de-823">要執行的 <see cref="T:System.Action" /> 陣列。</span><span class="sxs-lookup"><span data-stu-id="b65de-823">An array of <see cref="T:System.Action" /> to execute.</span></span></param>
        <summary><span data-ttu-id="b65de-824">執行每個提供的動作 (可能會平行執行)。</span><span class="sxs-lookup"><span data-stu-id="b65de-824">Executes each of the provided actions, possibly in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-825">這個方法可用來平行執行一組作業，有可能。</span><span class="sxs-lookup"><span data-stu-id="b65de-825">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="b65de-826">不保證會執行作業，或它們是否以平行方式執行的順序。</span><span class="sxs-lookup"><span data-stu-id="b65de-826">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="b65de-827">這個方法不會傳回每個提供的作業完成之前，不論是否完成發生一般的或異常終止。</span><span class="sxs-lookup"><span data-stu-id="b65de-827">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="b65de-828">如需詳細資訊，請參閱[如何：使用 Parallel.Invoke 來執行平行作業](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-828">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b65de-829">此範例示範如何使用<xref:System.Threading.Tasks.Parallel.Invoke%2A>與其他的方法、 匿名的委派和 lambda 運算式的方法。</span><span class="sxs-lookup"><span data-stu-id="b65de-829">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-830"><paramref name="actions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-830">The <paramref name="actions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-831">當 <paramref name="actions" /> 陣列中的任何動作擲回例外狀況時，所擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-831">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b65de-832"><paramref name="actions" /> 陣列包含 <see langword="null" /> 項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-832">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions"><span data-ttu-id="b65de-833">物件，設定這個作業的行為。</span><span class="sxs-lookup"><span data-stu-id="b65de-833">An object that configures the behavior of this operation.</span></span></param>
        <param name="actions"><span data-ttu-id="b65de-834">要執行的動作陣列。</span><span class="sxs-lookup"><span data-stu-id="b65de-834">An array of actions to execute.</span></span></param>
        <summary><span data-ttu-id="b65de-835">除非使用者取消作業，否則執行每個提供的動作 (可能會平行執行)。</span><span class="sxs-lookup"><span data-stu-id="b65de-835">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b65de-836">這個方法可用來平行執行一組作業，有可能。</span><span class="sxs-lookup"><span data-stu-id="b65de-836">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="b65de-837">取消語彙基元傳遞入<xref:System.Threading.Tasks.ParallelOptions>結構可讓呼叫端若要取消整個作業。</span><span class="sxs-lookup"><span data-stu-id="b65de-837">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="b65de-838">如需詳細資訊，請參閱[受控執行緒中的取消作業](~/docs/standard/threading/cancellation-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-838">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="b65de-839">不保證會執行作業，或它們是否以平行方式執行的順序。</span><span class="sxs-lookup"><span data-stu-id="b65de-839">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="b65de-840">這個方法不會傳回每個提供的作業完成之前，不論是否完成發生一般的或異常終止。</span><span class="sxs-lookup"><span data-stu-id="b65de-840">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="b65de-841">如需詳細資訊，請參閱[如何：使用 Parallel.Invoke 來執行平行作業](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)。</span><span class="sxs-lookup"><span data-stu-id="b65de-841">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="b65de-842"><paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationToken" /> 已設定。</span><span class="sxs-lookup"><span data-stu-id="b65de-842">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b65de-843"><paramref name="actions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-843">The <paramref name="actions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b65de-844">-或-</span><span class="sxs-lookup"><span data-stu-id="b65de-844">-or-</span></span> 
<span data-ttu-id="b65de-845"><paramref name="parallelOptions" /> 引數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-845">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="b65de-846">當 <paramref name="actions" /> 陣列中的任何動作擲回例外狀況時，所擲回的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="b65de-846">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b65de-847"><paramref name="actions" /> 陣列包含 <see langword="null" /> 項目。</span><span class="sxs-lookup"><span data-stu-id="b65de-847">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b65de-848">已處置與 <paramref name="parallelOptions" /> 中的 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="b65de-848">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
