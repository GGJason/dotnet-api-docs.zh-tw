<Type Name="UserNamePasswordValidator" FullName="System.IdentityModel.Selectors.UserNamePasswordValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bce76ba13852d6825b29e0d777751cec30a49f61" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37650832" /></Metadata><TypeSignature Language="C#" Value="public abstract class UserNamePasswordValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserNamePasswordValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UserNamePasswordValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class UserNamePasswordValidator abstract" />
  <TypeSignature Language="F#" Value="type UserNamePasswordValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>驗證使用者名稱和密碼.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> 類別來指定驗證使用者名稱和密碼的方式。 這可以透過從 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> 衍生類別以及覆寫 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> 方法的方式達成。 如需建立自訂使用者名稱和密碼驗證程式的詳細資訊，請參閱 <<c0> [ 如何： 使用自訂的使用者名稱和密碼驗證程式](~/docs/framework/wcf/feature-details/how-to-use-a-custom-user-name-and-password-validator.md)。  
  
   
  
## Examples  
 [!code-csharp[c_UsernameValidator#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#1)]
 [!code-vb[c_UsernameValidator#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UserNamePasswordValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UserNamePasswordValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMembershipProviderValidator">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator (System.Web.Security.MembershipProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator(class System.Web.Security.MembershipProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMembershipProviderValidator (provider As MembershipProvider) As UserNamePasswordValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IdentityModel::Selectors::UserNamePasswordValidator ^ CreateMembershipProviderValidator(System::Web::Security::MembershipProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member CreateMembershipProviderValidator : System.Web.Security.MembershipProvider -&gt; System.IdentityModel.Selectors.UserNamePasswordValidator" Usage="System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.Security.MembershipProvider" />
      </Parameters>
      <Docs>
        <param name="provider">要驗證使用者名稱和密碼的 <see cref="T:System.Web.Security.MembershipProvider" />。</param>
        <summary>取得 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 的執行個體，這個執行個體會使用指定之成員資格提供者來驗證使用者名稱和密碼。</summary>
        <returns><see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它會使用 <paramref name="provider" /> 來驗證使用者名稱和密碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個靜態屬性的值可以當做參數提供給 <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> 類別的其中一個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IdentityModel.Selectors.UserNamePasswordValidator None" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As UserNamePasswordValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IdentityModel::Selectors::UserNamePasswordValidator ^ None { System::IdentityModel::Selectors::UserNamePasswordValidator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.IdentityModel.Selectors.UserNamePasswordValidator" Usage="System.IdentityModel.Selectors.UserNamePasswordValidator.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得不會對使用者名稱和密碼執行任何驗證的驗證程式。 這樣一來，使用者名稱和密碼永遠會被視為有效。</summary>
        <value><see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它不會對使用者名稱和密碼執行任何驗證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個靜態屬性的值可以當做參數提供給 <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> 類別的其中一個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract void Validate (string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Validate (userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Validate(System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="abstract member Validate : string * string -&gt; unit" Usage="userNamePasswordValidator.Validate (userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">要驗證的使用者名稱。</param>
        <param name="password">要驗證的密碼。</param>
        <summary>在衍生類別中覆寫時，驗證指定的使用者名稱和密碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 覆寫 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> 方法以指定驗證使用者名稱和密碼的方式。 如果使用者名稱和密碼無法通過驗證時，就會擲回 <xref:System.IdentityModel.Tokens.SecurityTokenValidationException>。  
  
   
  
## Examples  
 [!code-csharp[c_UsernameValidator#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#2)]
 [!code-vb[c_UsernameValidator#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>