<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="185684a83acafb2c3f829a18fe5352be0e197322" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34313807" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供安全對話服務的認證設定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全對話包含交換多個訊息，而且會使用「安全性內容權杖」(Security Context Token，SCT) 來確保安全性。 在通訊工作階段的存留期間，通訊方之間共用此 SCT。 服務可以發行兩種不同的 SCT：  
  
-   第一種是包含唯一識別碼的工作階段架構 SCT。訊息只包含此識別碼，而服務會維護在 SCT 識別碼和內容 (例如宣告、安全性金鑰等內容) 之間進行對應的狀態對應快取。 正常執行的用戶端必須傳送 SCT 取消，以協助服務最佳化該快取資源。 如果您產生這個類別的方式，是在配合 <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> 參數等於 `requireCancellation` 情況下呼叫 `true`，這時就會以這種方式發出此 SCT。  
  
-   第二種是位於用戶端之 Cookie 內的獨立 (Self-Contained) SCT。 這種 SCT 包含完整的狀態資訊，因此不需要從服務進行狀態管理，也不需要從用戶端進行 SCT 取消。 這種 SCT 有時稱為「Cookie 模式」的 SCT。 由於 SCT 包含完整的狀態資訊，因此其大小大於工作階段架構 SCT 的大小。 使用工作階段架構 SCT 時，服務會儲存大部分的狀態資訊。 然而，因為具有獨立性質，因此它可用於整個服務存留期間，並可在服務關閉到重新啟動整個期間持續。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於 Cookie 序列化之 <see cref="T:System.Type" /> 宣告的集合。</summary>
        <value>用於 Cookie 序列化之 <see cref="T:System.Type" /> 宣告的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要將宣告序列化到 SCT cookie 中，Windows Communication Foundation (WCF) 會使用<xref:System.Runtime.Serialization.DataContractSerializer>作為預設值。 由於宣告資源是可延伸，WCF 可讓您提供已知的資源類型的清單。 這點可在 Cookie 內宣告還原序列化期間協助 <xref:System.Runtime.Serialization.DataContractSerializer>，使其可以傳回原始的強型別物件。  
  
   
  
## Examples  
 下列程式碼會示範如何取得這個屬性。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定自訂的 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />，此編碼器會用於編碼和解碼 Cookie 序列化。</summary>
        <value>
          <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 物件，它是自訂的 <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在「Cookie 模式」中，服務會以用戶端之 Cookie 的形式來向用戶端發出安全性內容權杖 (SCT)，讓用戶端不必維護任何安全性狀態。 用戶端會透過要求訊息來傳回該 Cookie，以便服務知道如何取消保護及確認該要求訊息。 由於 SCT 經常是在非安全網路上進行傳輸，因此它必須受到保護。  
  
 根據預設，Windows Communication Foundation (WCF) 會使用<xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>類別來保護使用資料保護 API (DPAPI) 的 cookie。 如果要讓 DPAPI 可在 Web 伺服陣列環境中運作，所有的後端服務都必須由相同網域使用者帳戶執行。 換句話說，如果服務屬於 Web 主控，則網際網路資訊服務 (IIS) 背景工作處理序必須設定成由網域使用者執行。  
  
 這個屬性可讓您使用自訂的 <xref:System.ServiceModel.Security.SecurityStateEncoder> 來加密和解密 Cookie，而不要依賴 DPAPI。  
  
   
  
## Examples  
 下列程式碼將示範如何設定這個屬性。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>