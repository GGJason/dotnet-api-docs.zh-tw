<Type Name="TextSource" FullName="System.Windows.Media.TextFormatting.TextSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f4d98a4477350ba7c77c7a5d57c007fc943547ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30667862" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TextSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.TextFormatting.TextSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextSource abstract" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供抽象類別，以指定 <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> 物件所要使用的字元資料和格式化屬性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的文字的所有存取<xref:System.Windows.Media.TextFormatting.TextSource>物件是透過<xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>，這為了讓虛擬化文字，則會選擇任何方式文字配置用戶端。  
  
 <xref:System.Windows.Media.TextFormatting.TextFormatter> 是[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]提供服務，用於格式化文字和分隔文字行的文字引擎。 <xref:System.Windows.Media.TextFormatting.TextFormatter> 可以處理不同的文字字元格式和段落的樣式，並包含支援國際文字版面配置。 不同於傳統文字[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]、<xref:System.Windows.Media.TextFormatting.TextFormatter>與透過回呼方法的一組文字配置用戶端互動。 它需要用戶端提供這些方法的實作中<xref:System.Windows.Media.TextFormatting.TextSource>類別。 下列清單描述您必須覆寫的三個成員：  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>： 擷取<xref:System.Windows.Media.TextFormatting.TextRun>開始於指定<xref:System.Windows.Media.TextFormatting.TextSource>位置。  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A>： 擷取文字範圍之前指定<xref:System.Windows.Media.TextFormatting.TextSource>位置。  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex%2A>： 擷取值，對應<xref:System.Windows.Media.TextFormatting.TextSource>字元索引<xref:System.Windows.Media.TextEffect>字元索引。  
  
> [!NOTE]
>  如需示範如何實作衍生的完整程式碼範例<xref:System.Windows.Media.TextFormatting.TextSource>類別，請參閱[進階文字格式範例](http://go.microsoft.com/fwlink/?LinkID=159965)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.TextFormatting.TextFormatter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrecedingText">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText (int textSourceCharacterIndexLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextSpan`1&lt;class System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText(int32 textSourceCharacterIndexLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPrecedingText (textSourceCharacterIndexLimit As Integer) As TextSpan(Of CultureSpecificCharacterBufferRange)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Media::TextFormatting::TextSpan&lt;System::Windows::Media::TextFormatting::CultureSpecificCharacterBufferRange ^&gt; ^ GetPrecedingText(int textSourceCharacterIndexLimit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndexLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndexLimit">
          <see cref="T:System.Int32" /> 值，表示停止文字擷取的字元索引位置。</param>
        <summary>擷取緊接在指定 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 位置之前的文字範圍。</summary>
        <returns>
          <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" /> 值，表示緊接在 <paramref name="textSourceCharacterIndexLimit" /> 之前的文字範圍。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A>方法會傳回空白<xref:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange>如果文字跨越之前`textSourceCharacterIndexLimit`不包含任何文字，例如內嵌物件或隱藏的執行。  
  
 如果先前沒有值，這個方法會傳回零長度的文字範圍`textSourceCharacterIndexLimit`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextEffectCharacterIndexFromTextSourceCharacterIndex">
      <MemberSignature Language="C#" Value="public abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTextEffectCharacterIndexFromTextSourceCharacterIndex (textSourceCharacterIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int textSourceCharacterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">
          <see cref="T:System.Int32" /> 值，表示要對應的 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 字元索引。</param>
        <summary>擷取將 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 字元索引對應至 <see cref="T:System.Windows.Media.TextEffect" /> 字元索引的值。</summary>
        <returns>
          <see cref="T:System.Int32" /> 值，表示 <see cref="T:System.Windows.Media.TextEffect" /> 字元索引。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRun">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextRun GetTextRun (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextRun GetTextRun(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTextRun (textSourceCharacterIndex As Integer) As TextRun" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Media::TextFormatting::TextRun ^ GetTextRun(int textSourceCharacterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">表示要從 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 中擷取 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> 的字元索引位置。</param>
        <summary>擷取從指定 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> 位置開始的 <see cref="T:System.Windows.Media.TextFormatting.TextSource" />。</summary>
        <returns>表示 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> 的值，或從 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> 衍生的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一次文字往返是共用單一屬性集的字元序列。 若要使用的格式，例如字型家族、 字型樣式、 前景色彩、 文字裝飾或任何其他格式效果，中斷的文字執行的任何變更。 <xref:System.Windows.Media.TextFormatting.TextRun>類別是代表所處理的文字內容的數種類型階層的根<xref:System.Windows.Media.TextFormatting.TextFormatter>。 每個類別衍生自<xref:System.Windows.Media.TextFormatting.TextRun>代表不同類型的文字內容。  
  
|類別|描述|  
|-----------|-----------------|  
|<xref:System.Windows.Media.TextFormatting.TextRun>|階層的根。 定義一組共用相同屬性集的字元的字元。|  
|<xref:System.Windows.Media.TextFormatting.TextCharacters>|定義不同的實體字型中的字元圖像 （glyph） 集合。|  
|<xref:System.Windows.Media.TextFormatting.TextEmbeddedObject>|定義文字內容的測量、 點擊測試，和繪圖的整個內容是為不同的實體類型。 舉例來說，這種類型是內容的中間的一行文字的按鈕。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfLine>|定義換行字元碼。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfParagraph>|定義段落符號字元碼。 衍生自 <xref:System.Windows.Media.TextFormatting.TextEndOfLine>。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfSegment>|定義分區符號標記。|  
|<xref:System.Windows.Media.TextFormatting.TextHidden>|定義不可見的字元範圍。|  
|<xref:System.Windows.Media.TextFormatting.TextModifier>|定義修改範圍的開頭。|  
  
   
  
## Examples  
 在下列範例中，覆寫<xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>方法實作。  
  
 [!code-csharp[TextFormattingSnippets#TextFormattingSnippet4](~/samples/snippets/csharp/VS_Snippets_Wpf/TextFormattingSnippets/CSharp/CustomTextClasses.cs#textformattingsnippet4)]
 [!code-vb[TextFormattingSnippets#TextFormattingSnippet4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextFormattingSnippets/visualbasic/customtextclasses.vb#textformattingsnippet4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsPerDip">
      <MemberSignature Language="C#" Value="public double PixelsPerDip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PixelsPerDip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelsPerDip As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double PixelsPerDip { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定應轉譯文字的 PixelsPerDip。</summary>
        <value>目前的 <see cref="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擴充任何類別<xref:System.Windows.Media.TextFormatting.TextSource>應該更新<xref:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip%2A>每當 DPI 變更每個監視 DPI 感知應用程式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>