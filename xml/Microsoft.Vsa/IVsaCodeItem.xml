<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77ff688e28e7f70d70b9a98d3b23d3fb27c73f18" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53446131" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表要由指令碼引擎編譯的程式碼項目。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
指定的程式碼項目可以包含類別、 模組或其他原始程式文字。

不不需要呼叫任何成員 IVsaCodeItem 介面的任何權限。

指令碼引擎會實作這個介面，以便新增程式碼項目。

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">事件來源的程式設計名稱。</param>
        <param name="eventSourceType">事件來源的類型名稱。</param>
        <summary>將事件來源加入程式碼項目。 程式碼項目會使用事件來源，藉由呼叫主機實作的 IVsaSite.GetEventSourceInstance 方法將事件連結至具名事件來源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
指令碼引擎會使用 AddEventSource 方法所提供的資訊連結至具名的事件來源的事件。 它會透過呼叫由主機所實作的 IVsaSite.GetEventSourceInstance 方法取得事件來源。 AddEventSource 方法會建立處理主機提供的物件所引發的事件類別。

> [!NOTE]
> JScript.NET 指令碼引擎不支援這個方法。 在其中 JScript.NET 引擎必須連結事件的情況下，您必須使用達成全域項目。 而不是事件來源、 JScript.NET 引擎會使用 AppGlobal 項目類型。 如需詳細資訊，請參閱 VsaItemType。


中的程式碼項目中，您可以存取事件來源物件名稱，和之後存取，您可以撰寫對物件的事件處理常式。 事件來源類型會傳遞為字串，而不是型別物件，以便實作的事件來源的未受管理的主機。

編譯器會使用 eventSourceType 參數繫結至型別所提供的方法。 它也會使用更新版本時，指令碼引擎會呼叫要求的型別物件的執行個體的 IVsaSite.GetEventSourceInstance 方法。

如需指令碼引擎的事件連結機制的詳細資訊，請參閱的 IVsaSite.GetEventSourceInstance 方法。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要附加至程式碼項目的文字。</param>
        <summary>將指定的文字附加至程式碼項目結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
附加的原始程式文字不會驗證。 基於這個理由，錯誤，如果有的話，就會出現在下一步 IVsaEngine.Compile 方法呼叫。

附加的原始程式文字提供以單一字串。 字串需要任何格式，您必須自行提供。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得程式碼項目中所代表的程式碼文件物件模型 (CodeDOM)。</summary>
        <value>程式碼項目的 CodeDOM。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
CodeDOM 屬性通常會產生指令碼引擎的編譯步驟的一部分，因此它後就無法使用之前 IVsaEngine.Compile 方法的呼叫。 某些 VSA 實作可能是能夠以動態方式，提供 CodeDOM，而不需要明確的編譯步驟中，但主機不能依賴此行為。 某些指令碼引擎，比方說，JScript.NET 指令碼引擎，不支援這種行為。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">要移除的事件來源程式設計名稱。</param>
        <summary>從程式碼項目中移除指定的事件來源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
移除的事件來源並不會從原始程式文字移除基礎的事件處理常式。 相反地，事件不會再引發的事件處理常式的通知。 因此，您會收到編譯器錯誤，如果您刪除事件來源，但保留基礎函式的原始程式碼中。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定或取得指定程式碼項目的文字，包含任何自動產生的程式碼。</summary>
        <value>程式碼項目的原始程式文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
當您設定此屬性時，文字不會驗證。 基於這個理由，錯誤，如果有的話，就會出現在下一步 IVsaEngine.Compile 方法呼叫。

SourceText 屬性會傳回一個龐大的字串，包括格式化字元，例如歸位字元在原始程式文字傳回。

若要取得此屬性，引擎必須未關閉。 若要設定此屬性，引擎必須未關閉，而且不能執行引擎。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>