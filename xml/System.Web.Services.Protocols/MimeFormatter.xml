<Type Name="MimeFormatter" FullName="System.Web.Services.Protocols.MimeFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d8d6968d1f8643e778c21e5e9ebd54a15fca8435" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37543283" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MimeFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MimeFormatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.MimeFormatter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MimeFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MimeFormatter abstract" />
  <TypeSignature Language="F#" Value="type MimeFormatter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>為使用 HTTP 但不使用 SOAP 實作之 Web 服務和用戶端的所有讀取器和寫入器，提供抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web 服務寫入器和讀取序列化和還原序列化，分別為 Web 方法的參數或傳回的物件之間的 HTTP 要求或回應資料流。 <xref:System.Web.Services.Protocols.MimeFormatter>類別建立公用介面和功能的讀取器和寫入器的類別，用戶端與服務端中。  
  
 <xref:System.Web.Services.Protocols.MimeFormatter>類別支援.NET Framework 的實作，透過 HTTP-GET 和 HTTP-POST 作業的 Web 服務。 HTTP GET 作業要求參數會編碼在 HTTP 要求的統一資源定位器 (URL)。 在 HTTP POST 作業中，會在 HTTP 要求主體中，如同 HTML 表單編碼要求參數。 使用這兩個實作中，傳回的值會出現在 HTTP 回應主體為非 SOAP XML 文件。  
  
 開發人員通常不需要直接使用<xref:System.Web.Services.Protocols.MimeFormatter>或其下階的類別。 相反地，當 Wsdl.exe 工具產生用戶端 proxy 程式碼，根據 HTTP-GET 或 HTTP-POST 實作，它會套用<xref:System.Web.Services.Protocols.HttpMethodAttribute>每個 Web 方法，並設定該屬性的<xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A>和<xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A>屬性，以適當的型別衍生自<xref:System.Web.Services.Protocols.MimeFormatter>類別。 在伺服器上，適當的衍生型別可根據 ASP.NET 組態檔 (Web.config) 中的設定。 在用戶端上的適當衍生型別會決定從 WSDL。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MimeFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MimeFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.MimeFormatter CreateInstance (Type type, object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.MimeFormatter CreateInstance(class System.Type type, object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Services::Protocols::MimeFormatter ^ CreateInstance(Type ^ type, System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="static member CreateInstance : Type * obj -&gt; System.Web.Services.Protocols.MimeFormatter" Usage="System.Web.Services.Protocols.MimeFormatter.CreateInstance (type, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.MimeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">要建立執行個體的型別 (Type)，衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />。</param>
        <param name="initializer">物件，用於初始化先前透過 <see cref="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" /> 方法衍生類別之實作取得的執行個體。</param>
        <summary>建立並初始化衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> 之具體類別的執行個體。</summary>
        <returns>
          <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>方法會建立衍生類別的執行個體，並叫用抽象的衍生的類別的實作<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。 <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>在處理要求或回應時，會叫用方法。  
  
 初始設定式是做為參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。 初始設定式當做參數傳遞給<xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>方法，會叫用所取得的衍生類別中的另一個執行個體<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>用戶端或服務的初始化期間的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，會傳回指定之方法的初始設定式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="mimeFormatter.GetInitializer methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfo">
          <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />，可指定要取得初始設定式的 Web 方法。</param>
        <summary>在衍生類別中覆寫時，會傳回指定之方法的初始設定式。</summary>
        <returns>
          <see cref="T:System.Object" />，其中包含指定之方法的初始設定式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始設定式是做為參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。  
  
 在衍生的類別的實作<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>用戶端或服務的初始化期間叫用執行個體方法。 稍後，在處理要求或回應的時間，初始設定式物件會傳遞給靜態<xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>方法會建立衍生類別中，然後以另一個物件的執行個體<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法，以將它初始化。 實際的讀取或寫入，則會執行另一個物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public static object GetInitializer (Type type, System.Web.Services.Protocols.LogicalMethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetInitializer(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetInitializer(Type ^ type, System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo);" />
      <MemberSignature Language="F#" Value="static member GetInitializer : Type * System.Web.Services.Protocols.LogicalMethodInfo -&gt; obj" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializer (type, methodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">為其取得初始設定式的型別 (Type)，衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />。</param>
        <param name="methodInfo">
          <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />，可指定要取得初始設定式的 Web 方法。</param>
        <summary>傳回指定方法的初始設定式。</summary>
        <returns>
          <see cref="T:System.Object" /> 物件，包含指定之方法的初始設定式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始設定式是做為參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。  
  
 靜態<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>方法會叫用在衍生的類別的<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>方法，以隱含方式建立衍生類別的執行個體。 在處理要求或回應時，初始設定式物件傳遞至<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>衍生類別的另一個執行個體方法。 第二個物件會執行實際的讀取或寫入。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializers">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，會傳回初始設定式物件的陣列，該陣列對應方法定義的輸入陣列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public virtual object[] GetInitializers (System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetInitializers(class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInitializers (methodInfos As LogicalMethodInfo()) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetInitializers(cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]&#xA;override this.GetInitializers : System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="mimeFormatter.GetInitializers methodInfos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="methodInfos">Web 方法的陣列，對於其中的每一個方法，都會取得傳回初始設定式陣列中對應索引的物件。</param>
        <summary>在衍生類別中覆寫時，會傳回初始設定式物件的陣列，該陣列對應方法定義的輸入陣列。</summary>
        <returns>初始設定式物件的陣列，對應方法定義的輸入陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始設定式是做為參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。  
  
 <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A>執行個體方法會叫用<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>執行個體方法，每個輸入 Web 方法。 這表示衍生自類別的執行個體<xref:System.Web.Services.Protocols.MimeFormatter>已經存在。 在處理要求或回應的時間，在初始設定式傳遞至<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>衍生類別的另一個執行個體方法。 第二個物件會執行實際的讀取或寫入。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializers">
      <MemberSignature Language="C#" Value="public static object[] GetInitializers (Type type, System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] GetInitializers(class System.Type type, class System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Object ^&gt; ^ GetInitializers(Type ^ type, cli::array &lt;System::Web::Services::Protocols::LogicalMethodInfo ^&gt; ^ methodInfos);" />
      <MemberSignature Language="F#" Value="static member GetInitializers : Type * System.Web.Services.Protocols.LogicalMethodInfo[] -&gt; obj[]" Usage="System.Web.Services.Protocols.MimeFormatter.GetInitializers (type, methodInfos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodInfos" Type="System.Web.Services.Protocols.LogicalMethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="type">為其取得初始設定式的型別 (Type)，衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />。</param>
        <param name="methodInfos">
          <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> 型別的陣列，可指定為其取得初始設定式的 Web 方法。</param>
        <summary>傳回初始設定式物件的陣列，該陣列對應衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> 之指定類別之方法定義的輸入陣列。</summary>
        <returns>初始設定式物件的陣列，對應衍生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" /> 之指定類別之方法定義的輸入陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始設定式是做為參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。  
  
 靜態<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializers%2A>方法會導致叫用<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>屬於指定的衍生類別方法`type`參數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="mimeFormatter.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">適合於實作方法之特定類別型別的物件。</param>
        <summary>在衍生類別中覆寫時，會初始化執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>在處理要求或回應時，會叫用方法; 不過，藉由呼叫取得初始設定<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>用戶端或服務的初始化期間的另一個執行個體上的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>