<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec1804651ba4a85c8d7f98ea2b633a8980e6c574" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873593" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定使用 SOAP 時做為衍生 Proxy 來源的類別用戶端。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您要建置 XML Web service 用戶端，則 proxy 類別，間接或衍生直接從<xref:System.Web.Services.Protocols.WebClientProtocol>必須建立 XML Web 服務。 當使用 SOAP 呼叫 XML Web service 用戶端時，proxy 類別必須衍生自<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>，其衍生自<xref:System.Web.Services.Protocols.HttpWebClientProtocol>。 <xref:System.Web.Services.Protocols.HttpWebClientProtocol>反而是衍生自<xref:System.Web.Services.Protocols.WebClientProtocol>。  
  
 與 XML Web service 通訊，請建立 proxy 類別，間接或直接衍生自<xref:System.Web.Services.Protocols.WebClientProtocol>對您想要呼叫 XML Web service。 而不是以手動方式建立 proxy 類別，使用 Web 服務描述語言工具 (Wsdl.exe) 來建立 proxy 類別，針對指定的 XML Web 服務的服務描述。 同步呼叫 XML Web service 方法的 SOAP 通訊協定產生 proxy 類別時，會透過<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法，而使用進行非同步呼叫<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>方法和<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例是由如 Wsdl.exe 產生 proxy 類別`Math`XML Web service。 Proxy 類別衍生自<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>，後者衍生自抽象<xref:System.Web.Services.Protocols.WebClientProtocol>類別。  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 下列程式碼範例是`Math`XML Web service，從中產生上述的 proxy 類別。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>此型別具備執行緒安全。</threadsafe>
    <block subset="none" type="overrides">
      <para>當您覆寫這個類別時，您可以導入衍生類別中，這專屬於特定類型的 XML Web service 的方法。方法會擷取參數，並呼叫基底類別，來執行與 XML Web service 通訊的工作。如果導入的方法是非同步的呼叫<see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />方法和<see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />方法。導入的方法是同步的如果呼叫<see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" />方法。覆寫建構函式通常會設定<see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />屬性的 XML Web service 方法的 url。</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">衍生類別中 XML Web Service 方法的名稱，該類別正在叫用 (Invoke) <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法。</param>
        <param name="parameters">物件陣列，包含要傳遞至 XML Web Service 的參數。 陣列中值的順序會對應至衍生類別之呼叫方法中參數的順序。</param>
        <param name="callback">非同步叫用完成後，要呼叫的委派。 如果 <c>callback</c> 為 <see langword="null" />，則不呼叫委派。</param>
        <param name="asyncState">呼叫端提供的額外資訊。</param>
        <summary>使用 SOAP 啟動 XML Web Service 方法的非同步引動過程。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，會傳遞至 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> 方法，以便自遠端方法呼叫取得傳回值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您不會呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>方法直接，除非您正在建置自己的 XML Web service 的 proxy 類別。  
  
 從服務描述 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別會公開 XML Web service 方法為衍生自 proxy 類別以同步方式呼叫 XML Web service 方法的名稱。 若要以非同步方式呼叫 XML Web service 方法，兩個額外的方法加入至每個 XML Web service 方法，一個使用的 proxy 類別`Begin`加入至 XML Web service 方法，一個具有名稱的前置詞`End`加入前置詞。  
  
 Proxy 類別呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>啟動 XML Web service 方法的非同步引動過程呼叫的方法。 例如，如果 XML Web service 會公開名為 XML Web service 方法`Add`，proxy 類別包含一個名為方法`BeginAdd`，用於啟動的引動過程，XML web service 方法。 中的程式碼`BeginAdd`，進行呼叫，以<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>方法，並將結果放入預期的傳回類型，如`Add`。  
  
 `methodName`用來尋找自訂屬性的可能已新增至方法，例如<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>。 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 提供衍生的方法所需的 SOAP 通訊協定的其他資訊。  
  
 `asyncState` 傳遞至`callback`納入<xref:System.IAsyncResult>傳回<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>方法。 `asyncState`參數可以用來傳遞內容的非同步呼叫，在指定的資訊`callback`參數，以處理結果的委派。  
  
   
  
## Examples  
 下列程式碼範例是 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別`Math`XML Web service。 內`BeginAdd`proxy 類別的方法<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>方法正在啟動非同步引動過程`Add`XML Web service 方法。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求已到達伺服器電腦，但是並未成功處理。</exception>
        <exception cref="T:System.InvalidOperationException">要求對物件的目前狀態而言無效。</exception>
        <exception cref="T:System.Net.WebException">存取往路時發生錯誤。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>動態繫結至 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> 的探索文件中所述的 XML Web Service。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將 XML Web service 用戶端可以動態地繫結至 XML Web service 不在 proxy 類別中使用參考一個<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A>方法。 一般而言，<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性指的是 XML Web 服務的基底位址。 不過，再叫用<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A>方法，將<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性，以探索文件的 URL。 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A>方法會嘗試在 proxy 類別中定義的繫結的探索文件中尋找相符項目，然後動態繫結到它。 如果成功，後續的方法呼叫會導向至 XML Web service 的探索文件中所述。  
  
 如果使用 Web 服務描述語言工具 (Wsdl.exe) 來建置 proxy 類別時，proxy 類別會定義實作 XML Web service 方法，它會叫用使用的繫結<xref:System.Web.Services.WebServiceBindingAttribute>。 當 XML Web service 實作多個繫結時，Wsdl.exe 就會建立 proxy 類別，每個繫結。 套用至每個 proxy 類別是<xref:System.Web.Services.WebServiceBindingAttribute>所定義的繫結和它的命名空間名稱。 您所設定的探索文件<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性必須包含相同的繫結名稱和命名空間，會實作 XML Web 服務的參考，或擲回例外狀況。  
  
   
  
## Examples  
 下列程式碼範例是使用 Wsdl.exe 公用程式，用於產生的 proxy 類別`Math`XML Web service。 A<xref:System.Web.Services.WebServiceBindingAttribute>套用至`Math`設為繫結名稱的 proxy 類別`MathSoap`及其命名空間來`http://tempuri.org/`。  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 下列程式碼範例是使用上述的 proxy 類別的 Web 服務用戶端。 內`EnterBtn_Click`Web 表單，XML Web service 用戶端呼叫的事件<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A>方法嘗試動態繫結的使用者所提供的 URL。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Proxy 類別不會定義繫結。</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">從 <see cref="T:System.IAsyncResult" /> 方法傳回的 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />。</param>
        <summary>使用 SOAP 結束 XML Web Service 方法的非同步引動過程。</summary>
        <returns>物件陣列，包含衍生類別方法的傳回值以及任何傳址 (By Reference) 方式或 <see langword="out" /> 的參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您不會呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A>方法直接，除非您正在建置自己的 XML Web service 的 proxy 類別。  
  
 XML Web service 的 Web 服務描述語言工具 (Wsdl.exe) 產生的 proxy 類別會公開 XML Web service 方法為從 proxy 類別以同步方式呼叫 XML Web service 方法的名稱。 對於以非同步方式呼叫 XML Web service 方法，兩個額外的方法會加入至每個 XML Web service 方法，一個使用的 proxy 類別`Begin`加入至 XML Web service 方法，一個具有名稱的前置詞`End`加入前置詞。  
  
 Proxy 類別呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A>完成 XML Web service 方法的非同步引動過程呼叫的方法。 例如，如果 XML Web service 會公開名為 XML Web 服務方法`Add`，proxy 類別包含一個名為方法`EndAdd`，完成非同步引動過程的 XML Web service 方法。 中的程式碼`EndAdd`進行呼叫，以<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A>方法，然後結果會放入預期的傳回類型，如`Add`。  
  
   
  
## Examples  
 下列程式碼範例是由如 Wsdl.exe 產生 proxy 類別`Math`XML Web service。 內`EndAdd`proxy 類別的方法<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A>方法會完成非同步引動過程`Add`XML Web service 方法。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 並非 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法的傳回值。</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求已到達伺服器電腦，但是並未成功處理。</exception>
        <exception cref="T:System.InvalidOperationException">要求對物件的目前狀態而言無效。</exception>
        <exception cref="T:System.Net.WebException">存取往路時發生錯誤。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />，提供 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />，以初始化 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="bufferSize">
          <see cref="T:System.IO.StreamReader" /> 所使用之 <see cref="T:System.Xml.XmlReader" /> 的初始緩衝區大小。</param>
        <summary>傳回 <see cref="T:System.Xml.XmlReader" />，它是使用 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 參數的 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> 屬性初始化。</summary>
        <returns>
          <see cref="T:System.Xml.XmlReader" />，使用 <paramref name="message" /> 參數的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 屬性初始化。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">建立 <see cref="T:System.Uri" /> 時要使用的 <see cref="T:System.Net.WebRequest" />。</param>
        <summary>建立指定之 <see cref="T:System.Net.WebRequest" /> 的 <paramref name="uri" />。</summary>
        <returns>所指定之 URI 的 <see cref="T:System.Net.WebRequest" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以覆寫這個方法，以自訂<xref:System.Net.WebRequest>之前 XML Web service 要求。 比方說，您可以將自訂標頭加入要求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />，提供 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />，以初始化 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="bufferSize">
          <see cref="T:System.IO.StreamWriter" /> 所使用之 <see cref="T:System.Xml.XmlWriter" /> 的初始緩衝區大小。</param>
        <summary>傳回 <see cref="T:System.Xml.XmlWriter" />，它是使用 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 參數的 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> 屬性初始化。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" />，使用 <paramref name="message" /> 參數的 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 屬性初始化。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">XML Web Service 方法的名稱。</param>
        <param name="method_name">XML Web Service 方法的名稱。</param>
        <param name="parameters">物件陣列，包含要傳遞至 XML Web Service 的參數。 陣列中值的順序會對應至衍生類別之呼叫方法中參數的順序。</param>
        <summary>使用 SOAP 同步叫用 XML Web Service 方法。</summary>
        <returns>物件陣列，包含衍生類別方法的傳回值和任何 <see langword="reference" /> 或 <see langword="out" /> 參數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您不能呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A>方法直接，除非您正在建置自己的 XML Web service 的 proxy 類別。  
  
 XML Web service 的 Web 服務描述語言工具 (Wsdl.exe) 產生的 proxy 類別會公開 XML Web service 方法為從 proxy 類別的名稱。 Proxy 類別呼叫<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A>叫用 XML Web 服務方法呼叫的方法。 例如，如果 XML Web service 會公開名為 XML Web 服務方法`Add`，proxy 類別也包含一個名為方法`Add`。 中的程式碼`Add`proxy 類別中的方法，同步呼叫 XML Web service 方法，透過<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A>方法，然後結果會放入預期的傳回類型，如`Add`。  
  
 `methodName`參數用來尋找自訂屬性，可能已新增至方法，例如<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>。 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 在衍生的方法所需的 SOAP 通訊協定提供其他資訊。  
  
   
  
## Examples  
 下列程式碼範例是由如 Wsdl.exe 產生 proxy 類別`Math`XML Web service。 內`Add`proxy 類別的方法<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A>方法呼叫`Add`XML Web service 方法。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求已到達伺服器電腦，但是並未成功處理。</exception>
        <exception cref="T:System.InvalidOperationException">要求對物件的目前狀態而言無效。</exception>
        <exception cref="T:System.Net.WebException">存取往路時發生錯誤。</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同步叫用指定的方法。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">所要叫用之方法的名稱。</param>
        <param name="parameters">要傳遞至該方法的參數。</param>
        <param name="callback">方法引動過程完成時呼叫的委派。</param>
        <summary>非同步叫用指定的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">所要叫用之方法的名稱。</param>
        <param name="parameters">要傳遞至該方法的參數。</param>
        <param name="callback">方法引動過程完成時呼叫的委派。</param>
        <param name="userState">用來將狀態資訊傳遞至 <c>callback</c> 委派的物件。</param>
        <summary>非同步叫用指定的方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SOAP 通訊協定的版本，用於對 XML Web Service 發出 SOAP 要求。</summary>
        <value>其中一個 <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> 值。 預設值為 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A>屬性會設定以 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別<xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11>依預設，當 WSDL 文件的 XML Web service 支援 SOAP 1.1 版。 不過，當 XML Web 服務只支援 SOAP 1.2，Wsdl.exe 集<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A>屬性設<xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>。 若要產生 proxy 類別，使用 Wsdl.exe 時，請選擇的 SOAP 通訊協定版本，請使用`/protocol`參數搭配`SOAP`或`SOAP12`設定，才能<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A>屬性設<xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11>和<xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>分別.  
  
   
  
## Examples  
 下列程式碼範例會設定用來與 SOAP 1.2 的 XML Web service 通訊的通訊協定版本。  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>