<Type Name="HttpPostClientProtocol" FullName="System.Web.Services.Protocols.HttpPostClientProtocol">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba2d57e43dfbb156ec48a0ab88aee2a891794d2d" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51911480" /></Metadata><TypeSignature Language="C#" Value="public class HttpPostClientProtocol : System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpPostClientProtocol extends System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpPostClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpPostClientProtocol&#xA;Inherits HttpSimpleClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpPostClientProtocol : System::Web::Services::Protocols::HttpSimpleClientProtocol" />
  <TypeSignature Language="F#" Value="type HttpPostClientProtocol = class&#xA;    inherit HttpSimpleClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpSimpleClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XML Web Service 用戶端 Proxy 的基底類別，使用 HTTP-POST 通訊協定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時將 XML Web service 用戶端會使用 HTTP POST 通訊協定的預設參數，就會在 HTTP 主體中使用 URL 編碼規則編碼，並使用純 XML 回應。 此通訊協定會使用衍生自類別<xref:System.Web.Services.Protocols.MimeFormatter>編碼參數和傳回值標準的 MIME 格式。 服務描述中指定要使用的編碼器。  
  
 如果您要建置使用 ASP.NET，則將 XML Web service 用戶端 proxy 類別，間接衍生，或直接從<xref:System.Web.Services.Protocols.WebClientProtocol>必須先建立您想要呼叫 XML Web service。 在 XML Web service 用戶端會使用 HTTP 呼叫時，衍生的 proxy 類別<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>，而後者又衍生自<xref:System.Web.Services.Protocols.WebClientProtocol>。  
  
 <xref:System.Web.Services.Protocols.HttpGetClientProtocol> 並<xref:System.Web.Services.Protocols.HttpPostClientProtocol>衍生自<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>，分別使用 HTTP-GET 和 HTTP-POST 對 XML Web service 方法的呼叫中提供的支援。 呼叫 XML Web service 使用 SOAP 用戶端應該衍生自<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>。  
  
 如需建立 proxy 類別的詳細資訊，請參閱[ &#91; \<topic://cpconcreatingwebserviceproxy >&#93;](https://msdn.microsoft.com/library/142d91f5-3249-4cfc-a431-1f3acb76d756)。  
  
   
  
## Examples  
 下列範例是 Wsdl.exe 公用程式，用於產生的 proxy 類別`Math`下方的 XML Web 服務。 Proxy 類別衍生自<xref:System.Web.Services.Protocols.HttpPostClientProtocol>，後者衍生自抽象<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>類別。  
  
 [!code-cpp[Classic HttpPostClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpPostClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpPostClientProtocol Example/VB/source.vb#1)]  
  
 下列範例是`Math`XML Web service，從中建立先前的 proxy 類別。  
  
  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.HttpGetClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpPostClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpPostClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpPostClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[HttpPostClientProtocol_Constructor#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/CPP/httppostclientprotocol_constructor.cpp#1)]
 [!code-csharp[HttpPostClientProtocol_Constructor#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/CS/httppostclientprotocol_constructor.cs#1)]
 [!code-vb[HttpPostClientProtocol_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpPostClientProtocol_Constructor/VB/httppostclientprotocol_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpPostClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="httpPostClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">建立 <see cref="T:System.Uri" /> 時要使用的 <see cref="T:System.Net.WebRequest" />。</param>
        <summary>為指定的 URI 建立 <see cref="T:System.Net.WebRequest" /> 執行個體。</summary>
        <returns><see cref="T:System.Net.WebRequest" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會覆寫的基底版本<xref:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest%2A>來指定 XML Web service 的 HTTP 要求使用 HTTP POST 進行。 藉由覆寫這個方法，您可以自訂<xref:System.Net.WebRequest>物件進行 XML Web service 要求之前。 例如，您可以將自訂標頭加入要求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> 參數為 null 或長度為零。</exception>
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)" />
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
  </Members>
</Type>