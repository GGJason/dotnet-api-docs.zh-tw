<Type Name="HttpSimpleClientProtocol" FullName="System.Web.Services.Protocols.HttpSimpleClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10728b784a0edaa8a8227fda4746cc60b561c241" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36395767" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpSimpleClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpSimpleClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSimpleClientProtocol abstract : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type HttpSimpleClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="479be-101">表示使用簡單 HTTP-GET 和 HTTP-POST 通訊協定繫結，與 XML Web Service 進行通訊所用的基底類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="479be-101">Represents the base class for communicating with an XML Web service using the simple HTTP-GET and HTTP-POST protocols bindings.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="479be-102">這個類別指定的大部分實作透過 HTTP 使用編碼器編碼的參數和傳回值到通用的 MIME 格式與 XML Web 服務進行通訊。</span><span class="sxs-lookup"><span data-stu-id="479be-102">This class specifies most of the implementation for communicating with an XML Web service over HTTP using encoders to encode the parameters and return values into common MIME formats.</span></span> <span data-ttu-id="479be-103">這些編碼器衍生自<xref:System.Web.Services.Protocols.MimeFormatter>類別。</span><span class="sxs-lookup"><span data-stu-id="479be-103">These encoders derive from the <xref:System.Web.Services.Protocols.MimeFormatter> class.</span></span> <span data-ttu-id="479be-104">根據預設，proxy 類別，衍生自<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>編碼使用純文字 XML 中的應用程式/x-www-表單-urlencoded MIME 類型和回應的參數。</span><span class="sxs-lookup"><span data-stu-id="479be-104">By default, a proxy class deriving from <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> encodes parameters using the application/x-www-form-urlencoded MIME type and the response in plain XML.</span></span> <span data-ttu-id="479be-105">您可以使用指定自訂的 mime 格式器<xref:System.Web.Services.Protocols.HttpMethodAttribute>屬性，不過，沒有任何支援將這整合到服務描述和 proxy 產生。</span><span class="sxs-lookup"><span data-stu-id="479be-105">Custom mime formatters can be specified using the <xref:System.Web.Services.Protocols.HttpMethodAttribute> attribute, however, there is no support for integrating this into a service description and proxy generation.</span></span>  
  
 <span data-ttu-id="479be-106">`Notes to Inheritors:` 當您覆寫這個類別時，您可以引入衍生類別中的方法專屬於特定類型的 XML Web 服務。</span><span class="sxs-lookup"><span data-stu-id="479be-106">`Notes to Inheritors:` When you override this class, you can introduce methods in the derived class that are specific to a particular type of an XML Web service.</span></span> <span data-ttu-id="479be-107">方法只要擷取參數，並呼叫基底類別進行通訊與站台的工作。</span><span class="sxs-lookup"><span data-stu-id="479be-107">The methods simply capture the parameters, and call the base class to do the work of communicating with the site.</span></span> <span data-ttu-id="479be-108">導入的方法是非同步的如果呼叫<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>和<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="479be-108">If the introduced methods are asynchronous, call the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> and <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> methods.</span></span> <span data-ttu-id="479be-109">導入的方法是同步的如果呼叫<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="479be-109">If the introduced methods are synchronous, call the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method.</span></span> <span data-ttu-id="479be-110">覆寫建構函式通常會設定<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>XML Web 服務方法的 URI 的屬性。</span><span class="sxs-lookup"><span data-stu-id="479be-110">The overridden constructor typically sets the <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> property to the URI of the XML Web service method.</span></span>  
  
 <span data-ttu-id="479be-111">Web 服務描述語言工具 (Wsdl.exe) 所產生的衍生的類別<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>針對給定的服務描述。</span><span class="sxs-lookup"><span data-stu-id="479be-111">The Web Services Description Language tool (Wsdl.exe) generates derived classes of <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> for a given Service Description.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="479be-112">下列程式碼範例是針對 Wsdl.exe 所產生 proxy 類別`Math`以下的 XML Web 服務。</span><span class="sxs-lookup"><span data-stu-id="479be-112">The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service below.</span></span> <span data-ttu-id="479be-113">Proxy 類別衍生自<xref:System.Web.Services.Protocols.HttpGetClientProtocol>，其衍生自抽象<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol>類別。</span><span class="sxs-lookup"><span data-stu-id="479be-113">The proxy class derives from <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, which derives from the abstract <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> class.</span></span>  
  
 [!code-cpp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpGetClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/VB/source.vb#1)]  
  
 <span data-ttu-id="479be-114">下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。</span><span class="sxs-lookup"><span data-stu-id="479be-114">The following code example is the `Math` XML Web service, from which the preceding proxy class was created.</span></span>  
  
 [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="479be-115">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="479be-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpSimpleClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpSimpleClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="479be-116">初始化 <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-116">Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, string requestUrl, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, requestUrl As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="httpSimpleClientProtocol.BeginInvoke (methodName, requestUrl, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="479be-117">XML Web Service 方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-117">The name of the XML Web service method.</span>
          </span>
        </param>
        <param name="requestUrl">
          <span data-ttu-id="479be-118">建立 <see cref="T:System.Net.WebRequest" /> 時所使用的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-118">The URL to use when creating the <see cref="T:System.Net.WebRequest" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="479be-119">物件的陣列，包含要傳遞至 XML Web Service 方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-119">An array of objects containing the parameters to pass to the XML Web service method.</span>
          </span>
          <span data-ttu-id="479be-120">陣列中值的順序會對應至衍生類別之呼叫方法中參數的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-120">The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="479be-121">非同步方法呼叫完成後，要呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-121">The delegate to call when the asynchronous method call is complete.</span>
          </span>
          <span data-ttu-id="479be-122">如果 <c>callback</c> 為 <see langword="null" />，則不呼叫委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-122">If <c>callback</c> is <see langword="null" />, the delegate is not called.</span>
          </span>
        </param>
        <param name="asyncState">
          <span data-ttu-id="479be-123">用戶端提供的額外資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-123">The additional information supplied by a client.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="479be-124">啟動 XML Web Service 方法的非同步引動過程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-124">Starts an asynchronous invocation of a method of an XML Web service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="479be-125">
            <see cref="T:System.IAsyncResult" />，可傳遞至 <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> 方法，以從 XML Web Service 方法取得傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-125">An <see cref="T:System.IAsyncResult" /> that can be passed to the <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> method to obtain the return values from the XML Web service method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="479be-126">`methodName`參數用來尋找參數的類型和傳回值，方法是叫用的<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="479be-126">The `methodName` parameter is used to find the types of the parameters and return values of the method that is invoking the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method.</span></span> <span data-ttu-id="479be-127">它也用來尋找可能會加入至方法的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="479be-127">It is also used to find custom attributes that may have been added to the method.</span></span> <span data-ttu-id="479be-128"><xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute><xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>，和<xref:System.Xml.Serialization.XmlElementAttribute>衍生方法所需的 HTTP 通訊協定上提供其他資訊。</span><span class="sxs-lookup"><span data-stu-id="479be-128"><xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, and <xref:System.Xml.Serialization.XmlElementAttribute> provide additional information on the derived method that is required for the HTTP protocol.</span></span>  
  
 <span data-ttu-id="479be-129">`asyncState` 傳遞至`callback`納入<xref:System.IAsyncResult>從傳回<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="479be-129">`asyncState` is passed into `callback` and is included in the <xref:System.IAsyncResult> that is returned from the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> method.</span></span> <span data-ttu-id="479be-130">它可用於從處理中的非同步結果的非同步呼叫的內容傳遞資訊`callback`。</span><span class="sxs-lookup"><span data-stu-id="479be-130">It is useful for passing information from the context of the asynchronous call to the handling of the asynchronous result in `callback`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="479be-131">下列程式碼範例會呼叫名為 XML Web 服務的 ASP.NET Web 表單`Math`。</span><span class="sxs-lookup"><span data-stu-id="479be-131">The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`.</span></span> <span data-ttu-id="479be-132">內`EnterBtn_Click`函式，Web Form 開始和完成的非同步引動過程`Add`XML Web service 方法。</span><span class="sxs-lookup"><span data-stu-id="479be-132">Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.</span></span>  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 <span data-ttu-id="479be-133">下列程式碼範例是 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別`Math`以下的 XML Web 服務。</span><span class="sxs-lookup"><span data-stu-id="479be-133">The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below.</span></span> <span data-ttu-id="479be-134">內`BeginAdd`proxy 類別的方法<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>方法會啟動的非同步引動過程`Add`XML Web service 方法。</span><span class="sxs-lookup"><span data-stu-id="479be-134">Within the `BeginAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.</span></span>  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 <span data-ttu-id="479be-135">下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。</span><span class="sxs-lookup"><span data-stu-id="479be-135">The following code example is the `Math` XML Web service, from which the preceding proxy class was created.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="479be-136">要求已到達伺服器電腦，但是並未成功處理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-136">The request reached the server computer, but was not processed successfully.</span>
          </span>
        </exception>
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj" Usage="httpSimpleClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="479be-137">從 <see cref="T:System.IAsyncResult" /> 方法傳回的 <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-137">The <see cref="T:System.IAsyncResult" /> returned from the <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="479be-138">使用 HTTP 完成 XML Web Service 方法的非同步引動過程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-138">Completes asynchronous invocation of an XML Web service method using HTTP.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="479be-139">物件的陣列，包含 XML Web Service 方法的傳回值以及任何傳址 (By Reference) 方式或 <paramref name="out" /> 的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-139">An array of objects containing the return value and any by reference or <paramref name="out" /> parameters for the XML Web service method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="479be-140">下列程式碼範例會呼叫名為 XML Web 服務的 ASP.NET Web 表單`Math`。</span><span class="sxs-lookup"><span data-stu-id="479be-140">The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`.</span></span> <span data-ttu-id="479be-141">內`EnterBtn_Click`函式，Web Form 開始和完成的非同步引動過程`Add`XML Web service 方法。</span><span class="sxs-lookup"><span data-stu-id="479be-141">Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.</span></span>  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 <span data-ttu-id="479be-142">下列程式碼範例是 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別`Math`以下的 XML Web 服務。</span><span class="sxs-lookup"><span data-stu-id="479be-142">The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below.</span></span> <span data-ttu-id="479be-143">內`EndAdd`proxy 類別的方法<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A>方法會啟動的非同步引動過程`Add`XML Web service 方法。</span><span class="sxs-lookup"><span data-stu-id="479be-143">Within the `EndAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.</span></span>  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 <span data-ttu-id="479be-144">下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。</span><span class="sxs-lookup"><span data-stu-id="479be-144">The following code example is the `Math` XML Web service, from which the above proxy class was created.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="479be-145">
            <paramref name="asyncResult" /> 並非 <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> 方法的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-145">
              <paramref name="asyncResult" /> is not the return value from the <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object Invoke (string methodName, string requestUrl, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object Invoke(string methodName, string requestUrl, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, requestUrl As String, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ Invoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * string * obj[] -&gt; obj" Usage="httpSimpleClientProtocol.Invoke (methodName, requestUrl, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="479be-146">衍生類別中 XML Web Service 方法的名稱，該類別正在叫用 (Invoke) <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-146">The name of the XML Web service method in the derived class that is invoking the <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" /> method.</span>
          </span>
        </param>
        <param name="requestUrl">
          <span data-ttu-id="479be-147">用戶端正在要求之 XML Web Service 方法的 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-147">The URL of the XML Web service method that the client is requesting.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="479be-148">物件的陣列，包含要傳遞至遠端 XML Web Service 的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-148">An array of objects containing the parameters to pass to the remote XML Web service.</span>
          </span>
          <span data-ttu-id="479be-149">陣列中值的順序會對應至衍生類別之呼叫方法中參數的順序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-149">The order of the values in the array corresponds to the order of the parameters in the calling method of the derived class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="479be-150">使用 HTTP 叫用 XML Web Service 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-150">Invokes an XML Web service method using HTTP.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="479be-151">物件的陣列，包含衍生類別方法的傳回值以及任何傳址方式或 <paramref name="out" /> 的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-151">An array of objects containing the return value and any by-reference or <paramref name="out" /> parameters of the derived class method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="479be-152">`methodName`參數用來尋找參數的類型和傳回值，方法是叫用的<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="479be-152">The `methodName` parameter is used to find the types of the parameters and return values of the method that is invoking the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method.</span></span> <span data-ttu-id="479be-153">它也用來找出可能已經加入至方法的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="479be-153">It is also used to find custom attributes which may have been added to the method.</span></span> <span data-ttu-id="479be-154"><xref:System.Web.Services.Protocols.HttpMethodAttribute> 和<xref:System.Xml.Serialization.XmlElementAttribute>衍生方法所需的 SOAP 通訊協定上提供其他資訊。</span><span class="sxs-lookup"><span data-stu-id="479be-154"><xref:System.Web.Services.Protocols.HttpMethodAttribute> and <xref:System.Xml.Serialization.XmlElementAttribute> provide additional information on the derived method that is required for the SOAP protocol.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="479be-155">下列程式碼範例會呼叫名為 XML Web 服務的 ASP.NET Web 表單`Math`。</span><span class="sxs-lookup"><span data-stu-id="479be-155">The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`.</span></span> <span data-ttu-id="479be-156">內`EnterBtn_Click`函式，以同步方式叫 Web 表單用`Add`XML Web service 方法。</span><span class="sxs-lookup"><span data-stu-id="479be-156">Within the `EnterBtn_Click` function, the Web Form synchronously invokes the `Add` XML Web service method.</span></span>  
  
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/sourcecs.aspx#2)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/sourcevb.aspx#2)]  
  
 <span data-ttu-id="479be-157">下列程式碼範例是 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別`Math`以下的 XML Web 服務。</span><span class="sxs-lookup"><span data-stu-id="479be-157">The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below.</span></span> <span data-ttu-id="479be-158">內`Add`proxy 類別的方法<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法以同步方式叫用`Add`Web 服務方法。</span><span class="sxs-lookup"><span data-stu-id="479be-158">Within the `Add` method of the proxy class, the <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> method synchronously invokes the `Add` Web Service method.</span></span>  
  
 [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 <span data-ttu-id="479be-159">下列程式碼範例是`Math`XML Web service，從中建立上述的 proxy 類別。</span><span class="sxs-lookup"><span data-stu-id="479be-159">The following code example is the `Math` XML Web service, from which the above proxy class was created.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="479be-160">要求已到達伺服器電腦，但是並未成功處理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-160">The request reached the server computer, but was not processed successfully.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="479be-161">非同步叫用指定的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-161">Invokes the specified method asynchronously.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="httpSimpleClientProtocol.InvokeAsync (methodName, requestUrl, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="479be-162">所要叫用之方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-162">The name of the method to invoke.</span>
          </span>
        </param>
        <param name="requestUrl">
          <span data-ttu-id="479be-163">叫用之 Web 服務的要求 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-163">The request URL of the invoked web service.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="479be-164">要傳遞至該方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-164">The parameters to pass to the method.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="479be-165">方法引動過程完成時呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-165">The delegate called when the method invocation has completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="479be-166">非同步叫用指定的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-166">Invokes the specified method asynchronously.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="httpSimpleClientProtocol.InvokeAsync (methodName, requestUrl, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">
          <span data-ttu-id="479be-167">所要叫用之方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-167">The name of the method to invoke.</span>
          </span>
        </param>
        <param name="requestUrl">
          <span data-ttu-id="479be-168">叫用之 Web 服務的要求 URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-168">The request URL of the invoked web service.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="479be-169">要傳遞至該方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-169">The parameters to pass to the method.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="479be-170">方法引動過程完成時呼叫的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-170">The delegate called when the method invocation has completed.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="479be-171">物件，包含完成方法時傳遞至 <c>callback</c> 委派的相關狀態資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-171">An object containing associated state information that is passed to the <c>callback</c> delegate when the method has completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="479be-172">當維護相關聯的狀態時，以非同步方式叫用指定的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="479be-172">Invokes the specified method asynchronously while maintaining an associated state.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>