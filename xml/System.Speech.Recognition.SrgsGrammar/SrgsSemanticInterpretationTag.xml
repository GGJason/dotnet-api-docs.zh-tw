<Type Name="SrgsSemanticInterpretationTag" FullName="System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5de8de42da4b7089409390b6cb43f74c51ae6d77" />
    <Meta Name="ms.sourcegitcommit" Value="56e6fe094031489accf6027798c05ebaf975c94f" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/19/2018" />
    <Meta Name="ms.locfileid" Value="49455054" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsSemanticInterpretationTag : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsSemanticInterpretationTag extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsSemanticInterpretationTag&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsSemanticInterpretationTag : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsSemanticInterpretationTag = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示當符合規則時，包含執行之 <see href="https://www.ecma-international.org/publications/standards/Ecma-327.htm">ECMAScript</see> 的標記。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 System.Speech 的預設語意格式符合 W3C[語音辨識 (SISR) 版本 1.0 的語意轉譯](http://go.microsoft.com/fwlink/?LinkId=201765)，其中的格式`tag`包含指令碼的項目是`semantics/1.0`。 您必須指定的指令碼<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>物件，使用此格式。 中的語法`semantics/1.0`:  
  
-   規則的變數包含的規則項目會識別"out"。  
  
-   「 規則 」 識別具有存取權的規則變數的規則項目包含的規則項目之外的物件名稱。  
  
-   符合 [utterance] 最新參考規則的結果可以以 「 rules.latest()"。  
  
 您也可以將與文法中的片語語意值，而不需使用指令碼中，使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag>物件。  
  
   
  
## Examples  
 下列範例會建立選擇航班的城市的文法。 此範例會使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>若要將語意值指派給每個城市，也就是 縣 （市） 的機場的程式碼。 此範例也會使用<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>所做的兩個參考的每個指派不同的語意索引鍵<xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>名為物件`cityRef`來<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>名為物件`cities`。 語意索引鍵識別為起飛縣 （市）] 或 [班機抵達城市辨識縣 （市）。 處理常式<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>事件會使用該索引鍵來擷取的辨識結果中的語意。  
  
 在程式碼範例中，"out"是指規則變數包含<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>。 運算式"out。LeavingFrom 」 指的是名為屬性`LeavingFrom`的規則變數上名為的規則`bookFlight`。  
  
 運算式"rules.flightCities 」 是指規則變數的規則其<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A>是`flightCities`，而且是規則參考的目標。 在範例中，運算式 「 逾時。LeavingFrom=rules.flightCities; 「 指派值規則從其<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A>是`flightCities`至名為屬性`LeavingFrom`的規則變數上名為的規則`bookFlight`。 請參閱[語意結果內容](http://msdn.microsoft.com/library/622291af-615c-4a15-9014-2933aa3f89fe)，[文法規則名稱參考](http://msdn.microsoft.com/library/0777e975-8665-4cc3-957b-752743cb1bb9)，並[文法規則參考參考](http://msdn.microsoft.com/library/dec3a809-9aa2-4139-893f-3a549ca1e03e)如需詳細資訊。  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a rule for the cities, assign a semantic value to each city.  
        SrgsRule cities = new SrgsRule("flightCities");  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsSemanticInterpretationTag("out = \"ORD\";"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsSemanticInterpretationTag("out = \"BOS\";"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsSemanticInterpretationTag("out = \"MIA\";"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsSemanticInterpretationTag("out = \"DFW\";"));  
  
        SrgsOneOf airports = new SrgsOneOf(chi, bos, mia, dal);  
        cities.Add(airports);  
        cities.Scope = SrgsRuleScope.Private;  
  
        // Create a rule reference to the rule for cities.  
        SrgsRuleRef cityRef = new SrgsRuleRef(cities);  
  
        // Create the root rule for the grammar.  
        SrgsRule bookFlight = new SrgsRule("flightBooker");  
        bookFlight.Add(new SrgsItem("I want to fly from"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.LeavingFrom=rules.flightCities;"));  
        bookFlight.Add(new SrgsItem("to"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.GoingTo=rules.flightCities;"));  
        bookFlight.Scope = SrgsRuleScope.Public;  
  
        // Initialize the SrgsDocument, set the root rule, add rules to the collection.  
        SrgsDocument itinerary = new SrgsDocument(bookFlight);  
        itinerary.Rules.Add(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(itinerary);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Configure recognizer input.                  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Write to the console the text and the semantics from the recognition result.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["LeavingFrom"].Value);  
      Console.WriteLine("  The arrival city is: " + e.Result.Semantics["GoingTo"].Value);  
    }  
  }  
}  
  
```  
  
 以下是文法的上述範例中的程式碼所產生的 XML 格式。  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<grammar xml:lang="en-US" root="flightBooker" tag-format="semantics/1.0"   
version="1.0" xmlns="http://www.w3.org/2001/06/grammar">  
  
  <rule id="flightBooker" scope="public">  
    <item> I want to fly from </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.LeavingFrom=rules.flightCities; </tag>  
    <item> to </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.GoingTo=rules.flightCities; </tag>  
  </rule>  
  
  <rule id="flightCities" scope="private">  
    <one-of>  
      <item> Chicago <tag> out="ORD"; </tag></item>  
      <item> Boston <tag> out="BOS"; </tag></item>  
      <item> Miami <tag> out="MIA"; </tag></item>  
      <item> Dallas <tag> out="DFW"; </tag></item>  
    </one-of>  
  </rule>  
  
</grammar>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" /> 類別的執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" /> 類別的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立語意解譯標記其<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A>屬性包含空字串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag (string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag(System::String ^ script);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag script" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="script">包含標記之 [ECMAScript](https://www.ecma-international.org/publications/standards/Ecma-327.htm) 的字串。</param>
        <summary>建立<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />類別的執行個體，指定標記的指令碼內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會建立語意解譯標記其<xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A>屬性設定中的值為`script`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="script" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定標記的 <see href="https://www.ecma-international.org/publications/standards/Ecma-327.htm">ECMAScript</see>。</summary>
        <value>字串，包含標記的語意轉譯指令碼。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">嘗試將 **Script** 設為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>