<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb01c3d6cf6e42b1709ab5acc0cf88f7b14094c3" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53389945" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定義一組屬性和方法用於評估在設計階段與控制項屬性關聯的運算式，並用於將運算式編輯器工作表提供給視覺化設計主應用程式，以在運算式編輯器對話方塊中使用。 這個類別是抽象的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 視覺化設計工具裝載，例如[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]，使用<xref:System.Web.UI.Design.ExpressionEditor>類別來呈現自訂運算式編輯器工作表，給使用者，然後評估在設計階段轉譯選取的運算式。  
  
 當您瀏覽<xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A>控制項設計階段屬性方格中的屬性，視覺化設計工具會顯示對話方塊以設定控制項屬性的運算式。 您可以選取清單運算式前置字元為基礎的運算式型別。 當您從清單中選取運算式前置字元時，視覺化設計工具會使用相關聯<xref:System.Web.UI.Design.ExpressionEditor>和<xref:System.Web.UI.Design.ExpressionEditorSheet>物件來設定，評估及轉換為該類型的運算式語法為基礎的運算式字串。 視覺化設計工具設定關聯的控制項屬性的運算式，然後再使用以指派控制項在設計介面所呈現的屬性值的 評估的運算式結果。  
  
 靜態<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法會取得與特定的運算式前置字元或運算式產生器相關聯的運算式編輯器。 <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>屬性<xref:System.Web.UI.Design.ExpressionEditor>物件傳回設定的運算式前置字元。 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法會評估輸入的運算式的字串。 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法會傳回<xref:System.Web.UI.Design.ExpressionEditorSheet>提示用於在 [運算式] 對話方塊中的自訂運算式屬性的實作。  
  
 一般而言，若要在設計階段支援新的運算式型別，您定義的唯一運算式前置詞，並提供自訂<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>實作。 或者，您可以在其中提供自訂<xref:System.Web.UI.Design.ExpressionEditorSheet>定義用來形成 [運算式] 對話方塊中的運算式屬性的實作。  
  
 運算式前置字元會識別自訂運算式型別，並關聯運算式產生器和運算式編輯器的運算式。 自訂運算式會剖析頁面中，運算式前置詞用來建立執行個體相關聯<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>類別。 若要將運算式前置字元關聯的運算式產生器和運算式編輯器，適用於<xref:System.Web.Compilation.ExpressionEditorAttribute>並<xref:System.Web.Compilation.ExpressionPrefixAttribute>自訂屬性<xref:System.Web.Compilation.ExpressionBuilder>類別，並在 運算式產生器設定運算式前置字元`expressionBuilders`Web 組態檔中的項目。 前置詞為非必要，但強烈建議。  
  
   
  
## Examples  
 下列程式碼範例示範如何從衍生<xref:System.Web.UI.Design.ExpressionEditor>類別來定義自訂運算式編輯器。  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>下列步驟所需衍生自訂<see cref="T:System.Web.UI.Design.ExpressionEditor" />類別： 
-覆寫<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法，在設計階段評估自訂運算式型別。  
  
-選擇性地覆寫<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，以傳回自訂的類別來定義合併以形成自訂運算式的屬性。  
  
-套用<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />屬性上<see cref="T:System.Web.Compilation.ExpressionBuilder" />類別衍生的運算式編輯器類別相關聯的自訂運算式產生器的宣告。  
  
例如，<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />類別衍生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />類別，並提供用於評估和關聯的控制項屬性中的資源字串參考，在設計階段的實作。 <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" />類別是與運算式前置詞相關聯<see langword="Resources" />而<see cref="T:System.Web.UI.Design.ResourceExpressionEditor" />實作。 <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法會傳回<see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />，其定義的個別屬性，形成資源參考運算式。</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為<xref:System.Web.UI.Design.ExpressionEditor>類別是抽象的您無法建立的執行個體<xref:System.Web.UI.Design.ExpressionEditor>類別直接使用<xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A>建構函式。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當衍生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />類別中覆寫<see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" />建構函式來實作您的運算式編輯器實作的自訂初始化動作。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">要評估的運算式字串。 運算式不包含運算式前置字元。</param>
        <param name="parseTimeData">物件，包含用於評估 <paramref name="expression" /> 的其他剖析資訊。 這通常由運算式產生器提供。</param>
        <param name="propertyType"><paramref name="expression" /> 所繫結之控制項屬性的類型。</param>
        <param name="serviceProvider">服務提供者實作，由設計工具主應用程式 (Designer Host) 提供，可以用來取得額外的設計階段服務。</param>
        <summary>評估運算式字串，並提供控制項屬性的設計階段值。</summary>
        <returns>運算式評估成功時，評估的運算式字串所參考的物件，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 視覺化設計工具主應用程式使用<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>方法來評估運算式，並提供設計階段值針對關聯的控制項的屬性。  
  
 視覺化設計工具使用<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType>方法來剖析的運算式字串，在設計階段，然後再呼叫<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A>剖析的運算式資料的方法。 視覺化設計工具可用於評估的運算式結果指派控制項在設計介面所呈現的屬性值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>類別衍生自<see cref="T:System.Web.UI.Design.ExpressionEditor" />類別必須覆寫<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />方法，在設計階段評估自訂運算式型別。  
  
最少<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />實作必須使用下列步驟： 
1.  評估的運算式字串，並決定運算式所參考的物件。  
  
2.  傳回<see langword="null" />，如果無法評估的運算式字串。  
  
3.  使用<see cref="M:System.Type.IsAssignableFrom(System.Type)" />方法<paramref name="propertyType" />來判斷是否參考的物件可以指派直接移至控制項的屬性型別，然後根據結果，也就是完成其中一個下列動作： 
-如果參考的物件可以直接指派給控制項屬性，則傳回運算式所參考的物件。  
  
-如果參考的物件是簡單類型，例如字串，就會傳回參考的物件。  
  
-否則判斷參考的物件是否可以指派給或轉換為屬性型別。  
  
4.  使用<see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" />方法<see cref="T:System.ComponentModel.TypeConverter" />物件<paramref name="propertyType" />來判斷是否參考的物件可以轉換成控制項屬性型別，然後根據結果，也就是完成其中一個下列動作： 
-如果物件可以轉換成控制項屬性型別，傳回已轉換的物件使用<see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" />方法。  
  
-如果參考的物件無法指派或轉換成<paramref name="propertyType" />，傳回參考的物件。  
  
（選擇性）<see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />實作可以使用<paramref name="parseTimeData" />所提供的物件<see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />最佳化，或協助在評估的運算式輸入的字串的實作。</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得運算式前置字元，辨識運算式編輯器實作所支援的運算式字串。</summary>
        <value>字串，表示衍生自 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 之類別所支援的運算式前置字元，否則，如果運算式編輯器沒有關聯的運算式前置字元，則為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 運算式前置字元會識別自訂運算式型別，並關聯運算式產生器和運算式編輯器的運算式。 自訂運算式會剖析頁面中，運算式前置詞用來建立執行個體相關聯<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>類別。 若要將運算式前置字元關聯的運算式產生器和運算式編輯器，適用於<xref:System.Web.Compilation.ExpressionEditorAttribute>並<xref:System.Web.Compilation.ExpressionPrefixAttribute>自訂屬性<xref:System.Web.Compilation.ExpressionBuilder>類別，並在 運算式產生器設定運算式前置字元`expressionBuilders`Web 組態檔中的項目。  
  
 一般而言，衍生的類別不會覆寫<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>屬性。 基底<xref:System.Web.UI.Design.ExpressionEditor>類別集<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A>值根據<xref:System.Web.Compilation.ExpressionPrefixAttribute>相關聯的屬性<xref:System.Web.Compilation.ExpressionBuilder>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與運算式前置字元或運算式產生器關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 實作。</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">用於尋找關聯之運算式編輯器的運算式前置字元。</param>
        <param name="serviceProvider">服務提供者實作，由設計工具主應用程式 (Designer Host) 提供，可以用來取得額外的設計階段服務。</param>
        <summary>傳回與指定之運算式前置字元關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 實作。</summary>
        <returns>與 <paramref name="expressionPrefix" /> 關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 實作，否則，如果 <paramref name="expressionPrefix" /> 未定義或未與 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 關聯，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用靜態<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法多載，來尋找<xref:System.Web.UI.Design.ExpressionEditor>與特定的運算式前置字元或運算式產生器型別相關聯的物件。  
  
 對於每個自訂的運算式型別中，運算式前置字元會識別相關聯的運算式產生器和運算式編輯器。 自訂運算式會剖析頁面中，運算式前置詞用來建立執行個體相關聯<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>類別。  
  
 若要將運算式前置字元關聯的運算式產生器和運算式編輯器，適用於<xref:System.Web.Compilation.ExpressionEditorAttribute>並<xref:System.Web.Compilation.ExpressionPrefixAttribute>自訂屬性<xref:System.Web.Compilation.ExpressionBuilder>類別，並在 運算式產生器設定運算式前置字元`expressionBuilders`Web 組態檔中的項目。  
  
 若要尋找運算式前置字元關聯的運算式編輯器<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法會列舉可用<xref:System.Web.Compilation.ExpressionBuilder>實作符合的前置詞。 <xref:System.Web.Compilation.ExpressionBuilder>實作可以設定在`expressionBuilders`Web 組態檔區段。 如果有的話<xref:System.Web.Compilation.ExpressionBuilder>實作定義的運算式前置詞，<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法會傳回中所指定的型別<xref:System.Web.Compilation.ExpressionEditorAttribute>屬性<xref:System.Web.Compilation.ExpressionBuilder>中繼資料。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">衍生運算式產生器類別的型別，可用來尋找關聯的運算式編輯器。</param>
        <param name="serviceProvider">服務提供者實作，由設計工具主應用程式 (Designer Host) 提供，可以用來取得額外的設計階段服務。</param>
        <summary>傳回與指定運算式產生器型別關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 實作。</summary>
        <returns>與 <paramref name="expressionBuilderType" /> 關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 實作，否則，如果找不到 <paramref name="expressionBuilderType" /> 或它沒有關聯的 <see cref="T:System.Web.UI.Design.ExpressionEditor" />，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用靜態<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>多載，以便尋找<xref:System.Web.UI.Design.ExpressionEditor>與特定的運算式前置字元或運算式產生器型別相關聯的物件。  
  
 對於每個自訂的運算式型別中，運算式前置字元會識別相關聯的運算式產生器和運算式編輯器。 自訂運算式會剖析頁面中，運算式前置詞用來建立執行個體相關聯<xref:System.Web.Compilation.ExpressionBuilder>和<xref:System.Web.UI.Design.ExpressionEditor>類別。  
  
 若要將運算式前置字元關聯的運算式產生器和運算式編輯器，適用於<xref:System.Web.Compilation.ExpressionEditorAttribute>並<xref:System.Web.Compilation.ExpressionPrefixAttribute>自訂屬性<xref:System.Web.Compilation.ExpressionBuilder>類別，並在 運算式產生器設定運算式前置字元`expressionBuilders`Web 組態檔中的項目。  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法會列舉可用<xref:System.Web.Compilation.ExpressionBuilder>實作，以找出`expressionBuilderType`。 <xref:System.Web.Compilation.ExpressionBuilder>實作可以設定在`expressionBuilders`Web 組態檔區段。 如果`expressionBuilderType`找到可用的集中<xref:System.Web.Compilation.ExpressionBuilder>實作<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A>方法會傳回中所指定的型別<xref:System.Web.Compilation.ExpressionEditorAttribute>屬性<xref:System.Web.Compilation.ExpressionBuilder>中繼資料。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expressionBuilderType" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">針對控制項屬性設定的運算式字串，用來初始化運算式編輯器工作表。</param>
        <param name="serviceProvider">服務提供者實作，由設計工具主應用程式 (Designer Host) 提供，可以用來取得額外的設計階段服務。</param>
        <summary>傳回與目前運算式編輯器關聯的運算式編輯器工作表。</summary>
        <returns>可定義自訂運算式屬性的 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法會傳回<xref:System.Web.UI.Design.ExpressionEditorSheet>實作，定義結合以形成自訂運算式的字串。 視覺化設計工具會使用的運算式編輯器工作表，提示您輸入一個或多個結合自訂運算式的字串。 基底類別方法會傳回預設值運算式編輯器工作表，其中會使用單一的輸入的字串來形成的運算式。 運算式編輯器工作表定義運算式的屬性方格。 因此，運算式編輯器所公開的屬性會變成可以在對話方塊中的運算式定義的屬性。  
  
 類別衍生自<xref:System.Web.UI.Design.ExpressionEditor>類別 （選擇性） 可以覆寫<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>方法，以提供自訂運算式編輯器工作表。 自訂運算式編輯器工作表可讓設計階段輸入至表單的運算式字串結合在一起的多個屬性。  
  
 例如，<xref:System.Web.UI.Design.ResourceExpressionEditor>類別衍生自<xref:System.Web.UI.Design.ExpressionEditor>類別，並提供用於評估和關聯的控制項屬性中的資源字串參考，在設計階段的實作。 <xref:System.Web.Compilation.ResourceExpressionBuilder>類別是與運算式前置詞相關聯`Resources`而<xref:System.Web.UI.Design.ResourceExpressionEditor>實作。 <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType>方法會傳回<xref:System.Web.UI.Design.ResourceExpressionEditorSheet>，其定義的個別屬性，形成資源參考運算式。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>一般而言，若要在設計階段提供新的運算式型別，您定義的唯一運算式前置詞並提供自訂<see cref="T:System.Web.Compilation.ExpressionBuilder" />和<see cref="T:System.Web.UI.Design.ExpressionEditor" />實作。 或者，您可以在其中提供自訂<see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />實作，定義用來構成運算式的屬性。 雖然組態檔定義前置詞，您應該也適用於<see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />物件和<see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />物件。  
  
覆寫<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，以傳回自訂的運算式中定義多個屬性的設計階段輸入的運算式編輯器工作表。 當您選取的控制項屬性和運算式編輯器型別時，視覺化設計工具便會呼叫<see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />方法，然後提供目前的運算式字串，設定控制項屬性。 使用<paramref name="expression" />設定運算式屬性的初始值。 使用<paramref name="serviceProvider" />初始化自訂運算式表建構函式，以及存取設計工具主應用程式所提供的服務。 例如，呼叫<see cref="M:System.IServiceProvider.GetService(System.Type)" />方法使用<see cref="T:System.Web.UI.Design.IWebApplication" />存取專案項目、 文件，或提供視覺化設計工具的組態檔案詳細資料的型別。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>