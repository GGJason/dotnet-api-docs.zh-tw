<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f97bd8f96d46969e1c27893e4f1c9820a887233d" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55387072" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="426b5-101">協助 Windows Presentation Foundation (WPF) 和 Win32 程式碼之間的互通性。</span><span class="sxs-lookup"><span data-stu-id="426b5-101">Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="426b5-102">這個類別的成員可讓呼叫者必須具備內部存取權[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]HWND 和父代 HWND 的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="426b5-102">Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</span></span>  <span data-ttu-id="426b5-103">這些成員會執行適當的安全性檢查。</span><span class="sxs-lookup"><span data-stu-id="426b5-103">The proper security checks are performed by those members.</span></span>  
  
 <span data-ttu-id="426b5-104">每當您需要根據 HWND 的更特定物件時，請使用這個類別。</span><span class="sxs-lookup"><span data-stu-id="426b5-104">Use this class whenever you need a more specific object based on its HWND.</span></span>  
  
 <span data-ttu-id="426b5-105">如果您需要裝載即為一例[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 對話方塊中的[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。</span><span class="sxs-lookup"><span data-stu-id="426b5-105">An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span> <span data-ttu-id="426b5-106">初始化<xref:System.Windows.Interop.WindowInteropHelper>與[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]對話方塊中的視窗物件。</span><span class="sxs-lookup"><span data-stu-id="426b5-106">Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box.</span></span> <span data-ttu-id="426b5-107">就可以取得[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]視窗的控制代碼 (HWND) 從<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性，並指定的擁有者[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]視窗<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="426b5-107">You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property.</span></span> <span data-ttu-id="426b5-108">下列程式碼範例示範如何使用<xref:System.Windows.Interop.WindowInteropHelper>裝載時[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 對話方塊中的[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。</span><span class="sxs-lookup"><span data-stu-id="426b5-108">The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 <span data-ttu-id="426b5-109">此類別所支援的另一種情況，是取得<xref:System.Windows.Interop.HwndSource>物件從[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>物件。</span><span class="sxs-lookup"><span data-stu-id="426b5-109">Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object.</span></span> <span data-ttu-id="426b5-110"><xref:System.Windows.Interop.HwndSource>可讓您直接處理[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]訊息透過<xref:System.Windows.Interop.HwndSource.AddHook%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="426b5-110">The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method.</span></span> <span data-ttu-id="426b5-111">使用<xref:System.Windows.Interop.HwndSource>並<xref:System.Windows.Interop.HwndSource.AddHook%2A>代替<xref:System.Windows.Window>您仍然可以處理之不相等，或在處理訊息的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="426b5-111">By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="426b5-112">建立<xref:System.Windows.Interop.WindowInteropHelper>具有<xref:System.Windows.Window>來源，然後呼叫<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>上<xref:System.Windows.Interop.WindowInteropHelper>若要發揮 HWND <xref:System.Windows.Interop.HwndSource>。</span><span class="sxs-lookup"><span data-stu-id="426b5-112">Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window"><span data-ttu-id="426b5-113">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 視窗物件。</span><span class="sxs-lookup"><span data-stu-id="426b5-113">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</span></span></param>
        <summary><span data-ttu-id="426b5-114">針對指定的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗，初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="426b5-114">Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="426b5-115">對話方塊中或不適合的界限內裝載的視窗，可以將此視窗[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。</span><span class="sxs-lookup"><span data-stu-id="426b5-115">The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="426b5-116">如果尚未建立視窗的 HWND，則會建立該 HWND。</span><span class="sxs-lookup"><span data-stu-id="426b5-116">Creates the HWND of the window if the HWND has not been created yet.</span></span></summary>
        <returns><span data-ttu-id="426b5-117">表示 HWND 的 <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="426b5-117">An <see cref="T:System.IntPtr" /> that represents the HWND.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="426b5-118">使用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法，當您想要不同的視窗控制代碼 (HWND) 建立，從顯示的實際的 managed <xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="426b5-118">Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>.</span></span> <span data-ttu-id="426b5-119">當您有可以完成其工作，而不需要顯示視窗的 automation 用戶端時，這非常有用。</span><span class="sxs-lookup"><span data-stu-id="426b5-119">This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</span></span>  
  
 <span data-ttu-id="426b5-120">如果尚未建立原生視窗，這個方法會建立原生視窗中，設定<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性，然後傳回 HWND。</span><span class="sxs-lookup"><span data-stu-id="426b5-120">If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND.</span></span> <span data-ttu-id="426b5-121">如果已經建立原生視窗，則會傳回現有的原生視窗的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-121">If the native window has been created already, the handle of the existing native window is returned.</span></span>  
  
 <span data-ttu-id="426b5-122">如果原生視窗已而呼叫這個方法中，建立<xref:System.Windows.Window.SourceInitialized>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="426b5-122">If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.</span></span>  
  
 <span data-ttu-id="426b5-123">查詢<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性之後<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法呼叫會傳回現有的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-123">Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle.</span></span> <span data-ttu-id="426b5-124">視覺化樹狀結構未連接至後直到視窗<xref:System.Windows.Window.Show%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="426b5-124">The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.</span></span>  
  
 <span data-ttu-id="426b5-125">呼叫<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法超過一次不會建立新的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-125">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles.</span></span> <span data-ttu-id="426b5-126">呼叫<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法的呼叫已建立的控制代碼時<xref:System.Windows.Window.Show%2A>方法不會建立新的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-126">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle.</span></span> <span data-ttu-id="426b5-127">沒有控制代碼存在時，才會建立原生視窗時<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="426b5-127">A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.</span></span>  
  
 <span data-ttu-id="426b5-128">視窗屬性所設定使用原生視窗的 Api，透過 p/invoke 可能不會出現在受管理的視窗 Api。</span><span class="sxs-lookup"><span data-stu-id="426b5-128">Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</span></span> <span data-ttu-id="426b5-129">例如，如果您將間隔設定為最上層使用原生 MS_EX_TOPMOST 旗標之後<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>呼叫方法時，<xref:System.Windows.Window.Topmost%2A>屬性不一定會反映該原生的設定。</span><span class="sxs-lookup"><span data-stu-id="426b5-129">For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="426b5-130">建立和存取的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-130">to create and access a window handle.</span></span> <span data-ttu-id="426b5-131">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="426b5-131">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="426b5-132">取得 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗的視窗控制代碼，此控制代碼用於建立這個 <see cref="T:System.Windows.Interop.WindowInteropHelper" />。</span><span class="sxs-lookup"><span data-stu-id="426b5-132">Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</span></span></summary>
        <value><span data-ttu-id="426b5-133">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗控制代碼 (HWND)。</span><span class="sxs-lookup"><span data-stu-id="426b5-133">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="426b5-134">取得視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-134">to obtain a window handle.</span></span> <span data-ttu-id="426b5-135">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="426b5-135">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="426b5-136">取得或設定 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 主控視窗的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="426b5-136">Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</span></span></summary>
        <value><span data-ttu-id="426b5-137">主控視窗控制代碼 (HWND)。</span><span class="sxs-lookup"><span data-stu-id="426b5-137">The owner window handle (HWND).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="426b5-138">您可以重設 windows 藉由設定這個屬性中的父代。</span><span class="sxs-lookup"><span data-stu-id="426b5-138">You can reparent windows by setting this property.</span></span> <span data-ttu-id="426b5-139">做為一項條件成立的一般[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]程式設計，不要不重設父代已在使用的 windows。</span><span class="sxs-lookup"><span data-stu-id="426b5-139">As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="426b5-140">取得或設定這個屬性值。</span><span class="sxs-lookup"><span data-stu-id="426b5-140">to get or set this property value.</span></span> <span data-ttu-id="426b5-141">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="426b5-141">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>