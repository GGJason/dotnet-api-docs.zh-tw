<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="492213104b0f184cf0ecaffdd93a2b0d6ad1a860" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657962" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>協助 Windows Presentation Foundation (WPF) 和 Win32 程式碼之間的互通性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別的成員可讓內部存取呼叫者[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]HWND 和父 HWND 的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>。  適當的安全性檢查都是透過這些成員。  
  
 每當您需要根據 HWND 更特定的物件時，請使用這個類別。  
  
 如果您要裝載即為一例[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]對話方塊[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。 初始化<xref:System.Windows.Interop.WindowInteropHelper>與[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]對話方塊視窗物件。 您可以取得[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]視窗的控制代碼 (HWND) 與<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性和指定的擁有人[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]視窗<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>屬性。 下列程式碼範例示範如何使用<xref:System.Windows.Interop.WindowInteropHelper>裝載時[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]對話方塊[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 這個類別支援的另一種情況，是取得<xref:System.Windows.Interop.HwndSource>物件從[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>物件。 <xref:System.Windows.Interop.HwndSource>可讓您直接處理[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]訊息透過<xref:System.Windows.Interop.HwndSource.AddHook%2A>方法。 使用<xref:System.Windows.Interop.HwndSource>和<xref:System.Windows.Interop.HwndSource.AddHook%2A>取代<xref:System.Windows.Window>您仍然可以處理不對應或處理中的訊息[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。 建立<xref:System.Windows.Interop.WindowInteropHelper>與<xref:System.Windows.Window>來源，然後呼叫<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>上<xref:System.Windows.Interop.WindowInteropHelper>從 HWND 取得<xref:System.Windows.Interop.HwndSource>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 視窗物件。</param>
        <summary>針對指定的 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗，初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 視窗可以是對話方塊中或視窗，否則會不適合用來裝載界限內[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]應用程式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果尚未建立視窗的 HWND，則會建立該 HWND。</summary>
        <returns>表示 HWND 的 <see cref="T:System.IntPtr" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法，當您想要分隔實際顯示的受管理的視窗控制代碼 (HWND) 建立<xref:System.Windows.Window>。 當您有可以完成其工作，而不需要顯示視窗的自動化用戶端時，這非常有用。  
  
 如果尚未建立原生視窗，這個方法會建立原生視窗中，設定<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性，並傳回 HWND。 如果已經建立原生視窗，則會傳回現有的原生視窗的控制代碼。  
  
 如果因為呼叫這個方法，建立原生視窗<xref:System.Windows.Window.SourceInitialized>就會引發事件。  
  
 查詢<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性之後<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法呼叫會傳回現有的視窗控制代碼。 視覺化樹狀結構未連接至後直到視窗<xref:System.Windows.Window.Show%2A>方法呼叫。  
  
 呼叫<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法超過一次並不會建立新的視窗控制代碼。 呼叫<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法的呼叫已建立之控制代碼時<xref:System.Windows.Window.Show%2A>方法不會建立新的視窗控制代碼。 當沒有控制代碼存在時，才會建立原生視窗時<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>方法呼叫。  
  
 視窗屬性所設定使用原生視窗應用程式開發介面，透過 p/invoke 可能不會出現在受管理的應用程式開發介面視窗。 例如，如果您將使用後的原生 MS_EX_TOPMOST 旗標是最上層視窗設定<xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A>呼叫方法時，<xref:System.Windows.Window.Topmost%2A>屬性不一定會反映原始設定。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">建立及存取的視窗控制代碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗的視窗控制代碼，此控制代碼用於建立這個 <see cref="T:System.Windows.Interop.WindowInteropHelper" />。</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 視窗控制代碼 (HWND)。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">若要取得的視窗控制代碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 主控視窗的控制代碼。</summary>
        <value>主控視窗控制代碼 (HWND)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以重設 windows 藉由設定這個屬性中的父代。 True 會對一般[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]程式設計，請勿不重設父代已經在使用中的 windows。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">若要取得或設定這個屬性值。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>