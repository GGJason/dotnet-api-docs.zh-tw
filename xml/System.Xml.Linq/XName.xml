<Type Name="XName" FullName="System.Xml.Linq.XName">
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b192f-101">代表 XML 元素或屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="b192f-101">Represents a name of an XML element or attribute.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-102">XML 名稱包含命名空間和本機名稱。</span><span class="sxs-lookup"><span data-stu-id="b192f-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="b192f-103">A*完整限定的名稱*是命名空間和本機名稱的組合。</span><span class="sxs-lookup"><span data-stu-id="b192f-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="b192f-104">建立 XName 物件</span><span class="sxs-lookup"><span data-stu-id="b192f-104">Creating an XName Object</span></span>  
 <span data-ttu-id="b192f-105"><xref:System.Xml.Linq.XName> 不包含任何公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="b192f-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="b192f-106">相反地，這個類別提供的隱含轉換<xref:System.String>，可讓您建立<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-107">建構的元素或屬性時，最常見的位置使用這項轉換： 第一個引數<xref:System.Xml.Linq.XElement>建構函式是<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-108">藉由傳遞字串，您善用隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="b192f-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="b192f-109">下列程式碼建立的項目不在命名空間的名稱：</span><span class="sxs-lookup"><span data-stu-id="b192f-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="b192f-110">在 Visual Basic 中是較適合使用 XML 常值：</span><span class="sxs-lookup"><span data-stu-id="b192f-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="b192f-111">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="b192f-112">若要將字串指定<xref:System.Xml.Linq.XName>會使用從隱含轉換<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="b192f-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="b192f-113">Visual Basic 範例會建立<xref:System.Xml.Linq.XElement>使用 XML 常值。</span><span class="sxs-lookup"><span data-stu-id="b192f-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="b192f-114">即使使用 XML 常值，<xref:System.Xml.Linq.XName>建立物件<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="b192f-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="b192f-115">此外，您可以呼叫<xref:System.Xml.Linq.XName.Get%2A>方法<xref:System.Xml.Linq.XName>物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="b192f-116">不過，建議的方式是將字串隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="b192f-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="b192f-117">命名空間中建立 XName</span><span class="sxs-lookup"><span data-stu-id="b192f-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="b192f-118">如同 XML，<xref:System.Xml.Linq.XName>可以位於命名空間，或也可以在沒有命名空間。</span><span class="sxs-lookup"><span data-stu-id="b192f-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="b192f-119">C#，建議使用這個方法建立<xref:System.Xml.Linq.XName>命名空間中是宣告<xref:System.Xml.Linq.XNamespace>物件，然後使用加法運算子的覆寫。</span><span class="sxs-lookup"><span data-stu-id="b192f-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="b192f-120">Visual basic 中，建議的方法是使用 XML 常值和全域命名空間宣告來建立命名空間中的 XML。</span><span class="sxs-lookup"><span data-stu-id="b192f-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-121">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="b192f-122">在沒有命名空間中建立 XName</span><span class="sxs-lookup"><span data-stu-id="b192f-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="b192f-123"><xref:System.Xml.Linq.XName.Namespace%2A>屬性<xref:System.Xml.Linq.XName>保證物件不可為 null。</span><span class="sxs-lookup"><span data-stu-id="b192f-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="b192f-124">如果<xref:System.Xml.Linq.XName>不在命名空間，然後在<xref:System.Xml.Linq.XName.Namespace%2A>屬性將設定為<xref:System.Xml.Linq.XNamespace.None%2A>。</span><span class="sxs-lookup"><span data-stu-id="b192f-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="b192f-125">下列程式碼示範：</span><span class="sxs-lookup"><span data-stu-id="b192f-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="b192f-126">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="b192f-127">使用擴充的名稱</span><span class="sxs-lookup"><span data-stu-id="b192f-127">Using Expanded Names</span></span>  
 <span data-ttu-id="b192f-128">您也可以建立<xref:System.Xml.Linq.XName>擴充的 XML 名稱的形式從`{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="b192f-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="b192f-129">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="b192f-130">請注意，建立<xref:System.Xml.Linq.XName>透過擴充的名稱是比較沒有效率，比建立<xref:System.Xml.Linq.XNamespace>物件並使用加法運算子的覆寫。</span><span class="sxs-lookup"><span data-stu-id="b192f-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="b192f-131">它也是效率比匯入全域命名空間和 Visual Basic 中使用 XML 常值。</span><span class="sxs-lookup"><span data-stu-id="b192f-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="b192f-132">如果您建立<xref:System.Xml.Linq.XName>使用擴充的名稱，LINQ to XML 必須尋找不可部分完成的執行個體的命名空間。</span><span class="sxs-lookup"><span data-stu-id="b192f-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="b192f-133">這項工作必須重複擴充名稱的每個使用中。</span><span class="sxs-lookup"><span data-stu-id="b192f-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="b192f-134">這個額外的時間可能是微不足道時撰寫 LINQ 查詢。不過，可能很重要時建立大型的 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="b192f-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="b192f-135">質化 XName 物件是不可部分完成</span><span class="sxs-lookup"><span data-stu-id="b192f-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="b192f-136"><xref:System.Xml.Linq.XName> 保證物件都不可部分完成。也就是說，如果有兩個<xref:System.Xml.Linq.XName>物件有完全相同的命名空間和完全相同的本機名稱，將會共用相同的執行個體。</span><span class="sxs-lookup"><span data-stu-id="b192f-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="b192f-137">相等和比較運算子也會針對此用途明確提供。</span><span class="sxs-lookup"><span data-stu-id="b192f-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="b192f-138">撇開其他優點，此功能可讓查詢更快地執行。</span><span class="sxs-lookup"><span data-stu-id="b192f-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="b192f-139">當篩選項目或屬性的名稱，表示述詞中的比較會使用身分識別比較，而不是數值比較。</span><span class="sxs-lookup"><span data-stu-id="b192f-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="b192f-140">它是更快，判斷兩個參考實際上會參考相同的物件，而非以比較兩個字串。</span><span class="sxs-lookup"><span data-stu-id="b192f-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b192f-141">要與目前 <see cref="T:System.Xml.Linq.XName" /> 比較的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-141">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="b192f-142">判斷指定的 <see cref="T:System.Xml.Linq.XName" /> 與這個 <see cref="T:System.Xml.Linq.XName" /> 是否相等。</span><span class="sxs-lookup"><span data-stu-id="b192f-142">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns>
          <span data-ttu-id="b192f-143">如果指定的 <see cref="T:System.Xml.Linq.XName" /> 和目前的 <see cref="T:System.Xml.Linq.XName" /> 相等，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-143"><see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-144">兩個<xref:System.Xml.Linq.XName>相等的物件，它們必須有相同的擴充的名稱。</span><span class="sxs-lookup"><span data-stu-id="b192f-144">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b192f-145">取得 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-145">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-146">這個方法提供多載，可讓您建立<xref:System.Xml.Linq.XName>從擴充的 XML 名稱。</span><span class="sxs-lookup"><span data-stu-id="b192f-146">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="b192f-147">您可以建立<xref:System.Xml.Linq.XName>格式字串從`{namespace}localname`，或從命名空間和本機名稱，個別指定。</span><span class="sxs-lookup"><span data-stu-id="b192f-147">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="b192f-148">建立更通用且更容易的方式<xref:System.Xml.Linq.XName>是將字串隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="b192f-148">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="b192f-149">若要建立命名空間中的名稱，常見的方法是使用加法運算子多載，可讓您結合<xref:System.Xml.Linq.XNamespace>物件和字串。</span><span class="sxs-lookup"><span data-stu-id="b192f-149">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="b192f-150">如需詳細資訊和範例，請參閱[How to： 建立文件與命名空間 (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)。</span><span class="sxs-lookup"><span data-stu-id="b192f-150">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="b192f-151">如需有關如何在 Visual Basic 中使用命名空間的詳細資訊，請參閱[在 Visual Basic (LINQ to XML) 中的命名空間](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)。</span><span class="sxs-lookup"><span data-stu-id="b192f-151">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="b192f-152">因為<xref:System.Xml.Linq.XName>物件不可部分完成，如果沒有現有<xref:System.Xml.Linq.XName>完全相同的名稱，與指派的變數會指向現有<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-152">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-153">如果沒有任何現有<xref:System.Xml.Linq.XName>，新的其中一個將會建立並初始化。</span><span class="sxs-lookup"><span data-stu-id="b192f-153">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="b192f-154"><see cref="T:System.String" />，其中包含擴充的 XML 名稱 (格式為 <c>{namespace}localname</c>)。</span><span class="sxs-lookup"><span data-stu-id="b192f-154">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="b192f-155">從擴充名稱取得 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-155">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span></span></summary>
        <returns><span data-ttu-id="b192f-156">從擴充名稱建構的 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-156">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-157">這個方法所包含的多載，可讓您建立<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-157">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-158">您可以從擴充的 XML 名稱，在表單中建立它`{namespace}localname`，或從命名空間和本機名稱，個別指定。</span><span class="sxs-lookup"><span data-stu-id="b192f-158">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="b192f-159">建立更通用且更容易的方式<xref:System.Xml.Linq.XName>是將字串隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="b192f-159">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="b192f-160">因為<xref:System.Xml.Linq.XName>不可部分完成，如果沒有現有<xref:System.Xml.Linq.XName>完全相同的名稱，與指派的變數會指向現有<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-160">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-161">如果沒有任何現有<xref:System.Xml.Linq.XName>，新的其中一個將會建立並初始化。</span><span class="sxs-lookup"><span data-stu-id="b192f-161">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b192f-162">下列範例示範如何使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="b192f-162">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-163">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-163">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="b192f-164">區域 (未限定) 名稱。</span><span class="sxs-lookup"><span data-stu-id="b192f-164">A local (unqualified) name.</span></span></param>
        <param name="namespaceName"><span data-ttu-id="b192f-165">XML 命名空間。</span><span class="sxs-lookup"><span data-stu-id="b192f-165">An XML namespace.</span></span></param>
        <summary><span data-ttu-id="b192f-166">從區域名稱和命名空間取得 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-166">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span></span></summary>
        <returns><span data-ttu-id="b192f-167">從指定的區域名稱和命名空間建立的 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-167">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-168">這個方法所包含的多載，可讓您建立<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-168">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-169">您可以從擴充的 XML 名稱的形式建立它`{namespace}localname`，或從命名空間和本機名稱，個別指定。</span><span class="sxs-lookup"><span data-stu-id="b192f-169">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="b192f-170">建立更通用且更容易的方式<xref:System.Xml.Linq.XName>是將字串隱含轉換。</span><span class="sxs-lookup"><span data-stu-id="b192f-170">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="b192f-171">因為<xref:System.Xml.Linq.XName>不可部分完成，如果沒有現有<xref:System.Xml.Linq.XName>完全相同的名稱，與指派的變數會指向現有<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-171">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-172">如果沒有任何現有<xref:System.Xml.Linq.XName>，新的其中一個將會建立並初始化。</span><span class="sxs-lookup"><span data-stu-id="b192f-172">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b192f-173">下列範例示範如何使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="b192f-173">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-174">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-174">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b192f-175">取得這個 <see cref="T:System.Xml.Linq.XName" /> 的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="b192f-175">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="b192f-176"><see cref="T:System.Int32" />，其中包含 <see cref="T:System.Xml.Linq.XName" /> 的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="b192f-176">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-177">這個方法會做為雜湊函式<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-177">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-178">您可以使用<xref:System.Xml.Linq.XName.GetHashCode%2A>雜湊演算法，或資料結構，例如雜湊表中。</span><span class="sxs-lookup"><span data-stu-id="b192f-178">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b192f-179">取得名稱的區域 (未限定) 部分。</span><span class="sxs-lookup"><span data-stu-id="b192f-179">Gets the local (unqualified) part of the name.</span></span></summary>
        <value><span data-ttu-id="b192f-180"><see cref="T:System.String" />，包含名稱的區域 (未限定) 部分。</span><span class="sxs-lookup"><span data-stu-id="b192f-180">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-181">這個屬性不保證`null`。</span><span class="sxs-lookup"><span data-stu-id="b192f-181">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b192f-182">下列範例示範如何使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="b192f-182">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-183">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-183">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b192f-184">取得完整限定名稱的命名空間部分。</span><span class="sxs-lookup"><span data-stu-id="b192f-184">Gets the namespace part of the fully qualified name.</span></span></summary>
        <value><span data-ttu-id="b192f-185"><see cref="T:System.Xml.Linq.XNamespace" />，包含名稱的命名空間部分。</span><span class="sxs-lookup"><span data-stu-id="b192f-185">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-186">不保證 <xref:System.Xml.Linq.XName.Namespace%2A> 屬性為 `null`。</span><span class="sxs-lookup"><span data-stu-id="b192f-186">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="b192f-187">如果<xref:System.Xml.Linq.XName>是在沒有命名空間，這個屬性會傳回<xref:System.Xml.Linq.XNamespace.None%2A>。</span><span class="sxs-lookup"><span data-stu-id="b192f-187">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b192f-188">下列範例示範如何使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="b192f-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-189">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b192f-190">針對這個 <see cref="T:System.Xml.Linq.XNamespace" /> 傳回 <see cref="T:System.Xml.Linq.XName" /> 的 URI。</span><span class="sxs-lookup"><span data-stu-id="b192f-190">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <value><span data-ttu-id="b192f-191">這個 <see cref="T:System.Xml.Linq.XNamespace" /> 之 <see cref="T:System.Xml.Linq.XName" /> 的 URI。</span><span class="sxs-lookup"><span data-stu-id="b192f-191">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-192">這是方便的屬性取得的命名空間名稱<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-192">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b192f-193">此範例中的命名空間中建立的項目，，然後列印項目的命名空間。</span><span class="sxs-lookup"><span data-stu-id="b192f-193">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-194">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-194">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b192f-195">要比較的第一個 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-195">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b192f-196">要比較的第二個 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-196">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="b192f-197">傳回數值，指出 <see cref="T:System.Xml.Linq.XName" /> 的兩個執行個體是否相等。</span><span class="sxs-lookup"><span data-stu-id="b192f-197">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="b192f-198">如果 <paramref name="left" /> 和 <paramref name="right" /> 相等則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-198"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-199">運算子多載`==`和`!=`隨附啟用之間的比較<xref:System.Xml.Linq.XName>和`string`，例如`element.Name == "SomeElementName"`。</span><span class="sxs-lookup"><span data-stu-id="b192f-199">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="b192f-200">在 C# 中預先定義的參考相等運算子需要一個運算元轉換成參考轉換只透過其他類型。</span><span class="sxs-lookup"><span data-stu-id="b192f-200">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="b192f-201">這些運算子不會考慮從字串隱含轉換<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-201">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="b192f-202">下列範例示範一些比較<xref:System.Xml.Linq.XName>物件和字串。</span><span class="sxs-lookup"><span data-stu-id="b192f-202">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="b192f-203">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-203">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName"><span data-ttu-id="b192f-204">包含擴充之 XML 名稱的字串，其格式為 <c>{namespace}localname</c>。</span><span class="sxs-lookup"><span data-stu-id="b192f-204">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span></span></param>
        <summary><span data-ttu-id="b192f-205">將格式化為擴充的 XML 名稱 (即 <c>{namespace}localname</c>) 的字串轉換為 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-205">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span></span></summary>
        <returns><span data-ttu-id="b192f-206">從擴充名稱建構的 <see cref="T:System.Xml.Linq.XName" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-206">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-207">當您建立時，會使用這個隱含運算子<xref:System.Xml.Linq.XElement>或<xref:System.Xml.Linq.XAttribute>由傳遞字串給適當的建構函式。</span><span class="sxs-lookup"><span data-stu-id="b192f-207">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="b192f-208">下列範例會建立<xref:System.Xml.Linq.XName>字串指派給它，它會叫用這個隱含轉換運算子。</span><span class="sxs-lookup"><span data-stu-id="b192f-208">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-209">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-209">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b192f-210">要比較的第一個 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-210">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b192f-211">要比較的第二個 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-211">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span></span></param>
        <summary><span data-ttu-id="b192f-212">傳回值，這個值指出 <see cref="T:System.Xml.Linq.XName" /> 的兩個執行個體是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b192f-212">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="b192f-213">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-213"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-214">運算子多載`==`和`!=`隨附啟用之間的比較<xref:System.Xml.Linq.XName>和字串，例如`element.Name == "SomeElementName"`。</span><span class="sxs-lookup"><span data-stu-id="b192f-214">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="b192f-215">在 C# 中預先定義的參考相等運算子需要一個運算元轉換成參考轉換只透過其他類型。</span><span class="sxs-lookup"><span data-stu-id="b192f-215">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="b192f-216">這些運算子不會考慮從字串隱含轉換<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-216">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="b192f-217">下列 C# 範例會比較<xref:System.Xml.Linq.XName>為字串，這個運算子會叫用的物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-217">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-218">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-218">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b192f-219">要和這個 <see cref="T:System.Xml.Linq.XName" /> 比較的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-219">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span></span></param>
        <summary><span data-ttu-id="b192f-220">指示目前的 <see cref="T:System.Xml.Linq.XName" /> 和指定的 <see cref="T:System.Xml.Linq.XName" /> 是否相等。</span><span class="sxs-lookup"><span data-stu-id="b192f-220">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns>
          <span data-ttu-id="b192f-221">如果這個 <see cref="T:System.Xml.Linq.XName" /> 與指定的 <see cref="T:System.Xml.Linq.XName" /> 相等則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-221"><see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="b192f-222">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="b192f-223">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</span><span class="sxs-lookup"><span data-stu-id="b192f-223">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="b192f-224">將序列化目標物件的所需資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="b192f-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b192f-225">這個方法是在內部用來序列化物件圖形包含 LINQ to XML 物件。</span><span class="sxs-lookup"><span data-stu-id="b192f-225">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b192f-226">傳回擴充的 XML 名稱 (格式為 <c>{namespace}localname</c>)。</span><span class="sxs-lookup"><span data-stu-id="b192f-226">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span></span></summary>
        <returns><span data-ttu-id="b192f-227"><see cref="T:System.String" />，其中包含擴充的 XML 名稱 (格式為 <c>{namespace}localname</c>)。</span><span class="sxs-lookup"><span data-stu-id="b192f-227">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b192f-228">下列範例會呼叫<xref:System.Console.WriteLine%2A>，並傳遞<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="b192f-228">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="b192f-229">這會導致<xref:System.Xml.Linq.XName.ToString%2A>来呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="b192f-229">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="b192f-230">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="b192f-230">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>