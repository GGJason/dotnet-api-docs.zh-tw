<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9990b0a47cc1978e4ee1e2692ca9557572ff1ffd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58714310" /></Metadata><TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type XElement = class&#xA;    inherit XContainer&#xA;    interface IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(System.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Xml.Serialization.XmlTypeConvertor("ConvertForAssignment")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4bb23-101">表示 XML 項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-101">Represents an XML element.</span></span>  <span data-ttu-id="4bb23-102">如需用法資訊和範例，請參閱 <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview">XElement 類別概觀</see>及本頁面上的＜備註＞一節。</span><span class="sxs-lookup"><span data-stu-id="4bb23-102">See <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview">XElement Class Overview</see> and the Remarks section on this page for usage information and examples.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-103">此類別代表 XML 項目時，基本的 XML 建構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="4bb23-104">請參閱[XElement 類別概觀](/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview)如其他使用方式資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-104">See [XElement Class Overview](/dotnet/csharp/programming-guide/concepts/linq/xelement-class-overview) for other usage information.</span></span>  
  
 <span data-ttu-id="4bb23-105">項目具有<xref:System.Xml.Linq.XName>，並選擇性地一或多個屬性，並可選擇性地包含內容 (如需詳細資訊，請參閱<xref:System.Xml.Linq.XContainer.Nodes%2A>)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="4bb23-106"><xref:System.Xml.Linq.XElement>可以包含下列類型的內容：</span><span class="sxs-lookup"><span data-stu-id="4bb23-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="4bb23-107">如需詳細資訊的有效的內容<xref:System.Xml.Linq.XElement>，請參閱 <<c2> [ 有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-108"><xref:System.Xml.Linq.XElement> 衍生自<xref:System.Xml.Linq.XContainer>，其衍生自<xref:System.Xml.Linq.XNode>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="4bb23-109">某些<xref:System.Xml.Linq.XElement>方法可從 XAML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="4bb23-110">如需詳細資訊，請參閱 [LINQ to XML 動態屬性](https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-110">For more information, see [LINQ to XML Dynamic Properties](https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-111">下列範例會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-111">The following example creates an XML tree.</span></span> <span data-ttu-id="4bb23-112">新項目的內容是來自 LINQ 查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="4bb23-113">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="4bb23-114">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4bb23-115">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-115">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="4bb23-116">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-117">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-117">LINQ to XML</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012"><span data-ttu-id="4bb23-118">LINQ to XML 動態屬性</span><span class="sxs-lookup"><span data-stu-id="4bb23-118">LINQ to XML Dynamic Properties</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-119">初始化 <see cref="T:System.Xml.Linq.XElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-119">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-120">如需可傳遞至這個建構函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-120">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-121">隱含的轉換，從字串到<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-121">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-122">這個建構函式的典型用法就是指定字串做為參數，而不是建立新<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-122">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="4bb23-123">一般使用時建立命名空間中的項目，是使用加法運算子多載，與<xref:System.Xml.Linq.XNamespace>建立的字串和<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-123">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-124">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-124">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-125">下列範例會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-125">The following example creates an XML tree.</span></span> <span data-ttu-id="4bb23-126">新項目的內容是來自 LINQ 查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-126">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="4bb23-127">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-127">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-128">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-128">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XElement -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="4bb23-129">要從中複製的 <see cref="T:System.Xml.Linq.XElement" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-129">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span></span></param>
        <summary><span data-ttu-id="4bb23-130">從另一個 <see cref="T:System.Xml.Linq.XElement" /> 物件，初始化 <see cref="T:System.Xml.Linq.XElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-130">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-131">這個建構函式會深層複製的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-131">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-132">下列範例會建立 XML 樹狀結構、 建立的樹狀目錄中，複製，然後呼叫<xref:System.Xml.Linq.XNode.DeepEquals%2A>，它會測試兩個 XML 樹狀結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="4bb23-132">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="4bb23-133">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-133">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-134">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-134">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-135">包含項目名稱的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-135">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span></span></param>
        <summary><span data-ttu-id="4bb23-136">使用指定的名稱，初始化 <see cref="T:System.Xml.Linq.XElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-136">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-137">這個建構函式建立的項目沒有內容和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-137">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="4bb23-138">隱含的轉換，從字串到<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-138">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-139">這個建構函式的典型用法就是指定字串做為參數，而不是建立新<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-139">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-140">一般使用時建立命名空間中的項目，是使用加法運算子多載，與<xref:System.Xml.Linq.XNamespace>建立的字串和<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-140">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-141">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-141">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-142">下列範例會建立項目沒有內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-142">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="4bb23-143">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-143">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="4bb23-144">下列範例會建立任何內容命名空間中的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-144">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="4bb23-145">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-145">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-146">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-146">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-147">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-147">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XStreamingElement -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="4bb23-148"><see cref="T:System.Xml.Linq.XStreamingElement" />，包含要對於這個 <see cref="T:System.Xml.Linq.XElement" /> 之內容逐一查看的未評估查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-148">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-149">從 <see cref="T:System.Xml.Linq.XElement" /> 物件初始化 <see cref="T:System.Xml.Linq.XStreamingElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-149">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-150">這個建構函式會逐一查看的指定內容<xref:System.Xml.Linq.XStreamingElement>，並建立其內容的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-150">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-151">下列範例會建立一個來源的 XML 樹狀結構，並接著會建立<xref:System.Xml.Linq.XStreamingElement>來源 XML 樹狀結構上的查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-151">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="4bb23-152">然後將序列化<xref:System.Xml.Linq.XStreamingElement>至主控台，將新的項目加入原始檔的 XML 樹狀結構中，並再將資料序列化<xref:System.Xml.Linq.XStreamingElement>一次。</span><span class="sxs-lookup"><span data-stu-id="4bb23-152">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="4bb23-153">您可以看到該項目新增至來源 XML 樹狀結構未包含在第一次的序列化，但包含在第二個。</span><span class="sxs-lookup"><span data-stu-id="4bb23-153">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="4bb23-154">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-154">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-155">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-155">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName * obj -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement (name, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-156">包含項目名稱的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-156">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="4bb23-157">項目的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-157">The contents of the element.</span></span></param>
        <summary><span data-ttu-id="4bb23-158">使用指定的名稱和內容初始化 <see cref="T:System.Xml.Linq.XElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-158">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-159">這個建構函式會建立具有指定的內容和屬性的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-159">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="4bb23-160">隱含的轉換，從字串到<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-160">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-161">這個建構函式的典型用法就是指定字串做為參數，而不是建立新<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-161">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="4bb23-162">一般使用時建立命名空間中的項目，是使用加法運算子多載，與<xref:System.Xml.Linq.XNamespace>建立的字串和<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-162">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-163">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-163">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="4bb23-164">如需可傳遞至這個建構函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-164">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-165">下列範例會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-165">The following example creates an XML tree.</span></span> <span data-ttu-id="4bb23-166">新項目的內容是來自 LINQ 查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-166">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="4bb23-167">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-167">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="4bb23-168">下列範例會建立 XML 樹狀結構與各種類型的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-168">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-169">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-169">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="4bb23-170">下列範例會建立 XML 樹狀結構的命名空間中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-170">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-171">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-171">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="4bb23-172">下列範例會建立 XML 樹狀結構包含巢狀命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-172">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-173">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-173">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-174">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-174">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XElement : System.Xml.Linq.XName * obj[] -&gt; System.Xml.Linq.XElement" Usage="new System.Xml.Linq.XElement (name, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-175">包含項目名稱的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-175">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="4bb23-176">項目的初始內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-176">The initial content of the element.</span></span></param>
        <summary><span data-ttu-id="4bb23-177">使用指定的名稱和內容初始化 <see cref="T:System.Xml.Linq.XElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-177">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-178">這個建構函式會建立具有指定的內容和屬性的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-178">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="4bb23-179">隱含的轉換，從字串到<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-179">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-180">這個建構函式的典型用法就是指定字串做為參數，而不是建立新<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-180">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="4bb23-181">一般使用時建立命名空間中的項目，是使用加法運算子多載，與<xref:System.Xml.Linq.XNamespace>建立的字串和<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-181">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="4bb23-182">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-182">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="4bb23-183">如需可傳遞至這個建構函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-183">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-184">下列範例會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-184">The following example creates an XML tree.</span></span> <span data-ttu-id="4bb23-185">新項目的內容是來自 LINQ 查詢。</span><span class="sxs-lookup"><span data-stu-id="4bb23-185">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="4bb23-186">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-186">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="4bb23-187">下列範例會建立 XML 樹狀結構與各種類型的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-187">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-188">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-188">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="4bb23-189">下列範例會建立 XML 樹狀結構的命名空間中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-189">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-190">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-190">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="4bb23-191">下列範例會建立 XML 樹狀結構包含巢狀命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-191">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-192">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-192">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-193">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-193">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-194">傳回包含這個元素的元素集合，以及這個元素的上階。</span><span class="sxs-lookup"><span data-stu-id="4bb23-194">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-195">傳回集合中的項目會以反向的文件順序。</span><span class="sxs-lookup"><span data-stu-id="4bb23-195">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="4bb23-196">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-196">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-197">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-197">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberSignature Language="F#" Value="member this.AncestorsAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.AncestorsAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-198">傳回包含這個元素的元素集合，以及這個元素的上階。</span><span class="sxs-lookup"><span data-stu-id="4bb23-198">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <returns><span data-ttu-id="4bb23-199">項目之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含這個項目及這個項目的祖系。</span><span class="sxs-lookup"><span data-stu-id="4bb23-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-200">傳回集合中的項目會以反向的文件順序。</span><span class="sxs-lookup"><span data-stu-id="4bb23-200">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="4bb23-201">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-201">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-202">下列範例會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-202">The following example creates an XML tree.</span></span> <span data-ttu-id="4bb23-203">然後尋找`GrandChild`項目，然後列印它的上階。</span><span class="sxs-lookup"><span data-stu-id="4bb23-203">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4bb23-204">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-204">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-205">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-205">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.AncestorsAndSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.AncestorsAndSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-206">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-206">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="4bb23-207">傳回包含這個項目的已篩選項目集合，以及這個項目的祖系。</span><span class="sxs-lookup"><span data-stu-id="4bb23-207">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="4bb23-208">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-208">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="4bb23-209"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含這個項目及這個項目的祖系。</span><span class="sxs-lookup"><span data-stu-id="4bb23-209">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="4bb23-210">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-210">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-211">傳回集合中的項目會以反向的文件順序。</span><span class="sxs-lookup"><span data-stu-id="4bb23-211">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="4bb23-212">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-212">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-213">下列範例會使用此。</span><span class="sxs-lookup"><span data-stu-id="4bb23-213">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4bb23-214">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-214">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-215">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-215">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Attribute : System.Xml.Linq.XName -&gt; System.Xml.Linq.XAttribute" Usage="xElement.Attribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-216">要取得之 <see cref="T:System.Xml.Linq.XName" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-216">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span></span></param>
        <summary><span data-ttu-id="4bb23-217">傳回這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其具有指定的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-217">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-218">具有指定之 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Xml.Linq.XName" />，如果沒有具有指定名稱的屬性，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-218">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-219">某些傳回項目或屬性的集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-219">Some  return collections of elements or attributes.</span></span> <span data-ttu-id="4bb23-220">這個方法會傳回單一屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-220">This method returns only a single attribute.</span></span> <span data-ttu-id="4bb23-221">有時候這稱為*singleton* (相對於*集合*)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-221">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="4bb23-222">Visual Basic 使用者可以使用整合式的屬性軸，來擷取具有指定名稱之屬性的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-222">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-223">下列範例會建立具有屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-223">The following example creates an element with an attribute.</span></span> <span data-ttu-id="4bb23-224">然後，它會擷取使用此方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-224">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="4bb23-225">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-225">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="4bb23-226">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-226">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4bb23-227">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-227">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-228">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-228">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-229">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-229">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-230">傳回這個元素的屬性集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-230">Returns a collection of attributes of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-231">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-231">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-232">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-232">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberSignature Language="F#" Value="member this.Attributes : unit -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="xElement.Attributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-233">傳回這個元素的屬性集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-233">Returns a collection of attributes of this element.</span></span></summary>
        <returns><span data-ttu-id="4bb23-234">這個項目之屬性的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-235">傳回集合中的屬性會加入至項目順序。</span><span class="sxs-lookup"><span data-stu-id="4bb23-235">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="4bb23-236">如果 XML 樹狀結構已從 XML 剖析，屬性會傳回文件順序。</span><span class="sxs-lookup"><span data-stu-id="4bb23-236">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="4bb23-237">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-237">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-238">下列範例會建立兩個屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-238">The following example creates an element with two attributes.</span></span> <span data-ttu-id="4bb23-239">它接著會使用此來擷取項目的所有屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-239">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="4bb23-240">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="4bb23-241">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4bb23-242">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-242">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-243">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-244">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-244">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="xElement.Attributes name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-245">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-245">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="4bb23-246">傳回這個項目的已篩選屬性集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-246">Returns a filtered collection of attributes of this element.</span></span> <span data-ttu-id="4bb23-247">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-247">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="4bb23-248"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，包含這個項目的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-248">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span></span> <span data-ttu-id="4bb23-249">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-249">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-250">屬性名稱必須是唯一項目內。</span><span class="sxs-lookup"><span data-stu-id="4bb23-250">Attribute names must be unique within an element.</span></span> <span data-ttu-id="4bb23-251">因此，這可以傳回任一集合包含只有一個屬性，或它可以傳回空集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-251">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="4bb23-252">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-252">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-253">下列範例會使用此。</span><span class="sxs-lookup"><span data-stu-id="4bb23-253">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="4bb23-254">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-254">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="4bb23-255">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-255">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="4bb23-256">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-256">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-257">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-257">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-258">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-258">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberSignature Language="F#" Value="member this.DescendantNodesAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xElement.DescendantNodesAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-259">依照文件順序，傳回包含這個項目的節點集合，以及這個項目的所有子代節點。</span><span class="sxs-lookup"><span data-stu-id="4bb23-259">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="4bb23-260"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，依照文件順序包含這個項目及這個項目的所有子代節點。</span><span class="sxs-lookup"><span data-stu-id="4bb23-260">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-261">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-262">下列範例會建立 XML 樹狀結構，，，然後使用此。</span><span class="sxs-lookup"><span data-stu-id="4bb23-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="4bb23-263">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-263">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-264">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-264">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-265">依照文件順序，傳回包含這個項目的項目集合，以及這個項目的子代項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-265">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-266">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-266">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-267">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-267">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberSignature Language="F#" Value="member this.DescendantsAndSelf : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.DescendantsAndSelf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-268">依照文件順序，傳回包含這個項目的項目集合，以及這個項目的子代項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-268">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="4bb23-269">項目之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，依照文件順序包含這個項目及這個項目的所有子代項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-269">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-270">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-270">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-271">下列範例會建立 XML 樹狀結構，，，然後使用此。</span><span class="sxs-lookup"><span data-stu-id="4bb23-271">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4bb23-272">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-272">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-273">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-273">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.DescendantsAndSelf : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xElement.DescendantsAndSelf name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-274">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-274">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="4bb23-275">依照文件順序，傳回包含這個項目的已篩選項目集合，以及這個項目的所有子代項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-275">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="4bb23-276">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-276">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="4bb23-277"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，依照文件順序包含這個項目及這個項目的所有子代項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="4bb23-278">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-278">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-279">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="4bb23-279">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-280">下列範例會建立 XML 樹狀結構，，，然後使用此。</span><span class="sxs-lookup"><span data-stu-id="4bb23-280">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="4bb23-281">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-281">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-282">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-282">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmptySequence : seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.EmptySequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-283">取得空的項目集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-283">Gets an empty collection of elements.</span></span></summary>
        <value><span data-ttu-id="4bb23-284"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含空的集合。</span><span class="sxs-lookup"><span data-stu-id="4bb23-284">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-285">這個屬性通常是由類別實作器撰寫的方法，傳回的項目集合時。</span><span class="sxs-lookup"><span data-stu-id="4bb23-285">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="4bb23-286">如果此方法必須不傳回任何項目，它還可以使用這個屬性，以取得空的集合<xref:System.Xml.Linq.XElement>物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-286">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-287">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-287">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XElement.FirstAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-288">取得這個項目的第一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-288">Gets the first attribute of this element.</span></span></summary>
        <value><span data-ttu-id="4bb23-289"><see cref="T:System.Xml.Linq.XAttribute" />，包含這個項目的第一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-289">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-290">屬性會儲存在已加入至元素的順序中的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-290">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-291">下列範例會使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-291">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="4bb23-292">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-292">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-293">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-293">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberSignature Language="F#" Value="member this.GetDefaultNamespace : unit -&gt; System.Xml.Linq.XNamespace" Usage="xElement.GetDefaultNamespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-294">取得這個 <see cref="T:System.Xml.Linq.XNamespace" /> 的預設 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-294">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-295"><see cref="T:System.Xml.Linq.XNamespace" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的預設命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-295">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-296">命名空間宣告可能會保存為 XML 樹狀結構中的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-296">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="4bb23-297">這些特殊屬性宣告命名空間，包括預設的命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-297">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="4bb23-298">這個方法會尋找命名空間宣告會宣告預設命名空間中，如果有的話，並傳回<xref:System.Xml.Linq.XNamespace>預設命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-298">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="4bb23-299">如果沒有宣告預設命名空間的屬性，則這個方法會傳回<xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-299">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4bb23-300">在建立 XML 樹狀結構使用 C# 中，即使命名空間不會保存為屬性的 XML 樹狀結構中，想要使用預設的命名空間，序列化 XML 樹狀結構時，這個方法不會報告命名空間當做預設命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-300">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="4bb23-301">如果您使用 Imports 陳述式的預設命名空間中建立 XML，請建立使用 Visual Basic 和 XML 常值的 XML 樹狀結構，然後命名空間屬性將會建立在樹狀目錄中由 Visual Basic 編譯器，這個方法會報告該命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-301">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-302">下列範例會建立具有預設的命名空間的 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-302">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="4bb23-303">然後，它會使用這個方法來擷取預設的命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-303">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-304">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-304">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-305">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-305">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="member this.GetNamespaceOfPrefix : string -&gt; System.Xml.Linq.XNamespace" Usage="xElement.GetNamespaceOfPrefix prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="4bb23-306">包含要查閱之命名空間前置詞的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-306">A string that contains the namespace prefix to look up.</span></span></param>
        <summary><span data-ttu-id="4bb23-307">取得與這個 <see cref="T:System.Xml.Linq.XElement" /> 之特定前置詞相關聯的命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-307">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-308">命名空間的 <see cref="T:System.Xml.Linq.XNamespace" />，該命名空間與這個 <see cref="T:System.Xml.Linq.XElement" /> 的前置詞相關聯。</span><span class="sxs-lookup"><span data-stu-id="4bb23-308">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-309">這個方法會透過此項目的範圍中的命名空間屬性的 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-309">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="4bb23-310">XML 樹狀結構中的命名空間屬性中指定命名空間前置詞。</span><span class="sxs-lookup"><span data-stu-id="4bb23-310">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-311">下列範例會建立已具有關聯的前置詞的命名空間之 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-311">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="4bb23-312">它接著會使用這個方法來擷取<xref:System.Xml.Linq.XNamespace>前置詞。</span><span class="sxs-lookup"><span data-stu-id="4bb23-312">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="4bb23-313">當使用 Visual Basic，您通常會使用[GetXmlNamespace 運算子](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md)運算子，如下所示</span><span class="sxs-lookup"><span data-stu-id="4bb23-313">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-314">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-314">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-315">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-315">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberSignature Language="F#" Value="member this.GetPrefixOfNamespace : System.Xml.Linq.XNamespace -&gt; string" Usage="xElement.GetPrefixOfNamespace ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="4bb23-316">要查閱的 <see cref="T:System.Xml.Linq.XNamespace" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-316">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span></span></param>
        <summary><span data-ttu-id="4bb23-317">取得與這個 <see cref="T:System.Xml.Linq.XElement" /> 之命名空間相關聯的前置詞。</span><span class="sxs-lookup"><span data-stu-id="4bb23-317">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-318">包含命名空間前置詞的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-318">A <see cref="T:System.String" /> that contains the namespace prefix.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-319">這個方法會透過此項目的範圍中的命名空間屬性的 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-319">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="4bb23-320">XML 樹狀結構中的命名空間屬性中指定命名空間前置詞。</span><span class="sxs-lookup"><span data-stu-id="4bb23-320">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-321">如果命名空間是預設的命名空間，而且沒有命名空間前置詞，則這個方法會傳回 null。</span><span class="sxs-lookup"><span data-stu-id="4bb23-321">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-322">下列範例會建立 XML 樹狀結構，其中包含具有前置詞的命名空間。</span><span class="sxs-lookup"><span data-stu-id="4bb23-322">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="4bb23-323">然後，它會使用這個方法來擷取命名空間的前置詞。</span><span class="sxs-lookup"><span data-stu-id="4bb23-323">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="4bb23-324">請注意，此範例會使用字串，以隱含方式轉換<xref:System.Xml.Linq.XNamespace>時呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="4bb23-324">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-325">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-325">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-326">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-326">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAttributes : bool" Usage="System.Xml.Linq.XElement.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-327">取得值，指出這個項目是否至少有一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-327">Gets a value indicating whether this element has at least one attribute.</span></span></summary>
        <value><span data-ttu-id="4bb23-328">如果這個項目至少有一個屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-328"><see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4bb23-329">下列範例會使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-329">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="4bb23-330">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-330">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-331">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-331">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElements : bool" Usage="System.Xml.Linq.XElement.HasElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-332">取得值，指出這個項目是否至少有一個子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-332">Gets a value indicating whether this element has at least one child element.</span></span></summary>
        <value><span data-ttu-id="4bb23-333">如果這個項目至少有一個子項目則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-333"><see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4bb23-334">下列範例會使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-334">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="4bb23-335">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-335">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-336">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-336">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Xml.Linq.XElement.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-337">取得值，指出這個項目是否不包含內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-337">Gets a value indicating whether this element contains no content.</span></span></summary>
        <value><span data-ttu-id="4bb23-338">如果這個項目不包含內容則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-338"><see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-339">請注意，包含開始和結束標記的標記之間沒有內容的項目並不是空的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-339">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="4bb23-340">它在沒有任何長度的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-340">It has content with no length.</span></span> <span data-ttu-id="4bb23-341">只有項目，其中包含只是開始標記，並會以結束的空項目，則皆為空白。</span><span class="sxs-lookup"><span data-stu-id="4bb23-341">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-342">下列範例會建立 XML 樹狀結構中，各種，並顯示每個樹狀結構的這個屬性的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-342">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="4bb23-343">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-343">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-344">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-344">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LastAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XElement.LastAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-345">取得這個項目的最後一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-345">Gets the last attribute of this element.</span></span></summary>
        <value><span data-ttu-id="4bb23-346"><see cref="T:System.Xml.Linq.XAttribute" />，包含這個項目的最後一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-346">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-347">屬性會儲存在已加入至元素的順序中的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-347">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-348">下列範例會建立 XML 樹狀結構，具有三個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-348">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="4bb23-349">它接著會寫入做為輸出的最後一個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-349">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="4bb23-350">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-350">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-351">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-351">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-352">從 URI 指定的檔案、<see cref="T:System.Xml.Linq.XElement" /> 或 <see cref="T:System.IO.TextReader" />，建立新的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-352">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-353">您可以使用此方法的多載的其中一個載入<xref:System.Xml.Linq.XElement>檔案，從<xref:System.IO.TextReader>，或有<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-353">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="4bb23-354">若要建立<xref:System.Xml.Linq.XElement>從包含 XML 的字串，使用<xref:System.Xml.Linq.XElement.Parse%2A>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-354">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-355">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-355">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4bb23-356">包含 XML 資料的資料流。</span><span class="sxs-lookup"><span data-stu-id="4bb23-356">The stream that contains the XML data.</span></span></param>
        <summary><span data-ttu-id="4bb23-357">使用指定的資料流，建立新的 <see cref="T:System.Xml.Linq.XElement" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-357">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span></span></summary>
        <returns><span data-ttu-id="4bb23-358"><see cref="T:System.Xml.Linq.XElement" /> 物件，用於讀取資料流中包含的資料。</span><span class="sxs-lookup"><span data-stu-id="4bb23-358">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-359">如果您想要控制載入選項，使用<xref:System.Xml.Linq.XElement.Load%2A>多載，<xref:System.Xml.Linq.LoadOptions>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-359">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="4bb23-360">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-360">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-361">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-361">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="4bb23-362">如果您需要修改<xref:System.Xml.XmlReaderSettings>，遵循下列步驟：</span><span class="sxs-lookup"><span data-stu-id="4bb23-362">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="4bb23-363">建立<xref:System.Xml.XmlReader>藉由呼叫其中一個<xref:System.Xml.XmlReader.Create%2A>多載會採用<xref:System.Xml.XmlReaderSettings>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-363">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="4bb23-364">傳遞<xref:System.Xml.XmlReader>的其中一個<xref:System.Xml.Linq.XElement>的<xref:System.Xml.Linq.XElement.Load%2A>多載<xref:System.Xml.XmlReader>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-364">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="4bb23-365"><see cref="T:System.IO.TextReader" />，將從中讀取 <see cref="T:System.Xml.Linq.XElement" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-365">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <summary><span data-ttu-id="4bb23-366">從 <see cref="T:System.Xml.Linq.XElement" /> 載入 <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-366">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-367"><see cref="T:System.Xml.Linq.XElement" />，包含從指定之 <see cref="T:System.IO.TextReader" /> 讀取的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-367">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-368">這個方法會將原始的 XML 讀入 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-368">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="4bb23-369">它會捨棄所有檔案中的不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-369">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="4bb23-370">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-370">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-371">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-371">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-372">下列範例會載入的項目從<xref:System.IO.StringReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-372">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4bb23-373">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-373">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-374">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-374">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="4bb23-375">URI 字串，參照要載入到新 <see cref="T:System.Xml.Linq.XElement" /> 的檔案。</span><span class="sxs-lookup"><span data-stu-id="4bb23-375">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-376">從檔案載入 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-376">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span></span></summary>
        <returns><span data-ttu-id="4bb23-377"><see cref="T:System.Xml.Linq.XElement" />，包含指定之檔案的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-377">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-378">這個方法會將原始的 XML 讀入 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-378">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="4bb23-379">它會捨棄所有檔案中的不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-379">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="4bb23-380">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-380">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-381">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-381">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-382">下列範例會建立 XML 樹狀結構、 將它儲存至檔案，然後使用此方法來載入<xref:System.Xml.Linq.XElement>從檔案。</span><span class="sxs-lookup"><span data-stu-id="4bb23-382">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="4bb23-383">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-383">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-384">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-384">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4bb23-385"><see cref="T:System.Xml.XmlReader" />，將從中讀取 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-385">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-386">從 <see cref="T:System.Xml.Linq.XElement" /> 載入 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-386">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-387"><see cref="T:System.Xml.Linq.XElement" />，包含從指定之 <see cref="T:System.Xml.XmlReader" /> 讀取的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-387">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-388">藉由建立<xref:System.Xml.XmlNodeReader>從 DOM 文件，接著再使用<xref:System.Xml.XmlNodeReader>建立<xref:System.Xml.Linq.XElement>，這個方法可用來建立 LINQ to XML 樹狀結構中的 DOM 文件的複本。</span><span class="sxs-lookup"><span data-stu-id="4bb23-388">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-389">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-389">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-390">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-390">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-391">下列範例會建立 DOM 文件，然後建立<xref:System.Xml.XmlNodeReader>從 DOM 文件中，會具現化從讀取器的樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-391">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="4bb23-392">此程式碼實際上會複製到 LINQ DOM 文件到 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-392">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="4bb23-393">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-393">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-394">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-394">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4bb23-395">包含 XML 資料的資料流。</span><span class="sxs-lookup"><span data-stu-id="4bb23-395">The stream containing the XML data.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-396">指定是否要載入基底 URI 和行資訊的 <see cref="T:System.Xml.Linq.LoadOptions" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-396">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="4bb23-397">使用指定的資料流建立新的 <see cref="T:System.Xml.Linq.XElement" /> 執行個體，並選擇性地保留空白字元、設定基底 URI，以及保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-397">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="4bb23-398"><see cref="T:System.Xml.Linq.XElement" /> 物件，用於建立資料流包含的資料。</span><span class="sxs-lookup"><span data-stu-id="4bb23-398">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-399">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-399">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-400">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-400">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="4bb23-401">如果您需要修改<xref:System.Xml.XmlReaderSettings>，遵循下列步驟：</span><span class="sxs-lookup"><span data-stu-id="4bb23-401">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="4bb23-402">建立<xref:System.Xml.XmlReader>藉由呼叫其中一個<xref:System.Xml.XmlReader.Create%2A>多載會採用<xref:System.Xml.XmlReaderSettings>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-402">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="4bb23-403">傳遞<xref:System.Xml.XmlReader>的其中一個<xref:System.Xml.Linq.XElement>的<xref:System.Xml.Linq.XElement.Load%2A>多載<xref:System.Xml.XmlReader>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-403">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (textReader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="4bb23-404"><see cref="T:System.IO.TextReader" />，將從中讀取 <see cref="T:System.Xml.Linq.XElement" /> 內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-404">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-405"><see cref="T:System.Xml.Linq.LoadOptions" />，其指定泛空白字元 (White Space) 的行為，以及是否要載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-405">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="4bb23-406">從 <see cref="T:System.Xml.Linq.XElement" /> 載入 <see cref="T:System.IO.TextReader" />，並選擇性地保留泛空白字元和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-406">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="4bb23-407"><see cref="T:System.Xml.Linq.XElement" />，包含從指定之 <see cref="T:System.IO.TextReader" /> 讀取的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-407">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-408">如果來源的 XML 縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`造成讀取器讀取來源 XML 中的所有泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-408">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="4bb23-409">類型的節點<xref:System.Xml.Linq.XText>會針對顯著與不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-409">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-410">如果來源 XML 縮排，則未設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`會導致要忽略所有來源 XML 中不顯著泛空白字元的讀取器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-410">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="4bb23-411">沒有任何文字節點，如不顯著泛空白字元，會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-411">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-412">如果來源 XML 不會縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="4bb23-412">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="4bb23-413">顯著泛空白字元仍會保留下來，並沒有有效的空白字元會導致更多的泛空白字元文字節點建立的合併。</span><span class="sxs-lookup"><span data-stu-id="4bb23-413">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="4bb23-414">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-414">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="4bb23-415">使用<xref:System.Xml.Linq.XElement.Parse%2A>來建立<xref:System.Xml.Linq.XElement>從包含 XML 的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-415">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="4bb23-416">設定<xref:System.Xml.Linq.LoadOptions.SetBaseUri>不會影響從載入時<xref:System.IO.TextReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-416">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="4bb23-417">如果您將會對效能帶來負面影響<xref:System.Xml.Linq.LoadOptions.SetLineInfo>旗標。</span><span class="sxs-lookup"><span data-stu-id="4bb23-417">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="4bb23-418">程式行資訊正確無誤之後立即載入 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-418">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="4bb23-419">如果您修改 XML 樹狀結構之後載入文件時，則可能無意義的行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-419">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="4bb23-420">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-420">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-421">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-421">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-422">下列範例會載入<xref:System.Xml.Linq.XElement>從<xref:System.IO.StringReader>方式有兩種： 保留空白字元，並不保留空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-422">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="4bb23-423">然後，它會使用查詢來判斷產生的 XML 樹狀結構中的泛空白字元節點的數目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-423">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="4bb23-424">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-424">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="4bb23-425">下列範例會載入程式行資訊，因為它會從載入<xref:System.IO.TextReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-425">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="4bb23-426">接著，它會列印行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-426">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="4bb23-427">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-427">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-428">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-428">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (uri, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="4bb23-429">URI 字串，參照要載入到 <see cref="T:System.Xml.Linq.XElement" /> 的檔案。</span><span class="sxs-lookup"><span data-stu-id="4bb23-429">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-430"><see cref="T:System.Xml.Linq.LoadOptions" />，其指定泛空白字元 (White Space) 的行為，以及是否要載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-430">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="4bb23-431">從檔案載入 <see cref="T:System.Xml.Linq.XElement" />，並選擇性地保留泛空白字元、設定基底 URI，以及保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-431">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="4bb23-432"><see cref="T:System.Xml.Linq.XElement" />，包含指定之檔案的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-432">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-433">如果來源的 XML 縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`造成讀取器讀取來源 XML 中的所有泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-433">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="4bb23-434">類型的節點<xref:System.Xml.Linq.XText>會針對顯著與不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-434">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-435">如果來源 XML 縮排，則未設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`會導致要忽略所有來源 XML 中不顯著泛空白字元的讀取器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-435">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="4bb23-436">沒有任何文字節點，如不顯著泛空白字元，會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-436">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-437">如果來源 XML 不會縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="4bb23-437">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="4bb23-438">顯著泛空白字元仍會保留下來，並沒有有效的空白字元會導致更多的泛空白字元文字節點建立的合併。</span><span class="sxs-lookup"><span data-stu-id="4bb23-438">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="4bb23-439">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-439">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="4bb23-440">使用<xref:System.Xml.Linq.XElement.Parse%2A>來建立<xref:System.Xml.Linq.XElement>從包含 XML 的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-440">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="4bb23-441">如果您將會對效能帶來負面影響<xref:System.Xml.Linq.LoadOptions.SetBaseUri>而<xref:System.Xml.Linq.LoadOptions.SetLineInfo>旗標。</span><span class="sxs-lookup"><span data-stu-id="4bb23-441">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="4bb23-442">之後立即載入 XML 文件中的基底 URI 和行資訊的精確度。</span><span class="sxs-lookup"><span data-stu-id="4bb23-442">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="4bb23-443">如果您修改 XML 樹狀結構之後載入文件時，則可能無意義的基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-443">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="4bb23-444">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-444">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-445">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-445">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-446">下列範例會載入<xref:System.Xml.Linq.XElement>從兩個不同的方式中的檔案： 保留空白字元，並不保留空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-446">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="4bb23-447">然後，它會使用查詢來判斷產生的 XML 樹狀結構中的泛空白字元節點的數目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-447">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="4bb23-448">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-448">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="4bb23-449">下列範例會在載入檔案載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-449">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="4bb23-450">接著，它會列印的基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-450">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="4bb23-451">此範例會使用下列資源檔：[XML 範例檔：典型訂購單 (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-451">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](https://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="4bb23-452">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-452">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-453">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-453">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Load (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4bb23-454"><see cref="T:System.Xml.XmlReader" />，將從中讀取 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-454">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-455"><see cref="T:System.Xml.Linq.LoadOptions" />，其指定泛空白字元 (White Space) 的行為，以及是否要載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-455">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="4bb23-456">從 <see cref="T:System.Xml.Linq.XElement" /> 載入 <see cref="T:System.Xml.XmlReader" />，並選擇性地保留泛空白字元、設定基底 URI，以及保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-456">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="4bb23-457"><see cref="T:System.Xml.Linq.XElement" />，包含從指定之 <see cref="T:System.Xml.XmlReader" /> 讀取的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-457">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-458">藉由建立<xref:System.Xml.XmlNodeReader>從 DOM 文件，接著再使用<xref:System.Xml.XmlNodeReader>建立<xref:System.Xml.Linq.XElement>，這個方法可用來建立 LINQ to XML 樹狀結構中的 DOM 文件的複本。</span><span class="sxs-lookup"><span data-stu-id="4bb23-458">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-459">使用<xref:System.Xml.Linq.XElement.Parse%2A>來建立<xref:System.Xml.Linq.XElement>從包含 XML 的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-459">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="4bb23-460">設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>無效，從載入時<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-460">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-461"><xref:System.Xml.XmlReader>或不會設定為其中一個讀取的空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-461">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="4bb23-462">LINQ to XML 樹狀結構會填入泛空白字元節點的讀取器介面。</span><span class="sxs-lookup"><span data-stu-id="4bb23-462">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="4bb23-463">這是不論是否行為<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>或未設定。</span><span class="sxs-lookup"><span data-stu-id="4bb23-463">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="4bb23-464"><xref:System.Xml.XmlReader>或不可能有有效的基底 URI。</span><span class="sxs-lookup"><span data-stu-id="4bb23-464">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="4bb23-465">如果您設定<xref:System.Xml.Linq.LoadOptions.SetBaseUri>，將 XML 樹狀結構中設定 URI，從所報告的基底 URI 的基底<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-465">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="4bb23-466"><xref:System.Xml.XmlReader>或不可能有有效的行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-466">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="4bb23-467">如果您設定<xref:System.Xml.Linq.LoadOptions.SetLineInfo>，會由所報告的行資訊從 XML 樹狀結構中設定行資訊<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-467">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="4bb23-468">如果您將會對效能帶來負面影響<xref:System.Xml.Linq.LoadOptions.SetLineInfo>旗標。</span><span class="sxs-lookup"><span data-stu-id="4bb23-468">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="4bb23-469">程式行資訊正確無誤之後立即載入 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-469">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="4bb23-470">如果您修改 XML 樹狀結構之後載入文件時，則可能無意義的行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-470">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="4bb23-471">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-471">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-472">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-472">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-473">下列範例會載入它會從載入的行資訊<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-473">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-474">接著，它會列印行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-474">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="4bb23-475">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-475">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-476">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-476">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.Stream * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.IO.TextReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (textReader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member LoadAsync : System.Xml.XmlReader * System.Xml.Linq.LoadOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.XElement.LoadAsync (reader, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : System.Xml.Linq.XName with get, set" Usage="System.Xml.Linq.XElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-477">取得或設定這個項目的名稱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-477">Gets or sets the name of this element.</span></span></summary>
        <value><span data-ttu-id="4bb23-478">包含這個項目之名稱的 <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-478">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-479">設定這個屬性將會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-479">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-480">下列範例會使用這個屬性來判斷項目的名稱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-480">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="4bb23-481">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-481">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-482">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-482">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XElement.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-483">取得此節點的節點類型。</span><span class="sxs-lookup"><span data-stu-id="4bb23-483">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="4bb23-484">節點類型。</span><span class="sxs-lookup"><span data-stu-id="4bb23-484">The node type.</span></span> <span data-ttu-id="4bb23-485">對於 <see cref="T:System.Xml.Linq.XElement" /> 物件，此值為 <see cref="F:System.Xml.XmlNodeType.Element" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-485">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-486">因為所有的類別，衍生自<xref:System.Xml.Linq.XObject>包含<xref:System.Xml.Linq.XObject.NodeType%2A>屬性，您可以撰寫程式碼的運作方式的具體子類別集合<xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-486">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="4bb23-487">集合中每個節點的節點類型可以然後測試您的程式碼。</span><span class="sxs-lookup"><span data-stu-id="4bb23-487">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-488">下列範例會使用這個屬性，若要列印的項目節點型別。</span><span class="sxs-lookup"><span data-stu-id="4bb23-488">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="4bb23-489">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-489">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-490">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-490">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; bool" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-491">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-491">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-492">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-492">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-493"><see cref="T:System.Boolean" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-493">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-494">當轉換成<xref:System.Boolean>屬性或項目，從允許的值為"0"、"1"，與任何字串，會產生"true"或"false"修剪並轉換成小寫之後。</span><span class="sxs-lookup"><span data-stu-id="4bb23-494">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-495">下列範例會建立一些項目，使用布林值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-495">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="4bb23-496">然後將轉換它們<xref:System.Boolean>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-496">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="4bb23-497">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-497">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-498">項目不包含有效的 <see cref="T:System.Boolean" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-498">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-499"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-499">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-500">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-500">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; DateTime" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-501">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-501">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-502">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-502">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-503"><see cref="T:System.DateTime" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-503">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-504">屬性或元素，其中包含日期和時間內容的值空間是與密切相關的日期和時間以 ISO 8601 所述。</span><span class="sxs-lookup"><span data-stu-id="4bb23-504">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="4bb23-505">建立屬性或元素，其中包含日期和時間內容時，屬性或項目值的格式依據 W3C 規格中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-505">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="4bb23-506">W3C 規格，如需詳細資訊，請參閱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-506">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="4bb23-507">轉換成時，行為是 lax<xref:System.DateTime>從屬性或項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-507">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="4bb23-508">即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-508">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="4bb23-509">使用此轉換運算子<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>將從<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-509">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="4bb23-510">下列範例會建立具有日期和時間內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-510">The following example creates an element with date and time content.</span></span> <span data-ttu-id="4bb23-511">它接著將它轉換成<xref:System.DateTime>來擷取值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-511">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="4bb23-512">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-512">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-513">項目不包含有效的 <see cref="T:System.DateTime" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-513">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-514"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-514">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-515">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-515">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; DateTimeOffset" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-516">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-516">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-517">將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-517">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-518"><see cref="T:System.DateTimeOffset" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-518">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-519">此轉換運算子會使用<xref:System.Xml.XmlConvert>類別來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="4bb23-519">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="4bb23-520">下列範例會建立具有日期和時間內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-520">The following example creates an element with date and time content.</span></span> <span data-ttu-id="4bb23-521">然後將轉換成<xref:System.DateTimeOffset>來擷取值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-521">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="4bb23-522">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-522">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-523">項目不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-523">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-524"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-524">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-525">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-525">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; decimal" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-526">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-527">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-528"><see cref="T:System.Decimal" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-528">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-529">下列範例會建立項目，具有十進位值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-529">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="4bb23-530">它接著會擷取屬性的值轉換為<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-530">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="4bb23-531">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-531">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-532">項目不包含有效的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-532">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-533"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-533">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-534">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-534">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; double" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-535">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-535">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-536">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-536">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-537"><see cref="T:System.Double" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-537">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="4bb23-538">下列範例會建立具有屬性`double`內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-538">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="4bb23-539">它接著擷取值轉換為<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-539">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-540">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-540">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-541">項目不包含有效的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-541">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-542"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-542">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-543">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-543">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Guid" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-544">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-544">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-545">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-545">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-546"><see cref="T:System.Guid" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-546">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-547">下列範例會建立 guid 的項目，做為內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-547">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="4bb23-548">它接著擷取值轉換為<xref:System.Guid>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-548">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-549">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-549">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-550">項目不包含有效的 <see cref="T:System.Guid" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-550">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-551"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-551">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-552">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-552">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; int" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-553">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-553">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-554">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-554">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-555"><see cref="T:System.Int32" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-555">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-556">下列範例會建立具有整數內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-556">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="4bb23-557">它接著擷取值轉換為<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-557">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-558">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-558">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-559">項目不包含有效的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-559">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-560"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-560">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-561">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-561">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; int64" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-562">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-563">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-564"><see cref="T:System.Int64" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-564">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-565">下列範例會建立具有長整數內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-565">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="4bb23-566">它接著會擷取元素的值轉換為<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-566">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-567">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-567">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-568">項目不包含有效的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-568">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-569"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-569">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-570">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-570">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;bool&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-571"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-571">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-572">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-572">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-573"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-573">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-574">當轉換成<xref:System.Nullable%601>的<xref:System.Boolean>屬性或項目，從允許的值為"0"、"1"，與任何字串，會產生"true"或"false"修剪並轉換成小寫之後。</span><span class="sxs-lookup"><span data-stu-id="4bb23-574">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-575">下列範例會建立項目，則為 true 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-575">The following example creates an element with boolean content.</span></span> <span data-ttu-id="4bb23-576">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Boolean>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-576">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-577">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-577">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-578">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Boolean" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-578">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-579">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-579">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;DateTime&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-580"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-580">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-581">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-581">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-582"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-582">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-583">屬性或元素，其中包含日期和時間內容的值空間是與密切相關的日期和時間以 ISO 8601 所述。</span><span class="sxs-lookup"><span data-stu-id="4bb23-583">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="4bb23-584">建立屬性或元素，其中包含日期和時間內容時，屬性或項目值的格式依據 W3C 規格中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-584">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="4bb23-585">W3C 規格，如需詳細資訊，請參閱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-585">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="4bb23-586">轉換成時的行為是 lax<xref:System.Nullable%601>的<xref:System.DateTime>從屬性或項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-586">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="4bb23-587">即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.Nullable%601>的<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-587">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="4bb23-588">使用此轉換運算子<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>將從<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-588">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-589">下列範例會建立具有日期和時間內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-589">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="4bb23-590">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.DateTime>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-590">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-591">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-591">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-592">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.DateTime" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-592">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-593">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-593">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;DateTimeOffset&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-594"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-594">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-595">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-595">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-596"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-596">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-597">此轉換運算子會使用<xref:System.Xml.XmlConvert>類別來執行轉換。</span><span class="sxs-lookup"><span data-stu-id="4bb23-597">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-598">下列範例會建立具有日期和時間內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-598">The following example creates an element with date and time content.</span></span> <span data-ttu-id="4bb23-599">然後將轉換成<xref:System.Nullable%601>的<xref:System.DateTimeOffset>來擷取值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-599">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="4bb23-600">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-600">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-601">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-601">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-602">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-602">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;decimal&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-603"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-603">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-604">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-604">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-605"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-605">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-606">下列範例會建立項目，以十進位的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-606">The following example creates an element with decimal content.</span></span> <span data-ttu-id="4bb23-607">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-607">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-608">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-608">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-609">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Decimal" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-609">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-610">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-610">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;double&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-611"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-611">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-612">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-612">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-613"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-613">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-614">下列範例會建立使用雙精確度浮點內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-614">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="4bb23-615">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-615">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-616">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-616">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-617">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-617">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-618">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-618">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;Guid&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-619"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-619">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-620">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-620">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-621"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-621">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-622">下列範例會建立 guid 內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-622">The following example creates an element with guid content.</span></span> <span data-ttu-id="4bb23-623">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Guid>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-623">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-624">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-624">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-625">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Guid" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-625">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-626">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-626">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;int&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-627"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-627">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-628">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-628">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-629"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-629">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-630">下列範例會建立具有不帶正負號的整數內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-630">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="4bb23-631">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-631">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="4bb23-632">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-632">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-633">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Int32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-633">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-634">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-634">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;int64&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-635"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-635">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-636">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-636">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-637"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-637">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-638">下列範例會建立項目具有長整數內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-638">The following example creates an element with long integer content.</span></span> <span data-ttu-id="4bb23-639">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-639">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-640">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-640">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-641">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Int64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-641">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-642">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-642">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;single&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-643"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-643">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-644">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-644">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-645"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-645">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-646">下列範例會建立具有單精度浮點內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-646">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="4bb23-647">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-647">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-648">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-648">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-649">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-649">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-650">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-650">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-651"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-652">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-653"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-653">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-654">屬性或元素，其中包含時間範圍內容的值空間被密切期間內容以 ISO 8601 所述。</span><span class="sxs-lookup"><span data-stu-id="4bb23-654">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="4bb23-655">建立屬性或元素，其中包含時間範圍的內容時，屬性或項目值的格式依據 W3C 規格中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-655">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="4bb23-656">請 W3C 規格，如需詳細資訊，參閱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-656">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="4bb23-657">轉換成時，行為是 lax<xref:System.Nullable%601>的<xref:System.TimeSpan>從屬性或項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-657">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="4bb23-658">即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.Nullable%601>的<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-658">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-659">下列範例會建立具有時間範圍內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-659">The following example creates an element with time span content.</span></span> <span data-ttu-id="4bb23-660">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-660">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-661">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-661">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-662">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-662">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-663">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-663">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;uint32&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-664"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-664">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-665">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-665">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-666"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-666">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-667">下列範例會建立具有不帶正負號的整數內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-667">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="4bb23-668">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.UInt32>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-668">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-669">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-669">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-670">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.UInt32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-670">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-671">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-671">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; Nullable&lt;uint64&gt;" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-672"><see cref="T:System.Xml.Linq.XElement" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-672">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-673">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-673">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-674"><see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-674">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-675">下列範例會建立具有不帶正負號的長整數內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-675">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="4bb23-676">它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-676">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="4bb23-677">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-677">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-678">元素不是 <see langword="null" /> 且不包含有效的 <see cref="T:System.UInt64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-678">The element is not <see langword="null" /> and does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-679">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-679">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; single" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-680">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-680">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-681">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-681">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-682"><see cref="T:System.Single" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-682">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-683">下列範例會建立具有單精度浮點內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-683">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="4bb23-684">它接著擷取值轉換為<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-684">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-685">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-685">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-686">項目不包含有效的 <see cref="T:System.Single" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-686">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-687"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-687">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-688">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-688">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; string" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-689">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-689">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-690">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-690">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-691"><see cref="T:System.String" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-691">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-692">如果<xref:System.Xml.Linq.XElement>子系，會傳回所有項目的文字與子系的串連的字串值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-692">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="4bb23-693">下列範例會建立字串內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-693">The following example creates an element with string content.</span></span> <span data-ttu-id="4bb23-694">它接著擷取值轉換為<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-694">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="4bb23-695">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-695">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-696">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-696">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; TimeSpan" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-697">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-697">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-698">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-698">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-699"><see cref="T:System.TimeSpan" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-699">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-700">屬性或元素，其中包含時間範圍內容的值空間被密切期間內容以 ISO 8601 所述。</span><span class="sxs-lookup"><span data-stu-id="4bb23-700">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="4bb23-701">建立屬性或元素，其中包含時間範圍的內容時，屬性或項目值的格式依據 W3C 規格中。</span><span class="sxs-lookup"><span data-stu-id="4bb23-701">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="4bb23-702">請 W3C 規格，如需詳細資訊，參閱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-702">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="4bb23-703">轉換成時，行為是 lax<xref:System.TimeSpan>從屬性或項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-703">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="4bb23-704">即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-704">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="4bb23-705">下列範例會建立具有時間範圍內容項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-705">The following example creates an element with time span content.</span></span> <span data-ttu-id="4bb23-706">它接著擷取值轉換為<xref:System.TimeSpan>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-706">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-707">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-707">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-708">項目不包含有效的 <see cref="T:System.TimeSpan" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-708">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-709"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-709">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-710">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-710">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; uint32" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-711">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-711">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-712">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-712">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-713"><see cref="T:System.UInt32" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-713">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="4bb23-714">下列範例會建立具有不帶正負號的整數內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-714">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="4bb23-715">它接著擷取值轉換為<xref:System.UInt32>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-715">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-716">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-716">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-717">項目不包含有效的 <see cref="T:System.UInt32" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-717">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-718"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-718">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-719">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-719">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XElement -&gt; uint64" Usage="System.Xml.Linq.XElement.op_Explicit element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="4bb23-720">要轉型為 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-720">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="4bb23-721">將此 <see cref="T:System.Xml.Linq.XElement" /> 的值轉型為 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-721">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="4bb23-722"><see cref="T:System.UInt64" />，包含這個 <see cref="T:System.Xml.Linq.XElement" /> 的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-722">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="4bb23-723">下列範例會建立具有不帶正負號的長整數內容的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-723">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="4bb23-724">它接著擷取值轉換為<xref:System.UInt64>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-724">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="4bb23-725">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-725">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="4bb23-726">項目不包含有效的 <see cref="T:System.UInt64" /> 值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-726">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-727"><paramref name="element" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-727">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-728">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-728">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-729">從包含 XML 的字串載入 <see cref="T:System.Xml.Linq.XElement" />，並選擇性地保留泛空白字元和程式行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-729">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-730">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-730">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Parse text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="4bb23-731"><see cref="T:System.String" />，包含 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-731">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <summary><span data-ttu-id="4bb23-732">從包含 XML 的字串載入 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-732">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span></span></summary>
        <returns><span data-ttu-id="4bb23-733">從包含 XML 的字串填入的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-733">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-734">這個方法不會保留泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-734">This method does not preserve white space.</span></span> <span data-ttu-id="4bb23-735">如果您想要保留 XML 樹狀結構中的泛空白字元，使用的多載<xref:System.Xml.Linq.XElement.Parse%2A>採用方法<xref:System.Xml.Linq.LoadOptions>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-735">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="4bb23-736">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-736">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="4bb23-737">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-737">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-738">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-738">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-739">下列範例會建立包含 XML 的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-739">The following example creates a string that contains XML.</span></span> <span data-ttu-id="4bb23-740">然後它會剖析字串<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-740">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4bb23-741">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-742">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-742">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Xml.Linq.LoadOptions -&gt; System.Xml.Linq.XElement" Usage="System.Xml.Linq.XElement.Parse (text, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="4bb23-743"><see cref="T:System.String" />，包含 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-743">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-744"><see cref="T:System.Xml.Linq.LoadOptions" />，其指定泛空白字元 (White Space) 的行為，以及是否要載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-744">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="4bb23-745">從包含 XML 的字串載入 <see cref="T:System.Xml.Linq.XElement" />，並選擇性地保留泛空白字元和程式行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-745">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="4bb23-746">從包含 XML 的字串填入的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-746">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-747">如果來源的 XML 縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`造成讀取器讀取來源 XML 中的所有泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-747">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="4bb23-748">類型的節點<xref:System.Xml.Linq.XText>會針對顯著與不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-748">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-749">如果來源 XML 縮排，則未設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`會導致要忽略所有來源 XML 中不顯著泛空白字元的讀取器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-749">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="4bb23-750">沒有任何文字節點，如不顯著泛空白字元，會建立 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-750">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="4bb23-751">如果來源 XML 不會縮排，則設定<xref:System.Xml.Linq.LoadOptions.PreserveWhitespace>加上旗標在`options`沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="4bb23-751">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="4bb23-752">顯著泛空白字元仍會保留下來，並沒有有效的空白字元會導致更多的泛空白字元文字節點建立的合併。</span><span class="sxs-lookup"><span data-stu-id="4bb23-752">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="4bb23-753">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-753">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="4bb23-754">設定<xref:System.Xml.Linq.LoadOptions.SetBaseUri>不會影響剖析來自時<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-754">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="4bb23-755"><xref:System.Xml.XmlReader>或不可能有有效的行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-755">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="4bb23-756">如果您設定<xref:System.Xml.Linq.LoadOptions.SetLineInfo>，會由所報告的行資訊從 XML 樹狀結構中設定行資訊<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-756">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="4bb23-757">如果您將會對效能帶來負面影響<xref:System.Xml.Linq.LoadOptions.SetLineInfo>旗標。</span><span class="sxs-lookup"><span data-stu-id="4bb23-757">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="4bb23-758">程式行資訊正確無誤之後立即載入 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-758">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="4bb23-759">如果您修改 XML 樹狀結構之後載入文件時，則可能無意義的行資訊。</span><span class="sxs-lookup"><span data-stu-id="4bb23-759">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="4bb23-760">LINQ 到 XML 的載入功能會根據<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-760">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="4bb23-761">因此，您可能會攔截所擲回任何例外狀況<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>多載的方法和<xref:System.Xml.XmlReader>方法來讀取和剖析文件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-761">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-762">下列範例將字串剖析成<xref:System.Xml.Linq.XElement>方式有兩種： 保留空白字元，並不保留空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-762">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="4bb23-763">然後，它會使用查詢來判斷產生的 XML 樹狀結構中的泛空白字元節點的數目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-763">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="4bb23-764">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-764">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="4bb23-765">下列範例會保留行資訊，因為它會將字串剖析。</span><span class="sxs-lookup"><span data-stu-id="4bb23-765">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="4bb23-766">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-766">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-767">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-767">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : unit -&gt; unit" Usage="xElement.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-768">從這個 <see cref="T:System.Xml.Linq.XElement" /> 移除節點及屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-768">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-769">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-769">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-770">下列範例會建立項目與屬性和子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-770">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="4bb23-771">然後，它會呼叫這個方法，以移除屬性和子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-771">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-772">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-772">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-773">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-773">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberSignature Language="F#" Value="member this.RemoveAttributes : unit -&gt; unit" Usage="xElement.RemoveAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-774">移除這個 <see cref="T:System.Xml.Linq.XElement" /> 的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-774">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-775">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-775">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-776">下列範例會建立項目與屬性和子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-776">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="4bb23-777">然後，它會呼叫這個方法，以移除的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-777">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="4bb23-778">保留子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-778">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-779">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-779">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-780">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-780">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-781">以指定的內容取代這個項目的子節點和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-781">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-782">這個方法會使用快照集語意-也就是以新的內容取代目前項目的內容之前建立另一份新的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-782">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="4bb23-783">這表示您可以用來查詢目前項目的內容，並使用查詢的結果做為指定的新內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-783">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="4bb23-784">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-784">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-785">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-785">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-786">下列範例會將 LINQ 查詢的結果傳遞至這個方法，以查詢結果取代項目的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-786">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="4bb23-787">它會查詢已取代其內容的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-787">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="4bb23-788">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-788">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-789">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-789">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAll : obj -&gt; unit" Usage="xElement.ReplaceAll content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="4bb23-790">將取代這個項目之子節點及屬性的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-790">The content that will replace the child nodes and attributes of this element.</span></span></param>
        <summary><span data-ttu-id="4bb23-791">以指定的內容取代這個項目的子節點和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-791">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-792">這個方法會先移除現有的內容和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-792">This method first removes existing content and attributes.</span></span> <span data-ttu-id="4bb23-793">接著它會加入指定`content`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-793">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="4bb23-794">這個方法會使用快照集語意-也就是以新的內容取代目前項目的內容之前建立另一份新的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-794">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="4bb23-795">這表示您可以用來查詢目前項目的內容，並使用查詢的結果做為指定的新內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-795">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="4bb23-796">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-796">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-797">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-797">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-798">下列範例會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="4bb23-798">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-799">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-799">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-800">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-800">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAll : obj[] -&gt; unit" Usage="xElement.ReplaceAll content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="4bb23-801">內容物件的參數清單。</span><span class="sxs-lookup"><span data-stu-id="4bb23-801">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="4bb23-802">以指定的內容取代這個項目的子節點和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-802">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-803">這個方法會先移除現有的內容和屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-803">This method first removes existing content and attributes.</span></span> <span data-ttu-id="4bb23-804">接著它會加入指定`content`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-804">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="4bb23-805">這個方法會使用快照集語意-也就是以新的內容取代目前項目的內容之前建立另一份新的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-805">This method uses snapshot semantics - that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="4bb23-806">這表示您可以用來查詢目前項目的內容，並使用查詢的結果做為指定的新內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-806">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="4bb23-807">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-807">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-808">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-808">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-809">下列範例會將 LINQ 查詢的結果傳遞至這個方法，以查詢結果取代項目的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-809">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-810">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-810">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-811">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-811">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-812">以指定的內容取代這個項目的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-812">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-813">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-813">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4bb23-814">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-814">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-815">下列範例會建立具有三個屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-815">The following example creates an element with three attributes.</span></span> <span data-ttu-id="4bb23-816">然後，它會使用此方法來取代所有的屬性項目的單一屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-816">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-817">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-817">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-818">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-818">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAttributes : obj -&gt; unit" Usage="xElement.ReplaceAttributes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="4bb23-819">將取代這個項目之屬性的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-819">The content that will replace the attributes of this element.</span></span></param>
        <summary><span data-ttu-id="4bb23-820">以指定的內容取代這個項目的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-820">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-821">這個方法會先移除現有的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-821">This method first removes existing attributes.</span></span> <span data-ttu-id="4bb23-822">接著它會加入指定`content`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-822">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="4bb23-823">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-823">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-824">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-824">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-825">下列範例會建立具有三個屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-825">The following example creates an element with three attributes.</span></span> <span data-ttu-id="4bb23-826">然後，它會使用此方法來取代所有的屬性項目的單一屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-826">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-827">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-827">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-828">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-828">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceAttributes : obj[] -&gt; unit" Usage="xElement.ReplaceAttributes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="4bb23-829">內容物件的參數清單。</span><span class="sxs-lookup"><span data-stu-id="4bb23-829">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="4bb23-830">以指定的內容取代這個項目的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-830">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-831">這個方法會先移除現有的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-831">This method first removes existing attributes.</span></span> <span data-ttu-id="4bb23-832">接著它會加入指定`content`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-832">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="4bb23-833">如需可以傳遞至此函式的有效內容的詳細資訊，請參閱[有效內容的 XElement 和 XDocument 物件](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-833">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="4bb23-834">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-834">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-835">下列範例會建立具有三個屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-835">The following example creates an element with three attributes.</span></span> <span data-ttu-id="4bb23-836">然後，它會取代屬性與其他屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-836">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-837">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-837">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-838">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-838">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4bb23-839">序列化這個項目的基礎 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="4bb23-839">Serialize this element's underlying XML tree.</span></span> <span data-ttu-id="4bb23-840">輸出可以儲存至 <see cref="T:System.Xml.XmlTextWriter" />、<see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-840">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span></span> <span data-ttu-id="4bb23-841">您也可以選擇停用格式化 (縮排)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-841">Optionally, formatting (indenting) can be disabled.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-842">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-842">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="xElement.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4bb23-843">這個 <see cref="T:System.Xml.Linq.XElement" /> 輸出的目的資料流。</span><span class="sxs-lookup"><span data-stu-id="4bb23-843">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <summary><span data-ttu-id="4bb23-844">將這個 <see cref="T:System.Xml.Linq.XElement" /> 輸出到指定的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-844">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-845">將縮排序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-845">The serialized XML will be indented.</span></span> <span data-ttu-id="4bb23-846">將移除所有無意義的空格，並將會加入額外的空白字元，如此會適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-846">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="4bb23-847">這個方法的行為是將不會保留不顯著泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-847">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="4bb23-848">如果您想要控制空白字元時，使用的多載<xref:System.Xml.Linq.XElement.Save%2A>採用<xref:System.Xml.Linq.SaveOptions>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-848">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="4bb23-849">使用<xref:System.Xml.Linq.SaveOptions.DisableFormatting>將未縮排的 XML 儲存選項。</span><span class="sxs-lookup"><span data-stu-id="4bb23-849">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="4bb23-850">這會導致要寫入所有泛空白字元的空白字元，XML 樹狀結構中所示的寫入器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-850">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-851">使用<xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces>選項，如果您想要移除重複的命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="4bb23-851">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="xElement.Save textWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="4bb23-852">向其中寫入 <see cref="T:System.IO.TextWriter" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-852">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="4bb23-853">將這個項目序列化成 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-853">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-854">將縮排序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-854">The serialized XML will be indented.</span></span> <span data-ttu-id="4bb23-855">將移除所有無意義的空格，並將會加入額外的空白字元，如此會適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-855">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="4bb23-856">這個方法的行為是將不會保留泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-856">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="4bb23-857">如果您想要控制空白字元時，使用的多載<xref:System.Xml.Linq.XElement.Save%2A>，可讓您指定<xref:System.Xml.Linq.SaveOptions>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-857">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="4bb23-858">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-858">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-859">下列範例會建立<xref:System.Xml.Linq.XElement>，儲存至文件<xref:System.IO.StringWriter>，然後列印至主控台的字串。</span><span class="sxs-lookup"><span data-stu-id="4bb23-859">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="4bb23-860">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-860">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-861">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-861">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="xElement.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="4bb23-862">包含檔案名稱的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-862">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <summary><span data-ttu-id="4bb23-863">將這個項目序列化成檔案。</span><span class="sxs-lookup"><span data-stu-id="4bb23-863">Serialize this element to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-864">將縮排序列化的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-864">The serialized XML will be indented.</span></span> <span data-ttu-id="4bb23-865">將移除所有無意義的空格，並將會加入額外的空白字元，如此會適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-865">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="4bb23-866">這個方法的行為是不顯著泛空白字元不會保留 XML 樹狀結構中的節點。</span><span class="sxs-lookup"><span data-stu-id="4bb23-866">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="4bb23-867">如果您想要控制空白字元時，使用的多載<xref:System.Xml.Linq.XElement.Save%2A>，可讓您指定<xref:System.Xml.Linq.SaveOptions>做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-867">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="4bb23-868">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-868">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-869">下列範例會建立<xref:System.Xml.Linq.XElement>，將文件儲存至檔案，然後會列印到主控台檔案。</span><span class="sxs-lookup"><span data-stu-id="4bb23-869">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="4bb23-870">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-870">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-871">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-871">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="xElement.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="4bb23-872">向其中寫入 <see cref="T:System.Xml.XmlWriter" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-872">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="4bb23-873">將這個項目序列化成 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-873">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4bb23-874">下列範例顯示如何將 <xref:System.Xml.Linq.XElement> 儲存為 <xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-874">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="4bb23-875">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-875">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-876">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-876">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (stream, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4bb23-877">這個 <see cref="T:System.Xml.Linq.XElement" /> 輸出的目的資料流。</span><span class="sxs-lookup"><span data-stu-id="4bb23-877">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-878">指定格式化行為的 <see cref="T:System.Xml.Linq.SaveOptions" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-878">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="4bb23-879">將這個 <see cref="T:System.Xml.Linq.XElement" /> 輸出至指定的 <see cref="T:System.IO.Stream" />，選擇性地指定格式化行為。</span><span class="sxs-lookup"><span data-stu-id="4bb23-879">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-880">依預設`options`設定為<xref:System.Xml.Linq.SaveOptions.None>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-880">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="4bb23-881">這個選項會移除所有多餘的不顯著泛空白字元，並新增適當的不顯著泛空白字元，以便適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-881">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="4bb23-882">如果您想要儲存不縮排的 XML，指定<xref:System.Xml.Linq.SaveOptions.DisableFormatting>旗標，以`options`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-882">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="4bb23-883">這會導致要寫入所有泛空白字元的空白字元，XML 樹狀結構中所示的寫入器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-883">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-884">使用<xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces>選項，如果您想要移除重複的命名空間宣告。</span><span class="sxs-lookup"><span data-stu-id="4bb23-884">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (textWriter, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="4bb23-885">做為 XML 之輸出目標的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-885">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-886">指定格式化行為的 <see cref="T:System.Xml.Linq.SaveOptions" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-886">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="4bb23-887">將這個項目序列化成 <see cref="T:System.IO.TextWriter" /> (可選擇是否停用格式設定)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-887">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-888">如果您想要儲存不縮排的 XML，指定<xref:System.Xml.Linq.SaveOptions.DisableFormatting>旗標，以`options`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-888">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="4bb23-889">這會導致要寫入所有泛空白字元的空白字元，XML 樹狀結構中所示的寫入器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-889">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-890">如果您想要儲存縮排的 XML，未指定<xref:System.Xml.Linq.SaveOptions.DisableFormatting>旗標，以`options`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-890">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="4bb23-891">這會移除所有多餘的不顯著泛空白字元，並新增適當的不顯著泛空白字元，以便適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-891">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="4bb23-892">這是預設行為，以及多載的行為<xref:System.Xml.Linq.XElement.Save%2A>方法不接受`options`做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-892">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="4bb23-893">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-893">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-894">下列範例會示範這個方法的兩種用途。</span><span class="sxs-lookup"><span data-stu-id="4bb23-894">The following example shows two uses of this method.</span></span> <span data-ttu-id="4bb23-895">第一次使用保留泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-895">The first use preserves white space.</span></span> <span data-ttu-id="4bb23-896">第二個序列化<xref:System.Xml.Linq.XElement>進行格式化。</span><span class="sxs-lookup"><span data-stu-id="4bb23-896">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="4bb23-897">因為文件不有任何泛空白字元所建構，保留泛空白字元輸出沒有任何縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-897">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="4bb23-898">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-898">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-899">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-899">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberSignature Language="F#" Value="member this.Save : string * System.Xml.Linq.SaveOptions -&gt; unit" Usage="xElement.Save (fileName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="4bb23-900">包含檔案名稱的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-900">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <param name="options"><span data-ttu-id="4bb23-901">指定格式化行為的 <see cref="T:System.Xml.Linq.SaveOptions" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-901">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="4bb23-902">將這個項目序列化成檔案 (可選擇是否停用格式設定)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-902">Serialize this element to a file, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-903">如果您想要儲存不縮排的 XML，指定<xref:System.Xml.Linq.SaveOptions.DisableFormatting>旗標，以`options`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-903">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="4bb23-904">這會導致要寫入所有泛空白字元的空白字元，XML 樹狀結構中所示的寫入器。</span><span class="sxs-lookup"><span data-stu-id="4bb23-904">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="4bb23-905">如果您想要儲存縮排的 XML，未指定<xref:System.Xml.Linq.SaveOptions.DisableFormatting>旗標，以`options`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-905">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="4bb23-906">這會移除所有多餘的不顯著泛空白字元，並新增適當的不顯著泛空白字元，以便適當地縮排的 XML。</span><span class="sxs-lookup"><span data-stu-id="4bb23-906">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="4bb23-907">這是預設行為，以及多載的行為<xref:System.Xml.Linq.XElement.Save%2A>方法不接受`options`做為參數。</span><span class="sxs-lookup"><span data-stu-id="4bb23-907">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="4bb23-908">如需詳細資訊，請參閱 <<c0> [ 載入或剖析 XML 時保留空白字元](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)並[保留泛空白字元序列化時](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-908">For more information, see [Preserving White Space while Loading or Parsing XML](https://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](https://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-909">下列範例會示範這個方法的兩種用途。</span><span class="sxs-lookup"><span data-stu-id="4bb23-909">The following example shows two uses of this method.</span></span> <span data-ttu-id="4bb23-910">第一次使用保留泛空白字元。</span><span class="sxs-lookup"><span data-stu-id="4bb23-910">The first use preserves white space.</span></span> <span data-ttu-id="4bb23-911">第二個序列化<xref:System.Xml.Linq.XElement>進行格式化。</span><span class="sxs-lookup"><span data-stu-id="4bb23-911">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="4bb23-912">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-912">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-913">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-913">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.Stream * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (stream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : System.IO.TextWriter * System.Xml.Linq.SaveOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.SaveAsync (textWriter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetAttributeValue : System.Xml.Linq.XName * obj -&gt; unit" Usage="xElement.SetAttributeValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-914"><see cref="T:System.Xml.Linq.XName" />，包含要變更之屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-914">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span></span></param>
        <param name="value"><span data-ttu-id="4bb23-915">要指派給屬性的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-915">The value to assign to the attribute.</span></span> <span data-ttu-id="4bb23-916">如果值為 <see langword="null" />，則會移除屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-916">The attribute is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="4bb23-917">否則，值會轉換為其字串表示並指派給屬性 (Attribute) 的 <see cref="P:System.Xml.Linq.XAttribute.Value" /> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-917">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span></span></param>
        <summary><span data-ttu-id="4bb23-918">設定屬性的值、加入屬性或移除屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-918">Sets the value of an attribute, adds an attribute, or removes an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-919">這個方法可讓您輕鬆維護名稱/值組的清單，為一組屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-919">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="4bb23-920">當維護的清單，您需要新增組、 修改組，或刪除組。</span><span class="sxs-lookup"><span data-stu-id="4bb23-920">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="4bb23-921">如果您呼叫這個方法，傳遞做為屬性的名稱不存在，這個方法會為您建立的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-921">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="4bb23-922">如果您呼叫這個方法傳遞現有屬性的名稱，這個方法會修改您指定的值屬性的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-922">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="4bb23-923">如果您傳遞`null`針對`value`，這個方法會移除屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-923">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="4bb23-924">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-924">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4bb23-925">將值指派至具有指定名稱的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-925">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="4bb23-926">如果具有指定名稱的屬性不存在，則會加入新的屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-926">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="4bb23-927">如果值為`null`，刪除具有指定之名稱的屬性如果有的話。</span><span class="sxs-lookup"><span data-stu-id="4bb23-927">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="4bb23-928">如需詳細資訊，請參閱 <<c0> [ 維護名稱/值組](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-928">For more information, see [Maintaining Name/Value Pairs](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-929">下列範例會建立具有屬性的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-929">The following example creates an element with an attribute.</span></span> <span data-ttu-id="4bb23-930">然後，它會使用這個方法取代屬性的內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-930">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-931">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-931">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bb23-932"><paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" /> 的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-932">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-933">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-933">LINQ to XML</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691"><span data-ttu-id="4bb23-934">維護名稱/值組</span><span class="sxs-lookup"><span data-stu-id="4bb23-934">Maintaining Name/Value Pairs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetElementValue : System.Xml.Linq.XName * obj -&gt; unit" Usage="xElement.SetElementValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4bb23-935"><see cref="T:System.Xml.Linq.XName" />，包含要變更之子項目的名稱。</span><span class="sxs-lookup"><span data-stu-id="4bb23-935">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span></span></param>
        <param name="value"><span data-ttu-id="4bb23-936">要指派給子項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-936">The value to assign to the child element.</span></span> <span data-ttu-id="4bb23-937">如果值為 <see langword="null" />，會移除子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-937">The child element is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="4bb23-938">否則，值會轉換為其字串表示並指派給子項目的 <see cref="P:System.Xml.Linq.XElement.Value" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-938">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span></span></param>
        <summary><span data-ttu-id="4bb23-939">設定子項目的值、加入子項目或移除子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-939">Sets the value of a child element, adds a child element, or removes a child element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-940">這個方法可讓您輕鬆維護名稱/值組的清單，為一組子系項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-940">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="4bb23-941">當維護的清單，您需要新增組、 修改組，或刪除組。</span><span class="sxs-lookup"><span data-stu-id="4bb23-941">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="4bb23-942">如果您呼叫此方法並不存在的名稱傳遞做為子項目，這個方法會為您建立的子元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-942">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="4bb23-943">如果您呼叫此方法並傳遞現有的子元素的名稱，這個方法會修改您指定的值之子項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-943">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="4bb23-944">如果您傳遞`null`針對`value`，這個方法會移除子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-944">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="4bb23-945">這個方法會引發事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-945">This method will raise events.</span></span>  
  
 <span data-ttu-id="4bb23-946">值會指派給具有指定名稱的第一個子元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-946">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="4bb23-947">如果沒有具有指定名稱的子項目存在，則會加入新的子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-947">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="4bb23-948">如果值為 null，第一個子項目具有指定名稱，如果有的話，會刪除。</span><span class="sxs-lookup"><span data-stu-id="4bb23-948">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="4bb23-949">這個方法不會將子節點或屬性加入指定的子項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-949">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="4bb23-950">此方法擲回例外狀況，如果任何物件，衍生自<xref:System.Xml.Linq.XObject>被當做`value`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-950">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="4bb23-951">如需詳細資訊，請參閱 <<c0> [ 維護名稱/值組](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-951">For more information, see [Maintaining Name/Value Pairs](https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-952">下列範例會建立包含子項目的項目。</span><span class="sxs-lookup"><span data-stu-id="4bb23-952">The following example creates an element with a child element.</span></span> <span data-ttu-id="4bb23-953">然後，它會使用這個方法來設定子項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-953">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-954">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-954">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bb23-955"><paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" /> 的執行個體。</span><span class="sxs-lookup"><span data-stu-id="4bb23-955">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-956">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-956">LINQ to XML</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691"><span data-ttu-id="4bb23-957">維護名稱/值組</span><span class="sxs-lookup"><span data-stu-id="4bb23-957">Maintaining Name/Value Pairs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj -&gt; unit" Usage="xElement.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4bb23-958">要指派給這個項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-958">The value to assign to this element.</span></span> <span data-ttu-id="4bb23-959">此值會轉換為其字串表示並指派給 <see cref="P:System.Xml.Linq.XElement.Value" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-959">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span></span></param>
        <summary><span data-ttu-id="4bb23-960">設定這個項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-960">Sets the value of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-961">這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-961">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4bb23-962">是無效的傳遞衍生自類別的執行個體<xref:System.Xml.Linq.XObject>，例如<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-962">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-963">下列範例會建立包含子元素的元素。</span><span class="sxs-lookup"><span data-stu-id="4bb23-963">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="4bb23-964">然後，它會設定使用此方法之項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-964">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="4bb23-965">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-965">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4bb23-966"><paramref name="value" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-966">The <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4bb23-967"><paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-967">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-968">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-968">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4bb23-969">取得 XML 結構描述定義，描述這個物件的 XML 表示。</span><span class="sxs-lookup"><span data-stu-id="4bb23-969">Gets an XML schema definition that describes the XML representation of this object.</span></span></summary>
        <returns><span data-ttu-id="4bb23-970"><see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</span><span class="sxs-lookup"><span data-stu-id="4bb23-970">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-971">這個方法是實作的<xref:System.Xml.Serialization.IXmlSerializable>介面。</span><span class="sxs-lookup"><span data-stu-id="4bb23-971">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="4bb23-972">這個方法是在內部用來序列化物件圖形包含 LINQ to XML 物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-972">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="4bb23-973">如需序列化物件圖形包含 LINQ to XML 物件的範例，請參閱 <<c0> [ 序列化物件圖形，包含 XElement 物件](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-973">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4bb23-974">物件從其中還原序列化的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-974">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="4bb23-975">從物件的 XML 表示產生該物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-975">Generates an object from its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-976">這個方法是實作的<xref:System.Xml.Serialization.IXmlSerializable>介面。</span><span class="sxs-lookup"><span data-stu-id="4bb23-976">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="4bb23-977">這個方法是在內部用來序列化物件圖形包含 LINQ to XML 物件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-977">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="4bb23-978">如需序列化物件圖形包含 LINQ to XML 物件的範例，請參閱 <<c0> [ 序列化物件圖形，包含 XElement 物件](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-978">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="4bb23-979">要序列化此物件至的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-979">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span></span></param>
        <summary><span data-ttu-id="4bb23-980">將物件轉換成其 XML 表示。</span><span class="sxs-lookup"><span data-stu-id="4bb23-980">Converts an object into its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-981">這個方法是在內部用來封送處理包含 LINQ to XML 物件的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="4bb23-981">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="4bb23-982">如需序列化物件圖形包含 LINQ to XML 物件的範例，請參閱 <<c0> [ 序列化物件圖形，包含 XElement 物件](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)。</span><span class="sxs-lookup"><span data-stu-id="4bb23-982">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](https://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Xml.Linq.XElement.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4bb23-983">取得或設定這個項目的串連文字內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-983">Gets or sets the concatenated text contents of this element.</span></span></summary>
        <value><span data-ttu-id="4bb23-984"><see cref="T:System.String" />，包含這個項目的所有文字內容。</span><span class="sxs-lookup"><span data-stu-id="4bb23-984">A <see cref="T:System.String" /> that contains all of the text content of this element.</span></span> <span data-ttu-id="4bb23-985">如果有多個文字節點，將會串連它們。</span><span class="sxs-lookup"><span data-stu-id="4bb23-985">If there are multiple text nodes, they will be concatenated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4bb23-986">您可以使用這個屬性，取得或設定項目的值。</span><span class="sxs-lookup"><span data-stu-id="4bb23-986">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="4bb23-987">設定這個屬性將會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。</span><span class="sxs-lookup"><span data-stu-id="4bb23-987">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="4bb23-988">如果您想要取得項目的值，但您不確定它是否存在，並使用明確轉換運算子，和指派項目為 null 的類型，例如更方便`string`或是<xref:System.Nullable%601>的<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-988">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="4bb23-989">如果項目不存在，可為 null 的型別會設定為`null`。</span><span class="sxs-lookup"><span data-stu-id="4bb23-989">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="4bb23-990">相反地，如果您想要使用這個屬性，您必須確定<xref:System.Xml.Linq.XContainer.Element%2A>方法沒有傳回`null`才能存取這個屬性。</span><span class="sxs-lookup"><span data-stu-id="4bb23-990">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4bb23-991">下列範例會使用這個屬性，以擷取具有混合內容項目的文字。</span><span class="sxs-lookup"><span data-stu-id="4bb23-991">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="4bb23-992">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-992">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-993">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-993">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Xml.XmlWriter -&gt; unit" Usage="xElement.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="4bb23-994">此方法將寫入其中的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-994">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="4bb23-995">將這個項目寫入至 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="4bb23-995">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4bb23-996">下列範例示範如何撰寫<xref:System.Xml.Linq.XElement>至<xref:System.Xml.XmlWriter>。</span><span class="sxs-lookup"><span data-stu-id="4bb23-996">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="4bb23-997">請注意，此範例不會撰寫 XML 宣告。</span><span class="sxs-lookup"><span data-stu-id="4bb23-997">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="4bb23-998">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="4bb23-998">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="4bb23-999">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="4bb23-999">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToAsync : System.Xml.XmlWriter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="xElement.WriteToAsync (writer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>