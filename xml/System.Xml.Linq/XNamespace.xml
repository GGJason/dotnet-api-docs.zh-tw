<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XNamespace.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f4e6daba021fcb83aea5f304b739a62766ac61e5a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e6daba021fcb83aea5f304b739a62766ac61e5a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XNamespace">
          <source>Represents an XML namespace.</source>
          <target state="translated">代表 XML 命名空間。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XNamespace">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This class represents the XML construct of namespaces.</source>
          <target state="translated">此類別代表命名空間的 XML 建構。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Every <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> contains an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">每個<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>包含<ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Even if an element is not in a namespace, the element's <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> still contains a namespace, <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">即使項目不在命名空間中，項目的 <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> 仍然會包含命名空間 <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">不保證 <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType&gt;</ph> 屬性為 <ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Creating an XNamespace Object</source>
          <target state="translated">建立 XNamespace 物件</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The most common way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is to simply assign a string to it.</source>
          <target state="translated">若要建立的最常見方式<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>物件是直接指派給它的字串。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>You can then combine the namespace with a local name by using the override of the addition operator.</source>
          <target state="translated">您可以結合命名空間與區域名稱使用加法運算子的覆寫。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example shows this idiom:</source>
          <target state="translated">下列範例會示範這個慣用語：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>However, in Visual Basic, you would typically declare a global default namespace, as follows:</source>
          <target state="translated">不過，在 Visual Basic 中，您就可以通常宣告全域預設命名空間，如下所示：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">若要將字串指定<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>會使用從隱含轉換<ph id="ph2">&lt;xref:System.String&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>See <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept> for more information and examples.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>How to： 建立文件與命名空間 (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>如需詳細資訊和範例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>See <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept> for more information on using namespaces in Visual Basic.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>在 Visual Basic (LINQ to XML) 中的命名空間<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>如需有關使用 Visual Basic 中的命名空間。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Controlling Namespace Prefixes</source>
          <target state="translated">控制命名空間前置詞</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</source>
          <target state="translated">如果您建立宣告命名空間的屬性，將會在序列化 xml 保存屬性中指定的前置詞。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>, and the name of the attribute is the namespace prefix.</source>
          <target state="translated">若要建立宣告具有特定前置詞之命名空間的屬性，您可以建立屬性，其中之屬性名稱的命名空間為 <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>，而屬性的名稱為命名空間前置詞。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The value of the attribute is the URI of the namespace.</source>
          <target state="translated">屬性的值為命名空間的 URI。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example shows this idiom:</source>
          <target state="translated">下列範例會示範這個慣用語：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</source>
          <target state="translated">在 Visual Basic 中，而不是建立命名空間節點，來控制命名空間前置詞，您通常會使用全域命名空間宣告：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Control Namespace Prefixes (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>如何： 控制命名空間前置詞 (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Creating a Default Namespace</source>
          <target state="translated">建立預設命名空間</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</source>
          <target state="translated">建構時的屬性，將會為命名空間，如果屬性名稱的特殊值為"xmlns"，然後序列化 XML 樹狀結構時，會將命名空間宣告為預設命名空間。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The special attribute with the name of "xmlns" itself is not in any namespace.</source>
          <target state="translated">特殊的屬性"xmlns"本身的名稱不在任何命名空間中。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The value of the attribute is the namespace URI.</source>
          <target state="translated">屬性的值是命名空間 URI。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</source>
          <target state="translated">下列範例會建立 XML 樹狀結構，其中包含一種命名空間將會變成預設命名空間中宣告的屬性：</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</source>
          <target state="translated">在 Visual Basic 中，而不是建立命名空間節點來建立預設命名空間中，您通常會使用全域預設命名空間宣告：</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>XNamespace Atomization</source>
          <target state="translated">XNamespace 不可部分完成</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects have exactly the same URI, they will share the same instance.</source>
          <target state="translated">系統保證 <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> 物件為不可部分完成的，也就是說，如果有兩個 <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> 物件擁有完全相同的 URI，將會共用相同的執行個體。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>The equality and comparison operators are provided explicitly for this purpose.</source>
          <target state="translated">針對此用途明確提供相等和比較運算子。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Using Expanded Names</source>
          <target state="translated">使用擴充的名稱</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Another way to specify a namespace and a local name is to use an expanded name in the form <ph id="ph1">`{namespace}name`</ph>:</source>
          <target state="translated">若要指定的命名空間和本機名稱的另一個方法是使用表單中的擴充的名稱<ph id="ph1">`{namespace}name`</ph>:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This approach has performance implications.</source>
          <target state="translated">這個方法會有效能隱含作用。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>Each time that you pass a string that contains an expanded name to <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, it must parse the name, find the atomized namespace, and find the atomized name.</source>
          <target state="translated">每次您將包含擴充名稱的字串傳遞到 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> 時，此方法必須剖析名稱、尋找不可部分完成的命名空間，然後尋找不可部分完成的名稱。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>This process takes CPU time.</source>
          <target state="translated">這個程序會使用 CPU 時間。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>If performance is important, you may want to use a different approach.</source>
          <target state="translated">如果效能是很重要，您可能想要使用不同的方式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XNamespace">
          <source>With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</source>
          <target state="translated">使用 Visual Basic 的建議的方法是使用 XML 常值，其中不包含擴充名稱使用。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">要與目前 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 比較的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">判斷指定的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 是否等於目前的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>，指示指定的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 是否與目前的 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 相等。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects to be equal, they must have the same URI.</source>
          <target state="translated">兩個<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>的物件等於，它們必須有相同的 URI。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>The following example compares two namespaces that refer to the same URI.</source>
          <target state="translated">下列範例會比較兩個參考相同 URI 的命名空間。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains a namespace URI.</source>
          <target state="translated">包含命名空間 URI 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for the specified Uniform Resource Identifier (URI).</source>
          <target state="translated">取得指定之統一資源識別元 (URI) 的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> created from the specified URI.</source>
          <target state="translated">從指定的 URI 建立的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</source>
          <target state="translated">傳回<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>保證物件是不可部分完成 （亦即，它位於系統中的該特定的 URI 是唯一一個）。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>The following example gets a <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> from a specified URI.</source>
          <target state="translated">下列範例會取得<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>從指定的 URI。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.Get(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">取得這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的雜湊碼。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>，其中包含 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的雜湊程式碼。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">這個方法會做為雜湊函式<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetHashCode">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph> in hashing algorithms and data structures like a hash table.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph>在雜湊演算法和資料結構，例如雜湊表中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains a local name.</source>
          <target state="translated">包含區域名稱的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object created from this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> and the specified local name.</source>
          <target state="translated">傳回從這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> 建立的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 物件，以及指定的區域名稱。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> created from this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> and the specified local name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>，它是透過這個 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 與指定的區域名稱建立的。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</source>
          <target state="translated">傳回<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>保證物件是不可部分完成 （亦即，它位於系統中的特定的擴充名稱是唯一一個）。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>The following example uses this property to retrieve an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">下列範例會使用這個屬性來擷取<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.GetName(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>Gets the Uniform Resource Identifier (URI) of this namespace.</source>
          <target state="translated">取得這個命名空間的統一資源識別元 (URI)。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the URI of the namespace.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>，其中包含命名空間的 URI。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>The following example shows how to use this property:</source>
          <target state="translated">下列範例會示範如何使用這個屬性：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.NamespaceName">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.None">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to no namespace.</source>
          <target state="translated">取得與無命名空間相對應的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to no namespace.</source>
          <target state="translated">與無命名空間相對應的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</source>
          <target state="translated">如果元素或屬性是在沒有命名空間，其命名空間會設定這個屬性所傳回的命名空間。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>The following example shows uses this property to determine which elements are in no namespace.</source>
          <target state="translated">下列範例會使用這個屬性來判斷哪些項目會在沒有命名空間中。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.None">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the namespace.</source>
          <target state="translated">包含命名空間的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the local name.</source>
          <target state="translated">包含區域名稱的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>Combines an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object with a local name to create an <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 物件與區域名稱結合在一起以建立 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> constructed from the namespace and local name.</source>
          <target state="translated">透過命名空間與區域名稱建構的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</source>
          <target state="translated">這個運算子可讓您結合的命名空間和本機名稱的元素或屬性的建構中的常見慣用句。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</source>
          <target state="translated">這個慣用語提供一些命名空間前置詞，就會有的優點在於，您可以參考使用短變數的命名空間。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This eliminates syntactic noise in the code that creates XML trees.</source>
          <target state="translated">這樣就不會建立 XML 樹狀結構的程式碼中的語法雜訊。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>The following example shows the use of the <ph id="ph1">`+`</ph> operator to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> from an <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a local name.</source>
          <target state="translated">下列範例示範使用<ph id="ph1">`+`</ph>運算子來建立<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>從<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和本機名稱。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>In Visual Basic, this is the preferred idiom:</source>
          <target state="translated">在 Visual Basic 中，這是慣用的慣用語：</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比較的第一個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比較的第二個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> are equal.</source>
          <target state="translated">傳回數值，指出 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的兩個執行個體是否相等。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>，指示 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 與 <ph id="ph3">&lt;paramref name="right" /&gt;</ph> 是否相等。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
          <target state="translated">運算子多載<ph id="ph1">`==`</ph>和<ph id="ph2">`!=`</ph>提供要啟用之間的比較<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字串 (例如， <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">在 C# 中預先定義的參考相等運算子需要一個運算元轉換成透過參考轉換，其他類型，而且不會考慮從字串隱含轉換<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The following example shows the comparison of an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string.</source>
          <target state="translated">下列範例示範的比較<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字串。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the namespace URI.</source>
          <target state="translated">包含命名空間 URI 的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>Converts a string containing a Uniform Resource Identifier (URI) to an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">將包含統一資源識別元 (URI) 的字串轉換為 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> constructed from the URI string.</source>
          <target state="translated">從 URI 字串建構的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>The following example shows the initialization of an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> variable by assigning a string to it.</source>
          <target state="translated">下列範例示範的初始化<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>變數字串指派給它。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比較的第一個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to compare.</source>
          <target state="translated">要比較的第二個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> are not equal.</source>
          <target state="translated">傳回值，這個值指出 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的兩個執行個體是否不相等。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that indicates whether <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>，指示 <ph id="ph2">&lt;paramref name="left" /&gt;</ph> 和 <ph id="ph3">&lt;paramref name="right" /&gt;</ph> 是否相等。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
          <target state="translated">運算子多載<ph id="ph1">`==`</ph>和<ph id="ph2">`!=`</ph>提供要啟用之間的比較<ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>和字串 (例如， <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>)。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
          <target state="translated">在 C# 中預先定義的參考相等運算子需要一個運算元轉換成透過參考轉換，其他類型，而且不會考慮從字串隱含轉換<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>The following example shows a comparison of a <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> to a string.</source>
          <target state="translated">下列範例顯示比較<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>為字串。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>Returns the URI of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的 URI。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>The URI of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 的 URI。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>The following example uses this method to print a namespace on the console.</source>
          <target state="translated">下列範例會使用這個方法，在主控台上列印的命名空間。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XNamespace.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to the XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">取得與 XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>) 相對應的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to the XML URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>對應至 XML 的 URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/c&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>Certain standardized attributes, such as <ph id="ph1">`space`</ph>, are in the <ph id="ph2">`http://www.w3.org/XML/1998/namespace`</ph> namespace.</source>
          <target state="translated">某些標準化屬性，例如<ph id="ph1">`space`</ph>，位於<ph id="ph2">`http://www.w3.org/XML/1998/namespace`</ph>命名空間。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
          <target state="translated">W3C 標準指定此命名空間不需要宣告為 XML 樹狀結構中的屬性。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
          <target state="translated">它是保留的命名空間，一律會自動出現在 XML 剖析器。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>The following example shows how to create an <ph id="ph1">`xml:space="preserve"`</ph> attribute in an XML tree:</source>
          <target state="translated">下列範例示範如何建立<ph id="ph1">`xml:space="preserve"`</ph>XML 樹狀中的屬性：</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xml">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> object that corresponds to the xmlns URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">取得與 xmlns URI (<bpt id="p1">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p1">&lt;/c&gt;</ept>) \(英文\) 相對應的 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that corresponds to the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> URI (<bpt id="p2">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p2">&lt;/c&gt;</ept>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>對應於<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> URI (<bpt id="p2">&lt;c&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p2">&lt;/c&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>When you declare namespaces, the namespace attributes themselves are in the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> namespace.</source>
          <target state="translated">當您宣告命名空間時，命名空間屬性本身都是<bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept>命名空間。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
          <target state="translated">W3C 標準指定此命名空間不需要宣告為 XML 樹狀結構中的屬性。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
          <target state="translated">它是保留的命名空間，一律會自動出現在 XML 剖析器。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The following example shows how to add a namespace to an XML tree.</source>
          <target state="translated">下列範例會示範如何將命名空間加入到 XML 樹狀結構。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>The namespace for the attribute that declares the namespace is the namespace returned by this property.</source>
          <target state="translated">屬性宣告的命名空間的命名空間是這個屬性所傳回的命名空間。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>In Visual Basic, the preferred idiom is:</source>
          <target state="translated">在 Visual Basic 中為慣用的慣用語：</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XNamespace.Xmlns">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>