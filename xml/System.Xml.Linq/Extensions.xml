<Type Name="Extensions" FullName="System.Xml.Linq.Extensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cec3c68a3a6e90e392b93c2384b1e8a56268f94" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51939638" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e33df-101">包含 LINQ to XML 擴充方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e33df-101">Contains the LINQ to XML extension methods.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-102">大部分[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]擴充方法是使用中的座標軸方法[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]查詢。</span><span class="sxs-lookup"><span data-stu-id="e33df-102">Most of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] extension methods are axis methods that are used in [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries.</span></span> <span data-ttu-id="e33df-103">此類別中的方法針對集合運作，並傳回集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-103">The methods in this class operate on collections and return collections.</span></span> <span data-ttu-id="e33df-104">這些方法會列舉來源集合、 在集合中，每個項目上呼叫適當的座標軸方法，並將結果串連。</span><span class="sxs-lookup"><span data-stu-id="e33df-104">These methods enumerate the source collection, call the appropriate axis method on each item in the collection, and concatenate the results.</span></span>  
  
 <span data-ttu-id="e33df-105">這兩個<xref:System.Xml.Linq.Extensions.Remove%2A>延伸方法並非座標軸方法，不過。</span><span class="sxs-lookup"><span data-stu-id="e33df-105">The two <xref:System.Xml.Linq.Extensions.Remove%2A> extension methods are not axis methods, however.</span></span> <span data-ttu-id="e33df-106">這些方法會移除屬性或節點從 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="e33df-106">These methods remove attributes or nodes from the XML tree.</span></span>  
  
 <span data-ttu-id="e33df-107">請注意，有另一個類別中實作的座標軸方法<xref:System.Xml.Linq.XElement>， <xref:System.Xml.Linq.XDocument>，和<xref:System.Xml.Linq.XNode>類別。</span><span class="sxs-lookup"><span data-stu-id="e33df-107">Note that there is another category of axis methods, implemented in the <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XDocument>, and <xref:System.Xml.Linq.XNode> classes.</span></span> <span data-ttu-id="e33df-108">這些其他的座標軸方法處理單一物件，並傳回的集合<xref:System.Xml.Linq.XElement>， <xref:System.Xml.Linq.XAttribute>，或<xref:System.Xml.Linq.XNode>物件。</span><span class="sxs-lookup"><span data-stu-id="e33df-108">These other axis methods operate on a single object, and return a collection of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XAttribute>, or <xref:System.Xml.Linq.XNode> objects.</span></span>  
  
 <span data-ttu-id="e33df-109">所有軸擴充方法使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-109">All of the axis extension methods use deferred execution.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="e33df-110">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="e33df-110">LINQ to XML</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/86ff2c9f-2ea1-43fc-bea3-6a9cc85f41ef">
      <span data-ttu-id="e33df-111">LINQ to XML 軸心方法</span>
      <span class="sxs-lookup">
        <span data-stu-id="e33df-111">LINQ to XML Axes</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c9b5ad2-dffc-47c4-a76f-a39815ecc7ec">
      <span data-ttu-id="e33df-112">從 XML 樹狀移除項目、屬性和節點</span>
      <span class="sxs-lookup">
        <span data-stu-id="e33df-112">Removing Elements, Attributes, and Nodes from an XML Tree</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/175ce3ff-9bbf-4e64-8421-faeb81a0bb51">
      <span data-ttu-id="e33df-113">擴充方法 (C# 程式設計手冊)</span>
      <span class="sxs-lookup">
        <span data-stu-id="e33df-113">Extension Methods (C# Programming Guide)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Ancestors&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-114">傳回包含來源集合中每個節點祖系的項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-114">Returns a collection of elements that contains the ancestors of every node in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-115">如果來源集合中的多個節點有相同的上階，祖系將會包含多個時間結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-115">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="e33df-116">若要避免這個問題，請使用<xref:System.Linq.Enumerable.Distinct%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-116">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="e33df-117">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-117">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Ancestors&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Ancestors(Of T As XNode) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Ancestors : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Ancestors source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-118">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-118">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-119">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-119">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-120">傳回包含來源集合中每個節點祖系的項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-120">Returns a collection of elements that contains the ancestors of every node in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-121">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合中每個節點的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-121">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-122">如果來源集合中的多個節點有相同的上階，祖系將會包含多個時間結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-122">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="e33df-123">若要避免這個問題，請使用<xref:System.Linq.Enumerable.Distinct%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-123">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="e33df-124">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-124">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-125">下列範例會擷取很棒的孫代項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-125">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="e33df-126">然後，它會使用此座標軸方法來擷取所有上階的集合中的所有項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-126">It then uses this axis method to retrieve all ancestors of all elements in the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
```  
  
 <span data-ttu-id="e33df-127">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-127">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors  
----  
GrandChild1  
Child1  
Root  
GrandChild2  
Child2  
```  
  
 <span data-ttu-id="e33df-128">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-128">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-129">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-129">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.Ancestors.Distinct _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e33df-130">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-130">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors  
----  
{http://www.adventure-works.com}GrandChild1  
{http://www.adventure-works.com}Child1  
{http://www.adventure-works.com}Root  
{http://www.adventure-works.com}GrandChild2  
{http://www.adventure-works.com}Child2  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-131">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-131">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Ancestors&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Ancestors(Of T As XNode) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Ancestors : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Ancestors (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-132">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-132">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-133">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-134">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-134">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-135">傳回包含來源集合中每個節點祖系的已篩選項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-135">Returns a filtered collection of elements that contains the ancestors of every node in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-136">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-136">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-137">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合中每個節點的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-137">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-138">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-138">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-139">如果來源集合中的多個節點有相同的上階，搭配相對應的<xref:System.Xml.Linq.XName>，上階會多次包含在結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-139">If multiple nodes in the source collection have the same ancestor with a matching <xref:System.Xml.Linq.XName>, the ancestor will be included multiple times in the result collection.</span></span>  
  
 <span data-ttu-id="e33df-140">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-140">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-141">下列範例會擷取很棒的孫代項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-141">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="e33df-142">然後會使用此座標軸方法來擷取所有上階的集合中所有符合指定的項目<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="e33df-142">It then uses this axis method to retrieve all ancestors of all elements in the collection that match a specified <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors("Child1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.Ancestors("Child1") _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="e33df-143">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-143">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors  
----  
Child1  
```  
  
 <span data-ttu-id="e33df-144">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-144">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-145">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-145">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.Ancestors(aw + "Child1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.Ancestors(GetXmlNamespace() + "Child1") _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-146">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-146">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors  
----  
{http://www.adventure-works.com}Child1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-147">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-147">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-148">傳回包含來源集合中每個項目的項目集合，以及來源集合中每個項目的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-148">Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-149">如果來源集合中的多個節點有相同的上階，祖系將會包含多個時間結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-149">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="e33df-150">若要避免這個問題，請使用<xref:System.Linq.Enumerable.Distinct%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-150">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="e33df-151">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-151">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-152">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-152">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AncestorsAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AncestorsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.AncestorsAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-153">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-153">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-154">傳回包含來源集合中每個項目的項目集合，以及來源集合中每個項目的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-154">Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-155">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含來源集合中的每個項目，以及來源集合中每個項目的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-155">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-156">如果來源集合中的多個節點有相同的上階，祖系將會包含多個時間結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-156">If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection.</span></span> <span data-ttu-id="e33df-157">若要避免這個問題，請使用<xref:System.Linq.Enumerable.Distinct%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-157">To avoid this, use the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 <span data-ttu-id="e33df-158">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-158">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-159">下列範例會擷取很棒的孫代項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-159">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="e33df-160">然後，它會使用此座標軸方法來擷取所有上階和自我集合中的所有項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-160">It then uses this axis method to retrieve all ancestors and self of all elements in the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors and Self")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="e33df-161">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-161">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors and Self  
----  
GreatGrandChild1  
GrandChild1  
Child1  
Root  
GreatGrandChild2  
GrandChild2  
Child2  
```  
  
 <span data-ttu-id="e33df-162">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-162">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-163">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-163">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf().Distinct()  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf.Distinct _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors and Self")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-164">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-164">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors and Self  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GrandChild1  
{http://www.adventure-works.com}Child1  
{http://www.adventure-works.com}Root  
{http://www.adventure-works.com}GreatGrandChild2  
{http://www.adventure-works.com}GrandChild2  
{http://www.adventure-works.com}Child2  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-165">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-165">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AncestorsAndSelf (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member AncestorsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.AncestorsAndSelf (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-166">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-166">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-167">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-167">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-168">傳回包含來源集合中每個項目的已篩選項目集合，以及來源集合中每個項目的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-168">Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-169">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-169">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-170">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含來源集合中的每個項目，以及來源集合中每個項目的祖系。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-170">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-171">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-171">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-172">如果來源集合中的多個節點有相同的上階，搭配相對應的<xref:System.Xml.Linq.XName>，上階會多次包含在結果集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-172">If multiple nodes in the source collection have the same ancestor with a matching <xref:System.Xml.Linq.XName>, the ancestor will be included multiple times in the result collection.</span></span>  
  
 <span data-ttu-id="e33df-173">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-173">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-174">下列範例會擷取很棒的孫代項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-174">The following example retrieves a collection of the great grandchildren elements.</span></span> <span data-ttu-id="e33df-175">然後會使用此座標軸方法來擷取所有自我以及集合中所有符合指定的項目上階<xref:System.Xml.Linq.XName>。</span><span class="sxs-lookup"><span data-stu-id="e33df-175">It then uses this axis method to retrieve all self and ancestors of all elements in the collection that match a specified <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1",  
            new XElement("GreatGrandChild1", "content")  
        )  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild2",  
            new XElement("GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf("GreatGrandChild1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>  
            <GrandChild1>  
                <GreatGrandChild1>content</GreatGrandChild1>  
            </GrandChild1>  
        </Child1>  
        <Child2>  
            <GrandChild2>  
                <GreatGrandChild2>content</GreatGrandChild2>  
            </GrandChild2>  
        </Child2>  
    </Root>  
  
Dim greatGrandChildren = From el In xmlTree.Descendants _  
                         Where el.Name.LocalName.StartsWith("Great") _  
                         Select el  
  
Console.WriteLine("Great Grand Children Elements")  
Console.WriteLine("----")  
  
For Each de As XElement In greatGrandChildren  
    Console.WriteLine(de.Name)  
Next  
  
Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf("GreatGrandChild1") _  
                   Select el  
  
Console.WriteLine("")  
Console.WriteLine("Ancestors and Self")  
Console.WriteLine("----")  
  
For Each de As XElement In allAncestors  
    Console.WriteLine(de.Name)  
Next  
  
```  
  
 <span data-ttu-id="e33df-176">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-176">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
GreatGrandChild1  
GreatGrandChild2  
  
Ancestors and Self  
----  
GreatGrandChild1  
```  
  
 <span data-ttu-id="e33df-177">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-177">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-178">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-178">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child1",  
        new XElement(aw + "GrandChild1",  
            new XElement(aw + "GreatGrandChild1", "content")  
        )  
    ),  
    new XElement(aw + "Child2",  
        new XElement(aw + "GrandChild2",  
            new XElement(aw + "GreatGrandChild2", "content")  
        )  
    )  
);  
IEnumerable<XElement> greatGrandChildren =  
    from el in xmlTree.Descendants()  
    where el.Name.LocalName.StartsWith("Great")  
    select el;  
  
Console.WriteLine("Great Grand Children Elements");  
Console.WriteLine("----");  
foreach (XElement de in greatGrandChildren)  
    Console.WriteLine(de.Name);  
  
IEnumerable<XElement> allAncestors =  
    from el in greatGrandChildren.AncestorsAndSelf(aw + "GreatGrandChild1")  
    select el;  
  
Console.WriteLine("");  
Console.WriteLine("Ancestors and Self");  
Console.WriteLine("----");  
foreach (XElement de in allAncestors)  
    Console.WriteLine(de.Name);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Child1>  
                    <GrandChild1>  
                        <GreatGrandChild1>content</GreatGrandChild1>  
                    </GrandChild1>  
                </Child1>  
                <Child2>  
                    <GrandChild2>  
                        <GreatGrandChild2>content</GreatGrandChild2>  
                    </GrandChild2>  
                </Child2>  
            </Root>  
  
        Dim greatGrandChildren = From el In xmlTree.Descendants _  
                                 Where el.Name.LocalName.StartsWith("Great") _  
                                 Select el  
  
        Console.WriteLine("Great Grand Children Elements")  
        Console.WriteLine("----")  
  
        For Each de As XElement In greatGrandChildren  
            Console.WriteLine(de.Name)  
        Next  
  
        Dim allAncestors = From el In greatGrandChildren.AncestorsAndSelf(GetXmlNamespace() + "GreatGrandChild1") _  
                           Select el  
  
        Console.WriteLine("")  
        Console.WriteLine("Ancestors and Self")  
        Console.WriteLine("----")  
  
        For Each de As XElement In allAncestors  
            Console.WriteLine(de.Name)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-179">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-179">This example produces the following output:</span></span>  
  
```  
Great Grand Children Elements  
----  
{http://www.adventure-works.com}GreatGrandChild1  
{http://www.adventure-works.com}GreatGrandChild2  
  
Ancestors and Self  
----  
{http://www.adventure-works.com}GreatGrandChild1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
        <altmember cref="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Ancestors" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-180">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-180">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-181">傳回來源集合中每個項目的屬性集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-181">Returns a collection of the attributes of every element in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-182">Visual Basic 使用者可以使用整合式的屬性軸，以擷取具有特定名稱的屬性集合中的項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-182">Visual Basic users can use the integrated attribute axis to retrieve attributes with a particular name from a collection of elements.</span></span>  
  
 <span data-ttu-id="e33df-183">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-183">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-184">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-184">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Attributes (source As IEnumerable(Of XElement)) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Attributes : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="System.Xml.Linq.Extensions.Attributes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-185">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-185">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-186">傳回來源集合中每個項目的屬性集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-186">Returns a collection of the attributes of every element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-187">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，其中包含來源集合中每個項目的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-187">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of every element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-188">請注意，與一些其他的 XML 程式設計介面，在[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]，命名空間會顯示為屬性。</span><span class="sxs-lookup"><span data-stu-id="e33df-188">Note that unlike some other XML programming interfaces, in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], namespaces are surfaced as attributes.</span></span>  
  
 <span data-ttu-id="e33df-189">雖然 Visual Basic 使用者可以使用整合式的屬性軸，以擷取具有指定名稱的屬性集合中的項目，沒有任何整合的 Visual Basic 軸來擷取集合中的所有項目的所有屬性。</span><span class="sxs-lookup"><span data-stu-id="e33df-189">Although Visual Basic users can use the integrated attribute axis to retrieve attributes with a specified name from a collection of elements, there is no integrated Visual Basic axis to retrieve all attributes of all elements in a collection.</span></span>  
  
 <span data-ttu-id="e33df-190">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-190">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-191">下列範例會擷取元素的集合，並接著會擷取所有屬性集合中的所有項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-191">The following example retrieves a collection of elements, and then retrieves a collection of all attributes of all elements in the collection.</span></span> <span data-ttu-id="e33df-192">請注意，產生的集合包含的屬性`Child1`並`Child2`項目和不屬性`Root`項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-192">Note that the resulting collection includes only the attributes of the `Child1` and `Child2` elements, and not the attributes of the `Root` element.</span></span>  
  
 <span data-ttu-id="e33df-193">請注意，這個方法所傳回的命名空間屬性。</span><span class="sxs-lookup"><span data-stu-id="e33df-193">Note that the namespace attribute is returned by this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XElement("Child1",  
        new XAttribute("Att1", "content3"),  
        new XAttribute("Att2", "content4")  
    ),  
    new XElement("Child2",  
        new XAttribute("Att1", "content5"),  
        new XAttribute("Att2", "content6")  
    )  
);  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
IEnumerable<XAttribute> attList =  
    from att in xmlTree.DescendantsAndSelf().Attributes()  
    select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root xmlns:aw="http://www.adventure-works.com" Att1="content1" Att2="content2">  
        <Child1 Att1="content3" Att2="content4"/>  
        <Child2 Att1="content5" Att2="content6"/>  
    </Root>  
  
Dim attList = _  
    From att In xmlTree.DescendantsAndSelf.Attributes _  
    Select att  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
For Each att As XAttribute In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="e33df-194">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-194">This example produces the following output:</span></span>  
  
```  
<Root xmlns:aw="http://www.adventure-works.com" Att1="content1" Att2="content2">  
  <Child1 Att1="content3" Att2="content4" />  
  <Child2 Att1="content5" Att2="content6" />  
</Root>  
-----  
xmlns:aw="http://www.adventure-works.com"  
Att1="content1"  
Att2="content2"  
Att1="content3"  
Att2="content4"  
Att1="content5"  
Att2="content6"  
```  
  
 <span data-ttu-id="e33df-195">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-195">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-196">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-196">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span> <span data-ttu-id="e33df-197">請注意，命名空間屬性會包含在傳回的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-197">Note that the namespace attribute is included in the returned collection.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XElement(aw + "Child1",  
        new XAttribute(aw + "Att1", "content3"),  
        new XAttribute(aw + "Att2", "content4")  
    ),  
    new XElement(aw + "Child2",  
        new XAttribute(aw + "Att1", "content5"),  
        new XAttribute(aw + "Att2", "content6")  
    )  
);  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
IEnumerable<XAttribute> attList =  
    from att in xmlTree.DescendantsAndSelf().Attributes()  
    select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root xmlns:aw="http://www.adventure-works.com" aw:Att1="content1" aw:Att2="content2">  
                <aw:Child1 aw:Att1="content3" aw:Att2="content4"/>  
                <aw:Child2 aw:Att1="content5" aw:Att2="content6"/>  
            </aw:Root>  
  
        Dim attList = _  
            From att In xmlTree.DescendantsAndSelf.Attributes _  
            Select att  
  
        Console.WriteLine(xmlTree)  
        Console.WriteLine("-----")  
  
        For Each att As XAttribute In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e33df-198">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-198">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com" aw:Att1="content1" aw:Att2="content2">  
  <aw:Child1 aw:Att1="content3" aw:Att2="content4" />  
  <aw:Child2 aw:Att1="content5" aw:Att2="content6" />  
</aw:Root>  
-----  
xmlns:aw="http://www.adventure-works.com"  
aw:Att1="content1"  
aw:Att2="content2"  
aw:Att1="content3"  
aw:Att2="content4"  
aw:Att1="content5"  
aw:Att2="content6"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-199">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-199">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Attributes (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Attributes : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="System.Xml.Linq.Extensions.Attributes (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-200">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-200">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-201">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-201">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-202">傳回來源集合中每個項目之屬性的已篩選集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-202">Returns a filtered collection of the attributes of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-203">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-203">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-204">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，其中包含來源集合中每個項目之屬性的已篩選集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-204">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains a filtered collection of the attributes of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-205">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-205">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-206">請注意，與一些其他的 XML 程式設計介面，在[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]，命名空間會顯示為屬性。</span><span class="sxs-lookup"><span data-stu-id="e33df-206">Note that unlike some other XML programming interfaces, in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], namespaces are surfaced as attributes.</span></span>  
  
 <span data-ttu-id="e33df-207">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-207">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-208">下列範例會擷取元素的集合，在此情況下包括`Child1`和`Child2`項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-208">The following example retrieves a collection of elements, which in this case includes the `Child1` and `Child2` elements.</span></span> <span data-ttu-id="e33df-209">然後它會擷取該子集合的所有屬性，名稱為`Att1`。</span><span class="sxs-lookup"><span data-stu-id="e33df-209">It then retrieves all attributes of that child collection with a name of `Att1`.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XElement("Child1",  
        new XAttribute("Att1", "content3"),  
        new XAttribute("Att2", "content4")  
    ),  
    new XElement("Child2",  
        new XAttribute("Att1", "content5"),  
        new XAttribute("Att2", "content6")  
    )  
);  
  
IEnumerable<XAttribute> attList = from att in xmlTree.Elements().Attributes("Att1")  
                                  select att;  
  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="content1" Att2="content2">  
        <Child1 Att1="content3" Att2="content4">  
        </Child1>  
        <Child2 Att1="content5" Att2="content6">  
        </Child2>  
    </Root>  
  
Dim attList = From att In xmlTree.Elements.Attributes("Att1") _  
                          Select att  
  
For Each att As XAttribute In attList  
    Console.WriteLine(att)  
Next  
  
```  
  
 <span data-ttu-id="e33df-210">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-210">This example produces the following output:</span></span>  
  
```  
Att1="content3"  
Att1="content5"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-211">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-211">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantNodes(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantNodes : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.DescendantNodes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-212">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-212">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-213">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-213">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-214">傳回來源集合中每個文件和項目之子代節點的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-214">Returns a collection of the descendant nodes of every document and element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-215">來源集合中每個文件和項目的子代節點之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-215">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the descendant nodes of every document and element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-216">這個座標軸擴充方法適用於<xref:System.Xml.Linq.XDocument>和<xref:System.Xml.Linq.XElement>物件。</span><span class="sxs-lookup"><span data-stu-id="e33df-216">This axis extension method is used on <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement> objects.</span></span> <span data-ttu-id="e33df-217">這兩種類型衍生自<xref:System.Xml.Linq.XContainer>，所以此方法操作所在<xref:System.Collections.Generic.IEnumerable%601>的<xref:System.Xml.Linq.XContainer>，其中包含來源集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-217">Both of these types derive from <xref:System.Xml.Linq.XContainer>, so this method operates on an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XContainer> that contains the source collection.</span></span>  
  
 <span data-ttu-id="e33df-218">雖然 Visual Basic 具有整合式的 XML 座標軸的子代項目，是沒有整合的軸的子系節點，因此 Visual Basic 使用者必須明確地使用此座標軸方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-218">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-219">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-219">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-220">下列範例會擷取兩個元素的集合，並接著會擷取每個項目的來源集合中的所有子系節點的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-220">The following example retrieves a collection of two elements, and then retrieves a collection of all descendant nodes for every element in the source collection.</span></span> <span data-ttu-id="e33df-221">請注意，屬性`GrandChild`項目不會顯示為節點。</span><span class="sxs-lookup"><span data-stu-id="e33df-221">Note that the attribute of the `GrandChild` element is not surfaced as a node.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>");  
IEnumerable<XNode> nodes =  
    from node in xmlTree.Elements("Child").DescendantNodes()  
    select node;  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
        case XmlNodeType.Comment:  
            Console.WriteLine("Comment: {0}", ((XComment)node).Value);  
            break;  
        case XmlNodeType.ProcessingInstruction:  
            Console.WriteLine("PI: {0}", ((XProcessingInstruction)node).Data);  
            break;  
    }  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
<Root>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>  
  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In xmlTree.<Child>.DescendantNodes _  
    Select node  
  
For Each node As XNode In nodes  
    Select Case node.NodeType  
        Case XmlNodeType.Element  
            Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
        Case XmlNodeType.Text  
            Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
        Case XmlNodeType.Comment  
            Console.WriteLine("Comment: {0}", DirectCast(node, XComment).Value)  
        Case XmlNodeType.ProcessingInstruction  
            Console.WriteLine("PI: {0}", DirectCast(node, XProcessingInstruction).Data)  
    End Select  
Next  
```  
  
 <span data-ttu-id="e33df-222">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-222">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: GrandChild  
Text: Text  
Comment: a comment  
PI: type='text/xsl' href='test.xsl'  
Text: ccc  
Element: GrandChild  
Text: Text  
Text: ddd  
```  
  
 <span data-ttu-id="e33df-223">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-223">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-224">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-224">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
        <!--a comment-->  
        <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
    </Child>  
    <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
</Root>");  
IEnumerable<XNode> nodes =  
    from node in xmlTree.Elements(aw + "Child").DescendantNodes()  
    select node;  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
        case XmlNodeType.Comment:  
            Console.WriteLine("Comment: {0}", ((XComment)node).Value);  
            break;  
        case XmlNodeType.ProcessingInstruction:  
            Console.WriteLine("PI: {0}", ((XProcessingInstruction)node).Data);  
            break;  
    }  
}  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
        <Root>  
            <Child>aaa<GrandChild anAttribute='xyz'>Text</GrandChild>  
                <!--a comment-->  
                <?xml-stylesheet type='text/xsl' href='test.xsl'?>  
            </Child>  
            <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
        </Root>  
  
        Dim nodes As IEnumerable(Of XNode) = _  
            From node In xmlTree.<Child>.DescendantNodes _  
            Select node  
  
        For Each node As XNode In nodes  
            Select Case node.NodeType  
                Case XmlNodeType.Element  
                    Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
                Case XmlNodeType.Text  
                    Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
                Case XmlNodeType.Comment  
                    Console.WriteLine("Comment: {0}", DirectCast(node, XComment).Value)  
                Case XmlNodeType.ProcessingInstruction  
                    Console.WriteLine("PI: {0}", DirectCast(node, XProcessingInstruction).Data)  
            End Select  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e33df-225">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-225">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: {http://www.adventure-works.com}GrandChild  
Text: Text  
Comment: a comment  
PI: type='text/xsl' href='test.xsl'  
Text: ccc  
Element: {http://www.adventure-works.com}GrandChild  
Text: Text  
Text: ddd  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-226">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-226">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantNodesAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantNodesAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="System.Xml.Linq.Extensions.DescendantNodesAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-227">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-227">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-228">傳回包含來源集合中每個項目的節點集合，以及來源集合中每個項目的子代節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-228">Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-229">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，包含來源集合中的每個項目，以及來源集合中每個項目的子代節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-229">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-230">雖然 Visual Basic 具有整合式的 XML 座標軸的子代項目，是沒有整合的軸的子系節點，因此 Visual Basic 使用者必須明確地使用此座標軸方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-230">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-231">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-231">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-232">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-232">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-233">傳回包含來源集合中每個項目和文件之子代項目的項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-233">Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-234">Visual Basic 使用者可以使用整合式的 XML 子代軸，來擷取集合的子系的項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-234">Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection.</span></span> <span data-ttu-id="e33df-235">不過，整合式的軸只會擷取具有指定名稱的子代。</span><span class="sxs-lookup"><span data-stu-id="e33df-235">However, the integrated axis only retrieves descendants with a specified name.</span></span> <span data-ttu-id="e33df-236">如果 Visual Basic 使用者想要擷取所有子系，則它們必須使用此座標軸方法明確。</span><span class="sxs-lookup"><span data-stu-id="e33df-236">If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-237">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-237">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Descendants : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Descendants source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-238">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-238">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-239">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-239">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-240">傳回包含來源集合中每個項目和文件之子代項目的項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-240">Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-241">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合中每個項目和文件的子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-241">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-242">Visual Basic 使用者可以使用整合式的 XML 子代軸，來擷取集合的子系的項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-242">Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection.</span></span> <span data-ttu-id="e33df-243">不過，整合式的軸只會擷取具有指定名稱的子代。</span><span class="sxs-lookup"><span data-stu-id="e33df-243">However, the integrated axis only retrieves descendants with a specified name.</span></span> <span data-ttu-id="e33df-244">如果 Visual Basic 使用者想要擷取所有子系，則它們必須使用此座標軸方法明確。</span><span class="sxs-lookup"><span data-stu-id="e33df-244">If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-245">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-245">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-246">下列範例擷取的項目集合，然後使用此座標軸方法來擷取項目的集合中每個項目的所有子代項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-246">The following example retrieves a collection of elements, and then uses this axis method to retrieve all descendent elements of every item in the collection of elements.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
IEnumerable<XElement> elList =  
    from el in xmlTree.Elements("Para").Descendants()  
    select el;  
  
foreach (XElement el in elList)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Para>  
            <t>This is some text </t>  
            <b>  
                <t>where</t>  
            </b>  
            <t> all of the nodes must be concatenated. </t>  
        </Para>  
  
        <Para>  
            <t>This is a second sentence.</t>  
        </Para>  
    </Root>  
  
Dim elList = From el In xmlTree.<Para>.Descendants _  
                        Select el  
  
For Each el As XElement In elList  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="e33df-247">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-247">This example produces the following output:</span></span>  
  
```  
<t>This is some text </t>  
<b>  
  <t>where</t>  
</b>  
<t>where</t>  
<t> all of the nodes must be concatenated. </t>  
<t>This is a second sentence.</t>  
```  
  
 <span data-ttu-id="e33df-248">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-248">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-249">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-249">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
IEnumerable<XElement> elList =  
    from el in xmlTree.Elements(aw + "Para").Descendants()  
    select el;  
  
foreach (XElement el in elList)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Para>  
                    <t>This is some text </t>  
                    <b>  
                        <t>where</t>  
                    </b>  
                    <t> all of the nodes must be concatenated. </t>  
                </Para>  
  
                <Para>  
                    <t>This is a second sentence.</t>  
                </Para>  
            </Root>  
  
        Dim elList = From el In xmlTree.<Para>.Descendants _  
                                Select el  
  
        For Each el As XElement In elList  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-250">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-250">This example produces the following output:</span></span>  
  
```  
<t xmlns="http://www.adventure-works.com">This is some text </t>  
<b xmlns="http://www.adventure-works.com">  
  <t>where</t>  
</b>  
<t xmlns="http://www.adventure-works.com">where</t>  
<t xmlns="http://www.adventure-works.com"> all of the nodes must be concatenated. </t>  
<t xmlns="http://www.adventure-works.com">This is a second sentence.</t>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-251">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-251">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Descendants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants(Of T As XContainer) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Descendants : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Descendants (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-252">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-252">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-253">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XContainer" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-253">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-254">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-254">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-255">傳回已篩選的項目集合，其中包含來源集合中每個項目和文件的子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-255">Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-256">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-256">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-257">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合中每個項目和文件的子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-257">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-258">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-259">Visual Basic 使用者可以使用[在 Visual Basic (LINQ to XML) 中的 Language-Integrated 軸](https://msdn.microsoft.com/library/4143c385-eb50-4286-a7fd-a50f466c7af0)而不是明確地使用此座標軸方法。</span><span class="sxs-lookup"><span data-stu-id="e33df-259">Visual Basic users can use the [Language-Integrated Axes in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/4143c385-eb50-4286-a7fd-a50f466c7af0) instead of using this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-260">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-260">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-261">下列範例會擷取兩個元素的集合，並接著會擷取具有指定的項目名稱的兩個元素的所有下階的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-261">The following example retrieves a collection of two elements, and then retrieves a collection of all descendants of the two elements that have the specified element name.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
@"<Root>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the text nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
string str =  
    (from el in xmlTree.Elements("Para").Descendants("t")  
    select (string)el)  
    .Aggregate(new StringBuilder(),  
        (sb, i) => sb.Append(i),  
        sb => sb.ToString());  
  
Console.WriteLine(str);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Para>  
            <t>This is some text </t>  
            <b>  
                <t>where</t>  
            </b>  
            <t> all of the text nodes must be concatenated. </t>  
        </Para>  
        <Para>  
            <t>This is a second sentence.</t>  
        </Para>  
    </Root>  
  
Dim str As String = _  
    ( _  
        From el In xmlTree.<Para>...<t> _  
        Select CStr(el) _  
    ) _  
    .Aggregate(New StringBuilder(), _  
               Function(ByVal sb, ByVal i) sb.Append(i), _  
               Function(ByVal sb) sb.ToString())  
  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="e33df-262">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-262">This example produces the following output:</span></span>  
  
```  
This is some text where all of the text nodes must be concatenated. This is a second sentence.  
```  
  
 <span data-ttu-id="e33df-263">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-263">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-264">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-264">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = XElement.Parse(  
@"<Root xmlns='http://www.adventure-works.com'>  
    <Para>  
        <t>This is some text </t>  
        <b>  
            <t>where</t>  
        </b>  
        <t> all of the text nodes must be concatenated. </t>  
    </Para>  
    <Para>  
        <t>This is a second sentence.</t>  
    </Para>  
</Root>");  
  
string str =  
    (from el in xmlTree.Elements(aw + "Para").Descendants(aw + "t")  
     select (string)el)  
    .Aggregate(new StringBuilder(),  
        (sb, i) => sb.Append(i),  
        sb => sb.ToString());  
  
Console.WriteLine(str);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Para>  
                    <t>This is some text </t>  
                    <b>  
                        <t>where</t>  
                    </b>  
                    <t> all of the text nodes must be concatenated. </t>  
                </Para>  
                <Para>  
                    <t>This is a second sentence.</t>  
                </Para>  
            </Root>  
  
        Dim str As String = _  
            ( _  
                From el In xmlTree.<Para>...<t> _  
                Select CStr(el) _  
            ) _  
            .Aggregate(New StringBuilder(), _  
                       Function(sb, i) sb.Append(i), _  
                       Function(sb) sb.ToString())  
  
        Console.WriteLine(str)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e33df-265">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-265">This example produces the following output:</span></span>  
  
```  
This is some text where all of the text nodes must be concatenated. This is a second sentence.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-266">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-266">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-267">傳回來源集合中每個項目的集合，以及來源集合中每個項目的所有子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-267">Returns a collection of every element in the source collection, and all descendant elements for every element in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-268">雖然 Visual Basic 具有整合式的 XML 座標軸的子代項目，還有沒有這個方法的語意的整合式的座標軸。</span><span class="sxs-lookup"><span data-stu-id="e33df-268">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method.</span></span>  
  
 <span data-ttu-id="e33df-269">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-269">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-270">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-270">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.DescendantsAndSelf source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-271">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-271">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-272">傳回包含來源集合中每個項目的項目集合，以及來源集合中每個項目的子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-272">Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-273">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含來源集合中的每個項目，以及來源集合中每個項目的子代項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendent elements of every element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-274">雖然 Visual Basic 具有整合式的 XML 座標軸的子代項目，沒有任何有這個方法的語意，因此 Visual Basic 使用者必須明確地使用此座標軸方法的整合式的座標軸。</span><span class="sxs-lookup"><span data-stu-id="e33df-274">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-275">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-275">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-276">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-276">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; source, System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : seq&lt;System.Xml.Linq.XElement&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="System.Xml.Linq.Extensions.DescendantsAndSelf (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-277">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-278">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-278">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-279">傳回包含來源集合中每個項目的已篩選項目集合，以及來源集合中每個項目的子代。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-279">Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-280">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-280">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-281">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，包含來源集合中每個項目的項目集合，以及來源集合中每個項目的子代。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-281">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-282">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-282">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-283">雖然 Visual Basic 具有整合式的 XML 座標軸的子代項目，沒有任何有這個方法的語意，因此 Visual Basic 使用者必須明確地使用此座標軸方法的整合式的座標軸。</span><span class="sxs-lookup"><span data-stu-id="e33df-283">Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</span></span>  
  
 <span data-ttu-id="e33df-284">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-284">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Descendants" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-285">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-285">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e33df-286">傳回來源集合中每個項目和文件的子項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-286">Returns a collection of the child elements of every element and document in the source collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-287">Visual Basic 還包含了整合式的項目軸，可讓您尋找具有指定的所有子項目<xref:System.Xml.Linq.XName>來源集合中的每個項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-287">Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <xref:System.Xml.Linq.XName> for every element in the source collection.</span></span>  
  
 <span data-ttu-id="e33df-288">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-288">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Elements(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Elements : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Elements source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-289">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-289">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-290">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-290">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-291">傳回來源集合中每個項目和文件的子項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-291">Returns a collection of the child elements of every element and document in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-292">來源集合中每個項目或文件的子項目之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-292">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-293">雖然 Visual Basic 還包含了整合式的項目軸，可讓您尋找具有指定的所有子項目<xref:System.Xml.Linq.XName>來源集合中每個項目，則可讓您擷取的集合沒有整合式的項目軸每個來源集合中每個元素的子項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-293">Although Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <xref:System.Xml.Linq.XName> for every element in the source collection, there is no integrated elements axis that allows you to retrieve a collection of every child element for every element in the source collection.</span></span>  
  
 <span data-ttu-id="e33df-294">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-294">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-295">下列範例會擷取項目集合的項目名稱與`Child`。</span><span class="sxs-lookup"><span data-stu-id="e33df-295">The following example retrieves a collection of elements with the element name of `Child`.</span></span> <span data-ttu-id="e33df-296">然後，它會使用此座標軸方法來擷取集合中的所有子項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-296">It then uses this axis method to retrieve all child elements of the collection.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild1", 1),  
        new XElement("GrandChild2", 2)  
    ),  
    new XElement("Child",  
        new XElement("GrandChild3", 3),  
        new XElement("GrandChild4", 4)  
    ),  
    new XElement("Child",  
        new XElement("GrandChild5", 5),  
        new XElement("GrandChild6", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements("Child").Elements()  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
     <Root>  
          <Child>  
              <GrandChild1>1</GrandChild1>  
              <GrandChild2>2</GrandChild2>  
          </Child>  
  
          <Child>  
              <GrandChild3>3</GrandChild3>  
              <GrandChild4>4</GrandChild4>  
          </Child>  
  
          <Child>  
              <GrandChild5>5</GrandChild5>  
              <GrandChild6>6</GrandChild6>  
          </Child>  
      </Root>  
  
Dim allGrandChildren = From el In xmlTree.<Child>.Elements _  
                       Select el  
  
For Each el As XElement In allGrandChildren  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="e33df-297">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-297">This example produces the following output:</span></span>  
  
```  
<GrandChild1>1</GrandChild1>  
<GrandChild2>2</GrandChild2>  
<GrandChild3>3</GrandChild3>  
<GrandChild4>4</GrandChild4>  
<GrandChild5>5</GrandChild5>  
<GrandChild6>6</GrandChild6>  
```  
  
 <span data-ttu-id="e33df-298">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-298">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-299">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-299">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild1", 1),  
        new XElement(aw + "GrandChild2", 2)  
    ),  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild3", 3),  
        new XElement(aw + "GrandChild4", 4)  
    ),  
    new XElement(aw + "Child",  
        new XElement(aw + "GrandChild5", 5),  
        new XElement(aw + "GrandChild6", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements(aw + "Child").Elements()  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
             <Root>  
                 <Child>  
                     <GrandChild1>1</GrandChild1>  
                     <GrandChild2>2</GrandChild2>  
                 </Child>  
  
                 <Child>  
                     <GrandChild3>3</GrandChild3>  
                     <GrandChild4>4</GrandChild4>  
                 </Child>  
  
                 <Child>  
                     <GrandChild5>5</GrandChild5>  
                     <GrandChild6>6</GrandChild6>  
                 </Child>  
             </Root>  
  
        Dim allGrandChildren = From el In xmlTree.<Child>.Elements _  
                               Select el  
  
        For Each el As XElement In allGrandChildren  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-300">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-300">This example produces the following output:</span></span>  
  
```  
<GrandChild1 xmlns="http://www.adventure-works.com">1</GrandChild1>  
<GrandChild2 xmlns="http://www.adventure-works.com">2</GrandChild2>  
<GrandChild3 xmlns="http://www.adventure-works.com">3</GrandChild3>  
<GrandChild4 xmlns="http://www.adventure-works.com">4</GrandChild4>  
<GrandChild5 xmlns="http://www.adventure-works.com">5</GrandChild5>  
<GrandChild6 xmlns="http://www.adventure-works.com">6</GrandChild6>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-301">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-301">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Elements&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Elements(Of T As XContainer) (source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="static member Elements : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; * System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Elements (source, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-302">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-302">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-303">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-303">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="e33df-304">要比對的 <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-304">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-305">傳回來源集合中每個項目和文件的已篩選子項目集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-305">Returns a filtered collection of the child elements of every element and document in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-306">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-306">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-307">來源集合中每個項目和文件之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-307">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection.</span>
          </span>
          <span data-ttu-id="e33df-308">集合中只會包含具有相符之 <see cref="T:System.Xml.Linq.XName" /> 的項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-308">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-309">Visual Basic 使用者可以使用整合式的項目軸，來擷取集合中每個元素的子項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-309">Visual Basic users can use the integrated elements axis to retrieve the child elements of every element in a collection.</span></span>  
  
 <span data-ttu-id="e33df-310">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-310">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-311">當您想要擷取位於特定深度的指定名稱的所有項目，這個擴充方法是很有用。</span><span class="sxs-lookup"><span data-stu-id="e33df-311">This extension method is useful when you want to retrieve all elements with a specified name at a particular depth.</span></span> <span data-ttu-id="e33df-312">如果文件是非常一般，但如果文件並不規則，它可以比較困難一點，這是簡單。</span><span class="sxs-lookup"><span data-stu-id="e33df-312">This is easy if the document is very regular, but if the document is irregular, it can be a bit more difficult.</span></span> <span data-ttu-id="e33df-313">在下列範例中，我們想要擷取所有`aaa`項目子系的`Item`項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-313">In the following example, we want to retrieve all `aaa` elements that are children of `Item` elements.</span></span> <span data-ttu-id="e33df-314">給定`Item`項目可能會或可能不包含`aaa`項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-314">A given `Item` element may or may not contain an `aaa` element.</span></span> <span data-ttu-id="e33df-315">這是輕鬆地完成工作，使用這個延伸模組方法，如下所示：</span><span class="sxs-lookup"><span data-stu-id="e33df-315">This is easily accomplished using this extension method, as follows:</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Item",  
        new XElement("aaa", 1),  
        new XElement("bbb", 2)  
    ),  
    new XElement("Item",  
        new XElement("ccc", 3),  
        new XElement("aaa", 4)  
    ),  
    new XElement("Item",  
        new XElement("ddd", 5),  
        new XElement("eee", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements("Item").Elements("aaa")  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Item>  
            <aaa>1</aaa>  
            <bbb>2</bbb>  
        </Item>  
  
        <Item>  
            <ccc>3</ccc>  
            <aaa>4</aaa>  
        </Item>  
  
        <Item>  
            <ddd>5</ddd>  
            <eee>6</eee>  
        </Item>  
    </Root>  
  
Dim allGrandChildren = From el In xmlTree.<Item>.<aaa> _  
                       Select el  
  
For Each el As XElement In allGrandChildren  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="e33df-316">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-316">This example produces the following output:</span></span>  
  
```  
<aaa>1</aaa>  
<aaa>4</aaa>  
```  
  
 <span data-ttu-id="e33df-317">以下是相同的範例，但在此情況下的 XML 位於命名空間。</span><span class="sxs-lookup"><span data-stu-id="e33df-317">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="e33df-318">如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。</span><span class="sxs-lookup"><span data-stu-id="e33df-318">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XElement(aw + "Item",  
        new XElement(aw + "aaa", 1),  
        new XElement(aw + "bbb", 2)  
    ),  
    new XElement(aw + "Item",  
        new XElement(aw + "ccc", 3),  
        new XElement(aw + "aaa", 4)  
    ),  
    new XElement(aw + "Item",  
        new XElement(aw + "ddd", 5),  
        new XElement(aw + "eee", 6)  
    )  
);  
  
IEnumerable<XElement> allGrandChildren =  
    from el in xmlTree.Elements(aw + "Item").Elements(aw + "aaa")  
    select el;  
  
foreach (XElement el in allGrandChildren)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <Root>  
                <Item>  
                    <aaa>1</aaa>  
                    <bbb>2</bbb>  
                </Item>  
  
                <Item>  
                    <ccc>3</ccc>  
                    <aaa>4</aaa>  
                </Item>  
  
                <Item>  
                    <ddd>5</ddd>  
                    <eee>6</eee>  
                </Item>  
            </Root>  
  
        Dim allGrandChildren = From el In xmlTree.<Item>.<aaa> _  
                               Select el  
  
        For Each el As XElement In allGrandChildren  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
  
```  
  
 <span data-ttu-id="e33df-319">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-319">This example produces the following output:</span></span>  
  
```  
<aaa xmlns="http://www.adventure-works.com">1</aaa>  
<aaa xmlns="http://www.adventure-works.com">4</aaa>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="M:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-320">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-320">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InDocumentOrder&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; InDocumentOrder&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; InDocumentOrder&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InDocumentOrder(Of T As XNode) (source As IEnumerable(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ InDocumentOrder(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member InDocumentOrder : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.InDocumentOrder source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-321">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-321">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-322">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-322">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-323">傳回包含來源集合中所有節點的節點集合，依據文件順序來排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-323">Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-324">包含來源集合中所有節點 (依據文件順序排序) 之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-324">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-325">這個座標軸方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-325">This axis method uses deferred execution.</span></span> <span data-ttu-id="e33df-326">不過，它會先列舉其來源集合，排序文件順序中的節點，並接著就會產生結果。</span><span class="sxs-lookup"><span data-stu-id="e33df-326">However, it first enumerates its source collection, the sorts the nodes in document order, and then yields the results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-327">下列範例會建立不在文件順序中的節點集合，然後此軸使用來建立新的集合節點會位於文件順序。</span><span class="sxs-lookup"><span data-stu-id="e33df-327">The following example creates a collection of nodes that are not in document order, and then uses this axis to create a new collection where the nodes are in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Item",  
        new XElement("aaa", 1),  
        new XElement("bbb", 2)  
    ),  
    new XElement("Item",  
        new XElement("ccc", 3),  
        new XElement("aaa", 4)  
    ),  
    new XElement("Item",  
        new XElement("ddd", 5),  
        new XElement("eee", 6)  
    )  
);  
  
XElement[] elementList = {  
    xmlTree.Descendants("ddd").First(),  
    xmlTree.Descendants("ccc").First(),  
    xmlTree.Descendants("aaa").First()  
};  
  
IEnumerable<XElement> inDocOrder = elementList.InDocumentOrder();  
  
foreach (XElement el in inDocOrder)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Item>  
            <aaa>1</aaa>  
            <bbb>2</bbb>  
        </Item>  
  
        <Item>  
            <ccc>3</ccc>  
            <aaa>4</aaa>  
        </Item>  
  
        <Item>  
            <ddd>5</ddd>  
            <eee>6</eee>  
        </Item>  
    </Root>  
  
Dim elementList() As XElement = _  
    { _  
        xmlTree...<ddd>(0), _  
        xmlTree...<ccc>(0), _  
        xmlTree...<aaa>(0) _  
    }  
  
Dim inDocOrder = elementList.InDocumentOrder  
  
For Each el As XElement In inDocOrder  
    Console.WriteLine(el)  
Next  
  
```  
  
 <span data-ttu-id="e33df-328">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-328">This example produces the following output:</span></span>  
  
```  
<aaa>1</aaa>  
<ccc>3</ccc>  
<ddd>5</ddd>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-329">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-329">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Nodes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XContainer;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes&lt;(class System.Xml.Linq.XContainer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Nodes(Of T As XContainer) (source As IEnumerable(Of T)) As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XContainer[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Nodes : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XContainer)&gt; -&gt; seq&lt;System.Xml.Linq.XNode&gt; (requires 'T :&gt; System.Xml.Linq.XContainer)" Usage="System.Xml.Linq.Extensions.Nodes source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.Extensions/&lt;Nodes&gt;d__1`1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.Extensions/&lt;Nodes&gt;d__6`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-330">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-330">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-331">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-331">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-332">傳回來源集合中每個文件和項目的子節點集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-332">Returns a collection of the child nodes of every document and element in the source collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e33df-333">來源集合中每個文件和項目的子節點之 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-333">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-334">這個方法會使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="e33df-334">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-335">下列範例會擷取所有子節點的名稱取代項目集合中每個節點`Child`。</span><span class="sxs-lookup"><span data-stu-id="e33df-335">The following example retrieves all of the child nodes for every node in a collection of elements with the name of `Child`.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse(  
    @"<Root><Child>aaa<GrandChild>Text</GrandChild>bbb</Child>" +  
    @"<Child>ccc<GrandChild>Text</GrandChild>ddd</Child></Root>");  
IEnumerable<XNode> nodes = xmlTree.Elements("Child").Nodes();  
  
foreach (XNode node in nodes)  
{  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Element:  
            Console.WriteLine("Element: {0}", ((XElement)node).Name);  
            break;  
        case XmlNodeType.Text:  
            Console.WriteLine("Text: {0}", ((XText)node).Value);  
            break;  
    }  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child>aaa<GrandChild>Text</GrandChild>bbb</Child>  
        <Child>ccc<GrandChild>Text</GrandChild>ddd</Child>  
    </Root>  
  
Dim nodes = xmlTree.<Child>.Nodes()  
  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
For Each node As XNode In nodes  
    Select Case node.NodeType  
        Case XmlNodeType.Element  
            Console.WriteLine("Element: {0}", DirectCast(node, XElement).Name)  
        Case XmlNodeType.Text  
            Console.WriteLine("Text: {0}", DirectCast(node, XText).Value)  
    End Select  
Next  
  
```  
  
 <span data-ttu-id="e33df-336">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-336">This example produces the following output:</span></span>  
  
```  
Text: aaa  
Element: GrandChild  
Text: bbb  
Text: ccc  
Element: GrandChild  
Text: ddd  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Elements" />
        <altmember cref="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-337">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-337">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static void Remove (this System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remove(class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Remove (source As IEnumerable(Of XAttribute))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Remove(System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Remove : seq&lt;System.Xml.Linq.XAttribute&gt; -&gt; unit" Usage="System.Xml.Linq.Extensions.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e33df-338">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-338">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-339">在來源集合中，從每一個屬性的父項目移除這些屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-339">Removes every attribute in the source collection from its parent element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-340">這個方法會使用快照集的語意，也就是它的來源集合中，會在複製屬性時<xref:System.Collections.Generic.List%601?displayProperty=nameWithType>再從其父代中斷連線。</span><span class="sxs-lookup"><span data-stu-id="e33df-340">This method uses snapshot semantics—that is, it copies the attributes in the source collection to a <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> before disconnecting them from their parents.</span></span> <span data-ttu-id="e33df-341">如此才能避免混合的命令式/宣告式程式碼發生問題。</span><span class="sxs-lookup"><span data-stu-id="e33df-341">This is required to avoid issues with mixed imperative/declarative code.</span></span> <span data-ttu-id="e33df-342">如需詳細資訊，請參閱 <<c0> [ 混合宣告式程式碼/命令式程式碼 Bug (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)。</span><span class="sxs-lookup"><span data-stu-id="e33df-342">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-343">下列範例會擷取屬性的集合，並接著會呼叫這個方法，以從其父項目中移除它們。</span><span class="sxs-lookup"><span data-stu-id="e33df-343">The following example retrieves a collection of attributes, and then calls this method to remove them from their parent elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4),  
    new XAttribute("Att5", 5)  
);  
  
IEnumerable<XAttribute> atList =  
    from at in root.Attributes()  
    where (int)at >= 3  
    select at;  
  
atList.Remove();  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4" Att5="5"/>  
  
Dim atList = From at In root.Attributes _  
             Where at.Value >= 3 _  
             Select at  
  
atList.Remove()  
  
Console.WriteLine(root)  
  
```  
  
 <span data-ttu-id="e33df-344">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-344">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.XAttribute.Remove" />
        <altmember cref="M:System.Xml.Linq.XNode.Remove" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-345">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-345">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Remove&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Remove&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Xml.Linq.XNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remove&lt;(class System.Xml.Linq.XNode) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Remove(Of T As XNode) (source As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Xml::Linq::XNode[System::Runtime::CompilerServices::Extension]&#xA; static void Remove(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Remove : seq&lt;'T (requires 'T :&gt; System.Xml.Linq.XNode)&gt; -&gt; unit (requires 'T :&gt; System.Xml.Linq.XNode)" Usage="System.Xml.Linq.Extensions.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="e33df-346">中的物件型別<c>來源</c>，受限於<see cref="T:System.Xml.Linq.XNode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-346">The type of the objects in <c>source</c>, constrained to <see cref="T:System.Xml.Linq.XNode" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e33df-347">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XNode" />，其中包含來源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-347">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e33df-348">在來源集合中，從每一個節點的父節點移除這些節點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-348">Removes every node in the source collection from its parent node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e33df-349">這個方法會使用快照集的語意，也就是它的來源集合中，會在複製屬性時`List<T>`再從其父代中斷連線。</span><span class="sxs-lookup"><span data-stu-id="e33df-349">This method uses snapshot semantics—that is, it copies the attributes in the source collection to a `List<T>` before disconnecting them from their parents.</span></span> <span data-ttu-id="e33df-350">如此才能避免混合的命令式/宣告式程式碼發生問題。</span><span class="sxs-lookup"><span data-stu-id="e33df-350">This is required to avoid issues with mixed imperative/declarative code.</span></span> <span data-ttu-id="e33df-351">如需詳細資訊，請參閱 <<c0> [ 混合宣告式程式碼/命令式程式碼 Bug (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)。</span><span class="sxs-lookup"><span data-stu-id="e33df-351">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](https://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e33df-352">下列範例會擷取項目的集合。</span><span class="sxs-lookup"><span data-stu-id="e33df-352">The following example retrieves a collection of elements.</span></span> <span data-ttu-id="e33df-353">然後，它會呼叫這個方法，以從其父項目中移除的項目。</span><span class="sxs-lookup"><span data-stu-id="e33df-353">It then calls this method to remove the elements from their parent element.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
IEnumerable<XElement> elList =  
    from el in root.Elements()  
    where (int)el >= 3  
    select el;  
  
elList.Remove();  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Dim elList = From el In root.Elements _  
             Where el.Value >= 3 _  
             Select el  
  
elList.Remove()  
  
Console.WriteLine(root)  
  
```  
  
 <span data-ttu-id="e33df-354">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="e33df-354">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
        <altmember cref="Overload:System.Xml.Linq.Extensions.Attributes" />
        <altmember cref="M:System.Xml.Linq.XAttribute.Remove" />
        <altmember cref="M:System.Xml.Linq.XNode.Remove" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e33df-355">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e33df-355">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>