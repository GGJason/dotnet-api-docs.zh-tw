<Type Name="XAttribute" FullName="System.Xml.Linq.XAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b40a561c9bdf5d0185a44f7e11979a6c8a6e2349" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37734691" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XAttribute : System.Xml.Linq.XObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XAttribute extends System.Xml.Linq.XObject" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XAttribute&#xA;Inherits XObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class XAttribute : System::Xml::Linq::XObject" />
  <TypeSignature Language="F#" Value="type XAttribute = class&#xA;    inherit XObject" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XAttribute&gt;))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表 XML 屬性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 屬性是 XML 項目相關聯的名稱/值組。  
  
 每個<xref:System.Xml.Linq.XElement>包含該元素的屬性清單。 屬性必須是唯一項目的限定的名稱。 屬性不衍生自<xref:System.Xml.Linq.XNode>; 它們不是 XML 樹狀結構中的節點。 而是只是名稱/值組，與元素相關聯。  
  
 屬性會保留在 XML 樹狀目錄中已加入至元素的順序。 所傳回的屬性集合的時<xref:System.Xml.Linq.XElement.Attributes%2A>，它們會傳回它們所加入的項目，並不會排序的順序。  
  
 技術上來說，在 XML 中，命名空間宣告不正確的屬性。 不過，這項區別通常不會造成許多 XML 程式設計人員。 相反地，因為命名空間宣告有完全相同的 XML 語法為屬性，所以大部分的 XML 程式設計人員想像的命名空間屬性。 若要簡化[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]程式設計介面、 命名空間以 XML 樹狀結構中的屬性。 這類命名空間屬性會影響序列化 XML 樹狀結構。 序列化時，[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]嘗試序列化命名空間屬性中指定的命名空間前置詞。 您可以使用<xref:System.Xml.Linq.XAttribute.IsNamespaceDeclaration%2A>來判斷屬性是否真的是命名空間宣告。  
  
 <xref:System.Xml.Linq.XAttribute> 類別衍生自 <xref:System.Xml.Linq.XObject>。 您可以將註解加入至屬性，並為其觀察事件。  
  
 某些<xref:System.Xml.Linq.XAttribute>方法可從 XAML。 如需詳細資訊，請參閱 [LINQ to XML 動態屬性](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Linq.XElement" />
    <altmember cref="T:System.Xml.Linq.XDocument" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 類別的新執行個體。</summary>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XAttribute (System.Xml.Linq.XAttribute other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XAttribute other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XAttribute(System::Xml::Linq::XAttribute ^ other);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XAttribute : System.Xml.Linq.XAttribute -&gt; System.Xml.Linq.XAttribute" Usage="new System.Xml.Linq.XAttribute other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="other">要從中複製的 <see cref="T:System.Xml.Linq.XAttribute" /> 物件。</param>
        <summary>從另一個 <see cref="T:System.Xml.Linq.XAttribute" /> 物件，初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立 XML 樹狀結構的深層複本時，主要是在內部使用這個建構函式。  
  
   
  
## Examples  
 此範例會示範建立 XML 樹狀結構的深層複本會建立複本，而不是複製在樹狀目錄中的屬性。  
  
```csharp  
XElement root1 = XElement.Parse("<Root Att1='abc' />");  
// Make a deep copy.  
XElement root2 = new XElement(root1);  
if (root1.Attribute("Att1") == root2.Attribute("Att1"))  
    Console.WriteLine("This will not be printed");  
else  
    Console.WriteLine("Creating a deep copy created a new attribute from the original.");  
```  
  
```vb  
Dim root1 As XElement = <Root Att1='abc'/>  
' Make a deep copy.  
Dim root2 As XElement = New XElement(root1)  
If root1.Attribute("Att1") Is root2.Attribute("Att1") Then  
    Console.WriteLine("This will not be printed")  
Else  
    Console.WriteLine("Creating a deep copy created a new attribute from the original.")  
End If  
```  
  
 這個範例會產生下列輸出：  
  
```  
  
Creating a deep copy created a new attribute from the original.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="other" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XAttribute (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XAttribute(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Xml.Linq.XAttribute : System.Xml.Linq.XName * obj -&gt; System.Xml.Linq.XAttribute" Usage="new System.Xml.Linq.XAttribute (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">屬性的 <see cref="T:System.Xml.Linq.XName" />。</param>
        <param name="value">包含屬性值的 <see cref="T:System.Object" />。</param>
        <summary>使用指定的名稱和值，初始化 <see cref="T:System.Xml.Linq.XAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 隱含的轉換，從字串到<xref:System.Xml.Linq.XName>。 這個建構函式的典型用法就是指定字串的第一個參數，而不是建立新<xref:System.Xml.Linq.XName>、，如下所示：  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("AnAttributeName", "Content")  
);  
```  
  
 您也可以使用加法運算子多載<xref:System.Xml.Linq.XNamespace>和字串建立<xref:System.Xml.Linq.XName>、，如下所示：  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(aw + "AnAttributeName", "Content")  
);  
```  
  
 如需詳細資訊，請參閱 <<c0> [ 處理 XML 命名空間](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)。  
  
 這些相同的方法適用於 Visual Basic 中，不過 XML 常值會提供更好的方法，來建立 XML 樹狀結構。  
  
 `value`參數可以是<xref:System.String>， `double`， `float`， `decimal`， `bool`， <xref:System.DateTime>，或<xref:System.TimeSpan>。 如果值為<xref:System.DateTime>或<xref:System.TimeSpan>，屬性的值每個 W3C 規格的格式正確。  
  
   
  
## Examples  
 下列範例會使用這個建構函式來建立的屬性。 它會將字串傳遞為第一個引數<xref:System.Xml.Linq.XAttribute>建構函式，則會隱含地轉換成<xref:System.Xml.Linq.XName>物件。 屬性會加入至項目。  
  
```csharp  
XElement root;  
  
double dbl = 12.345;  
XAttribute[] attArray = {  
    new XAttribute("Att4", 1),  
    new XAttribute("Att5", 2),  
    new XAttribute("Att6", 3)  
};  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
  
// string content  
root = new XElement("Root",  
    new XAttribute("Att1", "Some text"),  
  
    // double content  
    new XAttribute("Att2", dbl),  
  
    // DateTime content  
    new XAttribute("Att3", dt),  
  
    // XAttribute array content  
    attArray  
);  
  
Console.WriteLine(root);  
```  
  
```vb  
Dim dbl As Double = 12.345  
Dim attArray As XAttribute() = { _  
    New XAttribute("Att4", 1), _  
    New XAttribute("Att5", 2), _  
    New XAttribute("Att6", 3) _  
}  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
Dim root As XElement = <Root Att1="Some text"  
                           Att2=<%= dbl %>  
                           Att3=<%= dt %>  
                           <%= attArray %>  
                       />  
Console.WriteLine(root)  
```  
  
 這個範例會產生下列輸出：  
  
```  
  
<Root Att1="Some text" Att2="12.345" Att3="2006-10-06T12:30:00" Att4="1" Att5="2" Att6="3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 或 <paramref name="value" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="P:System.Xml.Linq.XAttribute.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmptySequence : seq&lt;System.Xml.Linq.XAttribute&gt;" Usage="System.Xml.Linq.XAttribute.EmptySequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得空的屬性集合。</summary>
        <value>
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Xml.Linq.XAttribute" />，包含空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性通常是由類別實作器撰寫會傳回的屬性集合的方法時。 如果此方法需要傳回空集合的屬性，它可以使用這個屬性來取得空的集合<xref:System.Xml.Linq.XAttribute>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XElement.EmptySequence" />
        <altmember cref="Overload:System.Xml.Linq.XAttribute.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public bool IsNamespaceDeclaration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceDeclaration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNamespaceDeclaration : bool" Usage="System.Xml.Linq.XAttribute.IsNamespaceDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>判斷這個屬性是否為命名空間宣告。</summary>
        <value>如果這個屬性是命名空間宣告，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 技術上來說，在 XML 中，命名空間宣告不正確的屬性。 不過，這項區別通常不會造成大部分的 XML 程式設計人員。 相反地，因為命名空間宣告屬性完全相同的語法，大部分的 XML 程式設計人員想像的命名空間屬性。 若要簡化[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]程式設計介面、 命名空間以 XML 樹狀結構中的屬性。 您可以使用這個屬性來判斷特定[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]屬性實際上是命名空間宣告。  
  
   
  
## Examples  
 下列範例會建立為命名空間宣告的屬性並不是屬性。 然後，它會使用此屬性以顯示每個屬性是否為命名空間宣告。  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "content")  
);  
  
foreach (XAttribute att in root.Attributes()) {  
    if (att.IsNamespaceDeclaration)  
        Console.WriteLine("{0} is a namespace declaration", att.Name);  
    else  
        Console.WriteLine("{0} is not a namespace declaration", att.Name);  
}  
```  
  
```vb  
Dim root As XElement = <aw:Root xmlns:aw='http://www.adventure-works.com'  
                           aw:Att='content'/>  
  
For Each att As XAttribute In root.Attributes()  
    If (att.IsNamespaceDeclaration) Then  
        Console.WriteLine("{0} is a namespace declaration", att.Name)  
    Else  
        Console.WriteLine("{0} is not a namespace declaration", att.Name)  
    End If  
Next  
```  
  
 這個範例會產生下列輸出：  
  
```  
{http://www.w3.org/2000/xmlns/}aw is a namespace declaration  
{http://www.adventure-works.com}Att is not a namespace declaration  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XNamespace" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : System.Xml.Linq.XName" Usage="System.Xml.Linq.XAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個屬性的擴展名稱 (Expanded Name)。</summary>
        <value>
          <see cref="T:System.Xml.Linq.XName" />，包含這個屬性的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性所傳回的展開的名稱的格式為`{namespace}localname`。  
  
   
  
## Examples  
 下列範例會建立具有三個屬性的元素。 然後，它會使用此屬性可列印出每個屬性的名稱。 此範例也會示範建立新的屬性使用現有屬性的名稱。  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "content"),  
    new XAttribute("Att2", "different content")  
);  
  
foreach (XAttribute att in root.Attributes())  
    Console.WriteLine("{0}={1}", att.Name, att.Value);  
Console.WriteLine("");  
  
XElement newRoot = new XElement(aw + "Root",  
    from att in root.Attributes("Att2")  
    select new XAttribute(att.Name, "new content"));  
  
foreach (XAttribute att in newRoot.Attributes())  
    Console.WriteLine("{0}={1}", att.Name, att.Value);  
```  
  
```vb  
Dim root As XElement = _   
    <aw:Root xmlns:aw='http://www.adventure-works.com'  
        aw:Att='content'  
        Att2='different content'/>  
  
For Each att As XAttribute In root.Attributes()  
    Console.WriteLine("{0}={1}", att.Name, att.Value)  
Next  
Console.WriteLine("")  
  
Dim NewRoot As XElement = _  
<Root  
    <%= _  
        From att In root.Attributes("Att2") _  
        Select New XAttribute(att.Name, "new content") _  
    %>>_  
</Root>  
  
For Each att As XAttribute In NewRoot.Attributes()  
    Console.WriteLine("{0}={1}", att.Name, att.Value)  
Next  
  
```  
  
 這個範例會產生下列輸出：  
  
```  
{http://www.w3.org/2000/xmlns/}aw=http://www.adventure-works.com  
{http://www.adventure-works.com}Att=content  
Att2=different content  
  
Att2=new content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Linq.XName" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
    <Member MemberName="NextAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute NextAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute NextAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.NextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ NextAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XAttribute.NextAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得下一個父項目屬性。</summary>
        <value>
          <see cref="T:System.Xml.Linq.XAttribute" />，包含下一個父項目屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性會保留在 XML 樹狀目錄中已加入至元素的順序。 所傳回的屬性集合的時<xref:System.Xml.Linq.XElement.Attributes%2A>，他們是否已新增，且未排序的順序傳回。 當您要求下一個屬性，透過這個屬性時，這個屬性會傳回這個屬性之後新增的屬性。  
  
 如果這個屬性沒有父代，或如果沒有下一個屬性，則這個屬性會傳回`null`。  
  
   
  
## Examples  
 下列範例示範如何逐一查看使用此屬性項目的屬性。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4)  
);  
  
XAttribute att = root.FirstAttribute;  
do {  
    Console.WriteLine(att);  
}  
while((att = att.NextAttribute) != null);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4"/>  
Dim att As XAttribute = root.FirstAttribute  
Dim val As Boolean = True  
Do  
    Console.WriteLine(att)  
    att = att.NextAttribute  
Loop While (Not (att Is Nothing))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Att1="1"  
Att2="2"  
Att3="3"  
Att4="4"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.PreviousAttribute" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.Linq.XAttribute.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得此節點的節點類型。</summary>
        <value>節點類型。 對於 <see cref="T:System.Xml.Linq.XAttribute" /> 物件，此值為 <see cref="F:System.Xml.XmlNodeType.Attribute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為所有的類別，衍生自<xref:System.Xml.Linq.XObject>包含<xref:System.Xml.Linq.XObject.NodeType%2A>屬性，您可以撰寫程式碼的運作方式的具體子類別集合<xref:System.Xml.Linq.XObject>。 集合中每個節點的節點類型可以然後測試您的程式碼。  
  
   
  
## Examples  
 下列範例會建立屬性 (attribute)，然後顯示 使用這個屬性的節點型別。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "content")  
);  
  
XAttribute att = root.FirstAttribute;  
Console.WriteLine(att.NodeType);  
```  
  
```vb  
Dim root As XElement = <Root Att="content"/>  
Dim att As XAttribute = root.FirstAttribute  
Console.WriteLine(att.NodeType.ToString)  
```  
  
 這個範例會產生下列輸出：  
  
```  
  
Attribute  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
        <altmember cref="T:System.Xml.Linq.XNode" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; bool" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Boolean" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Boolean" />。</summary>
        <returns>
          <see cref="T:System.Boolean" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當轉換成<xref:System.Boolean>屬性或項目，從允許的值為"0"、"1"，與任何字串，會產生"true"或"false"修剪並轉換成小寫之後。  
 
## Examples  
 下列範例會建立具有屬性<xref:System.Boolean>值，然後將它轉換成<xref:System.Boolean>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("BoolValue", true)  
);  
bool bv = (bool)root.Attribute("BoolValue");  
Console.WriteLine("(bool)BoolValue={0}", bv);  
```  
  
```vb  
Dim root As XElement = <root BoolValue="true"/>  
Dim bv As Boolean = CBool(root.Attribute("BoolValue"))  
Console.WriteLine("(bool)BoolValue={0}", bv)  
```  
  
 這個範例會產生下列輸出：  
  
```  
(bool)BoolValue=True  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Boolean" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; DateTime" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.DateTime" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.DateTime" />。</summary>
        <returns>
          <see cref="T:System.DateTime" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性或元素，其中包含日期和時間內容的值空間是與密切相關的日期和時間以 ISO 8601 所述。 建立屬性或元素，其中包含日期和時間內容時，屬性或項目值的格式依據 W3C 規格中。 W3C 規格，如需詳細資訊，請參閱。  
  
 轉換成時，行為是 lax<xref:System.DateTime>從屬性或項目。 即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.DateTime>。  
  
 使用此轉換運算子<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>將從<xref:System.DateTime>。  
 
## Examples  
 下列範例會建立具有日期和時間內容的屬性。 它接著將它轉換成<xref:System.DateTime>來擷取值。  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
Console.WriteLine(root);  
  
// casting from a strictly formatted XML attribute  
DateTime dt = (DateTime)root.Attribute("Att");  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// if root is formatted in some different way than the standard ISO 8601, if at all possible,  
// the value is appropriately converted to DateTime  
  
XAttribute dtAtt = new XAttribute("OrderDate", "October 6, 2006");  
Console.WriteLine(dtAtt);  
DateTime orderDate = (DateTime)dtAtt;  
Console.WriteLine("OrderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>  
  
Console.WriteLine(root)  
  
' casting from a strictly formatted XML attribute  
Dim dt As DateTime = CType(root.Attribute("Att"), DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' if root is formatted in some different way than the standard ISO 8601, if at all possible,  
' the value is appropriately converted to DateTime  
Dim dtAtt As XAttribute = New XAttribute("OrderDate", "October 6, 2006")  
Console.WriteLine(dtAtt)  
Dim orderDate As DateTime = CType(dtAtt, DateTime)  
Console.WriteLine("OrderDate={0:d}", orderDate)  
```  
  
 這個範例會產生下列輸出：  
  
```  
<Root Att="2006-10-06T12:30:00" />  
dt=10/6/2006 12:30:00 PM  
-----  
OrderDate="October 6, 2006"  
OrderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.DateTime" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; DateTimeOffset" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.DateTimeOffset" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>
          <see cref="T:System.DateTimeOffset" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此轉換運算子會使用<xref:System.Xml.XmlConvert>類別來執行轉換。  

## Examples  
 下列範例會建立具有日期和時間內容的屬性。 它接著將它轉換成<xref:System.DateTimeOffset>來擷取值。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
// casting from a strictly formatted XML attribute  
DateTimeOffset dt = (DateTimeOffset)root.Attribute("Att");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root  
        Att=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>  
Console.WriteLine(root)  
  
' casting from a strictly formatted XML attribute  
Dim dt As DateTimeOffset = CType(root.Attribute("Att"), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 這個範例會產生下列輸出：  
  
```  
<Root Att="2006-10-06T12:30:00-07:00" />  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; decimal" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Decimal" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Decimal" />。</summary>
        <returns>
          <see cref="T:System.Decimal" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有十進位值的屬性。 它接著會擷取屬性的值轉換為<xref:System.Decimal>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "79228162514264337593543950335")  
);  
decimal value = (decimal)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="79228162514264337593543950335"/>  
Dim value As Decimal = CDec(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Decimal" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; double" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Double" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Double" />。</summary>
        <returns>
          <see cref="T:System.Double" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有屬性<xref:System.Double>內容。 它接著擷取值轉換為<xref:System.Double>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1.79769313486231e308)  
);  
double value = (double)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="1.79769313486231E+308"/>  
Dim value As Double = CDbl(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Double" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Guid" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Guid" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Guid" />。</summary>
        <returns>
          <see cref="T:System.Guid" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立 GUID 與屬性，做為內容。 它接著擷取值轉換為<xref:System.Guid>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid value = (Guid)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %>/>  
Dim value As Guid = CType(root.Attribute("Att"), Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Guid" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; int" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Int32" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Int32" />。</summary>
        <returns>
          <see cref="T:System.Int32" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有整數內容屬性。 它接著擷取值轉換為<xref:System.Int32>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 2147483647)  
);  
int value = (int)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="2147483647"/>  
Dim value As Integer = CInt(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Int32" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; int64" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Int64" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Int64" />。</summary>
        <returns>
          <see cref="T:System.Int64" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立長整數具有內容屬性。 它接著會擷取屬性的值轉換為<xref:System.Int64>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 9223372036854775807)  
);  
long value = (long)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Long = CLng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Int64" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;bool&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Boolean" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當轉換成<xref:System.Boolean>屬性或項目，從允許的值為"0"、"1"，與任何字串，會產生"true"或"false"修剪並轉換成小寫之後。  

## Examples  
 下列範例會建立一個屬性，則為 True 的內容。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Boolean>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("BoolValue1", true),  
    new XAttribute("BoolValue2", false)  
);  
bool? bool1 = (bool?)root.Attribute("BoolValue1");  
bool? bool2 = (bool?)root.Attribute("BoolValue2");  
Console.WriteLine("Nullable boolean: BoolValue1={0}", bool1);  
Console.WriteLine("Nullable boolean: BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = <Root BoolValue1="true" BoolValue2="false"/>  
Dim bool1 As Nullable(Of Boolean) = CType(root.Attribute("BoolValue1"), Nullable(Of Boolean))  
Dim bool2 As Nullable(Of Boolean) = CType(root.Attribute("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable boolean: BoolValue1={0}", bool1)  
Console.WriteLine("Nullable boolean: BoolValue2={0}", bool2)  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable boolean: BoolValue1=True  
Nullable boolean: BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Boolean" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;DateTime&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性或元素，其中包含日期和時間內容的值空間是與密切相關的日期和時間以 ISO 8601 所述。 建立屬性或元素，其中包含日期和時間內容時，屬性或項目值的格式依據 W3C 規格中。 W3C 規格，如需詳細資訊，請參閱。  
  
 轉換成時，行為是 lax<xref:System.Nullable%601>的<xref:System.DateTime>從屬性或項目。 即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.Nullable%601>的<xref:System.DateTime>。  
  
 使用此轉換運算子<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>將從<xref:System.DateTime>。  
  
## Examples  
 下列範例會建立具有日期和時間內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.DateTime>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Attribute("Att");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>  
Dim value As Nullable(Of DateTime) = CType(root.Attribute("Att"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.DateTime" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;DateTimeOffset&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTimeOffset" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此轉換運算子會使用<xref:System.Xml.XmlConvert>類別來執行轉換。  
 
## Examples  
 下列範例會建立具有日期和時間內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.DateTimeOffset>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
DateTimeOffset? value = (DateTimeOffset?)root.Attribute("Att");  
Console.WriteLine("Nullable DateTimeOffset: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root  
        Att=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>  
Dim value As Nullable(Of DateTimeOffset) = CType(root.Attribute("Att"), Nullable(Of DateTimeOffset))  
Console.WriteLine("Nullable DateTimeOffset: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable DateTimeOffset: value=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.DateTimeOffset" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;decimal&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Decimal" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立一個屬性，十進位的內容。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Decimal>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Attribute("Att");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="79228162514264337593543950335"/>  
Dim value As Nullable(Of Decimal) = CType(root.Attribute("Att"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Decimal" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;double&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Double" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立使用雙精確度浮點內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Double>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1.79769313486231e308)  
);  
double? value = (double?)root.Attribute("Att");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="1.79769313486231E+308"/>  
Dim value As Nullable(Of Double) = CType(root.Attribute("Att"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Double" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;Guid&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Guid" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有 guid 內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Guid>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Attribute("Att");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %>/>  
Dim value As Nullable(Of Guid) = CType(root.Attribute("Att"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Guid" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;int&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int32" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有整數內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Int32>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 2147483647)  
);  
int? value = (int?)root.Attribute("Att");  
Console.WriteLine("Nullable int: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="2147483647"/>  
Dim value As Nullable(Of Integer) = CType(root.Attribute("Att"), Nullable(Of Integer))  
Console.WriteLine("Nullable int: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable int: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;int64&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有長整數內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Int64>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 9223372036854775807)  
);  
long? value = (long?)root.Attribute("Att");  
Console.WriteLine("Nullable long: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Nullable(Of Long) = CType(root.Attribute("Att"), Nullable(Of Long))  
Console.WriteLine("Nullable long: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable long: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Int64" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;single&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Single" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有單精度浮點內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.Single>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 3.402823e38)  
);  
float? value = (float?)root.Attribute("Att");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="3.402823E+38"/>  
Dim value As Nullable(Of Single) = CType(root.Attribute("Att"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Single" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;TimeSpan&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.TimeSpan" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性或元素，其中包含時間範圍內容的值空間被密切期間內容以 ISO 8601 所述。 建立屬性或元素，其中包含時間範圍的內容時，屬性或項目值的格式依據 W3C 規格中。 請 W3C 規格，如需詳細資訊，參閱。  
  
 轉換成時，行為是 lax<xref:System.Nullable%601>的<xref:System.TimeSpan>從屬性或項目。 即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.Nullable%601>的<xref:System.TimeSpan>。  

## Examples  
 下列範例會建立具有時間範圍內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.TimeSpan>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Attribute("Att");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>  
Dim value As Nullable(Of TimeSpan) = CType(root.Attribute("Att"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.TimeSpan" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;uint32&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt32" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有不帶正負號的整數內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.UInt32>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 4294967295)  
);  
uint? value = (uint?)root.Attribute("Att");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="4294967295"/>  
Dim value As Nullable(Of UInteger) = CType(root.Attribute("Att"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.UInt32" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; Nullable&lt;uint64&gt;" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <see cref="T:System.Xml.Linq.XAttribute" />，要轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />。</summary>
        <returns>
          <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.UInt64" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有不帶正負號的長整數內容的屬性。 它接著擷取值轉換為<xref:System.Nullable%601>的<xref:System.UInt64>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Attribute("Att");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att="9223372036854775807"/>  
Dim value As Nullable(Of ULong) = CType(root.Attribute("Att"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.UInt64" /> 值。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; single" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.Single" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.Single" />。</summary>
        <returns>
          <see cref="T:System.Single" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有單精度浮點內容的屬性。 它接著擷取值轉換為<xref:System.Single>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 3.402823e38)  
);  
float value = (float)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="3.402823E+38"/>  
Dim value As Single = CSng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.Single" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; string" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.String" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.String" />。</summary>
        <returns>
          <see cref="T:System.String" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立一個屬性，字串內容。 它接著擷取值轉換為<xref:System.String>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = root.Attribute("Att");  
string str = (string)att;  
Console.WriteLine("(string)att={0}", str);  
```  
  
```vb  
Dim root As XElement = <Root Att="attribute content"/>  
Dim att As XAttribute = root.Attribute("Att")  
Dim str As String = CStr(att)  
Console.WriteLine("(string)att={0}", str)  
```  
  
 這個範例會產生下列輸出：  
  
```  
(string)att=attribute content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; TimeSpan" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.TimeSpan" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.TimeSpan" />。</summary>
        <returns>
          <see cref="T:System.TimeSpan" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性或元素，其中包含時間範圍內容的值空間被密切期間內容以 ISO 8601 所述。 建立屬性或元素，其中包含時間範圍的內容時，屬性或項目值的格式依據 W3C 規格中。 請 W3C 規格，如需詳細資訊，參閱。  
  
 轉換成時，行為是 lax<xref:System.TimeSpan>從屬性或項目。 即使屬性或項目值的格式不完全是依據 W3C 規格，值會適當地轉換成<xref:System.TimeSpan>。  

## Examples  
 下列範例會建立具有時間範圍內容的屬性。 它接著擷取值轉換為<xref:System.TimeSpan>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", new TimeSpan(1, 5, 30))  
);  
TimeSpan value = (TimeSpan)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>  
Dim value As TimeSpan = CType(root.Attribute("Att"), TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.TimeSpan" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; uint32" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.UInt32" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.UInt32" />。</summary>
        <returns>
          <see cref="T:System.UInt32" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有不帶正負號的整數內容的屬性。 它接著擷取值轉換為<xref:System.UInt32>。  
  
```csharp  
XElement root = new XElement("Root",   
    new XAttribute("Att", 4294967295)  
);  
uint value = (uint)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="4294967295"/>  
Dim value As UInteger = CUInt(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.UInt32" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (attribute As XAttribute) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Xml.Linq.XAttribute -&gt; uint64" Usage="System.Xml.Linq.XAttribute.op_Explicit attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Xml.Linq.XAttribute" />
      </Parameters>
      <Docs>
        <param name="attribute">要轉型為 <see cref="T:System.Xml.Linq.XAttribute" /> 的 <see cref="T:System.UInt64" />。</param>
        <summary>將此 <see cref="T:System.Xml.Linq.XAttribute" /> 的值轉型為 <see cref="T:System.UInt64" />。</summary>
        <returns>
          <see cref="T:System.UInt64" />，包含這個 <see cref="T:System.Xml.Linq.XAttribute" /> 的內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 下列範例會建立具有不帶正負號的長整數內容的屬性。 它接著擷取值轉換為<xref:System.UInt64>。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", 1844674407370955161)  
);  
ulong value = (ulong)root.Attribute("Att");  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root Att="1844674407370955161"/>  
Dim value As ULong = CULng(root.Attribute("Att"))  
Console.WriteLine("value={0}", value)  
```  
  
 這個範例會產生下列輸出：  
  
```  
value=1844674407370955161  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">此屬性不包含有效的 <see cref="T:System.UInt64" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attribute" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}" />
      </Docs>
    </Member>
    <Member MemberName="PreviousAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute PreviousAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute PreviousAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.PreviousAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ PreviousAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousAttribute : System.Xml.Linq.XAttribute" Usage="System.Xml.Linq.XAttribute.PreviousAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得父項目的前一個屬性。</summary>
        <value>
          <see cref="T:System.Xml.Linq.XAttribute" />，包含父項目的前一個屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性會保留在 XML 樹狀目錄中已加入至元素的順序。 所傳回的屬性集合的時<xref:System.Xml.Linq.XElement.Attributes%2A>，他們是否已新增，且未排序的順序傳回。 當您要求透過此屬性前一個屬性時，這個屬性會傳回這個屬性之前加入的屬性。  
  
 如果這個屬性沒有父代，或如果此屬性的第一個屬性，則這個屬性會傳回`null`。  
  
 <xref:System.Xml.Linq.XElement>類別會儲存為單向連結清單及其屬性<xref:System.Xml.Linq.XAttribute>物件。 這表示<xref:System.Xml.Linq.XAttribute.PreviousAttribute%2A>屬性都必須周遊的項目所屬的屬性清單。 因此，使用這個屬性可能會影響您的效能。  
  
   
  
## Examples  
 下列範例示範如何逐一查看使用此屬性項目的屬性。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XAttribute("Att4", 4)  
);  
XAttribute att = root.LastAttribute;  
do {  
    Console.WriteLine(att);  
}  
while((att = att.PreviousAttribute) != null);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3" Att4="4"/>  
Dim att As XAttribute = root.LastAttribute  
Dim val As Boolean = True  
Do  
    Console.WriteLine(att)  
    att = att.PreviousAttribute  
Loop While (Not (att Is Nothing))  
```  
  
 這個範例會產生下列輸出：  
  
```  
Att4="4"  
Att3="3"  
Att2="2"  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.NextAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="xAttribute.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個屬性從其父項目移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來修改 XML 樹狀結構。 這個方法會導致發生的事件。  
  
 有許多情況下您可能會想移除一組屬性。 在 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]程式設計，您應該不管理或修改一組節點，而您要查詢該集合中的節點。 實際上，這表示您應該不逐一查看一組屬性並將它們移除。 相反地，您應該將這些集合具體化到<xref:System.Collections.Generic.List%601>使用<xref:System.Linq.Enumerable.ToList%2A>擴充方法。 然後您可以逐一查看清單中，移除屬性。 如需詳細資訊，請參閱 <<c0> [ 混合宣告式程式碼/命令式程式碼 Bug (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)。  
  
 或者，如果您想要移除的屬性集，建議您改用<xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType>方法。 這個方法會將屬性複製到清單中，然後逐一查看清單中，移除屬性。  
  
   
  
## Examples  
 下列範例會建立具有三個屬性的元素。 它接著會移除其中一個屬性。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
att.Remove();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
att.Remove()  
Console.WriteLine(root)  
```  
  
 這個範例會產生下列輸出：  
  
```  
<Root Att1="content1" Att3="content3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">父項目為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj -&gt; unit" Usage="xAttribute.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要指派給屬性的值。</param>
        <summary>設定這個屬性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此值會轉換為其字串表示並指派給 <xref:System.Xml.Linq.XAttribute.Value%2A> 屬性。  
  
 是無效的傳遞衍生自類別的執行個體<xref:System.Xml.Linq.XObject>，這類<xref:System.Xml.Linq.XElement>或<xref:System.Xml.Linq.XAttribute>。  
  
 這個方法會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。  
  
   
  
## Examples  
 下列範例會建立具有多個屬性的元素。 然後，它會變更其中一個屬性的內容。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
att.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
att.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 這個範例會產生下列輸出：  
  
```  
<Root Att1="content1" Att2="new content" Att3="content3" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 是 <see cref="T:System.Xml.Linq.XObject" />。</exception>
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XAttribute.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xAttribute.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目前的 <see cref="T:System.Xml.Linq.XAttribute" /> 物件轉換為字串表示。</summary>
        <returns>
          <see cref="T:System.String" />，包含屬性的 XML 文字表示和其值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回字串的形式`AttributeName="content"`。  
  
> [!WARNING]
>  當呼叫這個方法和<xref:System.Xml.Linq.XAttribute>包含控制字元，例外狀況擲回含有如下訊息： 0x0B 的十六進位值是無效的字元。  
  
   
  
## Examples  
 下列範例會建立具有多個屬性的元素。 然後它會取得屬性，並顯示它和其內容呼叫這個方法。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2"),  
    new XAttribute("Att3", "content3")  
);  
XAttribute att = root.Attribute("Att2");  
Console.WriteLine(att.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att1="content1" Att2="content2" Att3="content3"/>  
Dim att As XAttribute = root.Attribute("Att2")  
Console.WriteLine(att.ToString())  
```  
  
 這個範例會產生下列輸出：  
  
```  
Att2="content2"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Value" />
        <altmember cref="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Xml.Linq.XAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此屬性 (Attribute) 的值。</summary>
        <value>包含此屬性之值的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來取得或設定屬性的值。  
  
 設定這個屬性將會引發<xref:System.Xml.Linq.XObject.Changed>而<xref:System.Xml.Linq.XObject.Changing>事件。  
  
 如果您要取得值，屬性可能不存在，會更方便使用的明確轉換運算子，並指派屬性為 null 的類型，例如`string`或是<xref:System.Nullable%601>的<xref:System.Int32>。 如果屬性不存在，則可為 null 的類型設為`null`。 之前使用此屬性，您必須確定<xref:System.Xml.Linq.XElement.Attribute%2A>方法沒有傳回`null`。  
  
   
  
## Examples  
 下列範例會建立具有屬性的元素。 它擷取屬性的值，然後再將它設定。  
  
 請注意，Visual Basic 範例會使用 XML 屬性的屬性。  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att", "content")  
);  
XAttribute att = root.FirstAttribute;  
Console.WriteLine(att.Value);  
att.Value = "new text";  
Console.WriteLine(att.Value);  
```  
  
```vb  
Dim root As XElement = <Root Att="content"/>  
Console.WriteLine(root.@Att)  
root.@Att = "new text"  
Console.WriteLine(root.@Att)  
```  
  
 這個範例會產生下列輸出：  
  
```  
content  
new text  
```  
  
 下列範例示範使用明確轉換運算子，以取得可能不存在的屬性值的好處：  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", "attribute 1 content"),  
    new XAttribute("Att2", "2")  
);  
  
// The following assignments demonstrate why it is easier to use  
// casting when the attribute might or might not exist.  
  
string c1 = (string)root.Attribute("Att1");  
Console.WriteLine("c1:{0}", c1 == null ? "attribute does not exist" : c1);  
  
int? c2 = (int?)root.Attribute("Att2");  
Console.WriteLine("c2:{0}", c2 == null ? "attribute does not exist" : c2.ToString());  
  
string c3 = (string)root.Attribute("Att3");  
Console.WriteLine("c3:{0}", c3 == null ? "attribute does not exist" : c3);  
  
int? c4 = (int?)root.Attribute("Att4");  
Console.WriteLine("c4:{0}", c4 == null ? "attribute does not exist" : c4.ToString());  
  
Console.WriteLine();  
  
// The following assignments show the necessary code when using  
// the value property when the attribute might or might not exist.  
  
XAttribute att1 = root.Attribute("Att1");  
string v1;  
if (att1 == null)  
    v1 = null;  
else  
    v1 = att1.Value;  
Console.WriteLine("v1:{0}", v1 == null ? "attribute does not exist" : v1);  
  
XAttribute att2 = root.Attribute("Att2");  
int? v2;  
if (att2 == null)  
    v2 = null;  
else  
    v2 = Int32.Parse(att2.Value);  
Console.WriteLine("v2:{0}", v2 == null ? "attribute does not exist" : v2.ToString());  
  
XAttribute att3 = root.Attribute("Att3");  
string v3;  
if (att3 == null)  
    v3 = null;  
else  
    v3 = att3.Value;  
Console.WriteLine("v3:{0}", v3 == null ? "attribute does not exist" : v3);  
  
XAttribute att4 = root.Attribute("Att4");  
int? v4;  
if (att4 == null)  
    v4 = null;  
else  
    v4 = Int32.Parse(att4.Value);  
Console.WriteLine("v4:{0}", v4 == null ? "attribute does not exist" : v4.ToString());  
```  
  
```vb  
Dim root As XElement = <Root Att1="attribute 1 content" Att2="2"/>  
  
' The following assignments demonstrate why it is easier to use  
' casting when the attribute might or might not exist.  
  
Dim c1 As String = CStr(root.Attribute("Att1"))  
Console.WriteLine("c1:{0}", IIf(c1 Is Nothing, "attribute does not exist", c1))  
  
Dim c2 As Nullable(Of Integer) = CType(root.Attribute("Att2"), Nullable(Of Integer))  
Console.WriteLine("c2:{0}", IIf(c2.HasValue, c2, "attribute does not exist"))  
  
Dim c3 As String = CStr(root.Attribute("Att3"))  
Console.WriteLine("c3:{0}", IIf(c3 Is Nothing, "attribute does not exist", c3))  
  
Dim c4 As Nullable(Of Integer) = CType(root.Attribute("Att4"), Nullable(Of Integer))  
Console.WriteLine("c4:{0}", IIf(c4.HasValue, c4, "attribute does not exist"))  
  
Console.WriteLine()  
  
' The following assignments show the necessary code when using  
' the value property when the attribute might or might not exist.  
  
Dim att1 As XAttribute = root.Attribute("Att1")  
Dim v1 As String  
If att1 Is Nothing Then  
    v1 = Nothing  
Else  
    v1 = att1.Value  
End If  
  
Console.WriteLine("v1:{0}", IIf(v1 Is Nothing, "attribute does not exist", v1))  
  
Dim att2 As XAttribute = root.Attribute("Att2")  
Dim v2 As Nullable(Of Integer)  
If att2 Is Nothing Then  
    v2 = Nothing  
Else  
    v2 = Int32.Parse(att2.Value)  
End If  
  
Console.WriteLine("v2:{0}", IIf(v2.HasValue, v2, "attribute does not exist"))  
  
Dim att3 As XAttribute = root.Attribute("Att3")  
Dim v3 As String  
If att3 Is Nothing Then  
    v3 = Nothing  
Else  
    v3 = att3.Value  
End If  
  
Console.WriteLine("v3:{0}", IIf(v3 Is Nothing, "attribute does not exist", v3))  
  
Dim att4 As XAttribute = root.Attribute("Att4")  
Dim v4 As Nullable(Of Integer)  
If att4 Is Nothing Then  
    v4 = Nothing  
Else  
    v4 = Int32.Parse(att4.Value)  
End If  
  
Console.WriteLine("v4:{0}", IIf(v4.HasValue, v4, "attribute does not exist"))  
```  
  
 這個範例會產生下列輸出：  
  
```  
c1:attribute 1 content  
c2:2  
c3:attribute does not exist  
c4:attribute does not exist  
  
v1:attribute 1 content  
v2:2  
v3:attribute does not exist  
v4:attribute does not exist  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定時，<paramref name="value" /> 為 <see langword="null" />。</exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="P:System.Xml.Linq.XAttribute.Name" />
        <altmember cref="M:System.Xml.Linq.XAttribute.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>