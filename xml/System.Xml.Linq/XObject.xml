<Type Name="XObject" FullName="System.Xml.Linq.XObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21d2fddfb97fd2308d0e542f7e64ec71a761941f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XObject : System.Xml.IXmlLineInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XObject extends System.Object implements class System.Xml.IXmlLineInfo" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XObject&#xA;Implements IXmlLineInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class XObject abstract : System::Xml::IXmlLineInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="87c34-101">代表 XML 樹狀中的節點或屬性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="87c34-101">Represents a node or an attribute in an XML tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-102">這個類別是抽象通用基底類別<xref:System.Xml.Linq.XNode>和<xref:System.Xml.Linq.XAttribute>。</span><span class="sxs-lookup"><span data-stu-id="87c34-102">This class is the abstract common base class for <xref:System.Xml.Linq.XNode> and <xref:System.Xml.Linq.XAttribute>.</span></span> <span data-ttu-id="87c34-103">它提供兩個類別，例如註解，以及節點已變更時引發的事件通用的一些基本功能。</span><span class="sxs-lookup"><span data-stu-id="87c34-103">It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.</span></span>  
  
 <span data-ttu-id="87c34-104">請注意，這些附註不是 XML 資訊集的一部分；它們無法進行序列化或還原序列化。</span><span class="sxs-lookup"><span data-stu-id="87c34-104">Note that annotations are not part of the XML infoset; they are not serialized or deserialized.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (object annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(object annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAnnotation (annotation As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAnnotation(System::Object ^ annotation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="annotation">
          <span data-ttu-id="87c34-105">
            <see cref="T:System.Object" />，包含要加入的註釋。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-105">An <see cref="T:System.Object" /> that contains the annotation to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87c34-106">將物件加入此 <see cref="T:System.Xml.Linq.XObject" /> 的註釋清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-106">Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-107">請注意，註解集; 的一部分不會保存下來，或是由顯示<xref:System.Xml.Linq.XNode.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="87c34-107">Note that annotations are not part of the infoset; they are not persisted, or displayed by <xref:System.Xml.Linq.XNode.ToString%2A>.</span></span> <span data-ttu-id="87c34-108">此外，如果您匯入 VB 專案的 XML 命名空間，並呼叫 AddAnnotation SaveOptions.OmitDuplicateNamespaces 列舉值，則只有一個項目將包含 XML 命名空間屬性，而不是每個項目。</span><span class="sxs-lookup"><span data-stu-id="87c34-108">Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element.</span></span> <span data-ttu-id="87c34-109">如需詳細資訊，請參閱[XML 常值中移除重複的命名空間](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)。</span><span class="sxs-lookup"><span data-stu-id="87c34-109">For more information, see [Removing duplicate namespaces in XML Literals](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-110">下列範例會將附註<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="87c34-110">The following example adds an annotation to an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = (MyAnnotation)root.Annotation<MyAnnotation>();  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(Of MyAnnotation)(), MyAnnotation)  
        Console.WriteLine(ma2.Tag)  
    End Sub  
  
End Module  
```  
  
 <span data-ttu-id="87c34-111">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-111">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public object Annotation (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Annotation(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotation(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Annotation(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="87c34-112">要擷取之註釋的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-112">The <see cref="T:System.Type" /> of the annotation to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87c34-113">從此 <see cref="T:System.Xml.Linq.XObject" /> 取得指定類型的第一個註釋物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-113">Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87c34-114">
            <see cref="T:System.Object" />，包含符合指定類型的第一個註釋物件，如果沒有指定類型的註釋，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-114">The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or <see langword="null" /> if no annotation is of the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-115">下列範例會將附註<xref:System.Xml.Linq.XElement>。</span><span class="sxs-lookup"><span data-stu-id="87c34-115">The following example adds an annotation to an <xref:System.Xml.Linq.XElement>.</span></span> <span data-ttu-id="87c34-116">然後，它會擷取註解，指定要擷取的類型。</span><span class="sxs-lookup"><span data-stu-id="87c34-116">It then retrieves the annotation, specifying the type to retrieve.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = (MyAnnotation)root.Annotation(typeof(MyAnnotation));  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = DirectCast(root.Annotation(GetType(MyAnnotation)), MyAnnotation)  
        Console.WriteLine(ma2.Tag)  
    End Sub  
  
End Module  
```  
  
 <span data-ttu-id="87c34-117">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-117">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotation&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Annotation&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Annotation&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotation``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotation(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T Annotation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="87c34-118">要擷取的註釋類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-118">The type of the annotation to retrieve.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="87c34-119">取得此 <see cref="T:System.Xml.Linq.XObject" /> 之指定類型的第一個註釋物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-119">Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87c34-120">符合指定類型的第一個註釋物件，或者如果沒有指定類型的註釋，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-120">The first annotation object that matches the specified type, or <see langword="null" /> if no annotation is of the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-121">下例會將註解加入至項目，並接著透過這個方法會擷取它。</span><span class="sxs-lookup"><span data-stu-id="87c34-121">The following example adds an annotation to an element, and then retrieves it through this method.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
public class Program {  
    public static void Main(string[] args) {     
        MyAnnotation ma = new MyAnnotation("T1");  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(ma);  
  
        MyAnnotation ma2 = root.Annotation<MyAnnotation>();  
        Console.WriteLine(ma2.Tag);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim ma As MyAnnotation = New MyAnnotation("T1")  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(ma)  
  
        Dim ma2 As MyAnnotation = root.Annotation(Of MyAnnotation)()  
        Console.WriteLine(ma2.Tag)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-122">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-122">This example produces the following output:</span></span>  
  
```  
T1  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; Annotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; Annotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotations(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ Annotations(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="87c34-123">要擷取之註釋的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-123">The <see cref="T:System.Type" /> of the annotations to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87c34-124">取得此 <see cref="T:System.Xml.Linq.XObject" /> 之指定類型註釋的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-124">Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87c34-125">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Object" />，包含符合此 <see cref="T:System.Xml.Linq.XObject" /> 指定類型的註釋。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-125">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-126">下列範例會加入一些註解<xref:System.Xml.Linq.XElement>，接著使用這個方法會擷取附註集合。</span><span class="sxs-lookup"><span data-stu-id="87c34-126">The following example adds some annotations to an <xref:System.Xml.Linq.XElement>, then retrieves a collection of annotations by using this method.</span></span>  
  
```csharp  
public class MyAnnotation  
{  
    private string tag;  
    public string Tag { get { return tag; } set { tag = value; } }  
    public MyAnnotation(string tag)  
    {  
        this.tag = tag;  
    }  
}  
  
class Program  
{  
    static void Main(string[] args)  
    {  
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        IEnumerable<object> annotationList;  
        annotationList = root.Annotations(typeof(MyAnnotation));  
        foreach (object ma in annotationList)  
            Console.WriteLine(((MyAnnotation)ma).Tag);  
        Console.WriteLine("----");  
  
        IEnumerable<object> stringAnnotationList;  
        stringAnnotationList = root.Annotations(typeof(string));  
        foreach (object str in stringAnnotationList)  
            Console.WriteLine((string)str);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Dim annotationList As IEnumerable(Of Object)  
        annotationList = root.Annotations(GetType(MyAnnotation))  
        For Each ma As MyAnnotation In annotationList  
            Console.WriteLine(ma.Tag)  
        Next  
  
        Console.WriteLine("----")  
  
        Dim stringAnnotationList As IEnumerable(Of Object)  
        stringAnnotationList = root.Annotations(GetType(String))  
        For Each str As String In stringAnnotationList  
            Console.WriteLine(str)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-127">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-127">This example produces the following output:</span></span>  
  
```  
T1  
T2  
----  
abc  
def  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Annotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Annotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.Annotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Annotations(Of T As Class) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class System::Collections::Generic::IEnumerable&lt;T&gt; ^ Annotations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="87c34-128">要擷取的註釋類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-128">The type of the annotations to retrieve.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="87c34-129">取得此 <see cref="T:System.Xml.Linq.XObject" /> 之指定類型註釋的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-129">Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87c34-130">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含此 <see cref="T:System.Xml.Linq.XObject" /> 的註釋。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-130">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-131">下列範例會使用這個方法來擷取項目上的註解。</span><span class="sxs-lookup"><span data-stu-id="87c34-131">The following example uses this method to retrieve annotations on an element.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program {  
    static void Main(string[] args) {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        IEnumerable<MyAnnotation> annotationList;  
        annotationList = root.Annotations<MyAnnotation>();  
        foreach (MyAnnotation ma in annotationList)  
            Console.WriteLine(ma.Tag);  
        Console.WriteLine("----");  
  
        IEnumerable<string> stringAnnotationList;  
        stringAnnotationList = root.Annotations<string>();  
        foreach (string str in stringAnnotationList)  
            Console.WriteLine(str);  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Dim annotationList As IEnumerable(Of MyAnnotation)  
        annotationList = root.Annotations(Of MyAnnotation)()  
        For Each ma As MyAnnotation In annotationList  
            Console.WriteLine(ma.Tag)  
        Next  
        Console.WriteLine("----")  
  
        Dim stringAnnotationList As IEnumerable(Of String)  
        stringAnnotationList = root.Annotations(Of String)()  
        For Each str As String In stringAnnotationList  
            Console.WriteLine(str)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-132">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-132">This example produces the following output:</span></span>  
  
```  
T1  
T2  
----  
abc  
def  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseUri">
      <MemberSignature Language="C#" Value="public string BaseUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.BaseUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUri As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseUri { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-133">取得此 <see cref="T:System.Xml.Linq.XObject" /> 的基底 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-133">Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-134">
            <see cref="T:System.String" />，包含這個 <see cref="T:System.Xml.Linq.XObject" /> 的基底 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-134">A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-135">使用 LINQ to XML，您可以還原序列化中的 fashions 的數字的 XML。</span><span class="sxs-lookup"><span data-stu-id="87c34-135">Using LINQ to XML, you can deserialize XML in a number of fashions.</span></span> <span data-ttu-id="87c34-136">您可以剖析從字串、 它從檔案載入或讀取從<xref:System.IO.TextReader>或<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="87c34-136">You can parse it from a string, load it from a file, or read it from a <xref:System.IO.TextReader> or an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="87c34-137">在所有這些情況下，LINQ to XML 會使用一個或另一個具象類別的子<xref:System.Xml.XmlReader>。</span><span class="sxs-lookup"><span data-stu-id="87c34-137">In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="87c34-138">有時<xref:System.Xml.XmlReader>基底 uri，而有時不會。</span><span class="sxs-lookup"><span data-stu-id="87c34-138">Sometimes the <xref:System.Xml.XmlReader> has the base URI, and sometimes it does not.</span></span> <span data-ttu-id="87c34-139">執行個體、 從檔案載入時<xref:System.Xml.XmlReader>知道的基底 URI，但當讀取<xref:System.Xml.XmlReader>，已建立，因為呼叫<xref:System.Xml.Linq.XElement.Parse%2A>方法，不可能發生的<xref:System.Xml.XmlReader>報告的基底 URI; 已中的 XML字串。</span><span class="sxs-lookup"><span data-stu-id="87c34-139">For instance, when loading from a file, the <xref:System.Xml.XmlReader> knows the base URI, but when reading from an <xref:System.Xml.XmlReader> that was created because of calling the <xref:System.Xml.Linq.XElement.Parse%2A> method, there is no possibility of the <xref:System.Xml.XmlReader> reporting a base URI; the XML was in a string.</span></span>  
  
 <span data-ttu-id="87c34-140">如果當剖析或載入的 XML 時，您指定<xref:System.Xml.Linq.LoadOptions.SetBaseUri>，LINQ to XML 會要求每個節點的基底 URI<xref:System.Xml.XmlReader>傳回的節點。</span><span class="sxs-lookup"><span data-stu-id="87c34-140">If, when parsing or loading the XML, you specify <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, LINQ to XML will request the base URI for each node as the <xref:System.Xml.XmlReader> returns the node.</span></span> <span data-ttu-id="87c34-141">如果讀取器的基底 URI，LINQ to XML 會將資訊儲存 linq to XML 節點。</span><span class="sxs-lookup"><span data-stu-id="87c34-141">If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node.</span></span> <span data-ttu-id="87c34-142">這個屬性會傳回該資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-142">This property returns that information.</span></span> <span data-ttu-id="87c34-143">如果基礎<xref:System.Xml.XmlReader>沒有基底 URI，則這個屬性會傳回空字串。</span><span class="sxs-lookup"><span data-stu-id="87c34-143">If the underlying <xref:System.Xml.XmlReader> does not have the base URI, then this property will return an empty string.</span></span>  
  
 <span data-ttu-id="87c34-144">設定<xref:System.Xml.Linq.LoadOptions.SetBaseUri>當載入 XML 樹狀結構會導致較慢的剖析。</span><span class="sxs-lookup"><span data-stu-id="87c34-144">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> when loading an XML tree will result in slower parsing.</span></span>  
  
 <span data-ttu-id="87c34-145">設定時的 XML 樹狀結構的基底 URI，LINQ to XML 會在樹狀目錄的根目錄上放置註解。</span><span class="sxs-lookup"><span data-stu-id="87c34-145">When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree.</span></span> <span data-ttu-id="87c34-146">這個屬性是計算的屬性，並瀏覽樹狀目錄以尋找基底 URI。</span><span class="sxs-lookup"><span data-stu-id="87c34-146">This property is a computed property, and navigates up the tree to find the base URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-147">載入檔案時，下列範例會載入基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-147">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="87c34-148">接著，它會列印的基底 URI 和行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-148">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="87c34-149">此範例使用下列 XML 文件︰[範例 XML 檔：典型採購訂單 (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)。</span><span class="sxs-lookup"><span data-stu-id="87c34-149">This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="87c34-150">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-150">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Xml.Linq.XObjectChangeEventArgs&gt; Changed" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Linq.XObject.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As EventHandler(Of XObjectChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Xml::Linq::XObjectChangeEventArgs ^&gt; ^ Changed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-151">當此 <see cref="T:System.Xml.Linq.XObject" /> 或其任何子代發生變更時會引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-151">Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-152">只有在修改 XML 樹狀結構時，不會在建構時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-152">Events are raised only when an XML tree is modified, not when it is constructed.</span></span> <span data-ttu-id="87c34-153">這是因為您必須將事件處理常式加入事件之前可以接收事件，而且之前有參考，您便無法加入事件處理常式<xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="87c34-153">This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="87c34-154">您無法取得參考<xref:System.Xml.Linq.XObject>之前在 XML 建構樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="87c34-154">You cannot get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed.</span></span> <span data-ttu-id="87c34-155">這表示期間的 XML 樹狀結構的功能結構，您無法接收事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-155">This means that during functional construction of an XML tree, you will not receive events.</span></span>  
  
 <span data-ttu-id="87c34-156">修改 XML 樹狀結構內其中一個事件，因為這樣可能會導致非預期的結果時，您應該要小心。</span><span class="sxs-lookup"><span data-stu-id="87c34-156">You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</span></span> <span data-ttu-id="87c34-157">例如，如果您收到<xref:System.Xml.Linq.XObject.Changing>事件，並在處理事件時樹狀結構中移除節點，您可能不會收到<xref:System.Xml.Linq.XObject.Changed>事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-157">For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event.</span></span> <span data-ttu-id="87c34-158">處理事件時，會修改 XML 樹狀結構不包含節點所收到的事件; 一個有效它無效，甚至修改相同的樹狀結構，提供所做的修改不會影響引發事件的特定節點。</span><span class="sxs-lookup"><span data-stu-id="87c34-158">When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</span></span> <span data-ttu-id="87c34-159">不過，如果您修改樹狀結構，其中包含接收事件的節點的區域，您會收到的事件和樹狀結構的影響會定義。</span><span class="sxs-lookup"><span data-stu-id="87c34-159">However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-160">下列範例會將 XML 樹狀結構的根項目中的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="87c34-160">The following example adds an event handler to the root element of an XML tree.</span></span> <span data-ttu-id="87c34-161">接著，它會修改樹狀目錄中，造成 LINQ to XML 來引發某些事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-161">It then modifies the tree, causing LINQ to XML to raise some events.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "content");  
root.Changing += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changing event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Changed += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changed event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Add(new XElement("Child", "child content"));  
```  
  
```vb  
Module Module1  
    WithEvents root As XElement = <Root>content</Root>  
  
    Sub Main()  
        root.Add(<Child>child content</Child>)  
    End Sub  
  
    Private Sub root_Changing( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changing  
        Dim xSender As XElement = DirectCast(sender, XElement)  
        Console.WriteLine("Changing event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
  
    Private Sub root_Changed( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changed  
        Dim xSender As XElement = DirectCast(sender, XElement)  
        Console.WriteLine("Changed event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-162">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-162">This example produces the following output:</span></span>  
  
```  
Changing event raised  
  Sender: Child  
  ObjectChange: Add  
Changed event raised  
  Sender: Child  
  ObjectChange: Add  
```  
  
 <span data-ttu-id="87c34-163">當您想要維護 XML 樹狀結構中的特定彙總資訊時，這些事件相當實用。</span><span class="sxs-lookup"><span data-stu-id="87c34-163">Events are useful when you want to maintain some aggregate information in an XML tree.</span></span> <span data-ttu-id="87c34-164">例如，您可能想要維護發票明細項目總計的發票總數。</span><span class="sxs-lookup"><span data-stu-id="87c34-164">For example, you may want maintain an invoice total that is the sum of the line items of the invoice.</span></span> <span data-ttu-id="87c34-165">此範例使用事件維護複雜項目 `Items` 下，所有子項目的總計。</span><span class="sxs-lookup"><span data-stu-id="87c34-165">This example uses events to maintain the total of all of the child elements under the complex element `Items`.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Total", 0),  
    new XElement("Items")  
);  
XElement total = root.Element("Total");  
XElement items = root.Element("Items");  
items.Changed += (object sender, XObjectChangeEventArgs cea) =>  
{  
    switch (cea.ObjectChange)  
    {  
        case XObjectChange.Add:  
            if (sender is XElement)  
                total.Value = ((int)total + (int)(XElement)sender).ToString();  
            if (sender is XText)  
                total.Value = ((int)total + (int)((XText)sender).Parent).ToString();  
            break;  
        case XObjectChange.Remove:  
            if (sender is XElement)  
                total.Value = ((int)total - (int)(XElement)sender).ToString();  
            if (sender is XText)  
                total.Value = ((int)total - Int32.Parse(((XText)sender).Value)).ToString();  
            break;  
    }  
    Console.WriteLine("Changed {0} {1}", sender.GetType().ToString(), cea.ObjectChange.ToString());  
};  
items.SetElementValue("Item1", 25);  
items.SetElementValue("Item2", 50);  
items.SetElementValue("Item2", 75);  
items.SetElementValue("Item3", 133);  
items.SetElementValue("Item1", null);  
items.SetElementValue("Item4", 100);  
Console.WriteLine("Total:{0}", (int)total);  
Console.WriteLine(root);  
```  
  
```vb  
Module Module1  
    Private total As XElement = Nothing  
    Private WithEvents items As XElement = Nothing  
    Private root As XElement = _  
            <Root>  
                <Total>0</Total>  
                <Items></Items>  
            </Root>  
  
    Sub Main()  
        total = root.<Total>(0)  
        items = root.<Items>(0)  
        items.SetElementValue("Item1", 25)  
        items.SetElementValue("Item2", 50)  
        items.SetElementValue("Item2", 75)  
        items.SetElementValue("Item3", 133)  
        items.SetElementValue("Item1", Nothing)  
        items.SetElementValue("Item4", 100)  
        Console.WriteLine("Total:{0}", CInt(total))  
        Console.WriteLine(root)  
    End Sub  
  
    Private Sub XObjectChanged( _  
            ByVal sender As Object, _  
            ByVal cea As XObjectChangeEventArgs) _  
            Handles items.Changed  
        Select Case cea.ObjectChange  
            Case XObjectChange.Add  
                If sender.GetType() Is GetType(XElement) Then  
                    total.Value = CStr(CInt(total.Value) + _  
                            CInt((DirectCast(sender, XElement)).Value))  
                End If  
                If sender.GetType() Is GetType(XText) Then  
                    total.Value = CStr(CInt(total.Value) + _  
                            CInt((DirectCast(sender, XText)).Value))  
                End If  
            Case XObjectChange.Remove  
                If sender.GetType() Is GetType(XElement) Then  
                    total.Value = CStr(CInt(total.Value) - _  
                            CInt((DirectCast(sender, XElement)).Value))  
                End If  
                If sender.GetType() Is GetType(XText) Then  
                    total.Value = CStr(CInt(total.Value) - _  
                            CInt((DirectCast(sender, XText)).Value))  
                End If  
        End Select  
        Console.WriteLine("Changed {0} {1}", _  
                            sender.GetType().ToString(), _  
                            cea.ObjectChange.ToString())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-166">此程式碼會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-166">This code produces the following output:</span></span>  
  
```  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XText Remove  
Changed System.Xml.Linq.XText Add  
Changed System.Xml.Linq.XElement Add  
Changed System.Xml.Linq.XElement Remove  
Changed System.Xml.Linq.XElement Add  
Total:308  
<Root>  
  <Total>308</Total>  
  <Items>  
    <Item2>75</Item2>  
    <Item3>133</Item3>  
    <Item4>100</Item4>  
  </Items>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt; Changing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Xml.Linq.XObjectChangeEventArgs&gt; Changing" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Linq.XObject.Changing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changing As EventHandler(Of XObjectChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Xml::Linq::XObjectChangeEventArgs ^&gt; ^ Changing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xml.Linq.XObjectChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-167">當此 <see cref="T:System.Xml.Linq.XObject" /> 或其任何子代發生變更時會引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-167">Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-168">只從修改 XML 樹狀結構中，不是從 XML 樹狀結構時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-168">Events are raised only from modification of an XML tree, not from construction of an XML tree.</span></span> <span data-ttu-id="87c34-169">您必須將事件處理常式加入事件之前可以接收事件，而且之前有參考，您便無法加入事件處理常式<xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="87c34-169">You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="87c34-170">您無法取得參考<xref:System.Xml.Linq.XObject>之前在 XML 建構樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="87c34-170">You can't get a reference to an <xref:System.Xml.Linq.XObject> before the XML tree is constructed.</span></span> <span data-ttu-id="87c34-171">這表示期間的 XML 樹狀結構的功能結構，您無法接收事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-171">This means that during functional construction of an XML tree, you will not receive events.</span></span>  
  
 <span data-ttu-id="87c34-172">修改 XML 樹狀結構內其中一個事件，因為這樣可能會導致非預期的結果時，您應該要小心。</span><span class="sxs-lookup"><span data-stu-id="87c34-172">You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</span></span> <span data-ttu-id="87c34-173">例如，如果您收到<xref:System.Xml.Linq.XObject.Changing>事件，並在處理事件時樹狀結構中移除節點，您可能不會收到<xref:System.Xml.Linq.XObject.Changed>事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-173">For example, if you receive a <xref:System.Xml.Linq.XObject.Changing> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref:System.Xml.Linq.XObject.Changed> event.</span></span> <span data-ttu-id="87c34-174">處理事件時，會修改 XML 樹狀結構不包含節點所收到的事件; 一個有效它無效，甚至修改相同的樹狀結構，提供所做的修改不會影響引發事件的特定節點。</span><span class="sxs-lookup"><span data-stu-id="87c34-174">When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</span></span> <span data-ttu-id="87c34-175">不過，如果您修改樹狀結構，其中包含接收事件的節點的區域，您會收到的事件和樹狀結構的影響會定義。</span><span class="sxs-lookup"><span data-stu-id="87c34-175">However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-176">下列範例會將 XML 樹狀結構的根項目中的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="87c34-176">The following example adds an event handler to the root element of an XML tree.</span></span> <span data-ttu-id="87c34-177">接著，它會修改樹狀目錄中，造成 LINQ to XML 來引發某些事件。</span><span class="sxs-lookup"><span data-stu-id="87c34-177">It then modifies the tree, causing LINQ to XML to raise some events.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "content");  
root.Changing += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changing event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Changed += new EventHandler<XObjectChangeEventArgs>(  
    (sender, cea) =>  
    {  
        Console.WriteLine("Changed event raised");  
        XElement xSender = (XElement)sender;  
        Console.WriteLine("  Sender: {0}", xSender.Name);  
        Console.WriteLine("  ObjectChange: {0}", cea.ObjectChange);  
    }  
);  
root.Add(new XElement("Child", "child content"));  
```  
  
```vb  
Module Module1  
    WithEvents root As XElement = <Root>content</Root>  
  
    Sub Main()  
        root.Add(<Child>child content</Child>)  
    End Sub  
  
    Private Sub root_Changing( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changing  
        Dim xSender As XElement = CType(sender, XElement)  
        Console.WriteLine("Changing event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
  
    Private Sub root_Changed( _  
            ByVal sender As Object, _  
            ByVal e As XObjectChangeEventArgs) _  
            Handles root.Changed  
        Dim xSender As XElement = CType(sender, XElement)  
        Console.WriteLine("Changed event raised")  
        Console.WriteLine("  Sender: {0}", xSender.Name)  
        Console.WriteLine("  ObjectChange: {0}", e.ObjectChange)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-178">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-178">This example produces the following output:</span></span>  
  
```  
Changing event raised  
  Sender: Child  
  ObjectChange: Add  
Changed event raised  
  Sender: Child  
  ObjectChange: Add  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As XDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XDocument ^ Document { System::Xml::Linq::XDocument ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-179">取得這個 <see cref="T:System.Xml.Linq.XDocument" /> 的 <see cref="T:System.Xml.Linq.XObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-179">Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-180">這個 <see cref="T:System.Xml.Linq.XDocument" /> 的 <see cref="T:System.Xml.Linq.XObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-180">The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-181">下列範例會建立文件有一些複雜的內容。</span><span class="sxs-lookup"><span data-stu-id="87c34-181">The following example creates a document with some complex content.</span></span> <span data-ttu-id="87c34-182">然後會使用這個屬性來擷取的文件`Child`項目。</span><span class="sxs-lookup"><span data-stu-id="87c34-182">It then uses this property to retrieve the document for the `Child` element.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("A comment in the document."),  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
XElement child = doc.Descendants("Child").First();  
XDocument documentOfChild = child.Document;  
Console.WriteLine(documentOfChild.FirstNode);  
```  
  
```vb  
Dim doc As XDocument = _  
        <?xml version="1.0"?>  
        <!--A comment in the document.-->  
        <Root>  
            <Child>content</Child>  
         </Root>  
Dim child As XElement = doc.Descendants("Child").First()  
Dim documentOfChild As XDocument = child.Document  
Console.WriteLine(documentOfChild.FirstNode)  
```  
  
 <span data-ttu-id="87c34-183">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-183">This example produces the following output:</span></span>  
  
```  
<!--A comment in the document.-->  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-184">取得此 <see cref="T:System.Xml.Linq.XObject" /> 的節點類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-184">Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-185">此 <see cref="T:System.Xml.Linq.XObject" /> 的節點類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-185">The node type for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-186">因為所有的類別，衍生自<xref:System.Xml.Linq.XObject>包含<xref:System.Xml.Linq.XObject.NodeType%2A>屬性，您可以撰寫程式碼的運作方式的具體子類別的集合<xref:System.Xml.Linq.XObject>。</span><span class="sxs-lookup"><span data-stu-id="87c34-186">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="87c34-187">然後在集合中每個節點的節點型別可以測試您的程式碼。</span><span class="sxs-lookup"><span data-stu-id="87c34-187">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-188">下列範例會使用這個方法以擷取各種節點的節點型別。</span><span class="sxs-lookup"><span data-stu-id="87c34-188">The following example uses this method to retrieve the node type for a variety of nodes.</span></span>  
  
```csharp  
// Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.DescendantNodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
    }  
}  
```  
  
```vb  
' Note that XNode uses XmlNodeType, which is in the System.Xml  namespace.  
Dim xmlTree As XDocument = _   
    <?xml version="1.0"?>  
    <!--a comment-->  
    <?xml-stylesheet type="text/xsl" href="hello.xsl"?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]><![CDATA[]></Child1>  
        <Child2>Text content</Child2>  
     </Root>  
  
For Each node As XNode In xmlTree.DescendantNodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
    End If  
Next  
```  
  
 <span data-ttu-id="87c34-189">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-189">This example produces the following output:</span></span>  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XElement ^ Parent { System::Xml::Linq::XElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-190">取得這個 <see cref="T:System.Xml.Linq.XElement" /> 的 <see cref="T:System.Xml.Linq.XObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-190">Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-191">這個 <see cref="T:System.Xml.Linq.XElement" /> 的父 <see cref="T:System.Xml.Linq.XObject" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-191">The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-192">如果這個<xref:System.Xml.Linq.XObject>有父項目，這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="87c34-192">If this <xref:System.Xml.Linq.XObject> has no parent element, this property returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87c34-193">這個屬性會傳回父項目，並當做子系節點的<xref:System.Xml.Linq.XDocument>有父項目，這個屬性會傳回`null`它們。</span><span class="sxs-lookup"><span data-stu-id="87c34-193">This property returns the parent element, and as children nodes of an <xref:System.Xml.Linq.XDocument> have no parent element, this property returns `null` for them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-194">下列範例會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="87c34-194">The following example uses this method.</span></span>  
  
```csharp  
XDocument doc = new XDocument(  
    new XComment("A comment in the document."),  
    new XElement("Root",  
        new XElement("Child", "content")  
    )  
);  
XElement child = doc.Descendants("Child").First();  
XElement root = child.Parent;  
Console.WriteLine(root.Name);  
```  
  
```vb  
Dim doc As XDocument = _   
    <?xml version="1.0"?>  
    <!--A comment in the document.-->  
    <Root>  
        <Child>content</Child>  
    </Root>  
Dim child As XElement = doc.Descendants("Child").First()  
Dim root As XElement = child.Parent  
Console.WriteLine(root.Name)  
```  
  
 <span data-ttu-id="87c34-195">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-195">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAnnotations(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="87c34-196">要移除之註釋的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-196">The <see cref="T:System.Type" /> of annotations to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="87c34-197">從這個 <see cref="T:System.Xml.Linq.XObject" /> 中移除指定之類型的註釋。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-197">Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-198">下列範例會建立在其上的四個註解的元素。</span><span class="sxs-lookup"><span data-stu-id="87c34-198">The following example creates an element with four annotations on it.</span></span> <span data-ttu-id="87c34-199">接著會移除兩個使用此方法。</span><span class="sxs-lookup"><span data-stu-id="87c34-199">It then uses this method to remove two of them.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program  
{  
    static void Main(string[] args)  
    {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations<object>().Count());  
        root.RemoveAnnotations(typeof(MyAnnotation));  
        Console.WriteLine("Count after removing: {0}", root.Annotations<object>().Count());  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations(Of Object)().Count())  
        root.RemoveAnnotations(GetType(MyAnnotation))  
        Console.WriteLine("Count after removing: {0}", root.Annotations(Of Object)().Count())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-200">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-200">This example produces the following output:</span></span>  
  
```  
Count before removing: 4  
Count after removing: 2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void RemoveAnnotations&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAnnotations&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.RemoveAnnotations``1" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAnnotations(Of T As Class) ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class void RemoveAnnotations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="87c34-201">要移除的註釋類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-201">The type of annotations to remove.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="87c34-202">從這個 <see cref="T:System.Xml.Linq.XObject" /> 中移除指定之類型的註釋。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-202">Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87c34-203">下列範例會建立在其上的四個註解的元素。</span><span class="sxs-lookup"><span data-stu-id="87c34-203">The following example creates an element with four annotations on it.</span></span> <span data-ttu-id="87c34-204">接著會移除兩個使用此方法。</span><span class="sxs-lookup"><span data-stu-id="87c34-204">It then uses this method to remove two of them.</span></span>  
  
```csharp  
public class MyAnnotation {  
    private string tag;  
    public string Tag {get{return tag;} set{tag=value;}}  
    public MyAnnotation(string tag) {  
        this.tag = tag;  
    }  
}  
  
class Program {  
    static void Main(string[] args) {     
        XElement root = new XElement("Root", "content");  
        root.AddAnnotation(new MyAnnotation("T1"));  
        root.AddAnnotation(new MyAnnotation("T2"));  
        root.AddAnnotation("abc");  
        root.AddAnnotation("def");  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations<object>().Count());  
        root.RemoveAnnotations<MyAnnotation>();  
        Console.WriteLine("Count after removing: {0}", root.Annotations<object>().Count());  
    }  
}  
```  
  
```vb  
Public Class MyAnnotation  
    Private _tag As String  
  
    Property Tag() As String  
        Get  
            Return Me._tag  
        End Get  
        Set(ByVal Value As String)  
            Me._tag = Value  
        End Set  
    End Property  
  
    Public Sub New(ByVal tag As String)  
        Me._tag = tag  
    End Sub  
End Class  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        root.AddAnnotation(New MyAnnotation("T1"))  
        root.AddAnnotation(New MyAnnotation("T2"))  
        root.AddAnnotation("abc")  
        root.AddAnnotation("def")  
  
        Console.WriteLine("Count before removing: {0}", root.Annotations(Of Object)().Count())  
        root.RemoveAnnotations(Of MyAnnotation)()  
        Console.WriteLine("Count after removing: {0}", root.Annotations(Of Object)().Count())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="87c34-205">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-205">This example produces the following output:</span></span>  
  
```  
Count before removing: 4  
Count after removing: 2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="87c34-206">取得值，指出此 <see cref="T:System.Xml.Linq.XObject" /> 是否具有行資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-206">Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="87c34-207">如果 <see cref="T:System.Xml.Linq.XObject" /> 具有行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-207">
              <see langword="true" /> if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-208">您可以呼叫這個方法來判斷是否<xref:System.Xml.Linq.XObject>包含有效的線條的資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-208">You can call this method to determine whether the <xref:System.Xml.Linq.XObject> contains valid line information.</span></span>  
  
 <span data-ttu-id="87c34-209">這個方法是明確介面成員實作中方法<xref:System.Xml.IXmlLineInfo>介面，以便才能呼叫此方法，是為了轉型為<xref:System.Xml.IXmlLineInfo>。</span><span class="sxs-lookup"><span data-stu-id="87c34-209">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-210">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-210">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="87c34-211">接著，它會加入另一個項目，但是沒有行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-211">It then adds another element that does not have line information.</span></span> <span data-ttu-id="87c34-212">接著，它會列印每個項目樹狀目錄中的行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-212">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="87c34-213">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-213">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.LineNumber">
      <MemberSignature Language="C#" Value="int System.Xml.IXmlLineInfo.LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Xml.IXmlLineInfo.LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property LineNumber As Integer Implements IXmlLineInfo.LineNumber" />
      <MemberSignature Language="C++ CLI" Value="property int System.Xml.IXmlLineInfo.LineNumber { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-214">取得基礎 <see cref="T:System.Xml.XmlReader" /> 所回報此 <see cref="T:System.Xml.Linq.XObject" /> 的行號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-214">Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-215">
            <see cref="T:System.Int32" />，包含 <see cref="T:System.Xml.XmlReader" /> 所報告之此 <see cref="T:System.Xml.Linq.XObject" /> 的行號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-215">An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-216">這個方法是明確介面成員實作中方法<xref:System.Xml.IXmlLineInfo>介面，以便才能呼叫此方法，是為了轉型為<xref:System.Xml.IXmlLineInfo>。</span><span class="sxs-lookup"><span data-stu-id="87c34-216">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-217">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-217">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="87c34-218">接著，它會加入另一個項目，但是沒有行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-218">It then adds another element that does not have line information.</span></span> <span data-ttu-id="87c34-219">接著，它會列印每個項目樹狀目錄中的行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-219">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="87c34-220">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-220">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.LinePosition">
      <MemberSignature Language="C#" Value="int System.Xml.IXmlLineInfo.LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Xml.IXmlLineInfo.LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property LinePosition As Integer Implements IXmlLineInfo.LinePosition" />
      <MemberSignature Language="C++ CLI" Value="property int System.Xml.IXmlLineInfo.LinePosition { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="87c34-221">取得基礎 <see cref="T:System.Xml.XmlReader" /> 所報告之此 <see cref="T:System.Xml.Linq.XObject" /> 的行位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-221">Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="87c34-222">
            <see cref="T:System.Int32" />，包含 <see cref="T:System.Xml.XmlReader" /> 所報告之此 <see cref="T:System.Xml.Linq.XObject" /> 的行位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="87c34-222">An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87c34-223">這個方法是明確介面成員實作中方法<xref:System.Xml.IXmlLineInfo>介面，以便才能呼叫此方法，是為了轉型為<xref:System.Xml.IXmlLineInfo>。</span><span class="sxs-lookup"><span data-stu-id="87c34-223">This method is an explicit interface member implementation of a method in the <xref:System.Xml.IXmlLineInfo> interface, so in order to call this method, it is necessary to cast to <xref:System.Xml.IXmlLineInfo>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87c34-224">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-224">This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</span></span> <span data-ttu-id="87c34-225">接著，它會加入另一個項目，但是沒有行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-225">It then adds another element that does not have line information.</span></span> <span data-ttu-id="87c34-226">接著，它會列印每個項目樹狀目錄中的行資訊。</span><span class="sxs-lookup"><span data-stu-id="87c34-226">It then prints the line information for each element in the tree.</span></span>  
  
```csharp  
string markup = @"<Root>  
    <Child1 />  
    <Child2 />  
    <Child4 />  
</Root>";  
  
File.WriteAllText("Test.xml", markup);  
  
XElement po = XElement.Load("Test.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
  
// add a node to the tree.  
// the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(new XElement("Child3"));  
  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  
            "",  
        ((IXmlLineInfo)e).HasLineInfo() ?  
            ((IXmlLineInfo)e).LinePosition.ToString() :  
            "No Line Information");  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child1 />" & Environment.NewLine & _  
    "    <Child2 />" & Environment.NewLine & _  
    "    <Child4 />" & Environment.NewLine & _  
    "</Root>"  
  
File.WriteAllText("Test.xml", markup)  
  
Dim po As XElement = XElement.Load("Test.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
  
' add a node to the tree.  
' the newly added node will not have line information.  
po.Element("Child2").AddAfterSelf(New XElement("Child3"))  
  
Dim splitUri() As String = po.BaseUri.Split("/"c)  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
            ""), _  
        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  
            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  
            "No Line Information"))  
Next  
```  
  
 <span data-ttu-id="87c34-227">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="87c34-227">This example produces the following output:</span></span>  
  
```  
BaseUri: Test.xml  
  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child1            2    6  
  Child2            3    6  
  Child3            No Line Information  
  Child4            4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>