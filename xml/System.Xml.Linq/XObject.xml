<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XObject.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac521d2fddfb97fd2308d0e542f7e64ec71a761941f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21d2fddfb97fd2308d0e542f7e64ec71a761941f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XObject">
          <source>Represents a node or an attribute in an XML tree.</source>
          <target state="translated">代表 XML 樹狀中的節點或屬性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>This class is the abstract common base class for <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>.</source>
          <target state="translated">這個類別是抽象通用基底類別<ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph>和<ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.</source>
          <target state="translated">它提供兩個類別，例如註解，以及節點已變更時引發的事件通用的一些基本功能。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XObject">
          <source>Note that annotations are not part of the XML infoset; they are not serialized or deserialized.</source>
          <target state="translated">請注意，這些附註不是 XML 資訊集的一部分；它們無法進行序列化或還原序列化。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the annotation to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>，包含要加入的註釋。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Adds an object to the annotation list of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">將物件加入此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的註釋清單。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Note that annotations are not part of the infoset; they are not persisted, or displayed by <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ToString%2A&gt;</ph>.</source>
          <target state="translated">請注意，註解集; 的一部分不會保存下來，或是由顯示<ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ToString%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element.</source>
          <target state="translated">此外，如果您匯入 VB 專案的 XML 命名空間，並呼叫 AddAnnotation SaveOptions.OmitDuplicateNamespaces 列舉值，則只有一個項目將包含 XML 命名空間屬性，而不是每個項目。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Removing duplicate namespaces in XML Literals<ept id="p1">](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>XML 常值中移除重複的命名空間<ept id="p1">](http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>The following example adds an annotation to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">下列範例會將附註<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the annotation to retrieve.</source>
          <target state="translated">要擷取之註釋的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>Gets the first annotation object of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">從此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 取得指定類型的第一個註釋物件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the first annotation object that matches the specified type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no annotation is of the specified type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>，包含符合指定類型的第一個註釋物件，如果沒有指定類型的註釋，則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>The following example adds an annotation to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">下列範例會將附註<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>It then retrieves the annotation, specifying the type to retrieve.</source>
          <target state="translated">然後，它會擷取註解，指定要擷取的類型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The type of the annotation to retrieve.</source>
          <target state="translated">要擷取的註釋類型。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>Get the first annotation object of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 之指定類型的第一個註釋物件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The first annotation object that matches the specified type, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no annotation is of the specified type.</source>
          <target state="translated">符合指定類型的第一個註釋物件，或者如果沒有指定類型的註釋，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>The following example adds an annotation to an element, and then retrieves it through this method.</source>
          <target state="translated">下例會將註解加入至項目，並接著透過這個方法會擷取它。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotation``1">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the annotations to retrieve.</source>
          <target state="translated">要擷取之註釋的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>Gets a collection of annotations of the specified type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 之指定類型註釋的集合。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> that contains the annotations that match the specified type for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>，包含符合此 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 指定類型的註釋。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>The following example adds some annotations to an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then retrieves a collection of annotations by using this method.</source>
          <target state="translated">下列範例會加入一些註解<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>，接著使用這個方法會擷取附註集合。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>The type of the annotations to retrieve.</source>
          <target state="translated">要擷取的註釋類型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>Gets a collection of annotations of the specified type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 之指定類型註釋的集合。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the annotations for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，包含此 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的註釋。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>The following example uses this method to retrieve annotations on an element.</source>
          <target state="translated">下列範例會使用這個方法來擷取項目上的註解。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.Annotations``1">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Gets the base URI for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的基底 URI。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the base URI for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>，包含這個 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的基底 URI。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Using LINQ to XML, you can deserialize XML in a number of fashions.</source>
          <target state="translated">使用 LINQ to XML，您可以還原序列化中的 fashions 的數字的 XML。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>You can parse it from a string, load it from a file, or read it from a <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> or an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">您可以剖析從字串、 它從檔案載入或讀取從<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>或<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">在所有這些情況下，LINQ to XML 會使用一個或另一個具象類別的子<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Sometimes the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> has the base URI, and sometimes it does not.</source>
          <target state="translated">有時<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>基底 uri，而有時不會。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>For instance, when loading from a file, the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> knows the base URI, but when reading from an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that was created because of calling the <ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> method, there is no possibility of the <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> reporting a base URI; the XML was in a string.</source>
          <target state="translated">執行個體、 從檔案載入時<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>知道的基底 URI，但當讀取<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>，已建立，因為呼叫<ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>方法，不可能發生的<ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>報告的基底 URI; 已中的 XML字串。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If, when parsing or loading the XML, you specify <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, LINQ to XML will request the base URI for each node as the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> returns the node.</source>
          <target state="translated">如果當剖析或載入的 XML 時，您指定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>，LINQ to XML 會要求每個節點的基底 URI<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>傳回的節點。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node.</source>
          <target state="translated">如果讀取器的基底 URI，LINQ to XML 會將資訊儲存 linq to XML 節點。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This property returns that information.</source>
          <target state="translated">這個屬性會傳回該資訊。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>If the underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> does not have the base URI, then this property will return an empty string.</source>
          <target state="translated">如果基礎<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>沒有基底 URI，則這個屬性會傳回空字串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> when loading an XML tree will result in slower parsing.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>當載入 XML 樹狀結構會導致較慢的剖析。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree.</source>
          <target state="translated">設定時的 XML 樹狀結構的基底 URI，LINQ to XML 會在樹狀目錄的根目錄上放置註解。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This property is a computed property, and navigates up the tree to find the base URI.</source>
          <target state="translated">這個屬性是計算的屬性，並瀏覽樹狀目錄以尋找基底 URI。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>The following example loads the base URI and line information as it loads the file.</source>
          <target state="translated">載入檔案時，下列範例會載入基底 URI 和行資訊。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>It then prints the base URI and the line information.</source>
          <target state="translated">接著，它會列印的基底 URI 和行資訊。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>.</source>
          <target state="translated">此範例使用下列 XML 文件︰<bpt id="p1">[</bpt>範例 XML 檔：典型採購訂單 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.BaseUri">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Raised when this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> or any of its descendants have changed.</source>
          <target state="translated">當此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 或其任何子代發生變更時會引發。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Events are raised only when an XML tree is modified, not when it is constructed.</source>
          <target state="translated">只有在修改 XML 樹狀結構時，不會在建構時，會引發事件。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">這是因為您必須將事件處理常式加入事件之前可以接收事件，而且之前有參考，您便無法加入事件處理常式<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>You cannot get a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.</source>
          <target state="translated">您無法取得參考<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>之前在 XML 建構樹狀結構。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This means that during functional construction of an XML tree, you will not receive events.</source>
          <target state="translated">這表示期間的 XML 樹狀結構的功能結構，您無法接收事件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</source>
          <target state="translated">修改 XML 樹狀結構內其中一個事件，因為這樣可能會導致非預期的結果時，您應該要小心。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>For example, if you receive a <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.</source>
          <target state="translated">例如，如果您收到<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>事件，並在處理事件時樹狀結構中移除節點，您可能不會收到<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</source>
          <target state="translated">處理事件時，會修改 XML 樹狀結構不包含節點所收到的事件; 一個有效它無效，甚至修改相同的樹狀結構，提供所做的修改不會影響引發事件的特定節點。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</source>
          <target state="translated">不過，如果您修改樹狀結構，其中包含接收事件的節點的區域，您會收到的事件和樹狀結構的影響會定義。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>The following example adds an event handler to the root element of an XML tree.</source>
          <target state="translated">下列範例會將 XML 樹狀結構的根項目中的事件處理常式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>It then modifies the tree, causing LINQ to XML to raise some events.</source>
          <target state="translated">接著，它會修改樹狀目錄中，造成 LINQ to XML 來引發某些事件。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>Events are useful when you want to maintain some aggregate information in an XML tree.</source>
          <target state="translated">當您想要維護 XML 樹狀結構中的特定彙總資訊時，這些事件相當實用。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>For example, you may want maintain an invoice total that is the sum of the line items of the invoice.</source>
          <target state="translated">例如，您可能想要維護發票明細項目總計的發票總數。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This example uses events to maintain the total of all of the child elements under the complex element <ph id="ph1">`Items`</ph>.</source>
          <target state="translated">此範例使用事件維護複雜項目 <ph id="ph1">`Items`</ph> 下，所有子項目的總計。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changed">
          <source>This code produces the following output:</source>
          <target state="translated">此程式碼會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="E:System.Xml.Linq.XObject.Changing">
          <source>Raised when this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> or any of its descendants are about to change.</source>
          <target state="translated">當此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 或其任何子代發生變更時會引發。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>Events are raised only from modification of an XML tree, not from construction of an XML tree.</source>
          <target state="translated">只從修改 XML 樹狀結構中，不是從 XML 樹狀結構時，會引發事件。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">您必須將事件處理常式加入事件之前可以接收事件，而且之前有參考，您便無法加入事件處理常式<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You can't get a reference to an <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> before the XML tree is constructed.</source>
          <target state="translated">您無法取得參考<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>之前在 XML 建構樹狀結構。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>This means that during functional construction of an XML tree, you will not receive events.</source>
          <target state="translated">這表示期間的 XML 樹狀結構的功能結構，您無法接收事件。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results.</source>
          <target state="translated">修改 XML 樹狀結構內其中一個事件，因為這樣可能會導致非預期的結果時，您應該要小心。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>For example, if you receive a <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> event, and while the event is being processed you remove the node from the tree, you might not receive the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> event.</source>
          <target state="translated">例如，如果您收到<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>事件，並在處理事件時樹狀結構中移除節點，您可能不會收到<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised.</source>
          <target state="translated">處理事件時，會修改 XML 樹狀結構不包含節點所收到的事件; 一個有效它無效，甚至修改相同的樹狀結構，提供所做的修改不會影響引發事件的特定節點。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</source>
          <target state="translated">不過，如果您修改樹狀結構，其中包含接收事件的節點的區域，您會收到的事件和樹狀結構的影響會定義。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>The following example adds an event handler to the root element of an XML tree.</source>
          <target state="translated">下列範例會將 XML 樹狀結構的根項目中的事件處理常式。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>It then modifies the tree, causing LINQ to XML to raise some events.</source>
          <target state="translated">接著，它會修改樹狀目錄中，造成 LINQ to XML 來引發某些事件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Xml.Linq.XObject.Changing">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.Document">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>The following example creates a document with some complex content.</source>
          <target state="translated">下列範例會建立文件有一些複雜的內容。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>It then uses this property to retrieve the document for the <ph id="ph1">`Child`</ph> element.</source>
          <target state="translated">然後會使用這個屬性來擷取的文件<ph id="ph1">`Child`</ph>項目。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Document">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Gets the node type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的節點類型。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>The node type for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的節點類型。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">因為所有的類別，衍生自<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>包含<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph>屬性，您可以撰寫程式碼的運作方式的具體子類別的集合<ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>Your code can then test for the node type of each node in the collection.</source>
          <target state="translated">然後在集合中每個節點的節點型別可以測試您的程式碼。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>The following example uses this method to retrieve the node type for a variety of nodes.</source>
          <target state="translated">下列範例會使用這個方法以擷取各種節點的節點型別。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.Parent">
          <source>Gets the parent <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>The parent <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> 的父 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>If this <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> has no parent element, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果這個<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>有父項目，這個屬性會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>This property returns the parent element, and as children nodes of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> have no parent element, this property returns <ph id="ph2">`null`</ph> for them.</source>
          <target state="translated">這個屬性會傳回父項目，並當做子系節點的<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>有父項目，這個屬性會傳回<ph id="ph2">`null`</ph>它們。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>The following example uses this method.</source>
          <target state="translated">下列範例會使用這個方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.Parent">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of annotations to remove.</source>
          <target state="translated">要移除之註釋的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>Removes the annotations of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">從這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 中移除指定之類型的註釋。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>The following example creates an element with four annotations on it.</source>
          <target state="translated">下列範例會建立在其上的四個註解的元素。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>It then uses this method to remove two of them.</source>
          <target state="translated">接著會移除兩個使用此方法。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>The type of annotations to remove.</source>
          <target state="translated">要移除的註釋類型。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>Removes the annotations of the specified type from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">從這個 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 中移除指定之類型的註釋。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>The following example creates an element with four annotations on it.</source>
          <target state="translated">下列範例會建立在其上的四個註解的元素。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>It then uses this method to remove two of them.</source>
          <target state="translated">接著會移除兩個使用此方法。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>Gets a value indicating whether or not this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> has line information.</source>
          <target state="translated">取得值，指出此 <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 是否具有行資訊。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> has line information, otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 具有行資訊，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>You can call this method to determine whether the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contains valid line information.</source>
          <target state="translated">您可以呼叫這個方法來判斷是否<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>包含有效的線條的資訊。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">這個方法是明確介面成員實作中方法<ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>介面，以便才能呼叫此方法，是為了轉型為<ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">接著，它會加入另一個項目，但是沒有行資訊。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">接著，它會列印每個項目樹狀目錄中的行資訊。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>Gets the line number that the underlying <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> reported for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得基礎 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 所回報此 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的行號。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the line number reported by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>，包含 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 所報告之此 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的行號。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">這個方法是明確介面成員實作中方法<ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>介面，以便才能呼叫此方法，是為了轉型為<ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">接著，它會加入另一個項目，但是沒有行資訊。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">接著，它會列印每個項目樹狀目錄中的行資訊。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>Gets the line position that the underlying <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> reported for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated">取得基礎 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 所報告之此 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的行位置。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the line position reported by the <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>，包含 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 所報告之此 <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> 的行位置。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This method is an explicit interface member implementation of a method in the <ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface, so in order to call this method, it is necessary to cast to <ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>.</source>
          <target state="translated">這個方法是明確介面成員實作中方法<ph id="ph1">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>介面，以便才能呼叫此方法，是為了轉型為<ph id="ph2">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This example loads a small XML tree from a file, setting the options to set base URI and retain line information.</source>
          <target state="translated">這個範例會載入小型 XML 樹狀從檔案、 設定選項來設定基底 URI，並保留行資訊。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>It then adds another element that does not have line information.</source>
          <target state="translated">接著，它會加入另一個項目，但是沒有行資訊。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>It then prints the line information for each element in the tree.</source>
          <target state="translated">接著，它會列印每個項目樹狀目錄中的行資訊。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
          <source>This example produces the following output:</source>
          <target state="translated">這個範例會產生下列輸出：</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>