<Type Name="OleDbEnumerator" FullName="System.Data.OleDb.OleDbEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6a518107612b8a9c3978159965d12326571142b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37677118" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OleDbEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbEnumerator sealed" />
  <TypeSignature Language="F#" Value="type OleDbEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供列舉區域網路內所有可用之 OLE DB 提供者的機制。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbEnumerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 類別的執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElements">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetElements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElements () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetElements();" />
      <MemberSignature Language="F#" Value="member this.GetElements : unit -&gt; System.Data.DataTable" Usage="oleDbEnumerator.GetElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取包含所有可見 OLE DB 提供者相關資訊的 <see cref="T:System.Data.DataTable" />。</summary>
        <returns>傳回包含可見 OLE DB 提供者相關資訊的 <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的資料表包含下列資料行，其中都包含字串：  
  
|資料行序數|資料行|描述|  
|--------------------|------------|-----------------|  
|0|ISOURCESROWSET|原生 OLEDB 資料來源或列舉值的非變異名稱。|  
|1|SOURCES_PARSENAME|使用原生的 COM 介面 IParseDisplayName 可轉換成 moniker 人類可讀名稱。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_PARSENAME 資料行。|  
|2|SOURCES_DESCRIPTION|原生 OLE DB 資料來源的描述。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_DESCRIPTION 資料行。|  
|3|SOURCES_TYPE|下列的列舉成員的其中一個： 繫結器 (0)、 DataSource_MDP (1)、 DataSource_TDP (2)、 列舉值 (3)。 這些會對應至原生的 OLE DB 來源資料列集的 SOURCES_TYPE 資料行中傳回的值。|  
|4|SOURCES_ISPARENT|適用於只列舉值。 如果`true`，指出項目會套用至相同的列舉值在其呼叫 GetSourcesRowset，暗示，它也會包含在子列舉型別。 對應至原生的 OLE DB 來源資料列集的 SOURCES_ISPARENT 資料行|  
|5|SOURCES_CLSID|人類可讀名稱，可以轉換成使用原生的 COM 介面 IParseDisplayName 的 moniker。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_CLSID 資料行。|  
  
   
  
## Examples  
 下列主控台應用程式會擷取所有可見的 OLE DB 提供者的相關資訊，並會在主控台視窗中顯示的資訊。  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
Sub Main()  
  Dim enumerator As New OleDbEnumerator  
  Dim table As System.Data.DataTable = enumerator.GetElements()  
  
  DisplayData(table)  
  
   Console.WriteLine("Press any key to continue.")  
   Console.ReadKey()  
 End Sub  
  
 Private Sub DisplayData(ByVal table As DataTable)  
   For Each row As DataRow In table.Rows  
     For Each col As DataColumn In table.Columns  
       Console.WriteLine("{0} = {1}", col.ColumnName, row(col))  
     Next  
     Console.WriteLine("==================================")  
   Next  
 End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbEnumerator enumerator = new OleDbEnumerator();  
   DataTable table = enumerator.GetElements();  
  
   DisplayData(table);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(DataTable table)  
 {  
   foreach (DataRow row in table.Rows)  
   {  
     foreach (DataColumn col in table.Columns)  
     {  
       Console.WriteLine("{0} = {1}", col.ColumnName, row[col]);  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">提供者不支援 ISourcesRowset。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">在基礎提供者中已發生例外狀況。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetEnumerator (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetEnumerator(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetEnumerator(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetEnumerator(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetEnumerator : Type -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetEnumerator type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" />。</param>
        <summary>使用特定 OLE DB 列舉程式來傳回包含目前已安裝之 OLE DB 提供者相關資訊的 <see cref="T:System.Data.OleDb.OleDbDataReader" />，而不需要 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 類別的執行個體。</summary>
        <returns>使用特定 OLE DB 列舉程式，傳回包含所要求之 OLE DB 提供者相關資訊的 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的讀取器包含下列資料行，其中都包含字串：  
  
|資料行序數|資料行|描述|  
|--------------------|------------|-----------------|  
|0|ISOURCESROWSET|原生 OLE DB 資料來源或列舉值的非變異名稱。|  
|1|SOURCES_PARSENAME|人類看得懂的名稱，可以使用原生的 COM 介面轉換成 moniker **IParseDisplayName**。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_PARSENAME 資料行。|  
|2|SOURCES_DESCRIPTION|原生 OLE DB 資料來源的描述。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_DESCRIPTION 資料行。|  
|3|SOURCES_TYPE|下列的列舉成員的其中一個： 繫結器 (0)、 DataSource_MDP (1)、 DataSource_TDP (2)、 列舉值 (3)。 這些會對應至原生的 OLE DB 來源資料列集的 SOURCES_TYPE 資料行中傳回的值。|  
|4|SOURCES_ISPARENT|適用於只列舉值。 如果`true`，指出項目會套用至相同的列舉值所在**GetSourcesRowset**呼叫，其中隱含，它也會包含在子列舉型別。 對應至原生的 OLE DB 來源資料列集的 SOURCES_ISPARENT 資料行|  
  
 OLE DB 提供幾個列舉程式元件，包括 MSDAENUM、 MSDASQL 列舉值、 SQLNCLI 列舉值，SQLOLEDB 列舉值等等。 如需有關列舉值的元件和使用方式的詳細資訊，請參閱[OLE DB 程式設計人員參考](http://go.microsoft.com/fwlink/?LinkId=45232)。  
  
   
  
## Examples  
 下列主控台應用程式使用 MSDAENUM 元件，擷取所有的 OLE DB 提供者的相關資訊，並會在主控台視窗中顯示的資訊。  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = _  
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"))  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader =   
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"));  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">提供者不支援 **ISourcesRowset**。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">在基礎提供者中已發生例外狀況。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRootEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetRootEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetRootEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetRootEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRootEnumerator () As OleDbDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetRootEnumerator();" />
      <MemberSignature Language="F#" Value="static member GetRootEnumerator : unit -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetRootEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回包含目前已安裝之 OLE DB 提供者相關資訊的 <see cref="T:System.Data.OleDb.OleDbDataReader" />，而不需要 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 類別的執行個體。</summary>
        <returns>傳回包含可見 OLE DB 提供者相關資訊的 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的讀取器包含下列資料行，其中都包含字串：  
  
|資料行序數|資料行|描述|  
|--------------------|------------|-----------------|  
|0|ISOURCESROWSET|原生 OLEDB 資料來源或列舉值的非變異名稱。|  
|1|SOURCES_PARSENAME|人類看得懂的名稱，可以轉換成使用原生的 COM 介面 IParseDisplayName 的 moniker。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_PARSENAME 資料行。|  
|2|SOURCES_DESCRIPTION|原生 OLE DB 資料來源的描述。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_DESCRIPTION 資料行。|  
|3|SOURCES_TYPE|下列的列舉成員的其中一個： 繫結器 (0)、 DataSource_MDP (1)、 DataSource_TDP (2)、 列舉值 (3)。 這些會對應至原生的 OLE DB 來源資料列集的 SOURCES_TYPE 資料行中傳回的值。|  
|4|SOURCES_ISPARENT|適用於只列舉值。 如果`true`，指出項目會套用至相同的列舉值在其呼叫 GetSourcesRowset，暗示，它也會包含在子列舉型別。 對應至原生的 OLE DB 來源資料列集的 SOURCES_ISPARENT 資料行|  
|5|SOURCES_CLSID|人類可讀名稱，可以轉換成使用原生的 COM 介面 IParseDisplayName 的 moniker。 對應至原生的 OLE DB 來源資料列集所傳回的 SOURCES_CLSID 資料行。|  
  
   
  
## Examples  
 下列主控台應用程式會擷取所有可見的 OLE DB 提供者的相關資訊，並會在主控台視窗中顯示的資訊。  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = OleDbEnumerator.GetRootEnumerator()  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader = OleDbEnumerator.GetRootEnumerator();  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">提供者不支援 ISourcesRowset。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">在基礎提供者中已發生例外狀況。</exception>
      </Docs>
    </Member>
  </Members>
</Type>