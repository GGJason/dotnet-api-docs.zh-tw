<Type Name="SamlCondition" FullName="System.IdentityModel.Tokens.SamlCondition">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5fc5e0f31d546f2e55ba521044e057c40a60521" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36557031" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SamlCondition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SamlCondition extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SamlCondition" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SamlCondition" />
  <TypeSignature Language="C++ CLI" Value="public ref class SamlCondition abstract" />
  <TypeSignature Language="F#" Value="type SamlCondition = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示必須在評量 SAML 判斷提示之有效性時加以考量的條件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SamlSecurityToken> 安全性權杖會使用 SAML 判斷提示以及必須在評量 SAML 判斷提示之有效性時加以考量的一組條件，指定其宣告。 <xref:System.IdentityModel.Tokens.SamlCondition> 類別表示單一條件。 其中一個條件範例為是否不得快取 SAML 判斷提示，此條件是用 <xref:System.IdentityModel.Tokens.SamlDoNotCacheCondition> 類別來表示。  
  
 SAML 規格會定義兩個條件，並且允許擴充條件集合。 由 SAML 規格定義的兩個條件是 <xref:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition> 以及 <xref:System.IdentityModel.Tokens.SamlDoNotCacheCondition>。 若要定義新的條件，請從 <xref:System.IdentityModel.Tokens.SamlCondition> 類別衍生一個類別。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />
    <altmember cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SamlCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SamlCondition.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SamlCondition();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public abstract bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SamlCondition.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.IdentityModel.Tokens.SamlCondition.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別 (Derived Class) 中進行覆寫時會取得一個值，這個值會指出這個執行個體的屬性是否是唯讀的。</summary>
        <value>如果這個執行個體的屬性是唯讀的，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為了讓 <xref:System.IdentityModel.Tokens.SamlCondition> 類別的這個執行個體變成唯讀的，此時會呼叫 <xref:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public abstract void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="abstract member MakeReadOnly : unit -&gt; unit" Usage="samlCondition.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，會使得這個執行個體變成唯讀的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當呼叫 <xref:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly%2A> 方法時，<xref:System.IdentityModel.Tokens.SamlCondition.IsReadOnly%2A> 屬性會設定為 `true`，而且將無法再設定這個執行個體的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public abstract void ReadXml (System.Xml.XmlDictionaryReader reader, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer, System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadXml(class System.Xml.XmlDictionaryReader reader, class System.IdentityModel.Tokens.SamlSerializer samlSerializer, class System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver outOfBandTokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SamlCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ReadXml(System::Xml::XmlDictionaryReader ^ reader, System::IdentityModel::Tokens::SamlSerializer ^ samlSerializer, System::IdentityModel::Selectors::SecurityTokenSerializer ^ keyInfoSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ outOfBandTokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadXml : System.Xml.XmlDictionaryReader * System.IdentityModel.Tokens.SamlSerializer * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; unit" Usage="samlCondition.ReadXml (reader, samlSerializer, keyInfoSerializer, outOfBandTokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlDictionaryReader" />
        <Parameter Name="samlSerializer" Type="System.IdentityModel.Tokens.SamlSerializer" />
        <Parameter Name="keyInfoSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="outOfBandTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">要讀取條件的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
        <param name="samlSerializer">
          <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能夠從 SAML 授權陳述式讀取 SAML 規格中所定義的 XML 項目。</param>
        <param name="keyInfoSerializer">
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它會讀取數位簽章的 <see langword="KeyInfo" /> 子句。</param>
        <param name="outOfBandTokenResolver">
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它會判定建立數位簽章的安全性權杖。</param>
        <summary>在衍生類別中覆寫時，從指定的 XML 讀取器讀取此條件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public abstract void WriteXml (System.Xml.XmlDictionaryWriter writer, System.IdentityModel.Tokens.SamlSerializer samlSerializer, System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteXml(class System.Xml.XmlDictionaryWriter writer, class System.IdentityModel.Tokens.SamlSerializer samlSerializer, class System.IdentityModel.Selectors.SecurityTokenSerializer keyInfoSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SamlCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteXml(System::Xml::XmlDictionaryWriter ^ writer, System::IdentityModel::Tokens::SamlSerializer ^ samlSerializer, System::IdentityModel::Selectors::SecurityTokenSerializer ^ keyInfoSerializer);" />
      <MemberSignature Language="F#" Value="abstract member WriteXml : System.Xml.XmlDictionaryWriter * System.IdentityModel.Tokens.SamlSerializer * System.IdentityModel.Selectors.SecurityTokenSerializer -&gt; unit" Usage="samlCondition.WriteXml (writer, samlSerializer, keyInfoSerializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlDictionaryWriter" />
        <Parameter Name="samlSerializer" Type="System.IdentityModel.Tokens.SamlSerializer" />
        <Parameter Name="keyInfoSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="writer">要寫入條件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
        <param name="samlSerializer">
          <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能夠將 XML 項目寫入至 SAML 判斷提示。</param>
        <param name="keyInfoSerializer">
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它可以寫入 <see langword="KeyInfo" /> 子句。</param>
        <summary>在衍生類別中覆寫時，將條件寫入至指定的 XML 序列化程式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>