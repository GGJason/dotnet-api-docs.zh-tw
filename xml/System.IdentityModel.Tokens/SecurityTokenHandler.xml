<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="150d892884e4958b20bdde55fc1889994ef6ee77" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52604867" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type SecurityTokenHandler = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="f2506-101">安全性權杖處理常式的抽象基底類別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2506-101">The abstract base class for security token handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-102"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別是所有安全性權杖處理常式都衍生的基底類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-102">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive.</span></span> <span data-ttu-id="f2506-103">安全性權杖處理常式會負責：</span><span class="sxs-lookup"><span data-stu-id="f2506-103">A security token handler is responsible for:</span></span>  
  
-   <span data-ttu-id="f2506-104">驗證安全性權杖 (<xref:System.IdentityModel.Tokens.SecurityToken>) 可處理程序和封裝到權杖中包含的宣告型別的<xref:System.Security.Claims.ClaimsIdentity>物件。</span><span class="sxs-lookup"><span data-stu-id="f2506-104">Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.</span></span>  
  
-   <span data-ttu-id="f2506-105">序列化和還原序列化的型別，它設計來處理安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-105">Serializing and deserializing security tokens of the type it is designed to process.</span></span>  
  
-   <span data-ttu-id="f2506-106">序列化和還原序列化金鑰識別碼子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>)，它設計來處理與型別的權杖，請參閱`<wsse:SecurityTokenReference>`項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-106">Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.</span></span>  
  
-   <span data-ttu-id="f2506-107">建立從安全性權杖<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>的實作所傳遞物件<xref:System.IdentityModel.SecurityTokenService>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-107">Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
-   <span data-ttu-id="f2506-108">從實作的安全性權杖建立金鑰識別碼子句<xref:System.IdentityModel.SecurityTokenService>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-108">Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="f2506-109">Windows Identity Foundation (WIF) 隨附內建的下列安全性權杖處理常式：</span><span class="sxs-lookup"><span data-stu-id="f2506-109">Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</span></span>  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 <span data-ttu-id="f2506-110">大部分的這些類別會公開實作的類別設計的權杖處理特定功能的其他成員。</span><span class="sxs-lookup"><span data-stu-id="f2506-110">Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</span></span> <span data-ttu-id="f2506-111">在許多情況下可能會比較好的作法衍生自其中的這些類別，而不是直接從<xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-111">In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.</span></span>  
  
 <span data-ttu-id="f2506-112">可以新增或移除指定的權杖處理常式集合的安全性權杖處理常式[&lt;新增&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)， [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)，或是[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)下的項目[ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)組態檔中的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-112">A security token handler can be added or removed from  a token handler collection by specifying the [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [&lt;securityTokenHandlers&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file.</span></span> <span data-ttu-id="f2506-113"><xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration>物件，其中包含的處理常式集合的組態設定可以透過存取<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性和處理常式集合的權杖處理常式的成員可以存取從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-113">The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property.</span></span> <span data-ttu-id="f2506-114">您可以覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>方法來處理您的處理常式會採取任何自訂組態項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-114">You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.</span></span>  
  
 <span data-ttu-id="f2506-115"><xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別會公開數個其他屬性和方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-115">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods.</span></span> <span data-ttu-id="f2506-116">根據您選擇實作的功能，您可能會覆寫部分或所有這些成員。</span><span class="sxs-lookup"><span data-stu-id="f2506-116">Depending on the functionality that you choose to implement, you may override some or all of these members.</span></span>  
  
 <span data-ttu-id="f2506-117">您必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>為 WIF 基礎結構提供安全性權杖，您的類別類型的相關資訊的方法設計用來處理。</span><span class="sxs-lookup"><span data-stu-id="f2506-117">You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</span></span>  
  
 <span data-ttu-id="f2506-118">驗證、 序列化和還原序列化功能會透過屬性或方法，指出是否處理常式可以執行特定函式結合的方法或實作功能的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-118">Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</span></span> <span data-ttu-id="f2506-119">下列清單組的屬性或實作該功能的方法表示功能的方法：</span><span class="sxs-lookup"><span data-stu-id="f2506-119">The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</span></span>  
  
-   <span data-ttu-id="f2506-120"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法： 驗證權杖，並封裝到權杖中包含的宣告<xref:System.Security.Claims.ClaimsIdentity>。</span><span class="sxs-lookup"><span data-stu-id="f2506-120">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.</span></span>  
  
-   <span data-ttu-id="f2506-121"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法： 語彙基元序列化。</span><span class="sxs-lookup"><span data-stu-id="f2506-121">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.</span></span>  
  
-   <span data-ttu-id="f2506-122"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法： 權杖還原序列化。</span><span class="sxs-lookup"><span data-stu-id="f2506-122">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.</span></span>  
  
-   <span data-ttu-id="f2506-123"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法： 還原序列化金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-123">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.</span></span>  
  
-   <span data-ttu-id="f2506-124"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法： 序列化金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-124">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.</span></span>  
  
 <span data-ttu-id="f2506-125"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>而<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法的實作中的管線會從呼叫<xref:System.IdentityModel.SecurityTokenService>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-125">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="f2506-126"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> WIF 基礎結構，以判斷是否已收到指定的語彙基元會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-126">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received.</span></span> <span data-ttu-id="f2506-127">這個方法會傳回預設`false`，這表示，此語彙基元不已接收。</span><span class="sxs-lookup"><span data-stu-id="f2506-127">By default this method returns `false`, which indicates that the token has not already been received.</span></span> <span data-ttu-id="f2506-128">您可以覆寫方法，並提供邏輯，以偵測重新執行的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="f2506-128">You can override the method and provide logic to detect replayed tokens.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-129">所有的程式碼範例<xref:System.IdentityModel.Tokens.SecurityTokenHandler>取自主題`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-129">The code examples in all of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> topics are taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-130">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-130">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-131">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-131">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span> <span data-ttu-id="f2506-132">下列 XML 示範如何將 SWT 權杖處理常式新增至權杖處理常式集合。</span><span class="sxs-lookup"><span data-stu-id="f2506-132">The following XML shows how to add the SWT token handler to the token handlers collection.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2506-133">從衍生類別中的建構函式呼叫，以將 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 類別初始化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-133">Called from constructors in derived classes to initialize the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadKeyIdentifierClause : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="f2506-134">位於開始項目的 XML 讀取器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-134">An XML reader positioned at the start element.</span>
          </span>
          <span data-ttu-id="f2506-135">不應透過這個方法將讀取器向前移。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-135">The reader should not be advanced by this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-136">傳回值，這個值表示指定的 XML 讀取器所參考的 XML 項目是否為此執行個體可還原序列化的金鑰識別項子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-136">Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-137">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-137">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-138">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-138">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-139">預設實作會傳回`false`指出無法讀取金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-139">The default implementation returns `false` to indicate that the key identifier clause cannot be read.</span></span>  
  
 <span data-ttu-id="f2506-140">在衍生的類別會檢查讀取器指以判斷執行個體是否可以還原序列化金鑰識別碼子句的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-140">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</span></span> <span data-ttu-id="f2506-141">這通常透過呼叫來完成<xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType>方法所指定的適當項目和命名空間字串。</span><span class="sxs-lookup"><span data-stu-id="f2506-141">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="f2506-142">如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法，以提供邏輯以還原序列化金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-142">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-143">傳回值，這個值表示指定的語彙基元是否可還原序列化為此執行個體所處理的型別語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-143">Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : string -&gt; bool&#xA;override this.CanReadToken : string -&gt; bool" Usage="securityTokenHandler.CanReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">
          <span data-ttu-id="f2506-144">要讀取的語彙基元字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-144">The token string to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-145">傳回值，這個值表示指定的字串是否可還原序列化為此執行個體所處理的型別語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-145">Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-146">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-146">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-147">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-147">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-148">預設的實作 (Implementation) 一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="f2506-148">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="f2506-149">如果您覆寫這個方法，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法，以提供邏輯以還原序列化的權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-149">If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the token.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member CanReadToken : System.Xml.XmlReader -&gt; bool&#xA;override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="securityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="f2506-150">位於開始項目的 XML 讀取器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-150">An XML reader positioned at a start element.</span>
          </span>
          <span data-ttu-id="f2506-151">不應透過這個方法將讀取器向前移。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-151">The reader should not be advanced by this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-152">傳回值，這個值表示指定的 XML 讀取器所參考的 XML 項目是否可讀取為此執行個體所處理的型別語彙基元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-152">Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-153">如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-153">
              <see langword="true" /> if the <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> method can read the element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-154">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-154">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-155">預設的實作 (Implementation) 一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="f2506-155">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="f2506-156">在衍生的類別會檢查讀取器以判斷執行個體是否可以還原序列化安全性權杖所參考的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-156">A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</span></span> <span data-ttu-id="f2506-157">這通常透過呼叫來完成<xref:System.Xml.XmlReader.IsStartElement%2A>方法所指定的適當項目和命名空間字串。</span><span class="sxs-lookup"><span data-stu-id="f2506-157">This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified.</span></span> <span data-ttu-id="f2506-158">如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法或<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法，以提供邏輯以還原序列化金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-158">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method to provide the logic to deserialize the key identifier clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-159">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法，以判斷是否可以處理常式所讀取的權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-159">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> method to determine whether a token can be read by a handler.</span></span> <span data-ttu-id="f2506-160">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-160">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-161">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-161">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-162">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-162">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-163">取得值，指出處理常式是否支援驗證安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-163">Gets a value that indicates whether the handler supports validation of security tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2506-164">如果類別能夠驗證安全性權杖，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-164">
              <see langword="true" /> if the class is capable of validating security tokens; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-165">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-165">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-166">若要在衍生類別中實作驗證，請覆寫這個屬性，以傳回`true`，並覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>實作驗證邏輯的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-166">To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-167">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>屬性來表示自訂處理常式可以驗證權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-167">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property to indicate that a custom handler can validate tokens.</span></span> <span data-ttu-id="f2506-168">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-168">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-169">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-169">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-170">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-170">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.CanWriteKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityTokenHandler.CanWriteKeyIdentifierClause securityKeyIdentifierClause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">
          <span data-ttu-id="f2506-171">要檢查的索引鍵識別項子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-171">The key identifier clause to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-172">傳回值，指出這個執行個體是否能夠序列化指定的金鑰識別碼子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-172">Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-173">如果可以序列化金鑰識別碼子句，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-173">
              <see langword="true" /> if the key identifier clause can be serialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-174">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-174">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-175">預設的實作 (Implementation) 一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="f2506-175">The default implementation always returns `false`.</span></span>  
  
 <span data-ttu-id="f2506-176">如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法，以提供序列化的金鑰識別碼子句的邏輯。</span><span class="sxs-lookup"><span data-stu-id="f2506-176">If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-177">取得值，指出處理常式是否可序列化安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-177">Gets a value that indicates whether the handler can serialize security tokens.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2506-178">如果類別能夠序列化權杖，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-178">
              <see langword="true" /> if the class is capable of serializing tokens; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f2506-179">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-179">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-180">若要在衍生類別中實作序列化，覆寫這個屬性，以傳回`true`，並覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法來實作序列化邏輯。</span><span class="sxs-lookup"><span data-stu-id="f2506-180">To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-181">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性來表示自訂處理常式可以序列化權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-181">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property to indicate that a custom handler can serialize tokens.</span></span> <span data-ttu-id="f2506-182">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-182">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-183">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-183">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-184">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-184">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Configuration : System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration with get, set" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-185">取得或設定為目前執行個體提供組態的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-185">Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> object that provides configuration for the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2506-186">目前執行個體的組態物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-186">The configuration object for the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-187"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性通常會設定由組態基礎結構，從[ &lt;Securitytokenhandlerconfiguration>&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)啟動期間的應用程式組態檔中的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-187">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [&lt;securityTokenHandlerConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up.</span></span>  
  
 <span data-ttu-id="f2506-188">在衍生類別中，您可以使用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>以存取組態設定的屬性; 例如，在中使用的簽發者名稱登錄<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法可以存取從<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType>組態物件的屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-188">In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> property of the configuration object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainingCollection : System.IdentityModel.Tokens.SecurityTokenHandlerCollection" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-189">取得包含目前執行個體的權杖處理常式集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-189">Gets the token handler collection that contains the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2506-190">包含目前執行個體的權杖處理常式集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-190">The token handler collection that contains the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-191">當權杖處理常式新增至<xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>執行個體，這個屬性會自動設定。</span><span class="sxs-lookup"><span data-stu-id="f2506-191">When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.CreateSecurityTokenReference : System.IdentityModel.Tokens.SecurityToken * bool -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.CreateSecurityTokenReference (token, attached)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-192">要為其建立參考的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-192">The token for which the reference is to be created.</span>
          </span>
        </param>
        <param name="attached">
          <span data-ttu-id="f2506-193">如果應建立附加的參考，則為 <see langword="true" />，如果應建立為未附加的參考，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-193">
              <see langword="true" /> if an attached reference should be created; <see langword="false" /> if an unattached reference should be created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-194">在衍生類別中覆寫時，建立該類別所處理之權杖的安全性權杖參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-194">When overridden in a derived class, creates the security token reference for tokens processed by that class.</span>
          </span>
          <span data-ttu-id="f2506-195">這個方法通常是由安全性權杖服務 (STS) 呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-195">This method is typically called by a security token service (STS).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-196">參考所指定語彙基元的索引鍵識別項子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-196">A key identifier clause that references the specified token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-197">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-197">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-198">在衍生的類別覆寫此方法以傳回金鑰識別碼子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>)，可用來建立`<wsse:SecurityTokenReference>`指定語彙基元的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-198">Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token.</span></span>  
  
 <span data-ttu-id="f2506-199">從實作呼叫<xref:System.IdentityModel.SecurityTokenService>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-199">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
 <span data-ttu-id="f2506-200">一般而言，<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>不需要使用，而非建立自訂安全性權杖服務時。</span><span class="sxs-lookup"><span data-stu-id="f2506-200">Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created.</span></span> <span data-ttu-id="f2506-201">當安全性權杖服務傳回安全性權杖時，所發出的安全性權杖會包含已附加及未附加之安全性權杖的參考。</span><span class="sxs-lookup"><span data-stu-id="f2506-201">When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</span></span> <span data-ttu-id="f2506-202">附加的參考會參考包含在 SOAP 訊息之安全性標頭中的安全性權杖，而未附加的參考則會參考未包含在 SOAP 訊息之安全性標頭中的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-202">Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</span></span> <span data-ttu-id="f2506-203">這些參考通常會證明這些發出之安全性權杖的真實性。</span><span class="sxs-lookup"><span data-stu-id="f2506-203">These references typically affirm the authenticity of the issued security token.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-204">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法用來建立金鑰識別碼子句，從指定的語彙基元。</span><span class="sxs-lookup"><span data-stu-id="f2506-204">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> method to create a key identifier clause from the specified token.</span></span> <span data-ttu-id="f2506-205">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-205">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-206">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-206">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-207">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-207">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">
          <span data-ttu-id="f2506-208">要從其中建立權杖的安全性權杖描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-208">The security token descriptor from which the token is to be created.</span>
          </span>
          <span data-ttu-id="f2506-209">先設定權杖描述元的屬性，然後呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-209">Properties of the token descriptor are set before this method is called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-210">在衍生類別中覆寫時，請使用指定的權杖描述元建立安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-210">When overridden in a derived class, creates a security token using the specified token descriptor.</span>
          </span>
          <span data-ttu-id="f2506-211">安全性權杖服務 (STS) 會呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-211">This method is called by a security token service (STS).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-212">符合權杖描述元之屬性的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-212">A security token that matches the properties of the token descriptor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-213">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-213">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-214">從實作呼叫<xref:System.IdentityModel.SecurityTokenService>類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-214">Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-215">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>方法來建立並傳回權杖，從 權杖描述元。</span><span class="sxs-lookup"><span data-stu-id="f2506-215">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> method to create and return a token from a token descriptor.</span></span> <span data-ttu-id="f2506-216">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-216">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-217">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-217">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-218">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-218">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.DetectReplayedToken : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.DetectReplayedToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-219">要針對重新執行進行檢查的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-219">The token to check for replay.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-220">當在衍生類別中覆寫時，如果指定的權杖被偵測為被重新執行，則擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-220">When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-221">預設實作不做任何動作。</span><span class="sxs-lookup"><span data-stu-id="f2506-221">The default implementation does nothing.</span></span>  
  
 <span data-ttu-id="f2506-222">在衍生的類別應該擲回<xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException>如果已使用該權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-222">Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.</span></span>  
  
 <span data-ttu-id="f2506-223">Windows Identity Foundation (WIF) 提供<xref:System.IdentityModel.Tokens.TokenReplayCache>從哪一個重新執行快取可能會衍生的類別和[ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)組態項目，可用來設定應用程式; 中的權杖處理常式所使用的重新執行快取不過，實際的實作的<xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>方法是由衍生類別的設計工具。</span><span class="sxs-lookup"><span data-stu-id="f2506-223">Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [&lt;tokenReplayCache&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="securityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2506-224">在衍生類別中覆寫時，傳回在要求中使用的 URI 集合，識別衍生類別所處理的權仗型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-224">When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-225">會識別這個處理常式支援的語彙基元型別的 URI 集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-225">The set of URIs that identify the token type that this handler supports.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-226"><xref:System.Type>目前的執行個體所處理的權杖經由<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-226">The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property.</span></span> <span data-ttu-id="f2506-227"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法會傳回一組可接受的識別碼，可用來參考語彙基元類型的訊息中。</span><span class="sxs-lookup"><span data-stu-id="f2506-227">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</span></span> <span data-ttu-id="f2506-228">例如，URI 值會用於`<wst:TokenType>`項目底下`<wst:RequestSecurityToken>`來要求權杖的特定種類的項目 (由<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType>物件模型中的屬性)。</span><span class="sxs-lookup"><span data-stu-id="f2506-228">For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType> property in the object model).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-229">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法，以傳回自訂權杖的權杖型別識別項。</span><span class="sxs-lookup"><span data-stu-id="f2506-229">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to return the token type identifiers for a custom token.</span></span> <span data-ttu-id="f2506-230">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-230">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-231">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-231">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-232">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-232">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="securityTokenHandler.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">
          <span data-ttu-id="f2506-233">組態 XML 項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-233">The configuration XML elements.</span>
          </span>
          <span data-ttu-id="f2506-234">清單中的每個節點的型別為 <see cref="T:System.Xml.XmlElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-234">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-235">在衍生類別中覆寫時，從 XML 載入自訂組態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-235">When overridden in a derived class, loads custom configuration from XML.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-236"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>設定基礎結構會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-236">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="f2506-237">呼叫這個方法時，`nodelist`將包含權杖處理常式的最上層的子元素[&lt;新增&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)從組態檔的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-237">When this method is called, the `nodelist` will contain the top-level child elements of the token handler's [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file.</span></span> <span data-ttu-id="f2506-238">每一種可能，接著，會包含屬性或子項目，根據您為您的衍生類別定義組態結構描述。</span><span class="sxs-lookup"><span data-stu-id="f2506-238">Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span>  
  
 <span data-ttu-id="f2506-239">預設實作會擲回<xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="f2506-239">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="f2506-240">覆寫此方法，以啟用您的安全性權杖處理常式從組態檔初始化衍生類別中。</span><span class="sxs-lookup"><span data-stu-id="f2506-240">Override this method in your derived class to enable initialization of your security token handler from a configuration file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause&#xA;override this.ReadKeyIdentifierClause : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Usage="securityTokenHandler.ReadKeyIdentifierClause reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="f2506-241">位於要還原序列化為金鑰識別項子句之 XML 開始項目的 XML 讀取器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-241">An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-242">在衍生類別中覆寫時，將指定 XML 讀取器所參考的 XML 還原序列化為參考該衍生類別所處理之權仗的索引鍵識別項子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-242">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-243">已從 XML 還原序列化的金鑰識別項子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-243">The key identifier clause that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-244">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-244">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-245">覆寫這個方法，以提供邏輯以還原序列化金鑰識別碼子句，從 XML。</span><span class="sxs-lookup"><span data-stu-id="f2506-245">Override this method to provide the logic to deserialize a key identifier clause from XML.</span></span> <span data-ttu-id="f2506-246">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-246">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-247">在衍生類別中覆寫時，將指定 XML 還原序列化為該衍生類別所處理之類型的權仗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-247">When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : string -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken tokenString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">
          <span data-ttu-id="f2506-248">要還原序列化的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-248">The string to be deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-249">在衍生類別中覆寫時，將指定字串還原序列化為該衍生類別所處理之類型的權仗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-249">When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-250">已從指定的字串還原序列化的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-250">The security token that was deserialized from the specified string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="f2506-251">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-251">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-252">覆寫這個方法，以提供可還原序列化安全性權杖，從字串的功能。</span><span class="sxs-lookup"><span data-stu-id="f2506-252">Override this method to provide functionality that can deserialize a security token from a string.</span></span> <span data-ttu-id="f2506-253">如果您覆寫，此方法中，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-253">If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="f2506-254">XML 讀取器，其位於語彙基元的開始項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-254">An XML reader positioned at the start element of the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-255">在衍生類別中覆寫時，將指定 XML 讀取器所參考的 XML 還原序列化為該衍生類別所處理之類型的權仗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-255">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-256">已從 XML 還原序列化的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-256">The security token that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="f2506-257">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-257">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-258">覆寫這個方法，以提供邏輯以還原序列化來自 XML 的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-258">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="f2506-259">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-259">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f2506-260">一般而言，在衍生類別中，如果方法無法還原序列化的權杖，從參考的 XML，它會擲回<xref:System.Xml.XmlException>。</span><span class="sxs-lookup"><span data-stu-id="f2506-260">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-261">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法，以從指定的 XML 讀取器讀取自訂權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-261">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> method to read a custom token from the specified XML reader.</span></span> <span data-ttu-id="f2506-262">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-262">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-263">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-263">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-264">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-264">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="abstract member ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="securityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="f2506-265">XML 讀取器，其位於語彙基元的開始項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-265">An XML reader positioned at the start element of the token.</span>
          </span>
        </param>
        <param name="tokenResolver">
          <span data-ttu-id="f2506-266">包含 Out-of-Band 及快取權杖的權杖解析程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-266">A token resolver that contains out-of-band and cached tokens.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-267">在衍生類別中覆寫時，使用指定的權仗解析程式，將指定 XML 讀取器所參考的 XML 還原序列化為權杖，此權杖的型別由該衍生類別處理。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-267">When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-268">已從 XML 還原序列化的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-268">The security token that was deserialized from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-method-note](~/includes/untrusted-data-method-note.md)]
  
 <span data-ttu-id="f2506-269">預設實作會忽略`tokenResolver`參數，並將委派呼叫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-269">The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f2506-270">覆寫這個方法，以提供邏輯以還原序列化來自 XML 的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-270">Override this method to provide the logic to deserialize a security token from XML.</span></span> <span data-ttu-id="f2506-271">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-271">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f2506-272">一般而言，在衍生類別中，如果方法無法還原序列化的權杖，從參考的 XML，它會擲回<xref:System.Xml.XmlException>。</span><span class="sxs-lookup"><span data-stu-id="f2506-272">Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-273">在衍生類別中覆寫時，取得由這個執行個體處理的安全性權杖型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-273">When overridden in a derived class, gets the type of the security token that is processed by this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f2506-274">這個執行個體所處理安全性權杖的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-274">The type of the security token that is processed by this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-275">您必須覆寫衍生類別中的這個屬性，並傳回<xref:System.Type>安全性權杖 (<xref:System.IdentityModel.Tokens.SecurityToken>) 衍生的類別所處理的。</span><span class="sxs-lookup"><span data-stu-id="f2506-275">You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-276">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性，以傳回<xref:System.Type>自訂處理常式所處理的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-276">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property to return the <xref:System.Type> of the security tokens that are processed by a custom handler.</span></span> <span data-ttu-id="f2506-277">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-277">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-278">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-278">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-279">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-279">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationFailure : System.IdentityModel.Tokens.SecurityToken * string -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationFailure (token, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-280">正在驗證的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-280">The security token that is being validated.</span>
          </span>
        </param>
        <param name="errorMessage">
          <span data-ttu-id="f2506-281">要寫入追蹤的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-281">The message to write to the trace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-282">當啟用追蹤時，在安全性權杖驗證期間追蹤失敗事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-282">Traces the failure event during the validation of security tokens when tracing is enabled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-283">這個方法應該呼叫從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>權杖驗證失敗時的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-283">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="member this.TraceTokenValidationSuccess : System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.TraceTokenValidationSuccess token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-284">已驗證的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-284">The token that was validated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-285">當啟用追蹤時，追蹤安全性權杖驗證成功事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-285">Traces the successful validation of security tokens event when tracing is enabled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-286">這個方法應該呼叫從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>之後成功驗證權杖的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-286">This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;&#xA;override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="securityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-287">要驗證的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-287">The token to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-288">在衍生類別中覆寫時，驗證指定的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-288">When overridden in a derived class, validates the specified security token.</span>
          </span>
          <span data-ttu-id="f2506-289">權杖必須是由衍生類別所處理的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-289">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-290">包含在語彙基元中的識別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-290">The identities contained in the token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-291">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-291">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-292"><xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>驗證，並從已還原序列化的安全性權杖擷取宣告的基礎結構會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-292">The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</span></span> <span data-ttu-id="f2506-293">這些宣告會傳回在集合中<xref:System.Security.Claims.ClaimsIdentity>方法所傳回的物件。</span><span class="sxs-lookup"><span data-stu-id="f2506-293">These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method.</span></span> <span data-ttu-id="f2506-294">在典型的案例中，這個集合會包含單一身分識別。</span><span class="sxs-lookup"><span data-stu-id="f2506-294">In the typical case, this collection will contain a single identity.</span></span>  
  
 <span data-ttu-id="f2506-295">在衍生類別中，驗證通常包含驗證對象 Uri 中指定的權杖中所指定目標對象<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType>屬性上指定的權杖處理常式組態物件<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-295">In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="f2506-296">這些 Uri 通常會在組態檔中設定為[ &lt;audienceUris&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-296">These URIs are typically set in the configuration file under the [&lt;audienceUris&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element.</span></span> <span data-ttu-id="f2506-297">如果無法驗證對象，<xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException>應該擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-297">If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.</span></span>  
  
 <span data-ttu-id="f2506-298">當處理語彙基元，簽發者通常藉由將簽發者權杖傳遞至其中一個驗證<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>上的方法<xref:System.IdentityModel.Tokens.IssuerNameRegistry>設定為透過處理常式的物件<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-298">When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property.</span></span> <span data-ttu-id="f2506-299">簽發者名稱登錄通常透過設定[ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)組態檔中的項目。</span><span class="sxs-lookup"><span data-stu-id="f2506-299">The issuer name registry is typically configured through the [&lt;issuerNameRegistry&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file.</span></span> <span data-ttu-id="f2506-300"><xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>傳回簽發者名稱。</span><span class="sxs-lookup"><span data-stu-id="f2506-300">The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer.</span></span> <span data-ttu-id="f2506-301">這個名稱應該用來設定<xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType>權杖中包含的宣告中的屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-301">This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType> property in claims contained in the token.</span></span> <span data-ttu-id="f2506-302">如果簽發者名稱登錄不包含簽發者語彙基元的項目<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="f2506-302">If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`.</span></span> <span data-ttu-id="f2506-303">在此情況下<xref:System.IdentityModel.Tokens.SecurityTokenException>通常會擲回在衍生類別中，但此行為是由設計工具的類別。</span><span class="sxs-lookup"><span data-stu-id="f2506-303">In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-304">下列程式碼顯示的覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>處理簡單 web 權杖 (SWT) 的安全性權杖處理常式的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-304">The following code shows an override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method for a security token handler that processes simple web tokens (SWT).</span></span> <span data-ttu-id="f2506-305">程式碼取自`CustomToken`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-305">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="f2506-306">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-306">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 <span data-ttu-id="f2506-307">下列程式碼示範`CreateClaims`方法的覆寫從叫用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>在上述範例中的方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-307">The following code shows `CreateClaims` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the previous example.</span></span> <span data-ttu-id="f2506-308">這個方法會傳回<xref:System.Security.Claims.ClaimsIdentity>建立從權杖中宣告的物件。</span><span class="sxs-lookup"><span data-stu-id="f2506-308">This method returns a <xref:System.Security.Claims.ClaimsIdentity> object that is created from the claims in the token.</span></span> <span data-ttu-id="f2506-309">程式碼取自`CustomToken`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-309">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="f2506-310">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-310">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 <span data-ttu-id="f2506-311">下列程式碼示範`ValidateSignature`方法的覆寫從叫用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>中的簡單 web 權杖處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-311">The following code shows `ValidateSignature` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="f2506-312">這個方法會使用設定來驗證權杖的簽章<xref:System.IdentityModel.Tokens.IssuerTokenResolver>。</span><span class="sxs-lookup"><span data-stu-id="f2506-312">This method validates the signature on the token by using the configured <xref:System.IdentityModel.Tokens.IssuerTokenResolver>.</span></span> <span data-ttu-id="f2506-313">程式碼取自`CustomToken`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-313">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="f2506-314">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-314">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 <span data-ttu-id="f2506-315">下列程式碼示範`ValidateAudience`方法的覆寫從叫用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>中的簡單 web 權杖處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-315">The following code shows `ValidateAudience` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler.</span></span> <span data-ttu-id="f2506-316">這個方法會驗證對象設定中所指定的 Uri 中的權杖中所包含的對象。</span><span class="sxs-lookup"><span data-stu-id="f2506-316">This method validates the audience contained in the token against the audience URIs that were specified in configuration.</span></span> <span data-ttu-id="f2506-317">程式碼取自`CustomToken`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-317">The code is taken from the `CustomToken` sample.</span></span> <span data-ttu-id="f2506-318">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-318">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberSignature Language="F#" Value="abstract member WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit&#xA;override this.WriteKeyIdentifierClause : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; unit" Usage="securityTokenHandler.WriteKeyIdentifierClause (writer, securityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="f2506-319">XML 寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-319">The XML writer.</span>
          </span>
        </param>
        <param name="securityKeyIdentifierClause">
          <span data-ttu-id="f2506-320">要序列化的金鑰識別碼子句。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-320">The key identifier clause to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-321">在衍生類別中覆寫時，將指定的金鑰識別碼子句序列化為 XML。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-321">When overridden in a derived class, serializes the specified key identifier clause to XML.</span>
          </span>
          <span data-ttu-id="f2506-322">金鑰識別項子句必須是衍生類別所支援的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-322">The key identifier clause must be of the type supported by the derived class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-323">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-323">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-324">覆寫這個方法，以提供邏輯以序列化為 XML 的金鑰識別碼子句。</span><span class="sxs-lookup"><span data-stu-id="f2506-324">Override this method to provide the logic to serialize a key identifier clause to XML.</span></span> <span data-ttu-id="f2506-325">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f2506-325">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2506-326">在衍生類別中覆寫時序列化指定的安全性權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-326">When overridden in a derived class, serializes the specified security token.</span>
          </span>
          <span data-ttu-id="f2506-327">權杖必須是由衍生類別所處理的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-327">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string&#xA;override this.WriteToken : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="securityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <span data-ttu-id="f2506-328">要序列化的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-328">The token to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-329">在衍生類別中覆寫時，將指定的安全性權杖序列化為字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-329">When overridden in a derived class, serializes the specified security token to a string.</span>
          </span>
          <span data-ttu-id="f2506-330">權杖必須是由衍生類別所處理的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-330">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2506-331">序列化的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-331">The serialized token.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-332">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-332">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-333">覆寫這個方法，以提供邏輯以序列化為 XML 的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-333">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="f2506-334">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-334">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="abstract member WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit&#xA;override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="securityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="f2506-335">XML 寫入器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-335">The XML writer.</span>
          </span>
        </param>
        <param name="token">
          <span data-ttu-id="f2506-336">要序列化的權杖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-336">The token to serialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2506-337">在衍生類別中覆寫時，將指定的安全性權杖序列化為 XML。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-337">When overridden in a derived class, serializes the specified security token to XML.</span>
          </span>
          <span data-ttu-id="f2506-338">權杖必須是由衍生類別所處理的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2506-338">The token must be of the type processed by the derived class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2506-339">依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f2506-339">By default this method throws a <xref:System.NotImplementedException> exception.</span></span>  
  
 <span data-ttu-id="f2506-340">覆寫這個方法，以提供邏輯以序列化為 XML 的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-340">Override this method to provide the logic to serialize a security token to XML.</span></span> <span data-ttu-id="f2506-341">如果您覆寫這個方法，您也會覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="f2506-341">If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2506-342">下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法，將序列化的自訂權杖。</span><span class="sxs-lookup"><span data-stu-id="f2506-342">The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> method to serialize a custom token.</span></span> <span data-ttu-id="f2506-343">程式碼取自`Custom Token`範例。</span><span class="sxs-lookup"><span data-stu-id="f2506-343">The code is taken from the `Custom Token` sample.</span></span> <span data-ttu-id="f2506-344">此範例提供自訂的類別，可讓處理的簡單 Web 權杖 (SWT)。</span><span class="sxs-lookup"><span data-stu-id="f2506-344">This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</span></span> <span data-ttu-id="f2506-345">如需此範例，並可供 WIF 和其下載位置的其他範例，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。</span><span class="sxs-lookup"><span data-stu-id="f2506-345">For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>