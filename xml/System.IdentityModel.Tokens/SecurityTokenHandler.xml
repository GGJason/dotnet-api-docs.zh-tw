<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cbb9943aefb6ba2f295be7ff7f864be1ec607810" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenHandler&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenHandler abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>安全性權杖處理常式的抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別是從所有安全性權杖處理常式所衍生的基底類別。 安全性權杖處理常式負責：  
  
-   驗證安全性權杖 (<xref:System.IdentityModel.Tokens.SecurityToken>) 它設計來處理程序和封裝到權杖中包含宣告型別的<xref:System.Security.Claims.ClaimsIdentity>物件。  
  
-   序列化和還原序列化安全性權杖，其設計目的是要處理的類型。  
  
-   序列化和還原序列化金鑰識別碼子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>)，是指其設計目的是要處理的類型的權杖`<wsse:SecurityTokenReference>`項目。  
  
-   建立安全性權杖從<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>的實作方式所傳遞物件<xref:System.IdentityModel.SecurityTokenService>類別。  
  
-   從安全性 token 的實作來建立金鑰識別碼子句<xref:System.IdentityModel.SecurityTokenService>類別。  
  
 Windows Identity Foundation (WIF) 會隨附現成提供的下列安全性權杖處理常式：  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 大部分的這些類別會公開實作的特定設計類別語彙基元的處理功能的其他成員。 在許多情況下可能是較好的方式衍生自這些類別，而不是直接從一個<xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別。  
  
 可以加入或從權杖處理常式集合中移除指定安全性權杖處理常式[&lt;新增&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)， [&lt;移除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)，或[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)下的項目[ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)組態檔中的項目。 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration>物件，其中包含處理常式集合的組態設定可以透過存取<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性和處理常式的集合，權杖處理常式的成員可以存取從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A>屬性。 您可以覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>方法來處理您的處理常式會採用任何自訂組態項目。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別會公開數個其他屬性和方法。 根據您選擇實作的功能，您可能會覆寫部分或所有這些成員。  
  
 您必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>設計成處理一般的方法，以提供 WIF 基礎結構的安全性權杖的類別類型的相關資訊。  
  
 驗證、 序列化和還原序列化功能會公開屬性或方法，以指出此處理常式是否可以執行結合的方法或實作功能之方法的特定函式。 下列清單配對的屬性或方法，以指出實作該功能的方法與功能：  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法： 驗證權杖，並封裝到權杖中包含的宣告<xref:System.Security.Claims.ClaimsIdentity>。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法： 語彙基元序列化。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法： 權杖還原序列化。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法： 還原序列化金鑰識別碼子句。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法： 序列化金鑰識別碼子句。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>和<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法從管線中的實作呼叫<xref:System.IdentityModel.SecurityTokenService>類別。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> WIF 基礎結構，以判斷是否已收到指定的語彙基元會呼叫方法。 這個方法會傳回預設`false`，這表示，語彙基元不已接收。 您可以覆寫方法，並提供邏輯，可偵測重新執行的權杖。  
  
   
  
## Examples  
 所有的程式碼範例<xref:System.IdentityModel.Tokens.SecurityTokenHandler>主題摘錄自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。 下列 XML 會示範如何將 SWT 權杖處理常式加入至權杖處理常式集合。  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>從衍生類別中的建構函式呼叫，以將 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 類別初始化。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadKeyIdentifierClause (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">位於開始項目的 XML 讀取器。 不應透過這個方法將讀取器向前移。</param>
        <summary>傳回值，這個值表示指定的 XML 讀取器所參考的 XML 項目是否為此執行個體可還原序列化的金鑰識別項子句。</summary>
        <returns>
          如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回`false`來指示將無法讀取金鑰識別碼子句。  
  
 在衍生的類別會檢查讀取器以判斷執行個體是否可以還原序列化金鑰識別碼子句所參考的項目。 通常這是透過呼叫<xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType>方法與指定的適當項目和命名空間字串。 如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A>方法以提供還原序列化金鑰識別碼子句的邏輯。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回值，這個值表示指定的語彙基元是否可還原序列化為此執行個體所處理的型別語彙基元。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (tokenString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::String ^ tokenString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">要讀取的語彙基元字串。</param>
        <summary>傳回值，這個值表示指定的字串是否可還原序列化為此執行個體所處理的型別語彙基元。</summary>
        <returns>
          如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的實作 (Implementation) 一定會傳回 `false`。  
  
 如果您覆寫這個方法，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法，以提供邏輯以還原序列化語彙基元。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">位於開始項目的 XML 讀取器。 不應透過這個方法將讀取器向前移。</param>
        <summary>傳回值，這個值表示指定的 XML 讀取器所參考的 XML 項目是否可讀取為此執行個體所處理的型別語彙基元。</summary>
        <returns>
          如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可以讀取項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的實作 (Implementation) 一定會傳回 `false`。  
  
 在衍生的類別會檢查讀取器以判斷執行個體是否可以還原序列化的安全性語彙基元所參考的項目。 通常這是透過呼叫<xref:System.Xml.XmlReader.IsStartElement%2A>方法與指定的適當項目和命名空間字串。 如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法或<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法以提供還原序列化金鑰識別碼子句的邏輯。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A>方法，以判斷是否可以處理常式所讀取的語彙基元。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出處理常式是否支援驗證安全性權杖。</summary>
        <value>
          如果類別能夠驗證安全性權杖，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在衍生類別中實作驗證，請覆寫此屬性以傳回`true`並覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法來實作驗證邏輯。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A>屬性，指出自訂處理常式可以驗證權杖。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWriteKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">要檢查的索引鍵識別項子句。</param>
        <summary>傳回值，指出這個執行個體是否能夠序列化指定的金鑰識別碼子句。</summary>
        <returns>
          如果可以序列化金鑰識別碼子句，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設的實作 (Implementation) 一定會傳回 `false`。  
  
 如果您覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>，您也必須覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A>方法以提供序列化金鑰識別碼子句的邏輯。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出處理常式是否可序列化安全性權杖。</summary>
        <value>
          如果類別能夠序列化權杖，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在衍生類別中實作序列化，覆寫此屬性以傳回`true`並覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法來實作序列化邏輯。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性，指出自訂處理常式可以序列化語彙基元。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public Property Configuration As SecurityTokenHandlerConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ Configuration { System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenHandlerConfiguration ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定為目前執行個體提供組態的 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 物件。</summary>
        <value>目前執行個體的組態物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性通常由設定基礎結構，從設定[ &lt;securityTokenHandlerConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)啟動期間的應用程式組態檔中的項目。  
  
 在衍生類別中，您使用<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>以存取組態設定的屬性; 例如，若要使用的簽發者名稱登錄<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法可以存取從<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType>組態物件屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ ContainingCollection { System::IdentityModel::Tokens::SecurityTokenHandlerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含目前執行個體的權杖處理常式集合。</summary>
        <value>包含目前執行個體的權杖處理常式集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當權杖處理常式加入<xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection>執行個體，這個屬性會自動設定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSecurityTokenReference (token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ CreateSecurityTokenReference(System::IdentityModel::Tokens::SecurityToken ^ token, bool attached);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">要為其建立參考的權杖。</param>
        <param name="attached">
          如果應建立附加的參考，則為 <see langword="true" />，如果應建立為未附加的參考，則為 <see langword="false" />。</param>
        <summary>在衍生類別中覆寫時，建立該類別所處理之權杖的安全性權杖參考。 這個方法通常是由安全性權杖服務 (STS) 呼叫。</summary>
        <returns>參考所指定語彙基元的索引鍵識別項子句。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 在衍生的類別覆寫此方法以傳回金鑰識別碼子句 (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) 可以用來建立`<wsse:SecurityTokenReference>`指定語彙基元的項目。  
  
 從實作呼叫<xref:System.IdentityModel.SecurityTokenService>類別。  
  
 一般而言，<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>不需要使用，除了在建立自訂安全性權杖服務時。 當安全性權杖服務傳回安全性權杖時，所發出的安全性權杖會包含已附加及未附加之安全性權杖的參考。 附加的參考會參考包含在 SOAP 訊息之安全性標頭中的安全性權杖，而未附加的參考則會參考未包含在 SOAP 訊息之安全性標頭中的安全性權杖。 這些參考通常會證明這些發出之安全性權杖的真實性。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A>方法來建立金鑰識別碼子句，從指定的語彙基元。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">要從其中建立權杖的安全性權杖描述元。 先設定權杖描述元的屬性，然後呼叫這個方法。</param>
        <summary>在衍生類別中覆寫時，請使用指定的權杖描述元建立安全性權杖。 安全性權杖服務 (STS) 會呼叫這個方法。</summary>
        <returns>符合權杖描述元之屬性的安全性權杖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 從實作呼叫<xref:System.IdentityModel.SecurityTokenService>類別。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A>方法來建立並傳回從權杖的描述元的語彙基元。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DetectReplayedToken (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DetectReplayedToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">要針對重新執行進行檢查的權杖。</param>
        <summary>當在衍生類別中覆寫時，如果指定的權杖被偵測為被重新執行，則擲回例外狀況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作不做任何動作。  
  
 在衍生的類別應該擲回<xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException>如果使用此語彙基元。  
  
 Windows Identity Foundation (WIF) 提供<xref:System.IdentityModel.Tokens.TokenReplayCache>快取可能會衍生自哪一個重新執行的類別和[ &lt;tokenReplayCache&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)組態項目，可用來設定重新執行應用程式; 中的語彙基元處理常式所使用的快取不過，實際的實作<xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A>方法是由衍生類別的設計工具。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中覆寫時，傳回在要求中使用的 URI 集合，識別衍生類別所處理的權仗型別。</summary>
        <returns>會識別這個處理常式支援的語彙基元型別的 URI 集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Type>處理的目前執行個體的語彙基元存取透過<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性。 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法會傳回一組可用的可接受識別碼來參考語彙基元類型的訊息中。 URI 值中的使用，例如`<wst:TokenType>`項目底下`<wst:RequestSecurityToken>`要求特定種類的語彙基元的項目 (由<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType>物件模型中的屬性)。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A>方法以傳回自訂權杖的權杖類型識別項。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">組態 XML 項目。 清單中的每個節點的型別為 <see cref="T:System.Xml.XmlElement" />。</param>
        <summary>在衍生類別中覆寫時，從 XML 載入自訂組態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A>設定基礎結構會呼叫方法。 呼叫這個方法時，`nodelist`將包含權杖處理常式的最上層的子元素[&lt;新增&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)從組態檔項目。 每一種可能，接著，會包含屬性或子項目，視您為您衍生的類別定義組態結構描述。  
  
 預設實作會擲回<xref:System.NotImplementedException>。 覆寫此方法以啟用您的安全性權杖處理常式從組態檔的初始化衍生類別中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadKeyIdentifierClause (reader As XmlReader) As SecurityKeyIdentifierClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ ReadKeyIdentifierClause(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">位於要還原序列化為金鑰識別項子句之 XML 開始項目的 XML 讀取器。</param>
        <summary>在衍生類別中覆寫時，將指定 XML 讀取器所參考的 XML 還原序列化為參考該衍生類別所處理之權仗的索引鍵識別項子句。</summary>
        <returns>已從 XML 還原序列化的金鑰識別項子句。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供的金鑰識別碼子句，從 XML 還原序列化邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時，將指定 XML 還原序列化為該衍生類別所處理之類型的權仗。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (tokenString As String) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::String ^ tokenString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">要還原序列化的字串。</param>
        <summary>在衍生類別中覆寫時，將指定字串還原序列化為該衍生類別所處理之類型的權仗。</summary>
        <returns>已從指定的字串還原序列化的安全性權杖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  呼叫此方法不受信任的資料時，會造成安全性風險。 呼叫這個方法僅使用信任的資料。 如需詳細資訊，請參閱[資料驗證](https://www.owasp.org/index.php/Data_Validation)。  
  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供可還原序列化安全性權杖從字串的功能。 如果您覆寫，此方法中，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XML 讀取器，其位於語彙基元的開始項目。</param>
        <summary>在衍生類別中覆寫時，將指定 XML 讀取器所參考的 XML 還原序列化為該衍生類別所處理之類型的權仗。</summary>
        <returns>已從 XML 還原序列化的安全性權杖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  呼叫此方法不受信任的資料時，會造成安全性風險。 呼叫這個方法僅使用信任的資料。 如需詳細資訊，請參閱[資料驗證](https://www.owasp.org/index.php/Data_Validation)。  
  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供安全性權杖從 XML 還原序列化邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。 一般而言，在衍生類別中，如果方法無法還原序列化的語彙基元從參考的 XML，它會擲回<xref:System.Xml.XmlException>。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A>方法從指定的 XML 讀取器讀取自訂權杖。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">XML 讀取器，其位於語彙基元的開始項目。</param>
        <param name="tokenResolver">包含 Out-of-Band 及快取權杖的權杖解析程式。</param>
        <summary>在衍生類別中覆寫時，使用指定的權仗解析程式，將指定 XML 讀取器所參考的 XML 還原序列化為權杖，此權杖的型別由該衍生類別處理。</summary>
        <returns>已從 XML 還原序列化的安全性權杖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  呼叫此方法不受信任的資料時，會造成安全性風險。 呼叫這個方法僅使用信任的資料。 如需詳細資訊，請參閱[資料驗證](https://www.owasp.org/index.php/Data_Validation)。  
  
 預設實作會忽略`tokenResolver`參數和委派呼叫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType>方法。  
  
 覆寫這個方法以提供安全性權杖從 XML 還原序列化邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType>方法。 一般而言，在衍生類別中，如果方法無法還原序列化的語彙基元從參考的 XML，它會擲回<xref:System.Xml.XmlException>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ TokenType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得由這個執行個體處理的安全性權杖型別。</summary>
        <value>這個執行個體所處理安全性權杖的型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須覆寫衍生類別中的這個屬性，並傳回<xref:System.Type>的安全性權杖 (<xref:System.IdentityModel.Tokens.SecurityToken>) 衍生類別處理。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A>屬性，以傳回<xref:System.Type>自訂處理常式所處理的安全性權杖。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationFailure (token As SecurityToken, errorMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationFailure(System::IdentityModel::Tokens::SecurityToken ^ token, System::String ^ errorMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">正在驗證的安全性權杖。</param>
        <param name="errorMessage">要寫入追蹤的訊息。</param>
        <summary>當啟用追蹤時，在安全性權杖驗證期間追蹤失敗事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法應從呼叫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法語彙基元的驗證失敗時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TraceTokenValidationSuccess (token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TraceTokenValidationSuccess(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">已驗證的權杖。</param>
        <summary>當啟用追蹤時，追蹤安全性權杖驗證成功事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法應從呼叫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>後權杖已成功驗證的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">要驗證的權杖。</param>
        <summary>在衍生類別中覆寫時，驗證指定的安全性權杖。 權杖必須是由衍生類別所處理的型別。</summary>
        <returns>包含在語彙基元中的識別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>驗證，並從已還原序列化的安全性權杖擷取宣告的基礎結構會呼叫方法。 這些宣告會傳回集合中的<xref:System.Security.Claims.ClaimsIdentity>方法所傳回的物件。 在典型的案例中，這個集合會包含單一識別身分。  
  
 在衍生類別中，驗證通常包括驗證針對 Uri 中指定的對象在權杖中指定目標對象<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType>屬性上指定的語彙基元處理常式組態物件<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性。 這些 Uri 通常會在組態檔中設定為[ &lt;audienceUris&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)項目。 如果無法驗證對象，<xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException>應該擲回例外狀況。  
  
 當處理語彙基元，藉由將簽發者權杖傳遞至其中一個通常驗證簽發者<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>方法<xref:System.IdentityModel.Tokens.IssuerNameRegistry>已針對透過處理常式的物件<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>屬性。 簽發者名稱登錄通常透過設定[ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)組態檔中的項目。 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>傳回簽發者名稱。 這個名稱應該用來設定<xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType>權杖中包含的宣告中的屬性。 如果簽發者名稱登錄未包含在簽發者的權杖的項目<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A>傳回`null`。 在此情況下<xref:System.IdentityModel.Tokens.SecurityTokenException>通常會擲回在衍生類別中，但這種行為是由類別的設計工具。  
  
   
  
## Examples  
 下列程式碼示範的覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>處理簡單 web 權杖 (SWT) 的安全性權杖處理常式的方法。 程式碼取自`CustomToken`範例。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 下列程式碼會示範`CreateClaims`方法叫用的覆寫從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>前一個範例中的方法。 這個方法會傳回<xref:System.Security.Claims.ClaimsIdentity>建立從權杖中宣告的物件。 程式碼取自`CustomToken`範例。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 下列程式碼會示範`ValidateSignature`方法叫用的覆寫從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>簡單 web 權杖處理常式中的方法。 這個方法會使用設定的驗證權杖簽章<xref:System.IdentityModel.Tokens.IssuerTokenResolver>。 程式碼取自`CustomToken`範例。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 下列程式碼會示範`ValidateAudience`方法叫用的覆寫從<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>簡單 web 權杖處理常式中的方法。 這個方法會驗證對象設定中所指定的 Uri 中的權杖中所包含的對象。 程式碼取自`CustomToken`範例。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteKeyIdentifierClause(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ securityKeyIdentifierClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">XML 寫入器。</param>
        <param name="securityKeyIdentifierClause">要序列化的金鑰識別碼子句。</param>
        <summary>在衍生類別中覆寫時，將指定的金鑰識別碼子句序列化為 XML。 金鑰識別項子句必須是衍生類別所支援的型別。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供要序列化成 XML 的金鑰識別碼子句的邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在衍生類別中覆寫時序列化指定的安全性權杖。 權杖必須是由衍生類別所處理的型別。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ WriteToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">要序列化的權杖。</param>
        <summary>在衍生類別中覆寫時，將指定的安全性權杖序列化為字串。 權杖必須是由衍生類別所處理的型別。</summary>
        <returns>序列化的權杖。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供要序列化成 XML 的安全性權杖的邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">XML 寫入器。</param>
        <param name="token">要序列化的權杖。</param>
        <summary>在衍生類別中覆寫時，將指定的安全性權杖序列化為 XML。 權杖必須是由衍生類別所處理的型別。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個方法會擲回<xref:System.NotImplementedException>例外狀況。  
  
 覆寫這個方法以提供要序列化成 XML 的安全性權杖的邏輯。 如果您覆寫這個方法，您也應該覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A>屬性。  
  
   
  
## Examples  
 下列程式碼示範如何覆寫<xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A>方法，以序列化的自訂權杖。 程式碼取自`Custom Token`範例。 這個範例提供自訂的類別，可啟用處理的簡易 Web 權杖 (SWT)。 這個範例和其他可供 WIF 及如何下載這些範例的相關資訊，請參閱[WIF 程式碼範例索引](~/docs/framework/security/wif-code-sample-index.md)。  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>