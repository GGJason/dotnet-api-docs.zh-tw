<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ca5f669b69011d52cc6bdf6db3346cc05f1d5ba" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52205885" /></Metadata><TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ComponentGuaranteesAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定義可能應用在多個版本中的元件、型別或型別成員之相容性保障。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>的元件和類別庫的開發人員用來表示其程式庫的取用者可以預期在多個版本的相容性層級。 表示文件庫或元件的未來版本將不會中斷現有的用戶端的保證層的級。 然後可以使用用戶端<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>為設計自己的介面，以確保穩定性不同版本之間的輔助工具。  
  
> [!NOTE]
>  Common language runtime (CLR) 不以任何方式使用此屬性。 記載元件作者的意圖在於它的值。 編譯時期工具也可以使用這些宣告來偵測，否則就會破壞宣告的保證的編譯時期錯誤。  
  
## <a name="levels-of-compatibility"></a>相容性層級  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>支援下列層級的相容性，其中的成員都由<xref:System.Runtime.Versioning.ComponentGuaranteesOptions>列舉型別：  
  
-   任何版本-相容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>)。 用戶端可以預期未來版本將會中斷現有用戶端。 如需詳細資訊，請參閱 <<c0> [ 無相容](#None)本主題稍後的章節。  
  
-   並排顯示版本-相容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>)。 元件已經過測試，以處理多個版本的組件載入相同的應用程式定義域中時。 一般情況下，未來版本可能會中斷相容性。 不過，重大變更時，舊的版本則不會修改，但與新的版本。 並排顯示執行是預期的方式進行重大的變更時使用的現有用戶端。 如需詳細資訊，請參閱 <<c0> [ 並排顯示相容性](#SideBySide)本主題稍後的章節。  
  
-   穩定版本-相容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>)。 未來的版本應該不會中斷用戶端，並不需要由並行執行。 不過，如果不小心中斷用戶端，它可能使用並排顯示執行來修正此問題。 如需詳細資訊，請參閱 <<c0> [ 穩定的相容性](#Standard)一節。  
  
-   Exchange 版本-相容性 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>)。 非經常性小心以確保未來的版本不會中斷用戶端。 用戶端應該使用這些型別用來與其他組件部署彼此通訊的介面的簽章中。 只有一個版本的這些類型被必須在指定的應用程式網域中，這表示如果用戶端會中斷，並排顯示執行無法修正相容性問題。 如需詳細資訊，請參閱 <<c0> [ 交換類型相容性](#Exchange)一節。  
  
 下列各節討論每個層級的更詳細的保證。  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>不相容性  
 標示為元件<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>指出提供者，並不保證相容性。 用戶端上公開的介面，就應該避免發生任何相依性。 此層級的相容性可用於型別是實驗性或，都公開屬性，但僅供，一定會同時更新的元件。 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> 明確指出，此元件不應由外部元件。  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>並排顯示相容性  
 標示為元件<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>指出元件已經過測試以處理多個版本的組件載入至相同的應用程式定義域時。 重大變更允許只要它們不會對該組件都有更高的版本號碼。 繫結至組件的舊版本的元件應繼續繫結至舊的版本，而其他元件可以繫結至新的版本中。 您也可更新的元件，會宣告為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>破壞性的方式修改舊的版本。  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>穩定的相容性  
 標記類型為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>表示不同版本之間應該保持穩定的型別。 不過，它也可能型別的穩定存在於相同的應用程式定義域的並排顯示版本。  
  
 穩定的型別會維護高的二進位相容性標準。 因為這個緣故，提供者應該避免對穩定的型別中的重大變更。 變更下列幾種可接受的：  
  
-   私用執行個體欄位中加入或移除欄位，為型別，只要這不會中斷的序列化格式。  
  
-   非可序列化的類型變更為可序列化的型別。 （不過，可序列化的型別不能變更為不可序列化的型別）。  
  
-   擲回新的、 多衍生的例外狀況的方法。  
  
-   提升效能的方法。  
  
-   只要變更不會造成不良影響大部分的用戶端，請變更傳回值的範圍。  
  
-   如果業務正當理由很高，而且有不利受影響的用戶端數目不足，請修正嚴重的錯誤。  
  
 因為新版本的穩定的元件不會中斷現有用戶端，通常只有一個版本的穩定的元件需要應用程式定義域中。 不過，這不是必要需求，因為穩定的類型不會用做為已知的 exchange 達成協議的所有元件的型別。 因此，如果穩定的元件的新版本會不小心中斷一些元件，而且需要新版本的其他元件，它可能會載入舊和新元件同時修正此問題。  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 提供強大的版本相容性保證比<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。 它是多個版本元件的一般預設值。  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 可以結合<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>，其指出元件不會中斷相容性，但測試，可指定應用程式定義域中載入多個版本。  
  
 型別或方法標示為之後<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>，將它升級到<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>。 不過，它無法降級至<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>交換類型相容性  
 標記為類型<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>可提供強大的版本相容性保證比<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>，而且應該套用至所有類型的最穩定。 這些類型都可以用來跨所有元件界限 （任何版本的 CLR） 或任何版本的元件或應用程式的同時時間獨立建置的元件和空間 （跨處理序、 跨-CLR 中某一個處理序之間的交換跨應用程式定義域中一個 CLR）。 如果一項重大變更對交換類型，就無法載入類型的多個版本中修正此問題。  
  
 問題非常嚴重 （例如嚴重的安全性問題） 或遭破壞的可能性很低 （亦即，如果已經是行為已損毀的程式碼可能不會花費相依性上以隨機方式） 時，才應該變更交換類型。 您可以將下列幾種變更對交換類型：  
  
-   加入新的介面定義繼承。  
  
-   加入新的私用方法可實作新繼承的介面定義的方法。  
  
-   加入新的靜態欄位。  
  
-   加入新的靜態方法。  
  
-   加入新的非虛擬的執行個體方法。  
  
 下列會被視為重大變更，而且不允許的基本型別：  
  
-   變更序列化格式。 需要版本相容序列化。  
  
-   新增或移除私用執行個體欄位。 此風險變更類型的序列化格式，並中斷用戶端會使用反映的程式碼。  
  
-   變更類型的可序列化能力。 非可序列化的型別可能會不成為可序列化，反之亦然。  
  
-   擲回不同的例外狀況的方法。  
  
-   除非成員定義引發這種可能性，並清楚地指出用戶端應如何處理未知的值，請變更方法的傳回值的範圍。  
  
-   修正大部分的 bug。 型別的取用者將會依賴現有的行為。  
  
 之後的元件型別或成員會標示<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>保證，它不能變更為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>或<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>。  
  
 交換類型通常是基本類型 (例如<xref:System.Int32>並<xref:System.String>.NET Framework 中) 和介面 (例如<xref:System.Collections.Generic.IList%601>， <xref:System.Collections.Generic.IEnumerable%601>，和<xref:System.IComparable%601>)，常用於公用介面。  
  
 交換類型可能會對外公開也會標有其他型別<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>相容性。 此外，exchange 類型不能取決於容易變更的 Windows Api 的行為。  
  
## <a name="component-guarantees-a-summary"></a>元件的保證： 摘要  
 下表指出元件的特性和使用方式如何影響其相容性保障。  
  
|元件特性|Exchange|穩定|並排顯示|無|  
|-------------------------------|--------------|------------|--------------------|----------|  
|可以是元件之間的介面中該版本單獨使用。|Y|N|N|N|  
|可以是 （私人） 組件使用該版本獨立。|Y|Y|Y|N|  
|在單一應用程式定義域可以有多個版本。|N|Y|Y|Y|  
|可以進行重大變更|N|N|Y|Y|  
|測試，以確定可以同時載入多個組件版本。|N|N|Y|N|  
|可以在位置進行重大變更。|N|N|N|Y|  
|可以讓很安全不中斷服務的位置中的變更。|Y|Y|Y|Y|  
  
## <a name="applying-the-attribute"></a>套用屬性  
 您可以套用<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>組件、 類型或類型成員。 它的應用程式為階層式。 也就是預設的情況下，就可以保證所定義<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>組件層級之屬性的屬性會定義就可以保證所有類型的組件和這些類型的所有成員。 同樣地，如果保證套用至類型中，依預設它也適用於類型的每個成員。  
  
 此繼承的保證，可以藉由套用覆寫<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>個別類型和類型成員。 不過，覆寫預設的保證只會減弱保證;它們無法進行加強。 例如，如果組件標示為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>保證，其型別和成員都有保證相容性，且會套用至類型或成員的組件中的任何其他保證會被忽略。  
  
## <a name="testing-the-guarantee"></a>測試保證  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>屬性傳回的成員<xref:System.Runtime.Versioning.ComponentGuaranteesOptions>列舉型別，會以標示<xref:System.FlagsAttribute>屬性。 這表示您應該測試您所感興趣的遮罩離開可能無法辨識的旗標的旗標。 例如，下列範例會測試是否為型別會標示為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 下列範例會測試是否為型別會標示為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>或<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 下列範例測試排除的型別會標示為<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>(也就是未<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>也<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>)。  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Versioning.ComponentGuaranteesAttribute : System.Runtime.Versioning.ComponentGuaranteesOptions -&gt; System.Runtime.Versioning.ComponentGuaranteesAttribute" Usage="new System.Runtime.Versioning.ComponentGuaranteesAttribute guarantees" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">一個列舉值，指定多版相容性保障層級。</param>
        <summary>使用表示程式庫、型別或成員之多版相容性保障層級的值，初始化 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>具現化類別，值`guarantees`參數指派給<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Guarantees : System.Runtime.Versioning.ComponentGuaranteesOptions" Usage="System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，該值表示應用在多個版本中的程式庫、型別或型別成員之相容性保障層級。</summary>
        <value>一個列舉值，指定多版相容性保障層級。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>屬性會對應至`guarantees`參數<xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>