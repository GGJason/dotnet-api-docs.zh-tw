<Type Name="MarkupProperty" FullName="System.Windows.Markup.Primitives.MarkupProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cec9e4b44f9d6119d8e215019c75697d3421462b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37560297" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.Primitives.MarkupProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupProperty abstract" />
  <TypeSignature Language="F#" Value="type MarkupProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8bee0-101">抽象類別 (Abstract Class)，提供寫入標記時要使用的屬性描述，該標記可封裝對屬性及其值的存取。</span><span class="sxs-lookup"><span data-stu-id="8bee0-101">Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-102">屬性表示為字串或項目清單。</span><span class="sxs-lookup"><span data-stu-id="8bee0-102">A property is either represented as a string or a list of items.</span></span>  
  
 <span data-ttu-id="8bee0-103">如果此屬性可表示為字串時，<xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A>是`false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-103">If the property can be represented as a string, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`.</span></span>  
  
 <span data-ttu-id="8bee0-104">如果<xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A>是`true`，屬性是項目清單。</span><span class="sxs-lookup"><span data-stu-id="8bee0-104">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is a list of items.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.ComponentModel.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As AttributeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::ComponentModel::AttributeCollection ^ Attributes { System::ComponentModel::AttributeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.ComponentModel.AttributeCollection" Usage="System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-105">在衍生類別 (Derived Class) 中覆寫時，取得與這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 相關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="8bee0-105">When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="8bee0-106">屬性 (Attribute) 的集合。</span><span class="sxs-lookup"><span data-stu-id="8bee0-106">The collection of attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-107">在衍生類別中覆寫時，如果屬性是實作為相依性屬性，則取得標記屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</span><span class="sxs-lookup"><span data-stu-id="8bee0-107">When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</span></span></summary>
        <value><span data-ttu-id="8bee0-108">相依性屬性的識別項。</span><span class="sxs-lookup"><span data-stu-id="8bee0-108">The dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-109">傳回的預設行為`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-109">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttached">
      <MemberSignature Language="C#" Value="public virtual bool IsAttached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAttached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAttached { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttached : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-110">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否為附加 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-110">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <value><span data-ttu-id="8bee0-111">如果屬性是附加 <see cref="T:System.Windows.DependencyProperty" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-111"><see langword="true" /> if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-112">預設行為是傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-112">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="8bee0-113">當<xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A>是`true`，<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>不是`null`並<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>可以是`null`，但不是一定要。</span><span class="sxs-lookup"><span data-stu-id="8bee0-113">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> is not `null` and <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> can be `null`, but is not required to be.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposite">
      <MemberSignature Language="C#" Value="public virtual bool IsComposite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsComposite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsComposite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsComposite : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-114">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否為複合屬性。</span><span class="sxs-lookup"><span data-stu-id="8bee0-114">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property.</span></span></summary>
        <value><span data-ttu-id="8bee0-115">如果這個屬性是複合屬性則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-115"><see langword="true" /> is this property is a composite property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-116">預設行為是傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-116">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="8bee0-117">如果<xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A>已`false`，可以表示為字串的屬性和<xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A>和<xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A>有效使用。</span><span class="sxs-lookup"><span data-stu-id="8bee0-117">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`, the property can be represented as a string and <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> are valid to use.</span></span>  
  
 <span data-ttu-id="8bee0-118">如果<xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A>已`true`，此屬性是一或多個項目和<xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A>有效使用。</span><span class="sxs-lookup"><span data-stu-id="8bee0-118">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is one or more items and <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> is valid to use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructorArgument">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructorArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructorArgument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructorArgument As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructorArgument { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructorArgument : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-119">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示建構函式 (Constructor) 引數。</span><span class="sxs-lookup"><span data-stu-id="8bee0-119">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</span></span></summary>
        <value><span data-ttu-id="8bee0-120">如果這個屬性表示建構函式引數則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-120"><see langword="true" /> if this property represents a constructor argument; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-121">預設行為是傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-121">The default behavior is return `false`.</span></span>  
  
 <span data-ttu-id="8bee0-122">當<xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A>已`true`，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>並<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>兩者都是`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-122">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="8bee0-123">只會使用 XAML<xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A>代表的執行個體的建構函式引數<xref:System.Windows.Markup.MarkupExtension>。</span><span class="sxs-lookup"><span data-stu-id="8bee0-123">XAML only uses <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> for representing the constructor arguments of instances of <xref:System.Windows.Markup.MarkupExtension>.</span></span> <span data-ttu-id="8bee0-124">請參閱[標記延伸和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="8bee0-124">See [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContent">
      <MemberSignature Language="C#" Value="public virtual bool IsContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContent : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-125">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示集合的直接內容。</span><span class="sxs-lookup"><span data-stu-id="8bee0-125">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</span></span></summary>
        <value><span data-ttu-id="8bee0-126">如果屬性表示直接內容則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-126"><see langword="true" /> if the property represents direct content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-127">預設行為是傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-127">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="8bee0-128">當<xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A>已`true`，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>並<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>兩者都是`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-128">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="8bee0-129">字典會包含在決定是否此<xref:System.Windows.Markup.Primitives.MarkupProperty>表示直接內容。</span><span class="sxs-lookup"><span data-stu-id="8bee0-129">Dictionaries are included when determining whether this <xref:System.Windows.Markup.Primitives.MarkupProperty> represents direct content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual bool IsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKey : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-130">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示由 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 使用的索引鍵，以將項目儲存到字典中。</span><span class="sxs-lookup"><span data-stu-id="8bee0-130">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</span></span></summary>
        <value><span data-ttu-id="8bee0-131">如果這個屬性表示索引鍵則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-131"><see langword="true" /> if this property represents a key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-132">預設行為是傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-132">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="8bee0-133">當<xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A>已`true`，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>並<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>是`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-133">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are `null`.</span></span>  
  
 <span data-ttu-id="8bee0-134">XAML 會使用已識別的屬性，做為`x:Key`屬性。</span><span class="sxs-lookup"><span data-stu-id="8bee0-134">XAML will use the identified property as an `x:Key` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueAsString">
      <MemberSignature Language="C#" Value="public virtual bool IsValueAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueAsString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValueAsString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValueAsString { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueAsString : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-135">在衍生類別中覆寫時，決定這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示傳遞至型別轉換子 (Type Converter) 的文字，以建立屬性的執行個體，或是否應使用建構函式。</span><span class="sxs-lookup"><span data-stu-id="8bee0-135">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</span></span></summary>
        <value><span data-ttu-id="8bee0-136">如果這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示字串則為<see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-136"><see langword="true" />, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-137">預設行為是傳回 `false.`</span><span class="sxs-lookup"><span data-stu-id="8bee0-137">The default behavior is to return `false.`</span></span>  
  
 <span data-ttu-id="8bee0-138">當<xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A>已`true`，<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>並<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>兩者都是`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-138">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="8bee0-139">如果屬性透過提供<xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A>並<xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A>是`true`，它會是類型所提供的唯一內容。</span><span class="sxs-lookup"><span data-stu-id="8bee0-139">If the property is provided through <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, it will be the only property the type will provide.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Markup.Primitives.MarkupObject&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Items As IEnumerable(Of MarkupObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ Items { System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : seq&lt;System.Windows.Markup.Primitives.MarkupObject&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-140">在衍生類別中覆寫時，取得組成這個屬性值的項目。</span><span class="sxs-lookup"><span data-stu-id="8bee0-140">When overridden in a derived class, gets the items that make up the value of this property.</span></span></summary>
        <value><span data-ttu-id="8bee0-141">組成此屬性之值的項目。</span><span class="sxs-lookup"><span data-stu-id="8bee0-141">The items that make up the value of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-142">如果屬性不是列舉型別，則會傳回一個項目。</span><span class="sxs-lookup"><span data-stu-id="8bee0-142">If the property is not an enumeration, only one item will be returned.</span></span>  
  
 <span data-ttu-id="8bee0-143">如果屬性是列舉型別，或可列舉，則會傳回所有項目。</span><span class="sxs-lookup"><span data-stu-id="8bee0-143">If the property is an enumeration, or enumerable, all the items will be returned.</span></span>  
  
 <span data-ttu-id="8bee0-144">一律傳回至少一個項目，因為<xref:System.Windows.Markup.Primitives.MarkupObject>將不會建立<xref:System.Windows.Markup.Primitives.MarkupProperty>沒有項目的屬性。</span><span class="sxs-lookup"><span data-stu-id="8bee0-144">At least one item is always returned, because <xref:System.Windows.Markup.Primitives.MarkupObject> will not create a <xref:System.Windows.Markup.Primitives.MarkupProperty> for properties with no items.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-145">在衍生類別中覆寫時，取得用於診斷和錯誤報告的名稱。</span><span class="sxs-lookup"><span data-stu-id="8bee0-145">When overridden in a derived class, gets a name that is used for diagnostics and error reporting.</span></span></summary>
        <value><span data-ttu-id="8bee0-146">識別項屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="8bee0-146">The identifier property name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-147">序列化程式不應該使用此值。</span><span class="sxs-lookup"><span data-stu-id="8bee0-147">A serializer should not use this value.</span></span> <span data-ttu-id="8bee0-148">它應該使用<xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A>及/或<xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A>改。</span><span class="sxs-lookup"><span data-stu-id="8bee0-148">It should use the <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and/or <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyDescriptor As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::PropertyDescriptor ^ PropertyDescriptor { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyDescriptor : System.ComponentModel.PropertyDescriptor" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-149">在衍生類別中覆寫時，取得標記屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="8bee0-149">When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property.</span></span></summary>
        <value><span data-ttu-id="8bee0-150">屬性描述元。</span><span class="sxs-lookup"><span data-stu-id="8bee0-150">The property descriptor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-151">傳回的預設行為`null`。</span><span class="sxs-lookup"><span data-stu-id="8bee0-151">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-152">在衍生類別中覆寫時，取得屬性的 CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="8bee0-152">When overridden in a derived class, gets the CLR type of the property.</span></span></summary>
        <value><span data-ttu-id="8bee0-153">CLR 型別。</span><span class="sxs-lookup"><span data-stu-id="8bee0-153">The CLR type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringValue">
      <MemberSignature Language="C#" Value="public abstract string StringValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StringValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StringValue { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringValue : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-154">在衍生類別中覆寫時，取得這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的字串值。</span><span class="sxs-lookup"><span data-stu-id="8bee0-154">When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="8bee0-155">字串值。</span><span class="sxs-lookup"><span data-stu-id="8bee0-155">The string value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TypeReferences As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeReferences : seq&lt;Type&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-156">在衍生類別中覆寫時，取得這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 在將其值序列化為字串時要參考的型別集。</span><span class="sxs-lookup"><span data-stu-id="8bee0-156">When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</span></span></summary>
        <value><span data-ttu-id="8bee0-157">型別集。</span><span class="sxs-lookup"><span data-stu-id="8bee0-157">The set of types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bee0-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> 可讓序列化程式，以確保還原序列化程式有足夠的資訊，將轉換的字串表示從這些類型的參考。</span><span class="sxs-lookup"><span data-stu-id="8bee0-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> enables a serializer to ensure that the de-serializer has enough information to convert references to these type from the string representations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bee0-159">在衍生類別中覆寫時，取得這個 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的目前值。</span><span class="sxs-lookup"><span data-stu-id="8bee0-159">When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="8bee0-160">目前的值。</span><span class="sxs-lookup"><span data-stu-id="8bee0-160">The current value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>