<Type Name="FieldInfo" FullName="System.Reflection.FieldInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eaf3da8149c7beea481d56464ce8b739bcbe0488" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit FieldInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._FieldInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.FieldInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FieldInfo&#xA;Inherits MemberInfo&#xA;Implements _FieldInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class FieldInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_FieldInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._FieldInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._FieldInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7081a-101">探索欄位的屬性並提供欄位中繼資料的存取。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7081a-101">Discovers the attributes of a field and provides access to field metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-102">從中繼資料取得的欄位資訊。</span><span class="sxs-lookup"><span data-stu-id="7081a-102">The field information is obtained from metadata.</span></span> <span data-ttu-id="7081a-103"><xref:System.Reflection.FieldInfo>類別沒有公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="7081a-103">The <xref:System.Reflection.FieldInfo> class does not have a public constructor.</span></span> <span data-ttu-id="7081a-104"><xref:System.Reflection.FieldInfo> 物件藉由呼叫取得<xref:System.Type.GetFields%2A>或<xref:System.Type.GetField%2A>方法`Type`物件。</span><span class="sxs-lookup"><span data-stu-id="7081a-104"><xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.</span></span>  
  
 <span data-ttu-id="7081a-105">欄位是在類別中定義的變數。</span><span class="sxs-lookup"><span data-stu-id="7081a-105">Fields are variables defined in the class.</span></span> <span data-ttu-id="7081a-106"><xref:System.Reflection.FieldInfo> 提供存取類別內的欄位中繼資料並提供動態設定和取得功能的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-106"><xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</span></span> <span data-ttu-id="7081a-107">類別不載入成為記憶體之前叫用，或物件上呼叫 get。</span><span class="sxs-lookup"><span data-stu-id="7081a-107">The class is not loaded into memory until invoke or get is called on the object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-108">下列範例會使用<xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法來取得欄位的相關資訊從<xref:System.Reflection.FieldInfo>類別，然後按一下 顯示欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-108">The following example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get the field-related information from the <xref:System.Reflection.FieldInfo> class, and then displays field attributes.</span></span>  
  
 [!code-cpp[FieldInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo/CPP/fieldinfo.cpp#1)]
 [!code-csharp[FieldInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/CS/fieldinfo.cs#1)]
 [!code-vb[FieldInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo/VB/fieldinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="7081a-109">針對繼承者完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7081a-109">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="7081a-110">這個類別無法被繼承，部分信任程式碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7081a-110">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="7081a-111">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7081a-111">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="7081a-112">當您繼承自 <see cref="T:System.Reflection.FieldInfo" /> 時，您必須覆寫下列成員：<see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> 和 <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />。</span>
        <span class="sxs-lookup">
          <span data-stu-id="7081a-112">When you inherit from <see cref="T:System.Reflection.FieldInfo" />, you must override the following members: <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> and <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Type" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FieldInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FieldInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-113">初始化 <see langword="FieldInfo" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-113">Initializes a new instance of the <see langword="FieldInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-114">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-114">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-115">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-115">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.FieldAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As FieldAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::FieldAttributes Attributes { System::Reflection::FieldAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-116">取得與這個欄位相關的屬性 (Attribute)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-116">Gets the attributes associated with this field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-117">這個欄位的 <see langword="FieldAttributes" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-117">The <see langword="FieldAttributes" /> for this field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-118">所有成員都有一組屬性，定義相對於特定類型的成員。</span><span class="sxs-lookup"><span data-stu-id="7081a-118">All members have a set of attributes, which are defined in relation to the specific type of member.</span></span> <span data-ttu-id="7081a-119">`FieldAttributes` 告知使用者這個欄位是私用欄位，靜態欄位，以及等等。</span><span class="sxs-lookup"><span data-stu-id="7081a-119">`FieldAttributes` informs the user whether this field is the private field, a static field, and so on.</span></span>  
  
 <span data-ttu-id="7081a-120">若要取得`Attributes`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-120">To get the `Attributes` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-121">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-121">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-122">從`FieldInfo`，取得`Attributes`。</span><span class="sxs-lookup"><span data-stu-id="7081a-122">From the `FieldInfo`, get the `Attributes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-123">下列程式碼範例會建立三個欄位，並顯示其欄位屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-123">The following code example builds three fields and displays their field attributes.</span></span> <span data-ttu-id="7081a-124">A`FieldAttributes`值只能包含一個以上的屬性，例如同時`Public`和`Literal`、 第三個欄位中所示。</span><span class="sxs-lookup"><span data-stu-id="7081a-124">A `FieldAttributes` value can contain more than one attribute, such as both `Public` and `Literal`, as shown in the third field.</span></span>  
  
 [!code-cpp[Classic FieldAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic FieldAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-125">與這個執行個體相比較的物件，或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-125">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-126">傳回值，這個值指出此執行個體是否與指定的物件相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-126">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-127">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-127">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldHandle">
      <MemberSignature Language="C#" Value="public abstract RuntimeFieldHandle FieldHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeFieldHandle FieldHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldHandle" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldHandle As RuntimeFieldHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property RuntimeFieldHandle FieldHandle { RuntimeFieldHandle get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeFieldHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-128">取得 <see langword="RuntimeFieldHandle" />，它是欄位內部中繼資料表示的控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-128">Gets a <see langword="RuntimeFieldHandle" />, which is a handle to the internal metadata representation of a field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-129">欄位內部中繼資料表示的控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-129">A handle to the internal metadata representation of a field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-130">控點會在所取得的 appdomain 中才有效。</span><span class="sxs-lookup"><span data-stu-id="7081a-130">The handles are valid only in the appdomain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-131">下列範例會擷取 MyClass.MyField 欄位資訊，並顯示與欄位控制代碼相關聯的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-131">The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</span></span>  
  
 [!code-cpp[FieldInfo_FieldHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_FieldHandle/CPP/fieldinfo_fieldhandle.cpp#1)]
 [!code-csharp[FieldInfo_FieldHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/CS/fieldinfo_fieldhandle.cs#1)]
 [!code-vb[FieldInfo_FieldHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_FieldHandle/VB/fieldinfo_fieldhandle.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldType">
      <MemberSignature Language="C#" Value="public abstract Type FieldType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FieldType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.FieldType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FieldType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ FieldType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.FieldType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-132">取得這個欄位物件的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-132">Gets the type of this field object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-133">這個欄位物件的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-133">The type of this field object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-134">類型是一些基本資料類型，例如`String`， `Boolean`，或`GUID`。</span><span class="sxs-lookup"><span data-stu-id="7081a-134">The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.</span></span>  
  
 <span data-ttu-id="7081a-135">若要取得`FieldType`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-135">To get the `FieldType` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-136">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-136">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-137">從`FieldInfo`，取得`FieldType`值。</span><span class="sxs-lookup"><span data-stu-id="7081a-137">From the `FieldInfo`, get the `FieldType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-138">下列範例會建立欄位，取得其型別和<xref:System.Reflection.FieldInfo>，並顯示其<xref:System.Reflection.FieldInfo.FieldType%2A>。</span><span class="sxs-lookup"><span data-stu-id="7081a-138">The following example creates a field, gets its type and <xref:System.Reflection.FieldInfo>, and displays its <xref:System.Reflection.FieldInfo.FieldType%2A>.</span></span>  
  
 [!code-cpp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.FieldType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFieldFromHandle">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-139">取得控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-139">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by a handle.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="7081a-140">
            <see cref="T:System.RuntimeFieldHandle" /> 結構，包含欄位內部中繼資料表示的控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-140">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-141">取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-141">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-142">
            <see cref="T:System.Reflection.FieldInfo" /> 物件，表示 <paramref name="handle" /> 所指定的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-142">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-143">只有在所取得的應用程式定義域控制代碼是有效的。</span><span class="sxs-lookup"><span data-stu-id="7081a-143">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-144">下列程式碼範例使用<xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法來取得<xref:System.Reflection.FieldInfo>物件的類型，欄位取得<xref:System.RuntimeFieldHandle>結構的每個欄位，然後再擷取<xref:System.Reflection.FieldInfo>使用的這個多載的控制代碼的物件<xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7081a-144">The following code example uses the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get <xref:System.Reflection.FieldInfo> objects for the fields of a type, gets a <xref:System.RuntimeFieldHandle> structure for each field, and then retrieves the <xref:System.Reflection.FieldInfo> objects from the handles using this overload of the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A> method.</span></span>  
  
 [!code-cpp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CPP/fieldinfo_getfieldfromhandle.cpp#1)]
 [!code-csharp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CS/fieldinfo_getfieldfromhandle.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/VB/fieldinfo_getfieldfromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7081a-145">
            <paramref name="handle" /> 無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-145">
              <paramref name="handle" /> is invalid.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-146">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-146">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-147">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-147">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetFieldFromHandle">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle, valuetype System.RuntimeTypeHandle declaringType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFieldFromHandle (handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeFieldHandle" />
        <Parameter Name="declaringType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="7081a-148">
            <see cref="T:System.RuntimeFieldHandle" /> 結構，包含欄位內部中繼資料表示的控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-148">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</span>
          </span>
        </param>
        <param name="declaringType">
          <span data-ttu-id="7081a-149">
            <see cref="T:System.RuntimeTypeHandle" /> 結構，包含定義欄位之泛型型別的控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-149">A <see cref="T:System.RuntimeTypeHandle" /> structure that contains the handle to the generic type that defines the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-150">針對指定的泛型型別，取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-150">Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-151">
            <see cref="T:System.Reflection.FieldInfo" /> 物件，在 <paramref name="handle" /> 所指定的泛型型別中，表示 <paramref name="declaringType" /> 指定的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-151">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-152">只有在所取得的應用程式定義域控制代碼是有效的。</span><span class="sxs-lookup"><span data-stu-id="7081a-152">Handles are valid only in the application domain in which they were obtained.</span></span>  
  
 <span data-ttu-id="7081a-153">建議的作法是，`declaringType`應該一律是建構的執行階段類型的控制代碼類型`handle`屬於。</span><span class="sxs-lookup"><span data-stu-id="7081a-153">The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to.</span></span> <span data-ttu-id="7081a-154">也就是說，如果`handle`欄位所屬的執行階段欄位控制代碼`MyType<int>`(`MyType(Of Integer)`在 Visual Basic 中)，`declaringType`的執行階段類型控制代碼`MyType<int>`。</span><span class="sxs-lookup"><span data-stu-id="7081a-154">That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`.</span></span> <span data-ttu-id="7081a-155">請勿使用泛型類型定義中，執行階段型別控制代碼，除非執行階段欄位控制代碼表示泛型類型定義的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-155">Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</span></span>  
  
 <span data-ttu-id="7081a-156">實作可以在某些情況下相容。</span><span class="sxs-lookup"><span data-stu-id="7081a-156">Implementations are compatible in some cases.</span></span> <span data-ttu-id="7081a-157">比方說，從特定的泛型類型定義建構的泛型型別引數使用參考類型的所有型別共用的單一實作。</span><span class="sxs-lookup"><span data-stu-id="7081a-157">For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</span></span> <span data-ttu-id="7081a-158">例如， `MyType<string>`， `MyType<object>`，和`MyType<ArrayList>`所有共用相同的實作。</span><span class="sxs-lookup"><span data-stu-id="7081a-158">For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation.</span></span> <span data-ttu-id="7081a-159">在此情況下，<xref:System.Reflection.FieldInfo>傳回物件表示型別上的欄位，`declaringType`指定，不論原始來源為何`handle`。</span><span class="sxs-lookup"><span data-stu-id="7081a-159">In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`.</span></span> <span data-ttu-id="7081a-160">不建議這種作法，因為它只適用於建構類型的泛型型別引數是參考型別。</span><span class="sxs-lookup"><span data-stu-id="7081a-160">This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</span></span>  
  
 <span data-ttu-id="7081a-161">如果泛型引數是實值類型，建構類型的執行階段類型控制代碼不相容與執行階段欄位控制代碼，從具有參考類型中相同的泛型參數位置，或在該位置中輸入不同值的語法結構.</span><span class="sxs-lookup"><span data-stu-id="7081a-161">If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</span></span> <span data-ttu-id="7081a-162">在此情況下，若要使用的唯一方式<xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType>多載，可以確保`declaringType`建構類型，是執行階段型別控制代碼`handle`屬於。</span><span class="sxs-lookup"><span data-stu-id="7081a-162">In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-163">下列範例示範如何擷取<xref:System.Reflection.FieldInfo>物件建構的泛型類別上的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-163">The following example shows how to retrieve <xref:System.Reflection.FieldInfo> objects for fields on constructed generic classes.</span></span> <span data-ttu-id="7081a-164">此範例會定義泛型型別`Test<T>`(`Test(Of T)`在 Visual Basic 中) 與名為的單一欄位`TestField`，型別`T`。</span><span class="sxs-lookup"><span data-stu-id="7081a-164">The example defines the generic type `Test<T>` (`Test(Of T)` in Visual Basic) with a single field named `TestField`, of type `T`.</span></span> <span data-ttu-id="7081a-165">此範例會取得<xref:System.RuntimeFieldHandle>和<xref:System.RuntimeTypeHandle>案例其中`T`是<xref:System.String>，並示範下列：</span><span class="sxs-lookup"><span data-stu-id="7081a-165">The example gets the <xref:System.RuntimeFieldHandle> and <xref:System.RuntimeTypeHandle> for the case where `T` is <xref:System.String>, and demonstrates the following:</span></span>  
  
-   <span data-ttu-id="7081a-166">如果擲回例外狀況<xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29>會使用方法多載。</span><span class="sxs-lookup"><span data-stu-id="7081a-166">An exception is thrown if the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> method overload is used.</span></span> <span data-ttu-id="7081a-167">這是 true，即使欄位的類型不是`T`。</span><span class="sxs-lookup"><span data-stu-id="7081a-167">This is true even if the field is not of type `T`.</span></span>  
  
-   <span data-ttu-id="7081a-168">A<xref:System.Reflection.FieldInfo>執行階段型別控制代碼是從相同的建構執行階段欄位控制代碼，以在此情況下，如果已順利擷取`Test<string>`。</span><span class="sxs-lookup"><span data-stu-id="7081a-168">A <xref:System.Reflection.FieldInfo> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case `Test<string>`.</span></span>  
  
-   <span data-ttu-id="7081a-169">如果執行階段型別控制代碼是從相容的建構，在此情況下`Test<object>`、<xref:System.Reflection.FieldInfo>欄位在相容的建構會擷取的。</span><span class="sxs-lookup"><span data-stu-id="7081a-169">If the runtime type handle is from a compatible construction, in this case `Test<object>`, a <xref:System.Reflection.FieldInfo> for the field on the compatible construction is retrieved.</span></span>  
  
-   <span data-ttu-id="7081a-170">如果執行階段型別控制代碼不相容的建構，則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="7081a-170">If the runtime type handle is not from a compatible construction, an exception is thrown.</span></span> <span data-ttu-id="7081a-171">在此情況下，實值類型指定`T`。</span><span class="sxs-lookup"><span data-stu-id="7081a-171">In this case, a value type is specified for `T`.</span></span>  
  
 [!code-csharp[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/cs/source.cs#1)]
 [!code-vb[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7081a-172">
            <paramref name="handle" /> 無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-172">
              <paramref name="handle" /> is invalid.</span>
          </span>
          <span data-ttu-id="7081a-173">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-173">-or-</span>
          </span>
          <span data-ttu-id="7081a-174">
            <paramref name="declaringType" /> 與 <paramref name="handle" /> 不相容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-174">
              <paramref name="declaringType" /> is not compatible with <paramref name="handle" />.</span>
          </span>
          <span data-ttu-id="7081a-175">例如，<paramref name="declaringType" /> 是泛型型別定義的執行階段型別控制代碼，且 <paramref name="handle" /> 來自建構的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-175">For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-176">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-176">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-177">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-177">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-178">傳回這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-178">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-179">32 位元帶正負號的整數雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-179">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-180">取得可識別欄位的選用自訂修飾詞的類型陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-180">Gets an array of types that identify the optional custom modifiers of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-181">
            <see cref="T:System.Type" /> 物件的陣列，識別目前欄位的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-181">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-182"><xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A>和<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A>方法可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="7081a-182">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="7081a-183">如需有關自訂修飾詞的詳細資訊，請參閱<xref:System.Runtime.CompilerServices.IsBoxed>和相關類別中的<xref:System.Runtime.CompilerServices>命名空間和 ECMA 第二篇文件中的中繼資料規格。</span><span class="sxs-lookup"><span data-stu-id="7081a-183">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="7081a-184">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="7081a-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-185">使用編譯器傳回與欄位相關聯的常值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-185">Returns a literal value associated with the field by a compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-186">
            <see cref="T:System.Object" />，包含與欄位關聯的常值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-186">An <see cref="T:System.Object" /> that contains the literal value associated with the field.</span>
          </span>
          <span data-ttu-id="7081a-187">如果常值是元素值為零的類別類型，則傳回值會是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-187">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-188">這個方法會提供 managed 的編譯器和程式碼分析器的設計工具。</span><span class="sxs-lookup"><span data-stu-id="7081a-188">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="7081a-189">這個方法可用於執行內容和僅限反映的內容。</span><span class="sxs-lookup"><span data-stu-id="7081a-189">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="7081a-190">Unmanaged 中繼資料中的 Constant 資料表用於儲存常數值的欄位、 參數和屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="7081a-191">常數的資訊不會直接影響執行階段行為。</span><span class="sxs-lookup"><span data-stu-id="7081a-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="7081a-192">編譯器會檢查這項資訊，在編譯時期，當匯入中繼資料。</span><span class="sxs-lookup"><span data-stu-id="7081a-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="7081a-193">如果單獨使用，編譯器會發出 Microsoft 中繼語言 (MSIL) 資料流中內嵌常數的值。</span><span class="sxs-lookup"><span data-stu-id="7081a-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="7081a-194">可用來在執行階段存取的 Constant 資料表沒有 MSIL 指令。</span><span class="sxs-lookup"><span data-stu-id="7081a-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-195">如需有關常數的值和常數的資料表的詳細資訊，請參閱 ECMA 第二篇文件。</span><span class="sxs-lookup"><span data-stu-id="7081a-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="7081a-196">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="7081a-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7081a-197">Unmanaged 中繼資料中的 Constant 資料表不包含目前欄位的常數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-197">The Constant table in unmanaged metadata does not contain a constant value for the current field.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="7081a-198">值的類型不是 Common Language Specification (CLS) 允許的類型之一。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span>
          </span>
          <span data-ttu-id="7081a-199">請參閱 ECMA 規格第二篇的＜中繼資料邏輯格式：其他結構、簽章中使用的項目類型＞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-199">See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7081a-200">未設定該欄位的常數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-200">The constant value for the field is not set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-201">取得類型的陣列，識別屬性的必要自訂修飾詞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-201">Gets an array of types that identify the required custom modifiers of the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-202">
            <see cref="T:System.Type" /> 物件的陣列，識別目前屬性的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-202">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-203"><xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A>和<xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A>方法可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="7081a-203">The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="7081a-204">如需有關自訂修飾詞的詳細資訊，請參閱<xref:System.Runtime.CompilerServices.IsBoxed>和相關類別中的<xref:System.Runtime.CompilerServices>命名空間和 ECMA 第二篇文件中的中繼資料規格。</span><span class="sxs-lookup"><span data-stu-id="7081a-204">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="7081a-205">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="7081a-205">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValue(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-206">將傳回其欄位值的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-206">The object whose field value will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-207">在衍生類別中覆寫時，傳回指定物件所支援欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-207">When overridden in a derived class, returns the value of a field supported by a given object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-208">物件，包含這個執行個體所反映欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-208">An object containing the value of the field reflected by this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-209">如果欄位為靜態，`obj`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7081a-209">If the field is static, `obj` is ignored.</span></span> <span data-ttu-id="7081a-210">對於非靜態欄位，`obj`應該繼承或宣告欄位之類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="7081a-210">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="7081a-211">請注意，傳回型別`GetValue`是`Object`。</span><span class="sxs-lookup"><span data-stu-id="7081a-211">Note that the return type of `GetValue` is `Object`.</span></span> <span data-ttu-id="7081a-212">例如，如果欄位保留為布林值基本值的執行個體`Object`使用適當的布林值傳回值。</span><span class="sxs-lookup"><span data-stu-id="7081a-212">For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned.</span></span> <span data-ttu-id="7081a-213">傳回值之前,`GetValue`檢查使用者是否具有存取權限。</span><span class="sxs-lookup"><span data-stu-id="7081a-213">Before returning the value, `GetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-214">完全信任程式碼會忽略存取限制。</span><span class="sxs-lookup"><span data-stu-id="7081a-214">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="7081a-215">也就是私用建構函式、 方法、 欄位和屬性可以存取和每當程式碼受到完全信任時，透過反映來叫用。</span><span class="sxs-lookup"><span data-stu-id="7081a-215">That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-216">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫端被授與<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，如果非公用成員的授權集僅限於呼叫者的授與集或子集合類別。</span><span class="sxs-lookup"><span data-stu-id="7081a-216">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="7081a-217">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="7081a-217">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7081a-218">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="7081a-218">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-219">下列範例會使用<xref:System.Reflection.FieldInfo.GetValue%2A>方法來擷取靜態欄位的值。</span><span class="sxs-lookup"><span data-stu-id="7081a-219">The following example uses the <xref:System.Reflection.FieldInfo.GetValue%2A> method to retrieve the value of a static field.</span></span> <span data-ttu-id="7081a-220">請注意，值`obj`引數是`null`。</span><span class="sxs-lookup"><span data-stu-id="7081a-220">Note that the value of the `obj` argument is `null`.</span></span>  
  
 [!code-cpp[getfldval#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetFldVal/CPP/getfldval.cpp#1)]
 [!code-csharp[getfldval#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/CS/getfldval.cs#1)]
 [!code-vb[getfldval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetFldVal/VB/getfldval.vb#1)]  
  
 <span data-ttu-id="7081a-221">下列範例會擷取陣列<xref:System.Reflection.FieldInfo>這些物件表示的欄位`FieldsClass`類型，然後呼叫<xref:System.Reflection.FieldInfo.GetValue%2A>來顯示每個欄位的值`fieldsInst`物件。</span><span class="sxs-lookup"><span data-stu-id="7081a-221">The following example retrieves an array of <xref:System.Reflection.FieldInfo> objects that represents the fields of the `FieldsClass` type, and then calls the <xref:System.Reflection.FieldInfo.GetValue%2A> to display the value of each field for the `fieldsInst` object.</span></span>  
  
 [!code-cpp[FieldInfo_GetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetValue/CPP/fieldinfo_getvalue.cpp#1)]
 [!code-csharp[FieldInfo_GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/CS/fieldinfo_getvalue.cs#1)]
 [!code-vb[FieldInfo_GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetValue/VB/fieldinfo_getvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="7081a-222">在 [適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="7081a-222">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="7081a-223">欄位為非靜態，而 <paramref name="obj" /> 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-223">The field is non-static and <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7081a-224">欄位標記為常值，但欄位沒有其中一個可接受的常值類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-224">A field is marked literal, but the field does not have one of the accepted literal types.</span>
          </span>
        </exception>
        <exception cref="T:System.FieldAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="7081a-225">在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912)或是可攜式類別庫中，改為攔截基底類別例外狀況 <see cref="T:System.MemberAccessException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="7081a-225">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="7081a-226">呼叫端沒有存取這個欄位的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-226">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7081a-227">
            <paramref name="obj" /> 的類別未宣告也未繼承這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-227">The method is neither declared nor inherited by the class of <paramref name="obj" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-228">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-229">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetValueDirect">
      <MemberSignature Language="C#" Value="public virtual object GetValueDirect (TypedReference obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValueDirect(valuetype System.TypedReference obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueDirect (obj As TypedReference) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValueDirect(TypedReference obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-230">
            <see cref="T:System.TypedReference" /> 結構，其封裝位置的 Managed 指標和可能儲存在該位置之型別的執行階段表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-230">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-231">傳回由指定物件支援的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-231">Returns the value of a field supported by a given object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-232">含有欄位值的 <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-232">An <see langword="Object" /> containing a field value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" />
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7081a-233">呼叫端需要 Common Language Specification (CLS) 替代方式，但改為呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-233">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-234">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-234">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-235">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-235">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsAssembly">
      <MemberSignature Language="C#" Value="public bool IsAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-236">取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 是否描述此欄位的潛在可視性；亦即，最多只有相同組件 (Assembly) 中的其他型別可以看見該欄位，組件外部的衍生型別 (Derived Type) 則看不見它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-236">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-237">如果 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 已精確描述這個欄位的可視性則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-237">
              <see langword="true" /> if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-238">欄位的實際的可見性受限於其類型的可見性。</span><span class="sxs-lookup"><span data-stu-id="7081a-238">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="7081a-239"><xref:System.Reflection.FieldInfo.IsAssembly%2A>屬性可能是`true`欄位，但如果它是私用巢狀類型的欄位的欄位不包含型別外部可見的。</span><span class="sxs-lookup"><span data-stu-id="7081a-239">The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="7081a-240">完全由描述欄位的可視性<xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType>只有可視性修飾詞是否`internal`(`Friend`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="7081a-240">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType> if the only visibility modifier is `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="7081a-241">這個屬性是`false`之欄位的`protected internal`C# 中 (`Protected Friend`在 Visual Basic 中`protected public`c + + 中); 使用<xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>來識別這類欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-241">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-242">下列程式碼範例會定義的欄位具有不同層級的可見性，並顯示的值及其<xref:System.Reflection.FieldInfo.IsAssembly%2A>， <xref:System.Reflection.FieldInfo.IsFamily%2A>， <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>，和<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-242">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-243">Visual Basic 和 C# 語言不能定義欄位<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可見性，則為，存取層級只會出現在 c + + 範例。</span><span class="sxs-lookup"><span data-stu-id="7081a-243">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamily">
      <MemberSignature Language="C#" Value="public bool IsFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamily" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamily { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-244">取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Family" /> 是否描述此欄位的可視性；亦即，您只能在其類別和衍生類別內看見該欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-244">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-245">如果 <see cref="F:System.Reflection.FieldAttributes.Family" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-245">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-246">完全由描述欄位的可視性<xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType>只有可視性修飾詞是否`protected`。</span><span class="sxs-lookup"><span data-stu-id="7081a-246">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType> if the only visibility modifier is `protected`.</span></span> <span data-ttu-id="7081a-247">這個屬性是`false`之欄位的`protected internal`C# 中 (`Protected Friend`在 Visual Basic 中`protected public`c + + 中); 使用<xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>來識別這類欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-247">This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-248">下列程式碼範例會定義的欄位具有不同層級的可見性，並顯示的值及其<xref:System.Reflection.FieldInfo.IsAssembly%2A>， <xref:System.Reflection.FieldInfo.IsFamily%2A>， <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>，和<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-248">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-249">Visual Basic 和 C# 語言不能定義欄位<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可見性，則為，存取層級只會出現在 c + + 範例。</span><span class="sxs-lookup"><span data-stu-id="7081a-249">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Type" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyAndAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyAndAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyAndAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyAndAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyAndAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-250">取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 是否描述此欄位的可視性；亦即，只有當該欄位位於相同的組件時，衍生類別才能存取它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-250">Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-251">如果 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-251">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-252">如果欄位有<xref:System.Reflection.FieldAttributes.FamANDAssem>層級的可見性，您可以呼叫從相同的組件，也是在衍生類別中的任何成員，而不是從任何其他型別。</span><span class="sxs-lookup"><span data-stu-id="7081a-252">If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="7081a-253">完全由描述欄位的可視性<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可視性修飾詞是否`protected private`c + + 中。</span><span class="sxs-lookup"><span data-stu-id="7081a-253">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> if the visibility modifier is `protected private` in C++.</span></span> <span data-ttu-id="7081a-254">此可見性的欄位不能定義在 Visual Basic 或 C#。</span><span class="sxs-lookup"><span data-stu-id="7081a-254">Fields with this visibility cannot be defined in Visual Basic or C#.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-255">下列程式碼範例會定義的欄位具有不同層級的可見性，並顯示的值及其<xref:System.Reflection.FieldInfo.IsAssembly%2A>， <xref:System.Reflection.FieldInfo.IsFamily%2A>， <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>，和<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-255">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-256">Visual Basic 和 C# 語言不能定義欄位<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可見性，則為，存取層級只會出現在 c + + 範例。</span><span class="sxs-lookup"><span data-stu-id="7081a-256">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsFamilyOrAssembly">
      <MemberSignature Language="C#" Value="public bool IsFamilyOrAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFamilyOrAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFamilyOrAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFamilyOrAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-257">取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 是否描述此欄位的潛在可視性；亦即，無論該欄位位於何處，衍生類別以及相同組件中的類別都可以呼叫它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-257">Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-258">如果 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-258">
              <see langword="true" /> if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-259">如果欄位有<xref:System.Reflection.FieldAttributes.FamORAssem>層級的可見性，您可以呼叫從衍生類別中的任何成員或相同的組件中的任何成員，而不是從任何其他型別。</span><span class="sxs-lookup"><span data-stu-id="7081a-259">If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</span></span>  
  
 <span data-ttu-id="7081a-260">欄位的實際的可見性受限於其類型的可見性。</span><span class="sxs-lookup"><span data-stu-id="7081a-260">The actual visibility of a field is limited by the visibility of its type.</span></span> <span data-ttu-id="7081a-261"><xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>屬性可能是`true`欄位，但如果它是私用巢狀類型的欄位的欄位不包含型別外部可見的。</span><span class="sxs-lookup"><span data-stu-id="7081a-261">The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</span></span>  
  
 <span data-ttu-id="7081a-262">完全由描述欄位的可視性<xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType>可視性修飾詞是否`protected internal`C# 中 (`Protected Friend`在 Visual Basic 中`protected public`c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="7081a-262">The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-263">下列程式碼範例會定義的欄位具有不同層級的可見性，並顯示的值及其<xref:System.Reflection.FieldInfo.IsAssembly%2A>， <xref:System.Reflection.FieldInfo.IsFamily%2A>， <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>，和<xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-263">The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-264">Visual Basic 和 C# 語言不能定義欄位<xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType>可見性，則為，存取層級只會出現在 c + + 範例。</span><span class="sxs-lookup"><span data-stu-id="7081a-264">The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType> visibility; that access level appears only in the C++ example.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="P:System.Reflection.FieldInfo.IsAssembly" />
        <altmember cref="P:System.Reflection.FieldInfo.IsFamily" />
      </Docs>
    </Member>
    <Member MemberName="IsInitOnly">
      <MemberSignature Language="C#" Value="public bool IsInitOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsInitOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsInitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-265">取得值，指出欄位是否只能在建構函式主體中設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-265">Gets a value indicating whether the field can only be set in the body of the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-266">如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="InitOnly" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-266">
              <see langword="true" /> if the field has the <see langword="InitOnly" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-267">如果傳回的值是`true`，欄位只能初始化，並且之後是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="7081a-267">If the returned value is `true`, the field can only be initialized, and is read-only thereafter.</span></span>  
  
 <span data-ttu-id="7081a-268">若要取得`IsInitOnly`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-268">To get the `IsInitOnly` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-269">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-269">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-270">從`FieldInfo`，取得`IsInitOnly`屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-270">From the `FieldInfo`, get the `IsInitOnly` property.</span></span> <span data-ttu-id="7081a-271">若要存取非公用欄位，結合<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>與一個或兩個<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>和<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>中`GetField`方法。</span><span class="sxs-lookup"><span data-stu-id="7081a-271">To access a non-public field, combine <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> with either or both of <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in the `GetField` method.</span></span>  
  
 <span data-ttu-id="7081a-272">`IsInitOnly`時設定屬性<xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="7081a-272">The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType> attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-273">在下列範例中，會建立兩個欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-273">In the following example, two fields are created.</span></span> <span data-ttu-id="7081a-274">第二個欄位是唯讀的讓沒有 set 存取子，以及`IsInitOnly`設`true`。</span><span class="sxs-lookup"><span data-stu-id="7081a-274">The second field is read-only, having no set accessor, and `IsInitOnly` is set to `true`.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/VB/source.vb#1)]  
  
 <span data-ttu-id="7081a-275">此程式碼會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="7081a-275">This code produces the following output:</span></span>  
  
 <span data-ttu-id="7081a-276">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="7081a-276">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="7081a-277">Myfielda-A-修改，IsInitOnly = False</span><span class="sxs-lookup"><span data-stu-id="7081a-277">Myfielda - A- modified, IsInitOnly = False</span></span>  
  
 <span data-ttu-id="7081a-278">Myfieldb-B 唯讀欄位，IsInitOnly = True</span><span class="sxs-lookup"><span data-stu-id="7081a-278">Myfieldb - B readonly field, IsInitOnly = True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsLiteral">
      <MemberSignature Language="C#" Value="public bool IsLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiteral" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsLiteral" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiteral As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiteral { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsLiteral</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-279">取得值，指出數值是否在編譯時間被寫入並且無法變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-279">Gets a value indicating whether the value is written at compile time and cannot be changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-280">如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="Literal" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-280">
              <see langword="true" /> if the field has the <see langword="Literal" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-281">`IsLiteral`時設定屬性`FieldAttributes.Literal`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="7081a-281">The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set.</span></span> <span data-ttu-id="7081a-282">如果設定此屬性，無法變更欄位，並且是常數。</span><span class="sxs-lookup"><span data-stu-id="7081a-282">If this attribute is set, the field cannot be changed and is constant.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotSerialized">
      <MemberSignature Language="C#" Value="public bool IsNotSerialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotSerialized" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsNotSerialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotSerialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotSerialized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsNotSerialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-283">取得值，指出這個欄位是否有 <see langword="NotSerialized" /> 屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-283">Gets a value indicating whether this field has the <see langword="NotSerialized" /> attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-284">如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="NotSerialized" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-284">
              <see langword="true" /> if the field has the <see langword="NotSerialized" /> attribute set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-285">`IsNotSerialized`屬性會傳回`true`時該欄位標示為`FieldAttributes.NotSerialized`旗標。</span><span class="sxs-lookup"><span data-stu-id="7081a-285">The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag.</span></span> <span data-ttu-id="7081a-286">當欄位上設定此旗標時，表示該欄位不需要序列化的型別是以遠端方式運作時。</span><span class="sxs-lookup"><span data-stu-id="7081a-286">When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-287">下列範例會取得 MyClass 之欄位的欄位資訊，判斷欄位可以序列化，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="7081a-287">The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</span></span>  
  
 [!code-cpp[FieldInfo_IsNotSerialized#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CPP/fieldinfo_isnotserialized.cpp#1)]
 [!code-csharp[FieldInfo_IsNotSerialized#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CS/fieldinfo_isnotserialized.cs#1)]
 [!code-vb[FieldInfo_IsNotSerialized#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsNotSerialized/VB/fieldinfo_isnotserialized.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPinvokeImpl">
      <MemberSignature Language="C#" Value="public bool IsPinvokeImpl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinvokeImpl" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPinvokeImpl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPinvokeImpl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPinvokeImpl { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-288">取得值，指出對應的 <see langword="PinvokeImpl" /> 屬性是否在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-288">Gets a value indicating whether the corresponding <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-289">如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定 <see langword="true" /> 屬性，則為 <see langword="PinvokeImpl" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-289">
              <see langword="true" /> if the <see langword="PinvokeImpl" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7081a-290">下列範例會建立一個類別，並顯示名稱、 欄位和<xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A>欄位的屬性值。</span><span class="sxs-lookup"><span data-stu-id="7081a-290">The following example creates a class and displays the name, field and <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> property value of the field.</span></span>  
  
 [!code-cpp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CPP/fieldinfo_ispinvokeimpl.cpp#1)]
 [!code-csharp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CS/fieldinfo_ispinvokeimpl.cs#1)]
 [!code-vb[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/VB/fieldinfo_ispinvokeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPrivate">
      <MemberSignature Language="C#" Value="public bool IsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrivate { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-291">取得值，指出欄位是否為私用的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-291">Gets a value indicating whether the field is private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-292">如果欄位是私用的，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-292">
              <see langword="true" /> if the field is private; otherwise; <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-293">私用欄位只能從來存取成員函式。</span><span class="sxs-lookup"><span data-stu-id="7081a-293">Private fields are accessible only from member functions.</span></span>  
  
 <span data-ttu-id="7081a-294">`IsPrivate`時設定屬性`FieldAttributes.Private`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="7081a-294">The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.</span></span>  
  
 <span data-ttu-id="7081a-295">若要取得`IsPrivate`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-295">To get the `IsPrivate` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-296">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-296">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-297">從`FieldInfo`，取得`IsPrivate`屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-297">From the `FieldInfo`, get the `IsPrivate` property.</span></span> <span data-ttu-id="7081a-298">若要存取非公用欄位，設定`BindingFlags`至`NonPublic`，任一個`Static`或`Instance`中`GetField`方法。</span><span class="sxs-lookup"><span data-stu-id="7081a-298">To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-299">下列範例會傳回值，指出可為私用類別的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-299">The following example returns a value indicating whether or not the field of the class is private.</span></span>  
  
 [!code-cpp[FieldInfo_IsPrivate#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPrivate/CPP/fieldinfo_isprivate.cpp#1)]
 [!code-csharp[FieldInfo_IsPrivate#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/CS/fieldinfo_isprivate.cs#1)]
 [!code-vb[FieldInfo_IsPrivate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPrivate/VB/fieldinfo_isprivate.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-300">取得值，指出欄位是否為公用的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-300">Gets a value indicating whether the field is public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-301">如果欄位是公用的，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-301">
              <see langword="true" /> if this field is public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-302">公用欄位都可存取所有位置相對應的類別為可見。</span><span class="sxs-lookup"><span data-stu-id="7081a-302">Public fields are accessible everywhere their corresponding classes are visible.</span></span>  
  
 <span data-ttu-id="7081a-303">`IsPublic`時設定屬性`FieldAttributes.Public`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="7081a-303">The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.</span></span>  
  
 <span data-ttu-id="7081a-304">若要取得`IsPublic`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-304">To get the `IsPublic` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-305">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-305">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-306">從`FieldInfo`，取得`IsPublic`屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-306">From the `FieldInfo`, get the `IsPublic` property.</span></span> <span data-ttu-id="7081a-307">若欄位不是公用，則保護而無法輕易地存取。</span><span class="sxs-lookup"><span data-stu-id="7081a-307">If the field is other than public, it is protected and cannot be readily accessed.</span></span> <span data-ttu-id="7081a-308">若要存取非公用欄位，設定`BindingFlags`至`NonPublic`，指定`BindingFlags.Instance`或`BindingFlags.Static`，並以此為`GetField`方法。</span><span class="sxs-lookup"><span data-stu-id="7081a-308">To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-309">下列範例會傳回值，指出類別的欄位可為公用或私用。</span><span class="sxs-lookup"><span data-stu-id="7081a-309">The following example returns a value indicating whether or not the field of the class is public or private.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="T:System.Reflection.BindingFlags" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-310">取得值，這個值表示目前欄位在目前信任層級上是否為安全性關鍵或安全性安全關鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-310">Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-311">如果目前欄位在目前信任層級上為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是透明，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-311">
              <see langword="true" /> if the current field is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-312"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>， <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>屬性報表的欄位在其目前信任層級，common language runtime (CLR) 所決定的透明度。</span><span class="sxs-lookup"><span data-stu-id="7081a-312">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7081a-313">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="7081a-313">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7081a-314">安全性層級</span><span class="sxs-lookup"><span data-stu-id="7081a-314">Security level</span></span>|<span data-ttu-id="7081a-315">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-315">IsSecurityCritical</span></span>|<span data-ttu-id="7081a-316">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-316">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7081a-317">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7081a-317">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7081a-318">Critical</span><span class="sxs-lookup"><span data-stu-id="7081a-318">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7081a-319">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="7081a-319">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7081a-320">透明</span><span class="sxs-lookup"><span data-stu-id="7081a-320">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7081a-321">使用這些屬性會比檢查組件和型別和成員的安全性註釋、 檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="7081a-321">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7081a-322">對於部分信任組件，這個屬性的值會取決於目前的信任層級的組件中。</span><span class="sxs-lookup"><span data-stu-id="7081a-322">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="7081a-323">如果組件會載入至部分信任的應用程式網域 （例如，插入的沙箱化應用程式定義域），執行階段會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="7081a-323">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7081a-324">組件和其所有類型都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="7081a-324">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="7081a-325">執行階段以部分信任組件的安全性註釋只修改時小心，該組件會載入至完全信任的應用程式網域 （例如，插入的桌面應用程式的預設應用程式網域）。</span><span class="sxs-lookup"><span data-stu-id="7081a-325">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7081a-326">相反地，受信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，不論應用程式定義域的信任層級因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="7081a-326">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="7081a-327">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-327">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="7081a-328">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-328">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="7081a-329">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-329">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-330">取得值，這個值表示目前欄位在目前信任層級上是否為安全性安全關鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-330">Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-331">如果目前欄位在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />，如果是安全性關鍵或透明，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-331">
              <see langword="true" /> if the current field is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-332"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>， <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>屬性報表的欄位在其目前信任層級，common language runtime (CLR) 所決定的透明度。</span><span class="sxs-lookup"><span data-stu-id="7081a-332">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7081a-333">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="7081a-333">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7081a-334">安全性層級</span><span class="sxs-lookup"><span data-stu-id="7081a-334">Security level</span></span>|<span data-ttu-id="7081a-335">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-335">IsSecurityCritical</span></span>|<span data-ttu-id="7081a-336">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-336">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7081a-337">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7081a-337">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7081a-338">Critical</span><span class="sxs-lookup"><span data-stu-id="7081a-338">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7081a-339">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="7081a-339">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7081a-340">透明</span><span class="sxs-lookup"><span data-stu-id="7081a-340">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7081a-341">使用這些屬性會比檢查組件和型別和成員的安全性註釋、 檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="7081a-341">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7081a-342">對於部分信任組件，這個屬性的值會取決於目前的信任層級的組件中。</span><span class="sxs-lookup"><span data-stu-id="7081a-342">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="7081a-343">如果組件會載入至部分信任的應用程式網域 （例如，插入的沙箱化應用程式定義域），執行階段會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="7081a-343">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7081a-344">組件和其所有類型都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="7081a-344">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="7081a-345">執行階段以部分信任組件的安全性註釋只修改時小心，該組件會載入至完全信任的應用程式網域 （例如，插入的桌面應用程式的預設應用程式網域）。</span><span class="sxs-lookup"><span data-stu-id="7081a-345">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7081a-346">相反地，受信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，不論應用程式定義域的信任層級因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="7081a-346">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="7081a-347">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-347">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="7081a-348">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-348">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="7081a-349">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-349">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-350">取得值，這個值表示目前欄位在目前信任層級上是否為透明。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-350">Gets a value that indicates whether the current field is transparent at the current trust level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-351">如果欄位在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-351">
              <see langword="true" /> if the field is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-352"><xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>， <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A>屬性報表的欄位在其目前信任層級，common language runtime (CLR) 所決定的透明度。</span><span class="sxs-lookup"><span data-stu-id="7081a-352">The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7081a-353">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="7081a-353">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7081a-354">安全性層級</span><span class="sxs-lookup"><span data-stu-id="7081a-354">Security level</span></span>|<span data-ttu-id="7081a-355">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-355">IsSecurityCritical</span></span>|<span data-ttu-id="7081a-356">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7081a-356">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7081a-357">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7081a-357">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7081a-358">Critical</span><span class="sxs-lookup"><span data-stu-id="7081a-358">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7081a-359">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="7081a-359">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7081a-360">透明</span><span class="sxs-lookup"><span data-stu-id="7081a-360">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7081a-361">使用這些屬性會比檢查組件和型別和成員的安全性註釋、 檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="7081a-361">Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7081a-362">對於部分信任組件，這個屬性的值會取決於目前的信任層級的組件中。</span><span class="sxs-lookup"><span data-stu-id="7081a-362">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="7081a-363">如果組件會載入至部分信任的應用程式網域 （例如，插入的沙箱化應用程式定義域），執行階段會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="7081a-363">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7081a-364">組件和其所有類型都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="7081a-364">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="7081a-365">執行階段以部分信任組件的安全性註釋只修改時小心，該組件會載入至完全信任的應用程式網域 （例如，插入的桌面應用程式的預設應用程式網域）。</span><span class="sxs-lookup"><span data-stu-id="7081a-365">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7081a-366">相反地，受信任的組件 （也就是強式名稱組件安裝在全域組件快取中） 會一律載入以完全信任，不論應用程式定義域的信任層級因此其目前的信任層級永遠都是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="7081a-366">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="7081a-367">您可以使用，以判斷目前的信任層級的組件和應用程式定義域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-367">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="7081a-368">如需有關反映和透明度的詳細資訊，請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-368">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="7081a-369">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="7081a-369">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.FieldInfo.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.FieldInfo.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-370">取得值，指出在 <see cref="T:System.Reflection.FieldAttributes" /> 列舉值中是否設定對應的 <see langword="SpecialName" /> 屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-370">Gets a value indicating whether the corresponding <see langword="SpecialName" /> attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-371">如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定 <see langword="true" /> 屬性，則為 <see langword="SpecialName" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-371">
              <see langword="true" /> if the <see langword="SpecialName" /> attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-372">開頭或包含底線字元 (_)、 屬性存取子和運算子多載方法的名稱是某些編譯器可能會需要特殊處理的名稱的範例。</span><span class="sxs-lookup"><span data-stu-id="7081a-372">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-373">下列範例會傳回值，指出在類別中的欄位包含 SpecialName 屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-373">The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.IsStatic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-374">取得值，指出欄位是否為靜態的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-374">Gets a value indicating whether the field is static.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-375">如果欄位是靜態的，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-375">
              <see langword="true" /> if this field is static; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-376">靜態欄位時，欄位的一份由所有執行個體的型別共用。</span><span class="sxs-lookup"><span data-stu-id="7081a-376">When a field is static, one copy of the field is shared by all instances of the type.</span></span>  
  
 <span data-ttu-id="7081a-377">`IsStatic`時設定屬性`FieldAttributes.Static`屬性設定。</span><span class="sxs-lookup"><span data-stu-id="7081a-377">The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.</span></span>  
  
 <span data-ttu-id="7081a-378">若要取得`IsStatic`屬性，先取得類別`Type`。</span><span class="sxs-lookup"><span data-stu-id="7081a-378">To get the `IsStatic` property, first get the class `Type`.</span></span> <span data-ttu-id="7081a-379">從`Type`，取得`FieldInfo`。</span><span class="sxs-lookup"><span data-stu-id="7081a-379">From the `Type`, get the `FieldInfo`.</span></span> <span data-ttu-id="7081a-380">從`FieldInfo`，取得`IsStatic`屬性。</span><span class="sxs-lookup"><span data-stu-id="7081a-380">From the `FieldInfo`, get the `IsStatic` property.</span></span> <span data-ttu-id="7081a-381">若要存取非公用欄位，設定`BindingFlags`至`NonPublic`中`GetField`方法和協助工具設定為`Instance`或`Static`。</span><span class="sxs-lookup"><span data-stu-id="7081a-381">To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-382">下列範例會判斷指定的欄位是否為靜態，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="7081a-382">The following example determines whether the specified field is static and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="7081a-383">此程式碼會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="7081a-383">This code produces the following output:</span></span>  
  
 <span data-ttu-id="7081a-384">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="7081a-384">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="7081a-385">Myfielda-私用欄位。IsStatic-False</span><span class="sxs-lookup"><span data-stu-id="7081a-385">Myfielda - A private field; IsStatic - False</span></span>  
  
 <span data-ttu-id="7081a-386">Myfieldb - B static field; IsStatic - True</span><span class="sxs-lookup"><span data-stu-id="7081a-386">Myfieldb - B static field; IsStatic - True</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldAttributes" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.FieldInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._FieldInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-387">取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-387">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7081a-388">
            <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-388">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-389">這個屬性會覆寫<xref:System.Reflection.MemberInfo.MemberType%2A>。</span><span class="sxs-lookup"><span data-stu-id="7081a-389">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="7081a-390">因此，當您檢查一組<xref:System.Reflection.MemberInfo>物件 — 例如，將所傳回的陣列<xref:System.Type.GetMembers%2A>—<xref:System.Reflection.MemberInfo.MemberType%2A>屬性會傳回<xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType>只有指定的成員時的欄位。</span><span class="sxs-lookup"><span data-stu-id="7081a-390">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType> only when a given member is a field.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-391">下列範例會判斷指定的成員是否欄位，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="7081a-391">The following example determines whether the specified member is a field and displays the result.</span></span>  
  
 [!code-cpp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic FieldInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/VB/source.vb#1)]  
  
 <span data-ttu-id="7081a-392">此程式碼會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="7081a-392">This code produces the following output:</span></span>  
  
 <span data-ttu-id="7081a-393">Reflection.FieldInfo</span><span class="sxs-lookup"><span data-stu-id="7081a-393">Reflection.FieldInfo</span></span>  
  
 <span data-ttu-id="7081a-394">Myfield.field-私用欄位。MemberType 是欄位</span><span class="sxs-lookup"><span data-stu-id="7081a-394">Myfield.field - a private field; MemberType is a Field</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="7081a-395">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-395">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="7081a-396">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-396">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-397">表示兩個 <see cref="T:System.Reflection.FieldInfo" /> 物件是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-397">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-398">如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-398">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.FieldInfo left, class System.Reflection.FieldInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As FieldInfo, right As FieldInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::FieldInfo ^ left, System::Reflection::FieldInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.FieldInfo" />
        <Parameter Name="right" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="7081a-399">要比較的第一個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-399">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="7081a-400">要比較的第二個物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-400">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-401">表示兩個 <see cref="T:System.Reflection.FieldInfo" /> 物件是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-401">Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-402">如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-402">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7081a-403">將指定物件的欄位值設為指定的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-403">Sets the value of the field for the given object to the given value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-404">將設定其欄位值的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-404">The object whose field value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7081a-405">要指派給欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-405">The value to assign to the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-406">設定指定物件所支援的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-406">Sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-407">這個方法會將指派`value`在物件上的這個執行個體所反映欄位`obj`。</span><span class="sxs-lookup"><span data-stu-id="7081a-407">This method will assign `value` to the field reflected by this instance on object `obj`.</span></span> <span data-ttu-id="7081a-408">如果欄位為靜態，`obj`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7081a-408">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="7081a-409">對於非靜態欄位，`obj`應該繼承或宣告欄位之類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="7081a-409">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="7081a-410">新的值會傳遞做為`Object`。</span><span class="sxs-lookup"><span data-stu-id="7081a-410">The new value is passed as an `Object`.</span></span> <span data-ttu-id="7081a-411">例如，如果欄位的類型為布林值，執行個體`Object`值會傳遞使用適當的布林值。</span><span class="sxs-lookup"><span data-stu-id="7081a-411">For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="7081a-412">設定值之前,`SetValue`檢查使用者是否具有存取權限。</span><span class="sxs-lookup"><span data-stu-id="7081a-412">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span> <span data-ttu-id="7081a-413">這個最後的方法是便利的方法呼叫下列`SetValue`方法。</span><span class="sxs-lookup"><span data-stu-id="7081a-413">This final method is a convenience method for calling the following `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-414">完全信任程式碼有存取和叫用私用建構函式、 方法、 欄位和屬性可使用反映所需的權限。</span><span class="sxs-lookup"><span data-stu-id="7081a-414">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-415">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫端被授與<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，如果非公用成員的授權集僅限於呼叫者的授與集或子集合類別。</span><span class="sxs-lookup"><span data-stu-id="7081a-415">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="7081a-416">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="7081a-416">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7081a-417">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="7081a-417">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7081a-418">下列範例設定欄位的值、 取得和顯示的值，修改欄位，並顯示結果。</span><span class="sxs-lookup"><span data-stu-id="7081a-418">The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</span></span>  
  
 [!code-cpp[FieldInfo_SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_SetValue/CPP/fieldinfo_setvalue.cpp#1)]
 [!code-csharp[FieldInfo_SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/CS/fieldinfo_setvalue.cs#1)]
 [!code-vb[FieldInfo_SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_SetValue/VB/fieldinfo_setvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="7081a-419">在[適用於 Windows 市集應用程式的 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截基底類別例外狀況 <see cref="T:System.MemberAccessException" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="7081a-419">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="7081a-420">呼叫端沒有存取這個欄位的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-420">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="7081a-421">在[適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面](http://go.microsoft.com/fwlink/?LinkID=247912) 或是[可攜式類別庫](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)中，改為攔截 <see cref="T:System.Exception" />。</span>
              <span class="sxs-lookup">
                <span data-stu-id="7081a-421">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="7081a-422">
            <paramref name="obj" /> 參數是 <see langword="null" />，且欄位為執行個體欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-422">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7081a-423">物件上不存在該欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-423">The field does not exist on the object.</span>
          </span>
          <span data-ttu-id="7081a-424">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-424">-or-</span>
          </span>
          <span data-ttu-id="7081a-425">
            <paramref name="value" /> 參數無法轉換並儲存在欄位中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-425">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-426">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-426">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-427">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-427">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7081a-428">更新僅初始化的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-428">for updating init-only fields.</span>
          </span>
          <span data-ttu-id="7081a-429">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-429">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-430">將設定其欄位值的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-430">The object whose field value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7081a-431">要指派給欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-431">The value to assign to the field.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="7081a-432">
            <see langword="Binder" /> 的欄位，指定想要繫結的型別 (例如，<see langword="Binder.CreateInstance" /> 或 <see langword="Binder.ExactBinding" /> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-432">A field of <see langword="Binder" /> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance" /> or <see langword="Binder.ExactBinding" />).</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="7081a-433">透過反映來啟用繫結、強制引數型別和成員引動過程的一組屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-433">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</span>
          </span>
          <span data-ttu-id="7081a-434">如果「繫結器」<c></c>是 <see langword="null" />，則會使用 <see langword="Binder.DefaultBinding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-434">If <c>binder</c> is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="7081a-435">特定文化特性 (Culture) 的軟體喜好設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-435">The software preferences of a particular culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-436">當在衍生類別中覆寫時，請設定由指定物件所支援的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-436">When overridden in a derived class, sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-437">這個方法會將指派`value`至這個執行個體所反映在欄位`obj`。</span><span class="sxs-lookup"><span data-stu-id="7081a-437">This method will assign `value` to the field reflected by this instance on `obj`.</span></span> <span data-ttu-id="7081a-438">如果欄位為靜態，`obj`會被忽略。</span><span class="sxs-lookup"><span data-stu-id="7081a-438">If the field is static, `obj` will be ignored.</span></span> <span data-ttu-id="7081a-439">對於非靜態欄位，`obj`應該繼承或宣告欄位之類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="7081a-439">For non-static fields, `obj` should be an instance of a class that inherits or declares the field.</span></span> <span data-ttu-id="7081a-440">新的值會傳遞做為`Object`。</span><span class="sxs-lookup"><span data-stu-id="7081a-440">The new value is passed as an `Object`.</span></span> <span data-ttu-id="7081a-441">例如，如果欄位的類型為`Boolean`，執行個體`Object`值會傳遞使用適當的布林值。</span><span class="sxs-lookup"><span data-stu-id="7081a-441">For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed.</span></span> <span data-ttu-id="7081a-442">設定值之前,`SetValue`檢查使用者是否具有存取權限。</span><span class="sxs-lookup"><span data-stu-id="7081a-442">Before setting the value, `SetValue` checks to see if the user has access permission.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-443">完全信任程式碼有存取和叫用私用建構函式、 方法、 欄位和屬性可使用反映所需的權限。</span><span class="sxs-lookup"><span data-stu-id="7081a-443">Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7081a-444">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫端被授與<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，如果非公用成員的授權集僅限於呼叫者的授與集或子集合類別。</span><span class="sxs-lookup"><span data-stu-id="7081a-444">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="7081a-445">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="7081a-445">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7081a-446">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="7081a-446">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FieldAccessException">
          <span data-ttu-id="7081a-447">呼叫端沒有存取這個欄位的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-447">The caller does not have permission to access this field.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="7081a-448">
            <paramref name="obj" /> 參數是 <see langword="null" />，且欄位為執行個體欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-448">The <paramref name="obj" /> parameter is <see langword="null" /> and the field is an instance field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7081a-449">物件上不存在該欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-449">The field does not exist on the object.</span>
          </span>
          <span data-ttu-id="7081a-450">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-450">-or-</span>
          </span>
          <span data-ttu-id="7081a-451">
            <paramref name="value" /> 參數無法轉換並儲存在欄位中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-451">The <paramref name="value" /> parameter cannot be converted and stored in the field.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-452">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-452">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-453">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-453">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7081a-454">更新僅初始化的欄位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-454">for updating init-only fields.</span>
          </span>
          <span data-ttu-id="7081a-455">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-455">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetValueDirect">
      <MemberSignature Language="C#" Value="public virtual void SetValueDirect (TypedReference obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueDirect(valuetype System.TypedReference obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValueDirect (obj As TypedReference, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValueDirect(TypedReference obj, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TypedReference" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7081a-456">
            <see cref="T:System.TypedReference" /> 結構，其中封裝了某個位置的 Managed 指標和可儲存於該位置之型別的執行階段表示法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-456">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7081a-457">要指派給欄位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-457">The value to assign to the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-458">設定指定物件所支援的欄位值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-458">Sets the value of the field supported by the given object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7081a-459">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法可以用來存取非公用成員，如果呼叫端被授與<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標，如果非公用成員的授權集僅限於呼叫者的授與集或子集合類別。</span><span class="sxs-lookup"><span data-stu-id="7081a-459">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="7081a-460">(請參閱[反映的安全性考量](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="7081a-460">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="7081a-461">若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="7081a-461">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" />
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7081a-462">呼叫端需要 Common Language Specification (CLS) 替代方式，但改為呼叫這個方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-462">The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7081a-463">叫用時晚期繫結透過機制例如<see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-463">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="7081a-464">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-464">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _FieldInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_FieldInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="7081a-465">保留供未來使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-465">Reserved for future use.</span>
          </span>
          <span data-ttu-id="7081a-466">必須是 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-466">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="7081a-467">要對應之傳入的名稱陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-467">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="7081a-468">要對應的名稱計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-468">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="7081a-469">用於解譯名稱的地區設定內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-469">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="7081a-470">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-470">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-471">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-471">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-472">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="7081a-472">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7081a-473">如需有關`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="7081a-473">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="7081a-474">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-474">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetType">
      <MemberSignature Language="C#" Value="Type _FieldInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._FieldInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _FieldInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._FieldInfo.GetType() = System::Runtime::InteropServices::_FieldInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7081a-475">取得 <see cref="T:System.Type" /> 物件，其代表 <see cref="T:System.Reflection.FieldInfo" /> 類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-475">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7081a-476">代表 <see cref="T:System.Type" /> 類型的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-476">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _FieldInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="7081a-477">要傳回的類型資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-477">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="7081a-478">類型資訊的地區設定識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-478">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="7081a-479">接收要求的類型資訊物件的指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-479">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-480">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-480">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-481">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="7081a-481">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7081a-482">如需有關`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="7081a-482">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="7081a-483">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-483">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _FieldInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_FieldInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="7081a-484">指向接收物件提供的類型資訊介面數目的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-484">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-485">擷取物件提供的類型資訊介面數目 (0 或 1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-485">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-486">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="7081a-486">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7081a-487">如需有關`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="7081a-487">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="7081a-488">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-488">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._FieldInfo.Invoke">
      <MemberSignature Language="C#" Value="void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _FieldInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._FieldInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_FieldInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="7081a-489">辨識成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-489">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="7081a-490">保留供未來使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-490">Reserved for future use.</span>
          </span>
          <span data-ttu-id="7081a-491">必須是 IID_NULL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-491">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="7081a-492">地區設定內容，用於解譯引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-492">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="7081a-493">描述呼叫之內容的旗標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-493">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="7081a-494">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-494">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="7081a-495">指向用於儲存結果之位置的指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-495">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="7081a-496">包含例外狀況資訊的結構指標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-496">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="7081a-497">第一個有錯誤的引數索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-497">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7081a-498">提供物件所公開的屬性和方法的存取權。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-498">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7081a-499">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="7081a-499">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="7081a-500">如需有關`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="7081a-500">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="7081a-501">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7081a-501">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>