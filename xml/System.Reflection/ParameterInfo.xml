<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterInfo.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586ca3b754399c792282cbf762bf32b6bca401225.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ca3b754399c792282cbf762bf32b6bca401225</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Discovers the attributes of a parameter and provides access to parameter metadata.</source>
          <target state="translated">探索參數的屬性並提供參數中繼資料的存取。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>Use an instance of <ph id="ph1">`ParameterInfo`</ph> to obtain information about the parameter's data type, default value, and so on.</source>
          <target state="translated">使用的執行個體<ph id="ph1">`ParameterInfo`</ph>若要取得參數的資料類型的相關資訊，預設值，依此類推。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> returns an array of <ph id="ph2">`ParameterInfo`</ph> objects representing the parameters of a method, in order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> 傳回的陣列<ph id="ph2">`ParameterInfo`</ph>物件代表之參數的順序的方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">這個範例示範如何使用不同的反映類別來分析的組件中包含的中繼資料。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This type is thread safe.</source>
          <target state="translated">此型別具備執行緒安全。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>Gets the attributes for this parameter.</source>
          <target state="translated">取得這個參數的屬性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>A <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> object representing the attributes for this parameter.</source>
          <target state="translated">表示這個參數屬性的 <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> method.</source>
          <target state="translated">這個方法會利用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>The following example defines a method with three parameters.</source>
          <target state="translated">下列範例會定義具有三個參數的方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>It uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> property to get the attributes of the second parameter and display them at the console.</source>
          <target state="translated">它會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>取得第二個參數的屬性，並在主控台顯示的屬性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>The attributes of the parameter.</source>
          <target state="translated">這個參數的屬性。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>Typical access to parameter attributes is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</source>
          <target state="translated">參數屬性的一般存取是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of the parameter.</source>
          <target state="translated">參數的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>Typical access to parameter types is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</source>
          <target state="translated">參數類型的一般存取是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>Gets a collection that contains this parameter's custom attributes.</source>
          <target state="translated">取得包含此參數之自訂屬性的集合。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>A collection that contains this parameter's custom attributes.</source>
          <target state="translated">包含此參數之自訂屬性的集合。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">如果參數有預設值，取得表示預設值的值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">參數的預設值，或者，如果參數沒有預設值，則為 <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This property is used only in the execution context.</source>
          <target state="translated">這個屬性只能用於執行內容。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>In the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> property instead.</source>
          <target state="translated">在僅限反映的內容中，使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph>屬性改為。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">在方法呼叫中未指定實際的值時，會使用預設值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參數可以有預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">這是未定義的預設值的情況不同。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> method.</source>
          <target state="translated">這個方法會利用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>The default value of the parameter.</source>
          <target state="translated">參數的預設值。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>Typical access to the default value of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</source>
          <target state="translated">一般存取參數的預設值是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Gets the custom attributes applied to this parameter.</source>
          <target state="translated">取得套用至這個參數的自訂屬性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">這個類型的物件會忽略這個引數。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>Gets all the custom attributes defined on this parameter.</source>
          <target state="translated">取得在這個參數上所定義的所有自訂屬性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this parameter.</source>
          <target state="translated">包含套用至此參數之所有自訂屬性的陣列。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋屬性在參數的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</source>
          <target state="translated">下列範例示範如何自訂屬性，已套用至方法的參數可以在執行階段擷取。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example defines a custom attribute named <ph id="ph1">`MyAttribute`</ph> that can be applied to parameters.</source>
          <target state="translated">此範例會定義自訂屬性的具名<ph id="ph1">`MyAttribute`</ph>可以套用至參數。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example then defines a class named <ph id="ph1">`MyClass`</ph> with a method named <ph id="ph2">`MyMethod`</ph>, and applies <ph id="ph3">`MyAttribute`</ph> to a parameter of the method.</source>
          <target state="translated">然後此範例會定義名為類別<ph id="ph1">`MyClass`</ph>方法，名為<ph id="ph2">`MyMethod`</ph>，並套用<ph id="ph3">`MyAttribute`</ph>方法的參數。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> method to retrieve the custom attributes that have been applied to all parameters of all methods in <ph id="ph2">`MyClass`</ph>, and displays them at the console.</source>
          <target state="translated">當執行範例時，它會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph>方法來擷取已套用至所有方法中的所有參數的自訂屬性<ph id="ph2">`MyClass`</ph>，並將其顯示在主控台。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attributes identified by type.</source>
          <target state="translated">依型別識別的自訂屬性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">這個類型的物件會忽略這個引數。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</source>
          <target state="translated">取得套用至此參數之指定型別及其衍生型別的自訂屬性。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains the custom attributes of the specified type or its derived types.</source>
          <target state="translated">包含指定型別及其衍生型別之自訂屬性的陣列。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋屬性在參數的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type must be a type provided by the underlying runtime system.</source>
          <target state="translated">類型必須是基礎執行階段系統所提供的類型。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects for the current parameter, which can be used in the reflection-only context.</source>
          <target state="translated">傳回目前參數的 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件清單，這些物件可用於僅限反映的內容中。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the current parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> 物件的泛型清單，表示已套用至目前參數之屬性的資料。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">若要檢查之自訂屬性的程式碼，在僅限反映的內容中，在其中已載入僅限反映之內容的程式碼中定義的自訂屬性本身的情況下使用這個方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">這類方法<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>不能在這種情況下，因為它們可以建立屬性的執行個體。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">無法執行僅限反映的內容中的程式碼。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>For more information and example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">如需詳細資訊和範例程式碼，請參閱<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>Gets the optional custom modifiers of the parameter.</source>
          <target state="translated">取得參數的選擇性自訂修飾詞。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件的陣列，識別目前參數的選擇性自訂修飾詞，例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph>方法可供設計工具的 managed 編譯器。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">如需有關自訂修飾詞的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和相關類別中的<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空間，和 ECMA 第二篇文件中的中繼資料規格。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The serialized stream from which the current object is deserialized.</source>
          <target state="translated">目前物件要從其中還原序列化的序列化資料流。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</source>
          <target state="translated">傳回應該還原序列化的實際物件，而不是序列化資料流指定的物件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The actual object that is put into the graph.</source>
          <target state="translated">放入圖形中的實際物件。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">這個方法會實作 <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The parameter's position in the parameter list of its associated member is not valid for that member's type.</source>
          <target state="translated">其相關成員的參數清單中參數的位置對該成員的型別無效。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>Gets the required custom modifiers of the parameter.</source>
          <target state="translated">取得參數的必要自訂修飾詞。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件的陣列，識別目前參數的必要自訂修飾詞，例如 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph>方法可供設計工具的 managed 編譯器。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">如需有關自訂修飾詞的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph>和相關類別中的<ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph>命名空間，和 ECMA 第二篇文件中的中繼資料規格。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source>Gets a value that indicates whether this parameter has a default value.</source>
          <target state="translated">取得值，指出這個參數是否具有預設值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this parameter has a default value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果此參數具有預設值，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to search for.</source>
          <target state="translated">要搜尋的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">這個類型的物件會忽略這個引數。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</source>
          <target state="translated">判斷是否已有指定之型別或其衍生型別的自訂屬性套用至此參數。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or its derived types are applied to this parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已有 <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> 或其衍生型別的一個或多個執行個體套用至這個參數，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`inherit`</ph>參數。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要搜尋屬性在參數的繼承鏈結，使用的適當多載<ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example defines two custom attributes, <ph id="ph1">`MyAttribute`</ph> and <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">下列範例會定義兩個自訂屬性、<ph id="ph1">`MyAttribute`</ph>和<ph id="ph2">`MyDerivedAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">`MyDerivedAttribute`</ph> is derived from <ph id="ph2">`MyAttribute`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyDerivedAttribute`</ph> 衍生自 <ph id="ph2">`MyAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The example then applies these attributes to the parameters of a method of an example class.</source>
          <target state="translated">此範例接著套用這些屬性的範例類別方法的參數。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> method to test all parameters of all methods in the example class.</source>
          <target state="translated">當執行範例時，它會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph>方法來測試範例類別中的所有方法中的所有參數。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>It then displays the parameters that have <ph id="ph1">`MyAttribute`</ph> or <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">接著會顯示具有參數的<ph id="ph1">`MyAttribute`</ph>或<ph id="ph2">`MyDerivedAttribute`</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object supplied by the common language runtime.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> 不是由 Common Language Runtime 提供的 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Gets a value indicating whether this is an input parameter.</source>
          <target state="translated">取得值，指出是否為輸入參數。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an input parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果參數為輸入參數，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料旗標。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">這個旗標可以插入由編譯器，但編譯器沒有必要，若要這樣做。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method utilizes the <ph id="ph1">`In`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">這個方法會利用<ph id="ph1">`In`</ph>旗標<ph id="ph2">`ParameterAttributes`</ph>列舉值。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下列範例示範如何在測試方法的參數<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">這個範例包含<ph id="ph1">`DefineMethod`</ph>方法會執行下列：</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">建立動態組件包含<ph id="ph1">`MyType`</ph>型別。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">新增<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 有三個參數。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">第一個參數以定義<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 與第二個<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，與第三個<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>完成類型。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">在執行之後<ph id="ph1">`DefineMethod`</ph>，此範例會搜尋直到找到動態組件目前載入的組件。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它會載入<ph id="ph1">`MyType`</ph>從組件，取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件<ph id="ph3">`MyMethod`</ph>方法，並檢查參數。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>屬性，以顯示參數的相關資訊。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>Gets a value indicating whether this parameter is a locale identifier (lcid).</source>
          <target state="translated">取得值，指出這個參數是否為地區設定識別項 (Locale Identifier，LCID)。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a locale identifier; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果參數是地區設定識別項，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料旗標。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">這個旗標可以插入由編譯器，但編譯器沒有必要，若要這樣做。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method utilizes the <ph id="ph1">`Lcid`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">這個方法會利用<ph id="ph1">`Lcid`</ph>旗標<ph id="ph2">`ParameterAttributes`</ph>列舉值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Gets a value indicating whether this parameter is optional.</source>
          <target state="translated">取得值，指出這個參數是否為選擇項。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is optional; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果參數為選擇項，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料旗標。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">這個旗標可以插入由編譯器，但編譯器沒有必要，若要這樣做。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method utilizes the <ph id="ph1">`Optional`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">這個方法會利用<ph id="ph1">`Optional`</ph>旗標<ph id="ph2">`ParameterAttributes`</ph>列舉值。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列、 第一次 get 方法，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下列範例示範如何在測試方法的參數<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">這個範例包含<ph id="ph1">`DefineMethod`</ph>方法會執行下列：</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">建立動態組件包含<ph id="ph1">`MyType`</ph>型別。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">新增<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 有三個參數。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">第一個參數以定義<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 與第二個<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，與第三個<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>完成類型。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">在執行之後<ph id="ph1">`DefineMethod`</ph>，此範例會搜尋直到找到動態組件目前載入的組件。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它會載入<ph id="ph1">`MyType`</ph>從組件，取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件<ph id="ph3">`MyMethod`</ph>方法，並檢查參數。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>屬性，以顯示參數的相關資訊。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Gets a value indicating whether this is an output parameter.</source>
          <target state="translated">取得值，指出這是否為輸出參數。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an output parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果參數是輸出參數，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料旗標。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">這個旗標可以插入由編譯器，但編譯器沒有必要，若要這樣做。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method utilizes the <ph id="ph1">`Out`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">這個方法會利用<ph id="ph1">`Out`</ph>旗標<ph id="ph2">`ParameterAttributes`</ph>列舉值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">下列範例示範如何在測試方法的參數<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">這個範例包含<ph id="ph1">`DefineMethod`</ph>方法會執行下列：</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">建立動態組件包含<ph id="ph1">`MyType`</ph>型別。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">新增<ph id="ph1">`MyMethod`</ph>方法<ph id="ph2">`MyType`</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> 有三個參數。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">第一個參數以定義<ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>、 與第二個<ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>，與第三個<ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph>完成類型。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">在執行之後<ph id="ph1">`DefineMethod`</ph>，此範例會搜尋直到找到動態組件目前載入的組件。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">它會載入<ph id="ph1">`MyType`</ph>從組件，取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>物件<ph id="ph3">`MyMethod`</ph>方法，並檢查參數。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>，和<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph>屬性，以顯示參數的相關資訊。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>Gets a value indicating whether this is a <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> parameter.</source>
          <target state="translated">取得值，指出這是否為 <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> 參數。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果參數是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，則為 <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料旗標。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">這個旗標可以插入由編譯器，但編譯器沒有必要，若要這樣做。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method utilizes the <ph id="ph1">`Retval`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">這個方法會利用<ph id="ph1">`Retval`</ph>旗標<ph id="ph2">`ParameterAttributes`</ph>列舉值。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Member">
          <source>Gets a value indicating the member in which the parameter is implemented.</source>
          <target state="translated">取得值，指出實作參數的成員。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Member">
          <source>The member which implanted the parameter represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">植入由這個 <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> 所表示之參數的成員。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>The member in which the field is implemented.</source>
          <target state="translated">實作欄位的成員。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</source>
          <target state="translated">參數名稱的一般存取是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>Gets a value that identifies this parameter in metadata.</source>
          <target state="translated">取得值，識別中繼資料中的這個參數。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this parameter in metadata.</source>
          <target state="translated">值，與模組組合後，可以唯一識別中繼資料中的這個參數。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>To get the module, use the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> property of the member that defines this parameter.</source>
          <target state="translated">若要取得模組，請使用<ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph>定義此參數之成員屬性。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged Reflection API.</source>
          <target state="translated">使用這個屬性取得的權杖可以傳遞至 unmanaged 反映 API。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Unmanaged 反映 API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Name">
          <source>Gets the name of the parameter.</source>
          <target state="translated">取得參數的名稱。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The simple name of this parameter.</source>
          <target state="translated">這個參數的簡單名稱。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>This property utilizes the protected <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> field, and depends on an optional metadata flag that might not be available in all compilers.</source>
          <target state="translated">這個屬性會利用受保護<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph>欄位，並可能無法在所有的編譯器中使用的選擇性中繼資料旗標而定。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> represents a return value (that is, if it was obtained by using the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> property), this property will be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果這個<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>表示的傳回值 (亦即，如果使用取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph>屬性)，這個屬性會是<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> property to obtain the parameter names.</source>
          <target state="translated">下列範例示範如何取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>物件參數的方法，這個方法，然後使用<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>屬性，以取得參數名稱。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>The name of the parameter.</source>
          <target state="translated">參數名稱。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</source>
          <target state="translated">參數名稱的一般存取是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">取得這個參數的 <ph id="ph1">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object that represents the <ph id="ph2">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph> 物件，表示這個參數的 <ph id="ph2">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>This method depends on an optional metadata and might not be available in all compilers.</source>
          <target state="translated">這個方法會取決於選擇性中繼資料，而且可能不在所有的編譯器中使用。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> property to display the type of each parameter.</source>
          <target state="translated">下列範例示範如何取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>物件參數的方法，這個方法，然後使用<ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>屬性來顯示每個參數的型別。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Gets the zero-based position of the parameter in the formal parameter list.</source>
          <target state="translated">取得型式參數清單中以零起始的參數位置。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>An integer representing the position this parameter occupies in the parameter list.</source>
          <target state="translated">表示這個參數在參數清單中所佔據位置的整數。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</source>
          <target state="translated">只有在方法簽章中的參數 (也就是型式參數清單中) 會被視為計算位置時。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>For instance methods, the hidden parameter that represents <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) is not counted.</source>
          <target state="translated">執行個體方法，表示隱藏的參數<ph id="ph1">`this`</ph>(<ph id="ph2">`Me`</ph>在 Visual Basic 中) 不會計算。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> method.</source>
          <target state="translated">這個方法會利用<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>The zero-based position of the parameter in the parameter list.</source>
          <target state="translated">參數清單中以零起始的參數位置。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">此欄位僅供衍生類別中的使用者<ph id="ph1">`ParameterInfo`</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>Typical access to the name of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</source>
          <target state="translated">一般存取參數的名稱是透過<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">如果參數有預設值，取得表示預設值的值。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">參數的預設值，或者，如果參數沒有預設值，則為 <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This property can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">這個屬性可用於執行內容和僅限反映的內容。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">在方法呼叫中未指定實際的值時，會使用預設值。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參數可以有預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">這是未定義的預設值的情況不同。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>陣列，首先取得的方法或建構函式，然後呼叫<ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要對應之傳入的名稱陣列。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要對應的名稱計數。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">用於解譯名稱的地區設定內容。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">呼叫端配置的陣列，用於接收對應於名稱的 ID。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要傳回的類型資訊。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">類型資訊的地區設定識別項。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收要求的類型資訊物件的指標。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">擷取物件的類型資訊，可以用來取得介面的類型資訊。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向接收物件提供的類型資訊介面數目的位置。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">擷取物件提供的類型資訊介面數目 (0 或 1)。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">辨識成員。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">地區設定內容，用於解譯引數。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述呼叫之內容的旗標。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向用於儲存結果之位置的指標。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">包含例外狀況資訊的結構指標。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一個有錯誤的引數索引。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供物件所公開的屬性和方法的存取權。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法會從 unmanaged 程式碼，是對存取 managed 類別，並不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::Invoke`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">不支援使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結的存取。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>Gets the parameter type and name represented as a string.</source>
          <target state="translated">取得以字串表示的參數型別和名稱。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>A string containing the type and the name of the parameter.</source>
          <target state="translated">包含參數型別和名稱的字串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>