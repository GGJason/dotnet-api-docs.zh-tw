<Type Name="TargetInvocationException" FullName="System.Reflection.TargetInvocationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f85f7ea568bfcf1220fd3cd471c7fc58e276814" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39747421" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TargetInvocationException : ApplicationException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TargetInvocationException extends System.ApplicationException" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TargetInvocationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TargetInvocationException&#xA;Inherits ApplicationException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TargetInvocationException sealed : ApplicationException" />
  <TypeSignature Language="F#" Value="type TargetInvocationException = class&#xA;    inherit ApplicationException" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ApplicationException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8c609-101">透過反映叫用的方法所擲回的例外狀況。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c609-101">The exception that is thrown by methods invoked through reflection.</span>
      </span>
      <span data-ttu-id="8c609-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c609-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c609-103">如需詳細資訊，請參閱<xref:System.Reflection.MethodBase.Invoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c609-103">For more information, see <xref:System.Reflection.MethodBase.Invoke%2A>.</span></span>  
  
 <span data-ttu-id="8c609-104">`TargetInvocationException` 會使用其值 0x80131604 HRESULT COR_E_TARGETINVOCATION。</span><span class="sxs-lookup"><span data-stu-id="8c609-104">`TargetInvocationException` uses the HRESULT COR_E_TARGETINVOCATION which has the value 0x80131604.</span></span>  
  
 <span data-ttu-id="8c609-105">建立時，`TargetInvocationException`傳遞透過反映叫用方法所擲回的例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="8c609-105">When created, the `TargetInvocationException` is passed a reference to the exception thrown by the method invoked through reflection.</span></span> <span data-ttu-id="8c609-106"><xref:System.Exception.InnerException%2A>屬性會保留基礎例外狀況。</span><span class="sxs-lookup"><span data-stu-id="8c609-106">The <xref:System.Exception.InnerException%2A> property holds the underlying exception.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Exception.InnerException" />
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8c609-107">初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-107">Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TargetInvocationException (Exception inner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (inner As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TargetInvocationException(Exception ^ inner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.TargetInvocationException : Exception -&gt; System.Reflection.TargetInvocationException" Usage="new System.Reflection.TargetInvocationException inner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="inner" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="inner">
          <span data-ttu-id="8c609-108">做為目前例外狀況發生原因的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-108">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="8c609-109">如果 <c>inner</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-109">If the <c>inner</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c609-110">使用造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-110">Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c609-111">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="8c609-111">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="8c609-112"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `null` 屬性沒有提供內部例外值給建構函式，則傳回 <xref:System.Exception.InnerException%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c609-112">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="8c609-113">下表顯示 <xref:System.Reflection.TargetInvocationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="8c609-113">The following table shows the initial property values for an instance of <xref:System.Reflection.TargetInvocationException>.</span></span>  
  
|<span data-ttu-id="8c609-114">屬性</span><span class="sxs-lookup"><span data-stu-id="8c609-114">Property</span></span>|<span data-ttu-id="8c609-115">值</span><span class="sxs-lookup"><span data-stu-id="8c609-115">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="8c609-116">內部例外狀況參考。</span><span class="sxs-lookup"><span data-stu-id="8c609-116">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="8c609-117">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="8c609-117">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TargetInvocationException (string message, Exception inner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, inner As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TargetInvocationException(System::String ^ message, Exception ^ inner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.TargetInvocationException : string * Exception -&gt; System.Reflection.TargetInvocationException" Usage="new System.Reflection.TargetInvocationException (message, inner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="8c609-118">解釋例外狀況原因的錯誤訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-118">The error message that explains the reason for the exception.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="8c609-119">做為目前例外狀況發生原因的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-119">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="8c609-120">如果 <c>inner</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-120">If the <c>inner</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c609-121">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c609-121">Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c609-122">被擲回以做為前一個例外狀況直接結果的例外狀況，應該在 <xref:System.Exception.InnerException%2A> 屬性中包含對前一個例外狀況的參考。</span><span class="sxs-lookup"><span data-stu-id="8c609-122">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="8c609-123"><xref:System.Exception.InnerException%2A> 屬性會傳回與傳入建構函式中相同的值；如果 `null` 屬性沒有提供內部例外值給建構函式，則傳回 <xref:System.Exception.InnerException%2A>。</span><span class="sxs-lookup"><span data-stu-id="8c609-123">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="8c609-124">下表顯示 <xref:System.Reflection.TargetInvocationException> 執行個體的初始屬性值。</span><span class="sxs-lookup"><span data-stu-id="8c609-124">The following table shows the initial property values for an instance of <xref:System.Reflection.TargetInvocationException>.</span></span>  
  
|<span data-ttu-id="8c609-125">屬性</span><span class="sxs-lookup"><span data-stu-id="8c609-125">Property</span></span>|<span data-ttu-id="8c609-126">值</span><span class="sxs-lookup"><span data-stu-id="8c609-126">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="8c609-127">內部例外狀況參考。</span><span class="sxs-lookup"><span data-stu-id="8c609-127">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="8c609-128">錯誤訊息字串。</span><span class="sxs-lookup"><span data-stu-id="8c609-128">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>