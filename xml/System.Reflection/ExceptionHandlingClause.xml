<Type Name="ExceptionHandlingClause" FullName="System.Reflection.ExceptionHandlingClause">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e538655cde0432024d5dd30e1211e37134afb811" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715843" /></Metadata><TypeSignature Language="C#" Value="public class ExceptionHandlingClause" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit ExceptionHandlingClause extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClause" />
  <TypeSignature Language="VB.NET" Value="Public Class ExceptionHandlingClause" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandlingClause" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClause = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示結構化例外狀況處理 (Structured Exception Handling) 區塊中的子句。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.ExceptionHandlingClause>類別會提供資訊中的子句`try`...`catch`...`finally` block (`Try`…`Catch`…`Finally` 在 Visual Basic 中)。 若要取得的方法中的例外狀況處理子句的清單，請取得<xref:System.Reflection.MethodInfo>表示的方法。 使用 <xref:System.Reflection.MethodBase.GetMethodBody%2A>方法，以取得<xref:System.Reflection.MethodBody>物件，並接著使用<xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性來取得子句的清單。  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
 您可以使用 Ildasm.exe 來檢查 MSIL 已編譯程式碼範例中，若要查看的位移和長度的計算方式。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandlingClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandlingClause();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式會由衍生類別叫用的建構期間<xref:System.Reflection.ExceptionHandlingClause>物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchType">
      <MemberSignature Language="C#" Value="public virtual Type CatchType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CatchType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CatchType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ CatchType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CatchType : Type" Usage="System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個子句所處理之例外狀況的類型。</summary>
        <value><see cref="T:System.Type" /> 物件，表示這個子句所處理之例外狀況的類型，但如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 屬性是 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 或 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">物件之目前狀態屬性的使用無效。</exception>
      </Docs>
    </Member>
    <Member MemberName="FilterOffset">
      <MemberSignature Language="C#" Value="public virtual int FilterOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FilterOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int FilterOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterOffset : int" Usage="System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在使用者提供之篩選條件程式碼的方法主體中的位移，以位元組為單位。</summary>
        <value>在使用者提供之篩選條件程式碼的方法主體中的位移，以位元組為單位。 如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 屬性含有 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 以外的值，則這個屬性值就沒有任何意義。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 篩選子句包含使用者 suppliedMicrosoft intermediate language (MSIL，決定是否此子句所處理的例外)。 例如，任何包含 Visual Basic 的子句`When`關鍵字是<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 MSIL 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">無法取得位移，因為例外狀況處理子句不是篩選條件。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Flags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Flags As ExceptionHandlingClauseOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ExceptionHandlingClauseOptions Flags { System::Reflection::ExceptionHandlingClauseOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Flags : System.Reflection.ExceptionHandlingClauseOptions" Usage="System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個例外狀況處理子句是 finally 子句、型別篩選的子句或是使用者篩選的子句。</summary>
        <value><see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> 值，表示這個子句會執行哪種動作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="HandlerLength">
      <MemberSignature Language="C#" Value="public virtual int HandlerLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerLength : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個例外狀況處理子句的主體長度，以位元組為單位。</summary>
        <value>整數，表示構成這個例外狀況處理子句主體之 MSIL 的長度，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerOffset">
      <MemberSignature Language="C#" Value="public virtual int HandlerOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerOffset : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在這個例外狀況處理子句之方法主體中的位移，以位元組為單位。</summary>
        <value>整數，表示在這個例外狀況處理子句之方法主體中的位移，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exceptionHandlingClause.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>例外狀況處理子句的字串表示。</summary>
        <returns>字串，其針對篩選子句型別列出適當的屬性值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLength">
      <MemberSignature Language="C#" Value="public virtual int TryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryLength : int" Usage="System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含這個例外狀況處理子句之 try 區塊的總長度，以位元組為單位。</summary>
        <value>包含這個例外狀況處理子句之 try 區塊的總長度，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 整數，代表總長度，以位元組為單位，包含這個例外狀況處理子句之 try 區塊。  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryOffset">
      <MemberSignature Language="C#" Value="public virtual int TryOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryOffset : int" Usage="System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在包含這個例外狀況處理子句之 try 區塊的方法中的位移，以位元組為單位。</summary>
        <value>整數，表示在包含這個例外狀況處理子句之 try 區塊的方法中的位移，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  使用例外狀況處理子句需要徹底了解的中繼資料和 Microsoft intermediate language (MSIL) 指令的格式。 資訊可在 Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：Metadata Definition and Semantics" 和 "Partition III:CIL Instruction Set"。 您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。  
  
   
  
## Examples  
 下列程式碼範例會定義名為測試方法`MethodBodyExample`，並顯示其本機變數的資訊和例外狀況處理子句。 <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType>方法用來取得<xref:System.Reflection.MethodBody>測試方法的物件。 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>屬性用來取得一份<xref:System.Reflection.ExceptionHandlingClause>物件，並顯示其屬性。  
  
> [!NOTE]
>  並非所有的電腦語言可以產生<xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType>子句。 Visual Basic 範例會顯示篩選子句中，使用 Visual Basic`When`運算式，會略過其他語言的範例。  
  
 此程式碼是位於較大範例的一部分<xref:System.Reflection.MethodBody>類別主題。  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>