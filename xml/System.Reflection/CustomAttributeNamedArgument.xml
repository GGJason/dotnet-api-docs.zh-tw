<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CustomAttributeNamedArgument.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cb5683beef3de443e9a5df3d7cf110331a07a5fe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb5683beef3de443e9a5df3d7cf110331a07a5fe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Represents a named argument of a custom attribute in the reflection-only context.</source>
          <target state="translated">代表在僅限反映的內容中自訂屬性的具名引數。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>, and so on.</source>
          <target state="translated">正在檢查的僅限反映的內容中的程式碼無法執行，因此它不一定要檢查的自訂屬性，藉由建立它們，然後檢查其屬性，請使用類似的方法的執行個體可能<ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph>，依此類推.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
          <target state="translated">如果屬性型別本身的程式碼已載入僅限反映的內容，就無法執行。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure is used by the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class to provide access to a named argument specified for a custom attribute instance, without executing the code of the corresponding property of the custom attribute type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>結構供<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別，以提供具名引數，而不執行程式碼的自訂屬性類型的對應屬性指定自訂屬性執行個體的存取。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure that contains the type and value of the named argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A&gt;</ph>屬性會傳回<ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構，其中包含的類型和值的具名引數。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Whether an argument is named or positional, you must access its type and value by using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure.</source>
          <target state="translated">名為引數或位置，您必須存取它的類型和值使用<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory method.</source>
          <target state="translated">若要建立的執行個體<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph>類別，請使用<ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory 方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The following example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示已套用至該和型別和它包含的成員的自訂屬性的相關資訊。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Reflection.CustomAttributeNamedArgument">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>A field or property of the custom attribute.</source>
          <target state="translated">自訂屬性 (Attribute) 的欄位或屬性 (Property)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> object represents this member and its value.</source>
          <target state="translated">新的 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 物件，表示這個成員及其值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>The value of the field or property of the custom attribute.</source>
          <target state="translated">自訂屬性 (Attribute) 之欄位或屬性 (Property) 的值。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> class, which represents the specified field or property of the custom attribute, and specifies the value of the field or property.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 類別的新執行個體，這個執行個體表示自訂屬性 (Attribute) 的指定欄位或屬性 (Property)，並且指定欄位或屬性 (Property) 的值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> class.</source>
          <target state="translated">這個建構函式是以供繼承<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source>It is not intended for use in application code.</source>
          <target state="translated">它並不適用於應用程式程式碼中。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
          <source><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> is not a field or property of the custom attribute.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> 不是自訂屬性 (Attribute) 之欄位或屬性 (Property) 的值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>A field or property of the custom attribute.</source>
          <target state="translated">自訂屬性 (Attribute) 的欄位或屬性 (Property)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> object represents this member and its value.</source>
          <target state="translated">新的 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 物件，表示這個成員及其值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>An object that describes the type and value of the field or property.</source>
          <target state="translated">物件，描述欄位或屬性的型別和值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> class, which represents the specified field or property of the custom attribute, and specifies a <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> object that describes the type and value of the field or property.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 類別的新執行個體，這個執行個體表示自訂屬性 (Attribute) 的指定欄位或屬性 (Property)，並且指定 <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> 物件，描述欄位或屬性 (Property) 的型別和值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> class.</source>
          <target state="translated">這個建構函式是以供繼承<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source>It is not intended for use in application code.</source>
          <target state="translated">它並不適用於應用程式程式碼中。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
          <source><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="memberInfo" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">與這個執行個體相比較的物件，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">傳回值，這個值指出此執行個體是否與指定的物件相等。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 和這個執行個體具有相同的類型和值，則為 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">傳回這個執行個體的雜湊碼。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位元帶正負號的整數雜湊碼。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeNamedArgument.IsField">
          <source>Gets a value that indicates whether the named argument is a field.</source>
          <target state="translated">取得值，指出具名引數是否為欄位。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.IsField">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the named argument is a field; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果具名引數是欄位，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
          <source>Gets the attribute member that would be used to set the named argument.</source>
          <target state="translated">取得可用來設定具名引數的屬性成員。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
          <source>The attribute member that would be used to set the named argument.</source>
          <target state="translated">可用來設定具名引數的屬性成員。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
          <source>In most cases, the member is a property.</source>
          <target state="translated">在大部分情況下，成員為屬性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
          <source>Gets the name of the attribute member that would be used to set the named argument.</source>
          <target state="translated">取得用來設定具名引數之屬性成員的名稱。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
          <source>The name of the attribute member that would be used to set the named argument.</source>
          <target state="translated">用來設定具名引數的屬性成員的名稱。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The structure to the left of the equality operator.</source>
          <target state="translated">位於等號比較運算子左方的結構。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The structure to the right of the equality operator.</source>
          <target state="translated">位於等號比較運算子右方的結構。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>Tests whether two <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> structures are equivalent.</source>
          <target state="translated">測試兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 結構是否相等。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> structures are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這兩個 <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 結構相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">這個運算子的對等方法是<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The structure to the left of the inequality operator.</source>
          <target state="translated">位於不等比較運算子左方的結構。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The structure to the right of the inequality operator.</source>
          <target state="translated">位於不等比較運算子右方的結構。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>Tests whether two <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> structures are different.</source>
          <target state="translated">測試兩個 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 結構是否不同。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> structures are different; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這兩個 <ph id="ph2">&lt;see cref="T:System.Reflection.CustomAttributeNamedArgument" /&gt;</ph> 結構不同，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">這個運算子的對等方法是<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.Equals%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.ToString">
          <source>Returns a string that consists of the argument name, the equal sign, and a string representation of the argument value.</source>
          <target state="translated">傳回字串，其中包含引數名稱、等號，以及引數值的字串表示。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.CustomAttributeNamedArgument.ToString">
          <source>A string that consists of the argument name, the equal sign, and a string representation of the argument value.</source>
          <target state="translated">字串，其中包含引數名稱、等號，以及引數值的字串表示。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> structure that can be used to obtain the type and value of the current named argument.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeTypedArgument" /&gt;</ph> 結構，此結構可用來取得目前具名引數的型別和值。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>A structure that can be used to obtain the type and value of the current named argument.</source>
          <target state="translated">結構，可用來取得目前具名引數的型別和值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure only contains information about how the argument value was set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph>結構只會包含有關如何設定引數值的資訊。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>Use this property to obtain a <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure that contains the type and value.</source>
          <target state="translated">使用這個屬性來取得<ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph>結構，其中包含的類型和值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The following code example defines a custom attribute with four constructors and four properties.</source>
          <target state="translated">下列程式碼範例會定義具有四個建構函式和四個屬性的自訂屬性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>Two of the properties are read-only, and are set by using the positional parameters of the constructors.</source>
          <target state="translated">兩個屬性是唯讀的而且設定使用的位置參數的建構函式。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The other two properties are read/write, and can be set only by using named arguments.</source>
          <target state="translated">其他兩個屬性是讀取/寫入，且可以設定只能藉由使用名為引數。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>One positional property is an array of strings, and one named property is an array of integers.</source>
          <target state="translated">其中一個位置的屬性是字串的陣列，其中一個具名的屬性是整數的陣列。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method.</source>
          <target state="translated">屬性會套用至組件、組件中宣告的類型、類型的方法，以及方法的參數。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>Different constructors are used for these cases.</source>
          <target state="translated">在這些情況下，會使用不同的建構函式。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</source>
          <target state="translated">在執行時，組件本身載入僅限反映的內容，並顯示自訂屬性。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.</source>
          <target state="translated">套用至類型的屬性會示範使用位置和具名引數的陣列內容。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A&gt;</ph> property is used in the <ph id="ph2">`ShowAttributeData`</ph> method that displays custom attribute data, to obtain the types and values of named attributes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A&gt;</ph>屬性用於<ph id="ph2">`ShowAttributeData`</ph>方法會顯示自訂屬性的資料，若要取得之類型和值的具名屬性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>